
C:\Users\admin\AppData\Local\Temp\arduino_build_61592/004-3PH-SERVO-ATMega1284P.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__vector_18>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      68:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      6c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      70:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      74:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      78:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      7c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      80:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      84:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      88:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	21 00       	.word	0x0021	; ????
      90:	24 00       	.word	0x0024	; ????
      92:	27 00       	.word	0x0027	; ????
      94:	2a 00       	.word	0x002a	; ????

00000096 <port_to_output_PGM>:
      96:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

000000a0 <digital_pin_to_timer_PGM>:
      a0:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

000000c0 <characterArray>:
      c0:	7e 30 6d 79 33 5b 5f 70 7f 7b 77 1f 4e 3d 4f 47     ~0my3[_p.{w.N=OG
	...
      e0:	00 00 22 00 00 00 00 20 4e 78 00 00 04 01 00 00     ..".... Nx......
      f0:	7e 30 6d 79 33 5b 5f 70 7f 7b 00 00 00 00 00 00     ~0my3[_p.{......
     100:	00 77 1f 4e 3d 4f 47 5e 37 30 38 00 0e 00 15 7e     .w.N=OG^708....~
     110:	67 73 05 5b 0f 3e 00 00 00 3b 00 4e 00 78 00 08     gs.[.>...;.N.x..
     120:	02 77 1f 0d 3d 6f 47 5e 17 10 38 00 30 00 15 1d     .w..=oG^..8.0...
     130:	67 73 05 5b 0f 1c 00 00 00 00 00 00 00 00 00 00     gs.[............

00000140 <port_to_input_PGM>:
     140:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

0000014a <digital_pin_to_port_PGM>:
     14a:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     15a:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

0000016a <digital_pin_to_bit_mask_PGM>:
     16a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     17a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

0000018a <__ctors_start>:
__ctors_start():
     18a:	6a 17       	cp	r22, r26

0000018c <__ctors_end>:
__dtors_end():
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	d0 e4       	ldi	r29, 0x40	; 64
     194:	de bf       	out	0x3e, r29	; 62
     196:	cd bf       	out	0x3d, r28	; 61

00000198 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     198:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     19a:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     19c:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     19e:	e4 e9       	ldi	r30, 0x94	; 148
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     1a0:	fd e3       	ldi	r31, 0x3D	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     1a2:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     1a4:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     1a8:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     1aa:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     1ac:	a4 32       	cpi	r26, 0x24	; 36
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     1ae:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0x10>

000001b2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1b2:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1b4:	a4 e2       	ldi	r26, 0x24	; 36
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1b6:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1bc:	ac 3b       	cpi	r26, 0xBC	; 188
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1be:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>

000001c2 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     1c2:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     1c4:	c6 ec       	ldi	r28, 0xC6	; 198
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     1c6:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     1ca:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     1cc:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1ce:	0e 94 c3 19 	call	0x3386	; 0x3386 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1d2:	c5 3c       	cpi	r28, 0xC5	; 197
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1d4:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1d6:	c9 f7       	brne	.-14     	; 0x1ca <__do_global_ctors+0x8>
     1d8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <main>
     1dc:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <_exit>

000001e0 <__bad_interrupt>:
__vector_22():
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <turnOffPWM>:
turnOffPWM():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     1e4:	82 50       	subi	r24, 0x02	; 2
     1e6:	8a 30       	cpi	r24, 0x0A	; 10
     1e8:	88 f5       	brcc	.+98     	; 0x24c <turnOffPWM+0x68>
     1ea:	e8 2f       	mov	r30, r24
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	e5 50       	subi	r30, 0x05	; 5
     1f0:	ff 4f       	sbci	r31, 0xFF	; 255
     1f2:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__tablejump2__>
     1f6:	23 01       	movw	r4, r6
     1f8:	27 01       	movw	r4, r14
     1fa:	05 01       	movw	r0, r10
     1fc:	0b 01       	movw	r0, r22
     1fe:	26 01       	movw	r4, r12
     200:	26 01       	movw	r4, r12
     202:	0f 01       	movw	r0, r30
     204:	15 01       	movw	r2, r10
     206:	19 01       	movw	r2, r18
     208:	1f 01       	movw	r2, r30
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     20a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     20e:	8f 77       	andi	r24, 0x7F	; 127
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     210:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     214:	08 95       	ret
     216:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     21a:	8f 7d       	andi	r24, 0xDF	; 223
     21c:	f9 cf       	rjmp	.-14     	; 0x210 <turnOffPWM+0x2c>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     21e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     222:	8f 77       	andi	r24, 0x7F	; 127
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     224:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     228:	08 95       	ret
     22a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     22e:	8f 7d       	andi	r24, 0xDF	; 223
     230:	f9 cf       	rjmp	.-14     	; 0x224 <turnOffPWM+0x40>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     232:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     236:	8f 77       	andi	r24, 0x7F	; 127
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     238:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     23c:	08 95       	ret
     23e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     242:	8f 7d       	andi	r24, 0xDF	; 223
     244:	f9 cf       	rjmp	.-14     	; 0x238 <turnOffPWM+0x54>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     246:	84 b5       	in	r24, 0x24	; 36
     248:	8f 77       	andi	r24, 0x7F	; 127
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     24a:	84 bd       	out	0x24, r24	; 36
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     24c:	08 95       	ret
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     24e:	84 b5       	in	r24, 0x24	; 36
     250:	8f 7d       	andi	r24, 0xDF	; 223
     252:	fb cf       	rjmp	.-10     	; 0x24a <turnOffPWM+0x66>

00000254 <digitalWrite>:
digitalWrite():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     25a:	28 2f       	mov	r18, r24
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	e0 56       	subi	r30, 0x60	; 96
     262:	ff 4f       	sbci	r31, 0xFF	; 255
     264:	84 91       	lpm	r24, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     266:	f9 01       	movw	r30, r18
     268:	e6 59       	subi	r30, 0x96	; 150
     26a:	fe 4f       	sbci	r31, 0xFE	; 254
     26c:	d4 91       	lpm	r29, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     26e:	f9 01       	movw	r30, r18
     270:	e6 5b       	subi	r30, 0xB6	; 182
     272:	fe 4f       	sbci	r31, 0xFE	; 254
     274:	c4 91       	lpm	r28, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     276:	cc 23       	and	r28, r28
     278:	a9 f0       	breq	.+42     	; 0x2a4 <digitalWrite+0x50>
     27a:	16 2f       	mov	r17, r22
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     27c:	81 11       	cpse	r24, r1
     27e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <turnOffPWM>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     282:	ec 2f       	mov	r30, r28
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	ee 0f       	add	r30, r30
     288:	ff 1f       	adc	r31, r31
     28a:	ea 56       	subi	r30, 0x6A	; 106
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	a5 91       	lpm	r26, Z+
     290:	b4 91       	lpm	r27, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     292:	8f b7       	in	r24, 0x3f	; 63
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     294:	f8 94       	cli
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     296:	ec 91       	ld	r30, X
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     298:	11 11       	cpse	r17, r1
     29a:	08 c0       	rjmp	.+16     	; 0x2ac <digitalWrite+0x58>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     29c:	d0 95       	com	r29
     29e:	de 23       	and	r29, r30
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     2a0:	dc 93       	st	X, r29
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     2a2:	8f bf       	out	0x3f, r24	; 63
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:212
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	08 95       	ret
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     2ac:	de 2b       	or	r29, r30
     2ae:	f8 cf       	rjmp	.-16     	; 0x2a0 <digitalWrite+0x4c>

000002b0 <pinMode>:
pinMode():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	fc 01       	movw	r30, r24
     2b8:	e6 59       	subi	r30, 0x96	; 150
     2ba:	fe 4f       	sbci	r31, 0xFE	; 254
     2bc:	24 91       	lpm	r18, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     2be:	86 5b       	subi	r24, 0xB6	; 182
     2c0:	9e 4f       	sbci	r25, 0xFE	; 254
     2c2:	fc 01       	movw	r30, r24
     2c4:	84 91       	lpm	r24, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     2c6:	88 23       	and	r24, r24
     2c8:	d1 f0       	breq	.+52     	; 0x2fe <pinMode+0x4e>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	88 0f       	add	r24, r24
     2ce:	99 1f       	adc	r25, r25
     2d0:	fc 01       	movw	r30, r24
     2d2:	e4 57       	subi	r30, 0x74	; 116
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	a5 91       	lpm	r26, Z+
     2d8:	b4 91       	lpm	r27, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     2da:	fc 01       	movw	r30, r24
     2dc:	ea 56       	subi	r30, 0x6A	; 106
     2de:	ff 4f       	sbci	r31, 0xFF	; 255
     2e0:	c5 91       	lpm	r28, Z+
     2e2:	d4 91       	lpm	r29, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     2e4:	61 11       	cpse	r22, r1
     2e6:	0e c0       	rjmp	.+28     	; 0x304 <pinMode+0x54>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     2e8:	9f b7       	in	r25, 0x3f	; 63
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     2ea:	f8 94       	cli
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     2ec:	8c 91       	ld	r24, X
     2ee:	e2 2f       	mov	r30, r18
     2f0:	e0 95       	com	r30
     2f2:	8e 23       	and	r24, r30
     2f4:	8c 93       	st	X, r24
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     2f6:	28 81       	ld	r18, Y
     2f8:	e2 23       	and	r30, r18
     2fa:	e8 83       	st	Y, r30
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     2fc:	9f bf       	out	0x3f, r25	; 63
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     304:	8f b7       	in	r24, 0x3f	; 63
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     306:	f8 94       	cli
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     308:	ec 91       	ld	r30, X
     30a:	e2 2b       	or	r30, r18
     30c:	ec 93       	st	X, r30
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     30e:	8f bf       	out	0x3f, r24	; 63
     310:	f6 cf       	rjmp	.-20     	; 0x2fe <pinMode+0x4e>

00000312 <analogRead>:
analogRead():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
     312:	88 51       	subi	r24, 0x18	; 24
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_analog.c:69
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     314:	80 64       	ori	r24, 0x40	; 64
     316:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_analog.c:77
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     31a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     31e:	80 64       	ori	r24, 0x40	; 64
     320:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_analog.c:80

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
     324:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     328:	86 fd       	sbrc	r24, 6
     32a:	fc cf       	rjmp	.-8      	; 0x324 <analogRead+0x12>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
     32c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
     330:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
     334:	08 95       	ret

00000336 <delayMicroseconds>:
delayMicroseconds():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
     336:	00 00       	nop
     338:	00 00       	nop
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:767
    "nop" "\n\t"
    "nop"); //just waiting 2 cycles

  // for a 1 and 2 microsecond delay, simply return.  the overhead
  // of the function call takes 16 (18) cycles, which is 2us
  if (us <= 2) return; // = 3 cycles, (4 when true)
     33a:	83 30       	cpi	r24, 0x03	; 3
     33c:	91 05       	cpc	r25, r1
     33e:	28 f0       	brcs	.+10     	; 0x34a <delayMicroseconds+0x14>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:772

  // the following loop takes 1/2 of a microsecond (4 cycles)
  // per iteration, so execute it twice for each microsecond of
  // delay requested.
  us <<= 1; //x2 us, = 2 cycles
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:777

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
     344:	05 97       	sbiw	r24, 0x05	; 5
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <delayMicroseconds+0x10>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     34a:	08 95       	ret

0000034c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]>:
_ZN6SevSeg13DisplayStringEPKch.constprop.12():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:189
/*******************************************************************************************/
//Given a string such as "-A32", we display -A32
//Each digit is displayed for ~2000us, and cycles through the 4 digits
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
     34c:	6f 92       	push	r6
     34e:	7f 92       	push	r7
     350:	9f 92       	push	r9
     352:	bf 92       	push	r11
     354:	cf 92       	push	r12
     356:	df 92       	push	r13
     358:	ef 92       	push	r14
     35a:	ff 92       	push	r15
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	7c 01       	movw	r14, r24
     364:	96 2e       	mov	r9, r22
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:192
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     366:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:238
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
		}
		//Service the decimal point, apostrophe and colon
		if ((DecAposColon & (1<<(digit-1))) && (digit < 5)) //Test DecAposColon to see if we need to turn on a decimal point
     368:	c6 2e       	mov	r12, r22
     36a:	d1 2c       	mov	r13, r1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:273
			  digitalWrite(digit4, DigitOff);
			  break;
			//This only currently works for 4 digits
		}
		// The display is on for microSeconds(brightnessLevel + 1), now turn off for the remainder of the framePeriod
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     36c:	81 ed       	ldi	r24, 0xD1	; 209
     36e:	68 2e       	mov	r6, r24
     370:	87 e0       	ldi	r24, 0x07	; 7
     372:	78 2e       	mov	r7, r24
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:192
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     374:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <display1+0x15>
     378:	81 17       	cp	r24, r17
     37a:	08 f4       	brcc	.+2      	; 0x37e <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x32>
     37c:	0d c1       	rjmp	.+538    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
	{
		switch(digit)
     37e:	c1 2f       	mov	r28, r17
     380:	d0 e0       	ldi	r29, 0x00	; 0
     382:	12 30       	cpi	r17, 0x02	; 2
     384:	09 f4       	brne	.+2      	; 0x388 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x3c>
     386:	55 c0       	rjmp	.+170    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     388:	08 f0       	brcs	.+2      	; 0x38c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x40>
     38a:	47 c0       	rjmp	.+142    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:197
		{
			case 1:
				digitalWrite(digit1, DigitOn);
     38c:	60 91 6a 03 	lds	r22, 0x036A	; 0x80036a <display1+0x1>
     390:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <display1+0x5>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     394:	11 30       	cpi	r17, 0x01	; 1
     396:	09 f4       	brne	.+2      	; 0x39a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x4e>
     398:	49 c0       	rjmp	.+146    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:215

		//Here we access the array of segments
		//This could be cleaned up a bit but it works
		//displayCharacter(toDisplay[digit-1]); //Now display this digit
		// displayArray (defined in SevSeg.h) decides which segments are turned on for each number or symbol
		unsigned char characterToDisplay = toDisplay[digit-1];
     39a:	f7 01       	movw	r30, r14
     39c:	ec 0f       	add	r30, r28
     39e:	fd 1f       	adc	r31, r29
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	b0 80       	ld	r11, Z
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:216
		if (characterToDisplay & 0x80)	// bit 7 enables bit-per-segment control
     3a4:	b7 fe       	sbrs	r11, 7
     3a6:	4f c0       	rjmp	.+158    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:218
		{	// Each bit of characterToDisplay turns on a single segment (from A-to-G)
			if (characterToDisplay & 0x01) digitalWrite(segmentA, SegOn);
     3a8:	b0 fe       	sbrs	r11, 0
     3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x6c>
     3ac:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     3b0:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <display1+0xd>
     3b4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:219
			if (characterToDisplay & 0x02) digitalWrite(segmentB, SegOn);
     3b8:	b1 fe       	sbrs	r11, 1
     3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x7c>
     3bc:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     3c0:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <display1+0xe>
     3c4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:220
			if (characterToDisplay & 0x04) digitalWrite(segmentC, SegOn);
     3c8:	b2 fe       	sbrs	r11, 2
     3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x8c>
     3cc:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     3d0:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <display1+0xf>
     3d4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:221
			if (characterToDisplay & 0x08) digitalWrite(segmentD, SegOn);
     3d8:	b3 fe       	sbrs	r11, 3
     3da:	06 c0       	rjmp	.+12     	; 0x3e8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x9c>
     3dc:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     3e0:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <display1+0x10>
     3e4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:222
			if (characterToDisplay & 0x10) digitalWrite(segmentE, SegOn);
     3e8:	b4 fe       	sbrs	r11, 4
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0xac>
     3ec:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     3f0:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <display1+0x11>
     3f4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:223
			if (characterToDisplay & 0x20) digitalWrite(segmentF, SegOn);
     3f8:	b5 fe       	sbrs	r11, 5
     3fa:	06 c0       	rjmp	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3fc:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     400:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <display1+0x12>
     404:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:224
			if (characterToDisplay & 0x40) digitalWrite(segmentG, SegOn);
     408:	b6 fe       	sbrs	r11, 6
     40a:	54 c0       	rjmp	.+168    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:235
			if (chr & (1<<5)) digitalWrite(segmentB, SegOn);
			if (chr & (1<<4)) digitalWrite(segmentC, SegOn);
			if (chr & (1<<3)) digitalWrite(segmentD, SegOn);
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
     40c:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     410:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <display1+0x13>
     414:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
     418:	4d c0       	rjmp	.+154    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     41a:	13 30       	cpi	r17, 0x03	; 3
     41c:	79 f0       	breq	.+30     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:206
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
				break;
			case 4:
				digitalWrite(digit4, DigitOn);
     41e:	60 91 6a 03 	lds	r22, 0x036A	; 0x80036a <display1+0x1>
     422:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <display1+0x8>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     426:	14 30       	cpi	r17, 0x04	; 4
     428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	b7 cf       	rjmp	.-146    	; 0x39a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x4e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:206
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
				break;
			case 4:
				digitalWrite(digit4, DigitOn);
     42c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
     430:	b4 cf       	rjmp	.-152    	; 0x39a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x4e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:200
		{
			case 1:
				digitalWrite(digit1, DigitOn);
				break;
			case 2:
				digitalWrite(digit2, DigitOn);
     432:	60 91 6a 03 	lds	r22, 0x036A	; 0x80036a <display1+0x1>
     436:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <display1+0x6>
     43a:	f8 cf       	rjmp	.-16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:203
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
     43c:	60 91 6a 03 	lds	r22, 0x036A	; 0x80036a <display1+0x1>
     440:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <display1+0x7>
     444:	f3 cf       	rjmp	.-26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:228
			if (characterToDisplay & 0x20) digitalWrite(segmentF, SegOn);
			if (characterToDisplay & 0x40) digitalWrite(segmentG, SegOn);
		}
		else
		{
			const uint8_t chr = pgm_read_byte(&characterArray[characterToDisplay]);
     446:	eb 2d       	mov	r30, r11
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	e0 54       	subi	r30, 0x40	; 64
     44c:	ff 4f       	sbci	r31, 0xFF	; 255
     44e:	b4 90       	lpm	r11, Z
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:229
			if (chr & (1<<6)) digitalWrite(segmentA, SegOn);
     450:	b6 fe       	sbrs	r11, 6
     452:	06 c0       	rjmp	.+12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     454:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     458:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <display1+0xd>
     45c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:230
			if (chr & (1<<5)) digitalWrite(segmentB, SegOn);
     460:	b5 fe       	sbrs	r11, 5
     462:	06 c0       	rjmp	.+12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     464:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     468:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <display1+0xe>
     46c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:231
			if (chr & (1<<4)) digitalWrite(segmentC, SegOn);
     470:	b4 fe       	sbrs	r11, 4
     472:	06 c0       	rjmp	.+12     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     474:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     478:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <display1+0xf>
     47c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:232
			if (chr & (1<<3)) digitalWrite(segmentD, SegOn);
     480:	b3 fe       	sbrs	r11, 3
     482:	06 c0       	rjmp	.+12     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     484:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     488:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <display1+0x10>
     48c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:233
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
     490:	b2 fe       	sbrs	r11, 2
     492:	06 c0       	rjmp	.+12     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     494:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     498:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <display1+0x11>
     49c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:234
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
     4a0:	b1 fe       	sbrs	r11, 1
     4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4a4:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     4a8:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <display1+0x12>
     4ac:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:235
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
     4b0:	b0 fc       	sbrc	r11, 0
     4b2:	ac cf       	rjmp	.-168    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:238
		}
		//Service the decimal point, apostrophe and colon
		if ((DecAposColon & (1<<(digit-1))) && (digit < 5)) //Test DecAposColon to see if we need to turn on a decimal point
     4b4:	21 97       	sbiw	r28, 0x01	; 1
     4b6:	c6 01       	movw	r24, r12
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4ba:	95 95       	asr	r25
     4bc:	87 95       	ror	r24
     4be:	ca 95       	dec	r28
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4c2:	80 ff       	sbrs	r24, 0
     4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4c6:	15 30       	cpi	r17, 0x05	; 5
     4c8:	30 f4       	brcc	.+12     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:239
			digitalWrite(segmentDP, SegOn);
     4ca:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     4ce:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <display1+0x14>
     4d2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:241

		delayMicroseconds(brightnessDelay + 1); //Display this digit for a fraction of a second (between 1us and 5000us, 500-2000 is pretty good)
     4d6:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <display1+0x16>
     4da:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <display1+0x17>
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	0e 94 9b 01 	call	0x336	; 0x336 <delayMicroseconds>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:246
		//The + 1 is a bit of a hack but it removes the possible zero display (0 causes display to become bright and flickery)
		//If you set this too long, the display will start to flicker. Set it to 25000 for some fun.

		//Turn off all segments
		digitalWrite(segmentA, SegOff);
     4e4:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <display1+0x4>
     4e8:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <display1+0xd>
     4ec:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:247
		digitalWrite(segmentB, SegOff);
     4f0:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <display1+0x4>
     4f4:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <display1+0xe>
     4f8:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:248
		digitalWrite(segmentC, SegOff);
     4fc:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <display1+0x4>
     500:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <display1+0xf>
     504:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:249
		digitalWrite(segmentD, SegOff);
     508:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <display1+0x4>
     50c:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <display1+0x10>
     510:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:250
		digitalWrite(segmentE, SegOff);
     514:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <display1+0x4>
     518:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <display1+0x11>
     51c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:251
		digitalWrite(segmentF, SegOff);
     520:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <display1+0x4>
     524:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <display1+0x12>
     528:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:252
		digitalWrite(segmentG, SegOff);
     52c:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <display1+0x4>
     530:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <display1+0x13>
     534:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:253
		digitalWrite(segmentDP, SegOff);
     538:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <display1+0x4>
     53c:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <display1+0x14>
     540:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256

		//Turn off this digit
		switch(digit)
     544:	12 30       	cpi	r17, 0x02	; 2
     546:	f1 f0       	breq	.+60     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     548:	90 f4       	brcc	.+36     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:259
		{
			case 1:
			  digitalWrite(digit1, DigitOff);
     54a:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <display1+0x2>
     54e:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <display1+0x5>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     552:	11 30       	cpi	r17, 0x01	; 1
     554:	a1 f0       	breq	.+40     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:273
			  digitalWrite(digit4, DigitOff);
			  break;
			//This only currently works for 4 digits
		}
		// The display is on for microSeconds(brightnessLevel + 1), now turn off for the remainder of the framePeriod
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     556:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <display1+0x16>
     55a:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <display1+0x17>
     55e:	93 01       	movw	r18, r6
     560:	28 1b       	sub	r18, r24
     562:	39 0b       	sbc	r19, r25
     564:	c9 01       	movw	r24, r18
     566:	0e 94 9b 01 	call	0x336	; 0x336 <delayMicroseconds>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:192
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     56a:	1f 5f       	subi	r17, 0xFF	; 255
     56c:	03 cf       	rjmp	.-506    	; 0x374 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x28>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     56e:	13 30       	cpi	r17, 0x03	; 3
     570:	71 f0       	breq	.+28     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:268
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
			  break;
			case 4:
			  digitalWrite(digit4, DigitOff);
     572:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <display1+0x2>
     576:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <display1+0x8>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     57a:	14 30       	cpi	r17, 0x04	; 4
     57c:	61 f7       	brne	.-40     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:268
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
			  break;
			case 4:
			  digitalWrite(digit4, DigitOff);
     57e:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
     582:	e9 cf       	rjmp	.-46     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:262
		{
			case 1:
			  digitalWrite(digit1, DigitOff);
			  break;
			case 2:
			  digitalWrite(digit2, DigitOff);
     584:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <display1+0x2>
     588:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <display1+0x6>
     58c:	f8 cf       	rjmp	.-16     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:265
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
     58e:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <display1+0x2>
     592:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <display1+0x7>
     596:	f3 cf       	rjmp	.-26     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:279
	}

	//After we've gone through the digits, we control the colon and apostrophe (if the display supports it)

	//Turn on the colon and/or apostrophe
	if ((digitColon != 255) || (digitApostrophe != 255))
     598:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <display1+0xa>
     59c:	8f 3f       	cpi	r24, 0xFF	; 255
     59e:	29 f4       	brne	.+10     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5a0:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <display1+0x9>
     5a4:	9f 3f       	cpi	r25, 0xFF	; 255
     5a6:	09 f4       	brne	.+2      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5a8:	4e c0       	rjmp	.+156    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:281
	{
		if (DecAposColon & (1<<4)) //Test to see if we need to turn on the Colon
     5aa:	94 fe       	sbrs	r9, 4
     5ac:	0a c0       	rjmp	.+20     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:283
		{
			digitalWrite(digitColon, DigitOn);
     5ae:	60 91 6a 03 	lds	r22, 0x036A	; 0x80036a <display1+0x1>
     5b2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:284
			digitalWrite(segmentColon, SegOn);
     5b6:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     5ba:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <display1+0xc>
     5be:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:286
		}
		if (DecAposColon & (1<<5)) //Test DecAposColon to see if we need to turn on Apostrophe
     5c2:	95 fe       	sbrs	r9, 5
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:288
		{
			digitalWrite(digitApostrophe, DigitOn);
     5c6:	60 91 6a 03 	lds	r22, 0x036A	; 0x80036a <display1+0x1>
     5ca:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <display1+0x9>
     5ce:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:289
			digitalWrite(segmentApostrophe, SegOn);
     5d2:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <display1+0x3>
     5d6:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <display1+0xb>
     5da:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:291
		}
		delayMicroseconds(brightnessDelay + 1); //Display this digit for a fraction of a second (between 1us and 5000us, 500-2000 is pretty good)
     5de:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <display1+0x16>
     5e2:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <display1+0x17>
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	0e 94 9b 01 	call	0x336	; 0x336 <delayMicroseconds>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:294

		//Turn off the colon and/or apostrophe
		digitalWrite(digitColon, DigitOff);
     5ec:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <display1+0x2>
     5f0:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <display1+0xa>
     5f4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:295
		digitalWrite(segmentColon, SegOff);
     5f8:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <display1+0x4>
     5fc:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <display1+0xc>
     600:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:296
		digitalWrite(digitApostrophe, DigitOff);
     604:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <display1+0x2>
     608:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <display1+0x9>
     60c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:297
		digitalWrite(segmentApostrophe, SegOff);
     610:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <display1+0x4>
     614:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <display1+0xb>
     618:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:298
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     61c:	20 91 7f 03 	lds	r18, 0x037F	; 0x80037f <display1+0x16>
     620:	30 91 80 03 	lds	r19, 0x0380	; 0x800380 <display1+0x17>
     624:	81 ed       	ldi	r24, 0xD1	; 209
     626:	97 e0       	ldi	r25, 0x07	; 7
     628:	82 1b       	sub	r24, r18
     62a:	93 0b       	sbc	r25, r19
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:301
	}

}
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	bf 90       	pop	r11
     63c:	9f 90       	pop	r9
     63e:	7f 90       	pop	r7
     640:	6f 90       	pop	r6
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:298
		//Turn off the colon and/or apostrophe
		digitalWrite(digitColon, DigitOff);
		digitalWrite(segmentColon, SegOff);
		digitalWrite(digitApostrophe, DigitOff);
		digitalWrite(segmentApostrophe, SegOff);
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     642:	0c 94 9b 01 	jmp	0x336	; 0x336 <delayMicroseconds>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:301
	}

}
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	bf 90       	pop	r11
     656:	9f 90       	pop	r9
     658:	7f 90       	pop	r7
     65a:	6f 90       	pop	r6
     65c:	08 95       	ret

0000065e <micros>:
micros():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     65e:	3f b7       	in	r19, 0x3f	; 63
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     660:	f8 94       	cli
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     662:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <timer0_overflow_count>
     666:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <timer0_overflow_count+0x1>
     66a:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <timer0_overflow_count+0x2>
     66e:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <timer0_overflow_count+0x3>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     672:	26 b5       	in	r18, 0x26	; 38
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     674:	a8 9b       	sbis	0x15, 0	; 21
     676:	05 c0       	rjmp	.+10     	; 0x682 <micros+0x24>
     678:	2f 3f       	cpi	r18, 0xFF	; 255
     67a:	19 f0       	breq	.+6      	; 0x682 <micros+0x24>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	a1 1d       	adc	r26, r1
     680:	b1 1d       	adc	r27, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     682:	3f bf       	out	0x3f, r19	; 63
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     684:	ba 2f       	mov	r27, r26
     686:	a9 2f       	mov	r26, r25
     688:	98 2f       	mov	r25, r24
     68a:	88 27       	eor	r24, r24
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	62 0f       	add	r22, r18
     692:	71 1d       	adc	r23, r1
     694:	81 1d       	adc	r24, r1
     696:	91 1d       	adc	r25, r1
     698:	43 e0       	ldi	r20, 0x03	; 3
     69a:	66 0f       	add	r22, r22
     69c:	77 1f       	adc	r23, r23
     69e:	88 1f       	adc	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	4a 95       	dec	r20
     6a4:	d1 f7       	brne	.-12     	; 0x69a <micros+0x3c>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     6a6:	08 95       	ret

000006a8 <BlockNot::reset(unsigned long) [clone .constprop.17]>:
_ZN8BlockNot5resetEm.constprop.17():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:444
    return result;
}

void BlockNot::switchTo(Unit units) { baseUnits = units; }

void BlockNot::reset(const unsigned long newStartTime) {
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	ec 01       	movw	r28, r24
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:447
   unsigned long finalStartTime = newStartTime;
    if(newStartTime == 0) {
        switch(baseUnits) {
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	81 30       	cpi	r24, 0x01	; 1
     6b8:	91 05       	cpc	r25, r1
     6ba:	d9 f0       	breq	.+54     	; 0x6f2 <BlockNot::reset(unsigned long) [clone .constprop.17]+0x4a>
     6bc:	30 f0       	brcs	.+12     	; 0x6ca <BlockNot::reset(unsigned long) [clone .constprop.17]+0x22>
     6be:	02 97       	sbiw	r24, 0x02	; 2
     6c0:	c1 f0       	breq	.+48     	; 0x6f2 <BlockNot::reset(unsigned long) [clone .constprop.17]+0x4a>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:445
}

void BlockNot::switchTo(Unit units) { baseUnits = units; }

void BlockNot::reset(const unsigned long newStartTime) {
   unsigned long finalStartTime = newStartTime;
     6c2:	00 e0       	ldi	r16, 0x00	; 0
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	98 01       	movw	r18, r16
     6c8:	0a c0       	rjmp	.+20     	; 0x6de <BlockNot::reset(unsigned long) [clone .constprop.17]+0x36>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:449
    if(newStartTime == 0) {
        switch(baseUnits) {
            case MICROSECONDS:
                finalStartTime = micros() + microsOffset;
     6ca:	0e 94 2f 03 	call	0x65e	; 0x65e <micros>
     6ce:	08 85       	ldd	r16, Y+8	; 0x08
     6d0:	19 85       	ldd	r17, Y+9	; 0x09
     6d2:	2a 85       	ldd	r18, Y+10	; 0x0a
     6d4:	3b 85       	ldd	r19, Y+11	; 0x0b
     6d6:	06 0f       	add	r16, r22
     6d8:	17 1f       	adc	r17, r23
     6da:	28 1f       	adc	r18, r24
     6dc:	39 1f       	adc	r19, r25
resetTimer():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:509
            break;
    }
}

void BlockNot::resetTimer(const unsigned long newStartTime) {
    startTime = newStartTime;
     6de:	08 83       	st	Y, r16
     6e0:	19 83       	std	Y+1, r17	; 0x01
     6e2:	2a 83       	std	Y+2, r18	; 0x02
     6e4:	3b 83       	std	Y+3, r19	; 0x03
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:510
    onceTriggered = false;
     6e6:	1a 8a       	std	Y+18, r1	; 0x12
_ZN8BlockNot5resetEm.constprop.17():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:460
                finalStartTime = millis() + millisOffset;
                break;
        }
    }
    resetTimer(finalStartTime);
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	08 95       	ret
millis():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     6f2:	2f b7       	in	r18, 0x3f	; 63
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     6f4:	f8 94       	cli
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     6f6:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <timer0_millis>
     6fa:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <timer0_millis+0x1>
     6fe:	a0 91 b6 03 	lds	r26, 0x03B6	; 0x8003b6 <timer0_millis+0x2>
     702:	b0 91 b7 03 	lds	r27, 0x03B7	; 0x8003b7 <timer0_millis+0x3>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     706:	2f bf       	out	0x3f, r18	; 63
_ZN8BlockNot5resetEm.constprop.17():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:455
                break;
            case MILLISECONDS:
                finalStartTime = millis() + millisOffset;
                break;
            case SECONDS:
                finalStartTime = millis() + millisOffset;
     708:	0c 81       	ldd	r16, Y+4	; 0x04
     70a:	1d 81       	ldd	r17, Y+5	; 0x05
     70c:	2e 81       	ldd	r18, Y+6	; 0x06
     70e:	3f 81       	ldd	r19, Y+7	; 0x07
     710:	08 0f       	add	r16, r24
     712:	19 1f       	adc	r17, r25
     714:	2a 1f       	adc	r18, r26
     716:	3b 1f       	adc	r19, r27
     718:	e2 cf       	rjmp	.-60     	; 0x6de <BlockNot::reset(unsigned long) [clone .constprop.17]+0x36>

0000071a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>:
_ZN8BlockNot11setDurationEm4Unitb.part.3():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:189
    if (resetOption) reset();
}

void BlockNot::setDuration(const unsigned long time, Unit inUnits, bool resetOption) {
    initDuration(time, inUnits);
    if (resetOption) reset();
     71a:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.17]>

0000071e <BlockNot::timeSinceReset()>:
_ZN8BlockNot14timeSinceResetEv():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:513
void BlockNot::resetTimer(const unsigned long newStartTime) {
    startTime = newStartTime;
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	ec 01       	movw	r28, r24
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:515
    unsigned long result = 0L;
    unsigned long millisBase = millisOffset + millis();
     730:	6c 81       	ldd	r22, Y+4	; 0x04
     732:	7d 81       	ldd	r23, Y+5	; 0x05
     734:	8e 81       	ldd	r24, Y+6	; 0x06
     736:	9f 81       	ldd	r25, Y+7	; 0x07
millis():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     738:	2f b7       	in	r18, 0x3f	; 63
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     73a:	f8 94       	cli
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     73c:	c0 90 b4 03 	lds	r12, 0x03B4	; 0x8003b4 <timer0_millis>
     740:	d0 90 b5 03 	lds	r13, 0x03B5	; 0x8003b5 <timer0_millis+0x1>
     744:	e0 90 b6 03 	lds	r14, 0x03B6	; 0x8003b6 <timer0_millis+0x2>
     748:	f0 90 b7 03 	lds	r15, 0x03B7	; 0x8003b7 <timer0_millis+0x3>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     74c:	2f bf       	out	0x3f, r18	; 63
_ZN8BlockNot14timeSinceResetEv():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:516
    switch (baseUnits) {
     74e:	2b 89       	ldd	r18, Y+19	; 0x13
     750:	3c 89       	ldd	r19, Y+20	; 0x14
     752:	21 15       	cp	r18, r1
     754:	31 05       	cpc	r19, r1
     756:	39 f0       	breq	.+14     	; 0x766 <BlockNot::timeSinceReset()+0x48>
     758:	23 30       	cpi	r18, 0x03	; 3
     75a:	31 05       	cpc	r19, r1
     75c:	f8 f0       	brcs	.+62     	; 0x79c <BlockNot::timeSinceReset()+0x7e>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:514
    startTime = newStartTime;
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
    unsigned long result = 0L;
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	cb 01       	movw	r24, r22
     764:	12 c0       	rjmp	.+36     	; 0x78a <BlockNot::timeSinceReset()+0x6c>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:518
    unsigned long millisBase = millisOffset + millis();
    switch (baseUnits) {
        case MICROSECONDS:
            result = microsOffset + micros() - startTime;
     766:	c8 84       	ldd	r12, Y+8	; 0x08
     768:	d9 84       	ldd	r13, Y+9	; 0x09
     76a:	ea 84       	ldd	r14, Y+10	; 0x0a
     76c:	fb 84       	ldd	r15, Y+11	; 0x0b
     76e:	0e 94 2f 03 	call	0x65e	; 0x65e <micros>
     772:	08 81       	ld	r16, Y
     774:	19 81       	ldd	r17, Y+1	; 0x01
     776:	2a 81       	ldd	r18, Y+2	; 0x02
     778:	3b 81       	ldd	r19, Y+3	; 0x03
     77a:	c0 1a       	sub	r12, r16
     77c:	d1 0a       	sbc	r13, r17
     77e:	e2 0a       	sbc	r14, r18
     780:	f3 0a       	sbc	r15, r19
     782:	6c 0d       	add	r22, r12
     784:	7d 1d       	adc	r23, r13
     786:	8e 1d       	adc	r24, r14
     788:	9f 1d       	adc	r25, r15
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:528
        case SECONDS:
            result = millisBase - startTime;
            break;
    }
    return result;
}
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	08 95       	ret
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:515
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
    unsigned long result = 0L;
    unsigned long millisBase = millisOffset + millis();
     79c:	6c 0d       	add	r22, r12
     79e:	7d 1d       	adc	r23, r13
     7a0:	8e 1d       	adc	r24, r14
     7a2:	9f 1d       	adc	r25, r15
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:524
            break;
        case MILLISECONDS:
            result = millisBase - startTime;
            break;
        case SECONDS:
            result = millisBase - startTime;
     7a4:	c8 80       	ld	r12, Y
     7a6:	d9 80       	ldd	r13, Y+1	; 0x01
     7a8:	ea 80       	ldd	r14, Y+2	; 0x02
     7aa:	fb 80       	ldd	r15, Y+3	; 0x03
     7ac:	6c 19       	sub	r22, r12
     7ae:	7d 09       	sbc	r23, r13
     7b0:	8e 09       	sbc	r24, r14
     7b2:	9f 09       	sbc	r25, r15
     7b4:	ea cf       	rjmp	.-44     	; 0x78a <BlockNot::timeSinceReset()+0x6c>

000007b6 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.16]>:
_ZN8BlockNotC2Em4Unit.constprop.16():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:50
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
}

BlockNot::BlockNot(unsigned long time, Unit units) {
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	ec 01       	movw	r28, r24
     7c0:	1c 82       	std	Y+4, r1	; 0x04
     7c2:	1d 82       	std	Y+5, r1	; 0x05
     7c4:	1e 82       	std	Y+6, r1	; 0x06
     7c6:	1f 82       	std	Y+7, r1	; 0x07
     7c8:	18 86       	std	Y+8, r1	; 0x08
     7ca:	19 86       	std	Y+9, r1	; 0x09
     7cc:	1a 86       	std	Y+10, r1	; 0x0a
     7ce:	1b 86       	std	Y+11, r1	; 0x0b
     7d0:	1c 86       	std	Y+12, r1	; 0x0c
     7d2:	1d 86       	std	Y+13, r1	; 0x0d
     7d4:	1e 86       	std	Y+14, r1	; 0x0e
     7d6:	1f 86       	std	Y+15, r1	; 0x0f
     7d8:	19 8a       	std	Y+17, r1	; 0x11
     7da:	18 8a       	std	Y+16, r1	; 0x10
     7dc:	1a 8a       	std	Y+18, r1	; 0x12
     7de:	1e 8e       	std	Y+30, r1	; 0x1e
     7e0:	1d 8e       	std	Y+29, r1	; 0x1d
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:51
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
     7e2:	00 91 b2 03 	lds	r16, 0x03B2	; 0x8003b2 <BlockNot::global>
     7e6:	10 91 b3 03 	lds	r17, 0x03B3	; 0x8003b3 <BlockNot::global+0x1>
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	01 30       	cpi	r16, 0x01	; 1
     7f0:	11 05       	cpc	r17, r1
     7f2:	11 f0       	breq	.+4      	; 0x7f8 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.16]+0x42>
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <BlockNot::global+0x1>
     7fc:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <BlockNot::global>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:52
    baseUnits = units;
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	9c 8b       	std	Y+20, r25	; 0x14
     806:	8b 8b       	std	Y+19, r24	; 0x13
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:53
    initDuration(time);
     808:	ce 01       	movw	r24, r28
     80a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <BlockNot::initDuration(unsigned long)>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:54
    reset();
     80e:	ce 01       	movw	r24, r28
     810:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.17]>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:55
    if (global == GLOBAL_RESET) addToTimerList();
     814:	01 30       	cpi	r16, 0x01	; 1
     816:	11 05       	cpc	r17, r1
     818:	39 f0       	breq	.+14     	; 0x828 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.16]+0x72>
     81a:	ce 01       	movw	r24, r28
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:56
}
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:55
BlockNot::BlockNot(unsigned long time, Unit units) {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    baseUnits = units;
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
     824:	0c 94 86 0c 	jmp	0x190c	; 0x190c <BlockNot::addToTimerList()>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:56
}
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	08 95       	ret

00000832 <BlockNot::triggered(bool)>:
_ZN8BlockNot9triggeredEb():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:236
            break;
    }
    if (resetOption) reset();
}

bool BlockNot::triggered(bool resetOption) {
     832:	cf 92       	push	r12
     834:	df 92       	push	r13
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	ec 01       	movw	r28, r24
     844:	06 2f       	mov	r16, r22
hasTriggered():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:532
    return result;
}

bool BlockNot::hasTriggered() {
    bool triggered;
    switch(baseUnits) {
     846:	8b 89       	ldd	r24, Y+19	; 0x13
     848:	9c 89       	ldd	r25, Y+20	; 0x14
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	91 05       	cpc	r25, r1
     84e:	91 f1       	breq	.+100    	; 0x8b4 <BlockNot::triggered(bool)+0x82>
     850:	c0 f0       	brcs	.+48     	; 0x882 <BlockNot::triggered(bool)+0x50>
     852:	02 97       	sbiw	r24, 0x02	; 2
     854:	79 f1       	breq	.+94     	; 0x8b4 <BlockNot::triggered(bool)+0x82>
_ZN8BlockNot9triggeredEb():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:238
    if (resetOption) reset();
}

bool BlockNot::triggered(bool resetOption) {
    bool triggered = hasTriggered();
    if (resetOption && triggered) {
     856:	00 23       	and	r16, r16
     858:	29 f0       	breq	.+10     	; 0x864 <BlockNot::triggered(bool)+0x32>
     85a:	11 23       	and	r17, r17
     85c:	19 f0       	breq	.+6      	; 0x864 <BlockNot::triggered(bool)+0x32>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:239
        reset();
     85e:	ce 01       	movw	r24, r28
     860:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.17]>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:241
    }
    if (timerState == RUNNING) return triggered;
     864:	8d 8d       	ldd	r24, Y+29	; 0x1d
     866:	9e 8d       	ldd	r25, Y+30	; 0x1e
     868:	89 2b       	or	r24, r25
     86a:	09 f0       	breq	.+2      	; 0x86e <BlockNot::triggered(bool)+0x3c>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:242
    else return false;
     86c:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:243
}
     86e:	81 2f       	mov	r24, r17
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	08 95       	ret
hasTriggered():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:534

bool BlockNot::hasTriggered() {
    bool triggered;
    switch(baseUnits) {
        case MICROSECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.micros;
     882:	ce 01       	movw	r24, r28
     884:	0e 94 8f 03 	call	0x71e	; 0x71e <BlockNot::timeSinceReset()>
     888:	6b 01       	movw	r12, r22
     88a:	7c 01       	movw	r14, r24
_ZNK8BlockNot5cTime7micro_tcvdEv():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:213
            micro_t &operator=(double us) {
                seconds = us * .000001;
                return *this;
            }
            operator double() const {
                return seconds * 1000000.0;
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	34 e2       	ldi	r19, 0x24	; 36
     890:	44 e7       	ldi	r20, 0x74	; 116
     892:	59 e4       	ldi	r21, 0x49	; 73
_ZNK8BlockNot5cTime7milli_tcvdEv():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:201
            milli_t &operator=(double ms) {
                seconds = ms * .001;
                return *this;
            }
            operator double() const {
                return seconds * 1000.0;
     894:	6d 89       	ldd	r22, Y+21	; 0x15
     896:	7e 89       	ldd	r23, Y+22	; 0x16
     898:	8f 89       	ldd	r24, Y+23	; 0x17
     89a:	98 8d       	ldd	r25, Y+24	; 0x18
     89c:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
hasTriggered():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:540
            break;
        case MILLISECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.millis;
            break;
        case SECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.millis;
     8a0:	0e 94 8f 19 	call	0x331e	; 0x331e <__fixunssfsi>
     8a4:	11 e0       	ldi	r17, 0x01	; 1
     8a6:	c6 16       	cp	r12, r22
     8a8:	d7 06       	cpc	r13, r23
     8aa:	e8 06       	cpc	r14, r24
     8ac:	f9 06       	cpc	r15, r25
     8ae:	98 f6       	brcc	.-90     	; 0x856 <BlockNot::triggered(bool)+0x24>
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	d1 cf       	rjmp	.-94     	; 0x856 <BlockNot::triggered(bool)+0x24>
     8b4:	ce 01       	movw	r24, r28
     8b6:	0e 94 8f 03 	call	0x71e	; 0x71e <BlockNot::timeSinceReset()>
     8ba:	6b 01       	movw	r12, r22
     8bc:	7c 01       	movw	r14, r24
_ZNK8BlockNot5cTime7milli_tcvdEv():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:201
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	4a e7       	ldi	r20, 0x7A	; 122
     8c4:	54 e4       	ldi	r21, 0x44	; 68
     8c6:	e6 cf       	rjmp	.-52     	; 0x894 <BlockNot::triggered(bool)+0x62>

000008c8 <read(int)>:
_Z4readi():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1567
  pinMode(PIN, OUTPUT);
}

//Read Input

bool read(int PIN) {
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	9c 01       	movw	r18, r24
digitalRead():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
     8ce:	fc 01       	movw	r30, r24
     8d0:	e0 56       	subi	r30, 0x60	; 96
     8d2:	ff 4f       	sbci	r31, 0xFF	; 255
     8d4:	84 91       	lpm	r24, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     8d6:	f9 01       	movw	r30, r18
     8d8:	e6 59       	subi	r30, 0x96	; 150
     8da:	fe 4f       	sbci	r31, 0xFE	; 254
     8dc:	d4 91       	lpm	r29, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     8de:	f9 01       	movw	r30, r18
     8e0:	e6 5b       	subi	r30, 0xB6	; 182
     8e2:	fe 4f       	sbci	r31, 0xFE	; 254
     8e4:	c4 91       	lpm	r28, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     8e6:	cc 23       	and	r28, r28
     8e8:	79 f0       	breq	.+30     	; 0x908 <read(int)+0x40>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     8ea:	81 11       	cpse	r24, r1
     8ec:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <turnOffPWM>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     8f0:	ec 2f       	mov	r30, r28
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	e0 5c       	subi	r30, 0xC0	; 192
     8fa:	fe 4f       	sbci	r31, 0xFE	; 254
     8fc:	a5 91       	lpm	r26, Z+
     8fe:	b4 91       	lpm	r27, Z
     900:	ec 91       	ld	r30, X
     902:	ed 23       	and	r30, r29
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	09 f4       	brne	.+2      	; 0x90a <read(int)+0x42>
_Z4readi():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1571
  if(digitalRead(PIN)) {
    return true;
  } else {
    return false;
     908:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1573
  }
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <setOUT(int)>:
_Z6setOUTi():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1562
}

//Setup Outputs

void setOUT(int PIN) {
  pinMode(PIN, OUTPUT);
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <pinMode>

00000916 <setIN(int)>:
_Z5setINi():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1556
}

// Setup Inputs

void setIN(int PIN) {
  pinMode(PIN, INPUT);
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <pinMode>

0000091c <ampo()>:
_Z4ampov():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:881
    }
  boutvoltage = (int)bot1;
  }
}

void ampo() {
     91c:	8f 92       	push	r8
     91e:	9f 92       	push	r9
     920:	af 92       	push	r10
     922:	bf 92       	push	r11
     924:	cf 92       	push	r12
     926:	df 92       	push	r13
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:884
float ampov;
for(int i=0; i<1; i++) {
  if(((ACAL/1000.0) * analogRead(current)) > ampov){
     92c:	60 91 3f 02 	lds	r22, 0x023F	; 0x80023f <ACAL>
     930:	70 91 40 02 	lds	r23, 0x0240	; 0x800240 <ACAL+0x1>
     934:	07 2e       	mov	r0, r23
     936:	00 0c       	add	r0, r0
     938:	88 0b       	sbc	r24, r24
     93a:	99 0b       	sbc	r25, r25
     93c:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	4a e7       	ldi	r20, 0x7A	; 122
     946:	54 e4       	ldi	r21, 0x44	; 68
     948:	0e 94 16 19 	call	0x322c	; 0x322c <__divsf3>
     94c:	4b 01       	movw	r8, r22
     94e:	5c 01       	movw	r10, r24
     950:	8e e1       	ldi	r24, 0x1E	; 30
     952:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     956:	bc 01       	movw	r22, r24
     958:	99 0f       	add	r25, r25
     95a:	88 0b       	sbc	r24, r24
     95c:	99 0b       	sbc	r25, r25
     95e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     962:	a5 01       	movw	r20, r10
     964:	94 01       	movw	r18, r8
     966:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
     96a:	c1 2c       	mov	r12, r1
     96c:	d1 2c       	mov	r13, r1
     96e:	76 01       	movw	r14, r12
     970:	a7 01       	movw	r20, r14
     972:	96 01       	movw	r18, r12
     974:	0e 94 be 19 	call	0x337c	; 0x337c <__gesf2>
     978:	18 16       	cp	r1, r24
     97a:	7c f4       	brge	.+30     	; 0x99a <ampo()+0x7e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:885
    ampov = (ACAL/1000.0) * analogRead(current);
     97c:	8e e1       	ldi	r24, 0x1E	; 30
     97e:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     982:	bc 01       	movw	r22, r24
     984:	99 0f       	add	r25, r25
     986:	88 0b       	sbc	r24, r24
     988:	99 0b       	sbc	r25, r25
     98a:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     98e:	a5 01       	movw	r20, r10
     990:	94 01       	movw	r18, r8
     992:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
     996:	6b 01       	movw	r12, r22
     998:	7c 01       	movw	r14, r24
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:888
    }
  }
currentload = ampov;
     99a:	c7 01       	movw	r24, r14
     99c:	b6 01       	movw	r22, r12
     99e:	0e 94 88 19 	call	0x3310	; 0x3310 <__fixsfsi>
     9a2:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <currentload+0x1>
     9a6:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <currentload>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:891
//dtostrf(ampov, 5, 1, load);

}
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	df 90       	pop	r13
     9b0:	cf 90       	pop	r12
     9b2:	bf 90       	pop	r11
     9b4:	af 90       	pop	r10
     9b6:	9f 90       	pop	r9
     9b8:	8f 90       	pop	r8
     9ba:	08 95       	ret

000009bc <OVo()>:
_Z3OVov():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:863
  }
}



void OVo() {
     9bc:	8f 92       	push	r8
     9be:	9f 92       	push	r9
     9c0:	af 92       	push	r10
     9c2:	bf 92       	push	r11
     9c4:	cf 92       	push	r12
     9c6:	df 92       	push	r13
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:866
float rot1, yot1, bot1;
for(int i=0; i<1; i++) {
  if(((VCALRO/1000.0) * analogRead(ROTPIN)) > rot1){
     9cc:	60 91 49 02 	lds	r22, 0x0249	; 0x800249 <VCALRO>
     9d0:	70 91 4a 02 	lds	r23, 0x024A	; 0x80024a <VCALRO+0x1>
     9d4:	07 2e       	mov	r0, r23
     9d6:	00 0c       	add	r0, r0
     9d8:	88 0b       	sbc	r24, r24
     9da:	99 0b       	sbc	r25, r25
     9dc:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	4a e7       	ldi	r20, 0x7A	; 122
     9e6:	54 e4       	ldi	r21, 0x44	; 68
     9e8:	0e 94 16 19 	call	0x322c	; 0x322c <__divsf3>
     9ec:	4b 01       	movw	r8, r22
     9ee:	5c 01       	movw	r10, r24
     9f0:	8b e1       	ldi	r24, 0x1B	; 27
     9f2:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     9f6:	bc 01       	movw	r22, r24
     9f8:	99 0f       	add	r25, r25
     9fa:	88 0b       	sbc	r24, r24
     9fc:	99 0b       	sbc	r25, r25
     9fe:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     a02:	a5 01       	movw	r20, r10
     a04:	94 01       	movw	r18, r8
     a06:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
     a0a:	c1 2c       	mov	r12, r1
     a0c:	d1 2c       	mov	r13, r1
     a0e:	76 01       	movw	r14, r12
     a10:	a7 01       	movw	r20, r14
     a12:	96 01       	movw	r18, r12
     a14:	0e 94 be 19 	call	0x337c	; 0x337c <__gesf2>
     a18:	18 16       	cp	r1, r24
     a1a:	7c f4       	brge	.+30     	; 0xa3a <OVo()+0x7e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:867
    rot1 = (VCALRO/1000.0) * analogRead(ROTPIN);
     a1c:	8b e1       	ldi	r24, 0x1B	; 27
     a1e:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     a22:	bc 01       	movw	r22, r24
     a24:	99 0f       	add	r25, r25
     a26:	88 0b       	sbc	r24, r24
     a28:	99 0b       	sbc	r25, r25
     a2a:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     a2e:	a5 01       	movw	r20, r10
     a30:	94 01       	movw	r18, r8
     a32:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
     a36:	6b 01       	movw	r12, r22
     a38:	7c 01       	movw	r14, r24
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:869
    }
  routvoltage = (int)rot1;
     a3a:	c7 01       	movw	r24, r14
     a3c:	b6 01       	movw	r22, r12
     a3e:	0e 94 88 19 	call	0x3310	; 0x3310 <__fixsfsi>
     a42:	70 93 41 03 	sts	0x0341, r23	; 0x800341 <routvoltage+0x1>
     a46:	60 93 40 03 	sts	0x0340, r22	; 0x800340 <routvoltage>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:870
  if(((VCALYO/1000.0) * analogRead(YOTPIN)) > yot1){
     a4a:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <VCALYO>
     a4e:	70 91 46 02 	lds	r23, 0x0246	; 0x800246 <VCALYO+0x1>
     a52:	07 2e       	mov	r0, r23
     a54:	00 0c       	add	r0, r0
     a56:	88 0b       	sbc	r24, r24
     a58:	99 0b       	sbc	r25, r25
     a5a:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	4a e7       	ldi	r20, 0x7A	; 122
     a64:	54 e4       	ldi	r21, 0x44	; 68
     a66:	0e 94 16 19 	call	0x322c	; 0x322c <__divsf3>
     a6a:	4b 01       	movw	r8, r22
     a6c:	5c 01       	movw	r10, r24
     a6e:	8c e1       	ldi	r24, 0x1C	; 28
     a70:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     a74:	bc 01       	movw	r22, r24
     a76:	99 0f       	add	r25, r25
     a78:	88 0b       	sbc	r24, r24
     a7a:	99 0b       	sbc	r25, r25
     a7c:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     a80:	a5 01       	movw	r20, r10
     a82:	94 01       	movw	r18, r8
     a84:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
     a88:	c1 2c       	mov	r12, r1
     a8a:	d1 2c       	mov	r13, r1
     a8c:	76 01       	movw	r14, r12
     a8e:	a7 01       	movw	r20, r14
     a90:	96 01       	movw	r18, r12
     a92:	0e 94 be 19 	call	0x337c	; 0x337c <__gesf2>
     a96:	18 16       	cp	r1, r24
     a98:	7c f4       	brge	.+30     	; 0xab8 <OVo()+0xfc>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:871
    yot1 = (VCALYO/1000.0) * analogRead(YOTPIN);
     a9a:	8c e1       	ldi	r24, 0x1C	; 28
     a9c:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     aa0:	bc 01       	movw	r22, r24
     aa2:	99 0f       	add	r25, r25
     aa4:	88 0b       	sbc	r24, r24
     aa6:	99 0b       	sbc	r25, r25
     aa8:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     aac:	a5 01       	movw	r20, r10
     aae:	94 01       	movw	r18, r8
     ab0:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
     ab4:	6b 01       	movw	r12, r22
     ab6:	7c 01       	movw	r14, r24
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:873
    }
  youtvoltage = (int)yot1;
     ab8:	c7 01       	movw	r24, r14
     aba:	b6 01       	movw	r22, r12
     abc:	0e 94 88 19 	call	0x3310	; 0x3310 <__fixsfsi>
     ac0:	70 93 3b 03 	sts	0x033B, r23	; 0x80033b <youtvoltage+0x1>
     ac4:	60 93 3a 03 	sts	0x033A, r22	; 0x80033a <youtvoltage>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:874
  if(((VCALBO/1000.0) * analogRead(BOTPIN)) > bot1){
     ac8:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <VCALBO>
     acc:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <VCALBO+0x1>
     ad0:	07 2e       	mov	r0, r23
     ad2:	00 0c       	add	r0, r0
     ad4:	88 0b       	sbc	r24, r24
     ad6:	99 0b       	sbc	r25, r25
     ad8:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	4a e7       	ldi	r20, 0x7A	; 122
     ae2:	54 e4       	ldi	r21, 0x44	; 68
     ae4:	0e 94 16 19 	call	0x322c	; 0x322c <__divsf3>
     ae8:	4b 01       	movw	r8, r22
     aea:	5c 01       	movw	r10, r24
     aec:	8d e1       	ldi	r24, 0x1D	; 29
     aee:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     af2:	bc 01       	movw	r22, r24
     af4:	99 0f       	add	r25, r25
     af6:	88 0b       	sbc	r24, r24
     af8:	99 0b       	sbc	r25, r25
     afa:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     afe:	a5 01       	movw	r20, r10
     b00:	94 01       	movw	r18, r8
     b02:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
     b06:	c1 2c       	mov	r12, r1
     b08:	d1 2c       	mov	r13, r1
     b0a:	76 01       	movw	r14, r12
     b0c:	a7 01       	movw	r20, r14
     b0e:	96 01       	movw	r18, r12
     b10:	0e 94 be 19 	call	0x337c	; 0x337c <__gesf2>
     b14:	18 16       	cp	r1, r24
     b16:	7c f4       	brge	.+30     	; 0xb36 <OVo()+0x17a>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:875
    bot1 = (VCALBO/1000.0) * analogRead(BOTPIN);
     b18:	8d e1       	ldi	r24, 0x1D	; 29
     b1a:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     b1e:	bc 01       	movw	r22, r24
     b20:	99 0f       	add	r25, r25
     b22:	88 0b       	sbc	r24, r24
     b24:	99 0b       	sbc	r25, r25
     b26:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     b2a:	a5 01       	movw	r20, r10
     b2c:	94 01       	movw	r18, r8
     b2e:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
     b32:	6b 01       	movw	r12, r22
     b34:	7c 01       	movw	r14, r24
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:877
    }
  boutvoltage = (int)bot1;
     b36:	c7 01       	movw	r24, r14
     b38:	b6 01       	movw	r22, r12
     b3a:	0e 94 88 19 	call	0x3310	; 0x3310 <__fixsfsi>
     b3e:	70 93 37 03 	sts	0x0337, r23	; 0x800337 <boutvoltage+0x1>
     b42:	60 93 36 03 	sts	0x0336, r22	; 0x800336 <boutvoltage>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:879
  }
}
     b46:	ff 90       	pop	r15
     b48:	ef 90       	pop	r14
     b4a:	df 90       	pop	r13
     b4c:	cf 90       	pop	r12
     b4e:	bf 90       	pop	r11
     b50:	af 90       	pop	r10
     b52:	9f 90       	pop	r9
     b54:	8f 90       	pop	r8
     b56:	08 95       	ret

00000b58 <IVo()>:
_Z3IVov():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:842
  IVo();
  OVo();
  ampo();
}

void IVo() {
     b58:	8f 92       	push	r8
     b5a:	9f 92       	push	r9
     b5c:	af 92       	push	r10
     b5e:	bf 92       	push	r11
     b60:	cf 92       	push	r12
     b62:	df 92       	push	r13
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:846

float rin1, yin1, bin1;
for(int i=0; i<1; i++) {
  if(((VCALRI/1000.0) * analogRead(RINPIN)) > rin1){
     b68:	60 91 4b 02 	lds	r22, 0x024B	; 0x80024b <VCALRI>
     b6c:	70 91 4c 02 	lds	r23, 0x024C	; 0x80024c <VCALRI+0x1>
     b70:	07 2e       	mov	r0, r23
     b72:	00 0c       	add	r0, r0
     b74:	88 0b       	sbc	r24, r24
     b76:	99 0b       	sbc	r25, r25
     b78:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	4a e7       	ldi	r20, 0x7A	; 122
     b82:	54 e4       	ldi	r21, 0x44	; 68
     b84:	0e 94 16 19 	call	0x322c	; 0x322c <__divsf3>
     b88:	4b 01       	movw	r8, r22
     b8a:	5c 01       	movw	r10, r24
     b8c:	88 e1       	ldi	r24, 0x18	; 24
     b8e:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     b92:	bc 01       	movw	r22, r24
     b94:	99 0f       	add	r25, r25
     b96:	88 0b       	sbc	r24, r24
     b98:	99 0b       	sbc	r25, r25
     b9a:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     b9e:	a5 01       	movw	r20, r10
     ba0:	94 01       	movw	r18, r8
     ba2:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
     ba6:	c1 2c       	mov	r12, r1
     ba8:	d1 2c       	mov	r13, r1
     baa:	76 01       	movw	r14, r12
     bac:	a7 01       	movw	r20, r14
     bae:	96 01       	movw	r18, r12
     bb0:	0e 94 be 19 	call	0x337c	; 0x337c <__gesf2>
     bb4:	18 16       	cp	r1, r24
     bb6:	7c f4       	brge	.+30     	; 0xbd6 <IVo()+0x7e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:847
    rin1 = (VCALRI/1000.0) * analogRead(RINPIN);
     bb8:	88 e1       	ldi	r24, 0x18	; 24
     bba:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     bbe:	bc 01       	movw	r22, r24
     bc0:	99 0f       	add	r25, r25
     bc2:	88 0b       	sbc	r24, r24
     bc4:	99 0b       	sbc	r25, r25
     bc6:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     bca:	a5 01       	movw	r20, r10
     bcc:	94 01       	movw	r18, r8
     bce:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
     bd2:	6b 01       	movw	r12, r22
     bd4:	7c 01       	movw	r14, r24
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:849
    }
  rinvoltage = (int)rin1;
     bd6:	c7 01       	movw	r24, r14
     bd8:	b6 01       	movw	r22, r12
     bda:	0e 94 88 19 	call	0x3310	; 0x3310 <__fixsfsi>
     bde:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <rinvoltage+0x1>
     be2:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <rinvoltage>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:850
  if(((VCALYI/1000.0) * analogRead(YINPIN)) > yin1){
     be6:	60 91 47 02 	lds	r22, 0x0247	; 0x800247 <VCALYI>
     bea:	70 91 48 02 	lds	r23, 0x0248	; 0x800248 <VCALYI+0x1>
     bee:	07 2e       	mov	r0, r23
     bf0:	00 0c       	add	r0, r0
     bf2:	88 0b       	sbc	r24, r24
     bf4:	99 0b       	sbc	r25, r25
     bf6:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	4a e7       	ldi	r20, 0x7A	; 122
     c00:	54 e4       	ldi	r21, 0x44	; 68
     c02:	0e 94 16 19 	call	0x322c	; 0x322c <__divsf3>
     c06:	4b 01       	movw	r8, r22
     c08:	5c 01       	movw	r10, r24
     c0a:	89 e1       	ldi	r24, 0x19	; 25
     c0c:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     c10:	bc 01       	movw	r22, r24
     c12:	99 0f       	add	r25, r25
     c14:	88 0b       	sbc	r24, r24
     c16:	99 0b       	sbc	r25, r25
     c18:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     c1c:	a5 01       	movw	r20, r10
     c1e:	94 01       	movw	r18, r8
     c20:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
     c24:	c1 2c       	mov	r12, r1
     c26:	d1 2c       	mov	r13, r1
     c28:	76 01       	movw	r14, r12
     c2a:	a7 01       	movw	r20, r14
     c2c:	96 01       	movw	r18, r12
     c2e:	0e 94 be 19 	call	0x337c	; 0x337c <__gesf2>
     c32:	18 16       	cp	r1, r24
     c34:	7c f4       	brge	.+30     	; 0xc54 <IVo()+0xfc>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:851
    yin1 = (VCALYI/1000.0) * analogRead(YINPIN);
     c36:	89 e1       	ldi	r24, 0x19	; 25
     c38:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     c3c:	bc 01       	movw	r22, r24
     c3e:	99 0f       	add	r25, r25
     c40:	88 0b       	sbc	r24, r24
     c42:	99 0b       	sbc	r25, r25
     c44:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     c48:	a5 01       	movw	r20, r10
     c4a:	94 01       	movw	r18, r8
     c4c:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
     c50:	6b 01       	movw	r12, r22
     c52:	7c 01       	movw	r14, r24
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:853
    }
  yinvoltage = (int)yin1;
     c54:	c7 01       	movw	r24, r14
     c56:	b6 01       	movw	r22, r12
     c58:	0e 94 88 19 	call	0x3310	; 0x3310 <__fixsfsi>
     c5c:	70 93 31 02 	sts	0x0231, r23	; 0x800231 <yinvoltage+0x1>
     c60:	60 93 30 02 	sts	0x0230, r22	; 0x800230 <yinvoltage>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:854
  if(((VCALBI/1000.0) * analogRead(BINPIN)) > bin1){
     c64:	60 91 43 02 	lds	r22, 0x0243	; 0x800243 <VCALBI>
     c68:	70 91 44 02 	lds	r23, 0x0244	; 0x800244 <VCALBI+0x1>
     c6c:	07 2e       	mov	r0, r23
     c6e:	00 0c       	add	r0, r0
     c70:	88 0b       	sbc	r24, r24
     c72:	99 0b       	sbc	r25, r25
     c74:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	4a e7       	ldi	r20, 0x7A	; 122
     c7e:	54 e4       	ldi	r21, 0x44	; 68
     c80:	0e 94 16 19 	call	0x322c	; 0x322c <__divsf3>
     c84:	4b 01       	movw	r8, r22
     c86:	5c 01       	movw	r10, r24
     c88:	8a e1       	ldi	r24, 0x1A	; 26
     c8a:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     c8e:	bc 01       	movw	r22, r24
     c90:	99 0f       	add	r25, r25
     c92:	88 0b       	sbc	r24, r24
     c94:	99 0b       	sbc	r25, r25
     c96:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     c9a:	a5 01       	movw	r20, r10
     c9c:	94 01       	movw	r18, r8
     c9e:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
     ca2:	c1 2c       	mov	r12, r1
     ca4:	d1 2c       	mov	r13, r1
     ca6:	76 01       	movw	r14, r12
     ca8:	a7 01       	movw	r20, r14
     caa:	96 01       	movw	r18, r12
     cac:	0e 94 be 19 	call	0x337c	; 0x337c <__gesf2>
     cb0:	18 16       	cp	r1, r24
     cb2:	7c f4       	brge	.+30     	; 0xcd2 <IVo()+0x17a>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:855
    bin1 = (VCALBI/1000.0) * analogRead(BINPIN);
     cb4:	8a e1       	ldi	r24, 0x1A	; 26
     cb6:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     cba:	bc 01       	movw	r22, r24
     cbc:	99 0f       	add	r25, r25
     cbe:	88 0b       	sbc	r24, r24
     cc0:	99 0b       	sbc	r25, r25
     cc2:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
     cc6:	a5 01       	movw	r20, r10
     cc8:	94 01       	movw	r18, r8
     cca:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
     cce:	6b 01       	movw	r12, r22
     cd0:	7c 01       	movw	r14, r24
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:857
    }
  binvoltage = (int)bin1;
     cd2:	c7 01       	movw	r24, r14
     cd4:	b6 01       	movw	r22, r12
     cd6:	0e 94 88 19 	call	0x3310	; 0x3310 <__fixsfsi>
     cda:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <binvoltage+0x1>
     cde:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <binvoltage>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:859
  }
}
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	bf 90       	pop	r11
     cec:	af 90       	pop	r10
     cee:	9f 90       	pop	r9
     cf0:	8f 90       	pop	r8
     cf2:	08 95       	ret

00000cf4 <bdiffcheck()>:
_Z10bdiffcheckv():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:415
    return false;
  }
}

bool bdiffcheck() { //(returns true if difference is more than set difference and runs motor)
  int dif = SETV - boutvoltage;
     cf4:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <SETV>
     cf8:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <SETV+0x1>
     cfc:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <boutvoltage>
     d00:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <boutvoltage+0x1>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:419
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     d04:	28 1b       	sub	r18, r24
     d06:	39 0b       	sbc	r19, r25
     d08:	37 ff       	sbrs	r19, 7
     d0a:	03 c0       	rjmp	.+6      	; 0xd12 <bdiffcheck()+0x1e>
     d0c:	31 95       	neg	r19
     d0e:	21 95       	neg	r18
     d10:	31 09       	sbc	r19, r1
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	40 91 4d 02 	lds	r20, 0x024D	; 0x80024d <DIFF>
     d18:	50 91 4e 02 	lds	r21, 0x024E	; 0x80024e <DIFF+0x1>
     d1c:	42 17       	cp	r20, r18
     d1e:	53 07       	cpc	r21, r19
     d20:	0c f0       	brlt	.+2      	; 0xd24 <bdiffcheck()+0x30>
     d22:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:424
    return true;
  } else {
    return false;
  }
}
     d24:	08 95       	ret

00000d26 <ydiffcheck()>:
_Z10ydiffcheckv():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:403
    return false;
  }
}

bool ydiffcheck() { //(returns true if difference is more than set difference and runs motor)
  int dif = SETV - youtvoltage;
     d26:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <SETV>
     d2a:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <SETV+0x1>
     d2e:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <youtvoltage>
     d32:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <youtvoltage+0x1>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:407
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     d36:	28 1b       	sub	r18, r24
     d38:	39 0b       	sbc	r19, r25
     d3a:	37 ff       	sbrs	r19, 7
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <ydiffcheck()+0x1e>
     d3e:	31 95       	neg	r19
     d40:	21 95       	neg	r18
     d42:	31 09       	sbc	r19, r1
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	40 91 4d 02 	lds	r20, 0x024D	; 0x80024d <DIFF>
     d4a:	50 91 4e 02 	lds	r21, 0x024E	; 0x80024e <DIFF+0x1>
     d4e:	42 17       	cp	r20, r18
     d50:	53 07       	cpc	r21, r19
     d52:	0c f0       	brlt	.+2      	; 0xd56 <ydiffcheck()+0x30>
     d54:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:412
    return true;
  } else {
    return false;
  }
}
     d56:	08 95       	ret

00000d58 <rdiffcheck()>:
_Z10rdiffcheckv():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:391
}


//Check Voltage Difference from Set Voltage
bool rdiffcheck() { //(returns true if difference is more than set difference and runs motor)
  int dif = SETV - routvoltage;
     d58:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <SETV>
     d5c:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <SETV+0x1>
     d60:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <routvoltage>
     d64:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <routvoltage+0x1>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:395
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     d68:	28 1b       	sub	r18, r24
     d6a:	39 0b       	sbc	r19, r25
     d6c:	37 ff       	sbrs	r19, 7
     d6e:	03 c0       	rjmp	.+6      	; 0xd76 <rdiffcheck()+0x1e>
     d70:	31 95       	neg	r19
     d72:	21 95       	neg	r18
     d74:	31 09       	sbc	r19, r1
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	40 91 4d 02 	lds	r20, 0x024D	; 0x80024d <DIFF>
     d7c:	50 91 4e 02 	lds	r21, 0x024E	; 0x80024e <DIFF+0x1>
     d80:	42 17       	cp	r20, r18
     d82:	53 07       	cpc	r21, r19
     d84:	0c f0       	brlt	.+2      	; 0xd88 <rdiffcheck()+0x30>
     d86:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:400
    return true;
  } else {
    return false;
  }
}
     d88:	08 95       	ret

00000d8a <currentok()>:
_Z9currentokv():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:381
  }
}

//Check If Current Load is lower than max current Set by Parameters
bool currentok() {
  if(currentload < OVL){
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <currentload>
     d90:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <currentload+0x1>
     d94:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <OVL>
     d98:	30 91 54 02 	lds	r19, 0x0254	; 0x800254 <OVL+0x1>
     d9c:	42 17       	cp	r20, r18
     d9e:	53 07       	cpc	r21, r19
     da0:	0c f0       	brlt	.+2      	; 0xda4 <currentok()+0x1a>
     da2:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:386
    return true;
  } else {
    return false;
  }
}
     da4:	08 95       	ret

00000da6 <outputVok()>:
_Z9outputVokv():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:372
    return false;
  }
}
//Check If output voltage is within Low & High voltage Set by Parameters
bool outputVok() {
  if(routvoltage > OLV && routvoltage < OHV && youtvoltage > OLV && youtvoltage < OHV && boutvoltage > OLV && boutvoltage < OHV){
     da6:	40 91 40 03 	lds	r20, 0x0340	; 0x800340 <routvoltage>
     daa:	50 91 41 03 	lds	r21, 0x0341	; 0x800341 <routvoltage+0x1>
     dae:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <OLV>
     db2:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <OLV+0x1>
     db6:	84 17       	cp	r24, r20
     db8:	95 07       	cpc	r25, r21
     dba:	e4 f4       	brge	.+56     	; 0xdf4 <outputVok()+0x4e>
     dbc:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <OHV>
     dc0:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <OHV+0x1>
     dc4:	42 17       	cp	r20, r18
     dc6:	53 07       	cpc	r21, r19
     dc8:	ac f4       	brge	.+42     	; 0xdf4 <outputVok()+0x4e>
     dca:	40 91 3a 03 	lds	r20, 0x033A	; 0x80033a <youtvoltage>
     dce:	50 91 3b 03 	lds	r21, 0x033B	; 0x80033b <youtvoltage+0x1>
     dd2:	84 17       	cp	r24, r20
     dd4:	95 07       	cpc	r25, r21
     dd6:	74 f4       	brge	.+28     	; 0xdf4 <outputVok()+0x4e>
     dd8:	42 17       	cp	r20, r18
     dda:	53 07       	cpc	r21, r19
     ddc:	5c f4       	brge	.+22     	; 0xdf4 <outputVok()+0x4e>
     dde:	40 91 36 03 	lds	r20, 0x0336	; 0x800336 <boutvoltage>
     de2:	50 91 37 03 	lds	r21, 0x0337	; 0x800337 <boutvoltage+0x1>
     de6:	84 17       	cp	r24, r20
     de8:	95 07       	cpc	r25, r21
     dea:	24 f4       	brge	.+8      	; 0xdf4 <outputVok()+0x4e>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	42 17       	cp	r20, r18
     df0:	53 07       	cpc	r21, r19
     df2:	0c f0       	brlt	.+2      	; 0xdf6 <outputVok()+0x50>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:375
    return true;
  } else {
    return false;
     df4:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:377
  }
}
     df6:	08 95       	ret

00000df8 <inputVok()>:
_Z8inputVokv():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:364
}


//Check If input voltage is within Low & High voltage Set by Parameters
bool inputVok() {
  if(rinvoltage > ILV && rinvoltage < IHV && yinvoltage > ILV && yinvoltage < IHV && binvoltage > ILV && binvoltage < IHV){
     df8:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <rinvoltage>
     dfc:	50 91 33 02 	lds	r21, 0x0233	; 0x800233 <rinvoltage+0x1>
     e00:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <ILV>
     e04:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <ILV+0x1>
     e08:	84 17       	cp	r24, r20
     e0a:	95 07       	cpc	r25, r21
     e0c:	e4 f4       	brge	.+56     	; 0xe46 <inputVok()+0x4e>
     e0e:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <IHV>
     e12:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <IHV+0x1>
     e16:	42 17       	cp	r20, r18
     e18:	53 07       	cpc	r21, r19
     e1a:	ac f4       	brge	.+42     	; 0xe46 <inputVok()+0x4e>
     e1c:	40 91 30 02 	lds	r20, 0x0230	; 0x800230 <yinvoltage>
     e20:	50 91 31 02 	lds	r21, 0x0231	; 0x800231 <yinvoltage+0x1>
     e24:	84 17       	cp	r24, r20
     e26:	95 07       	cpc	r25, r21
     e28:	74 f4       	brge	.+28     	; 0xe46 <inputVok()+0x4e>
     e2a:	42 17       	cp	r20, r18
     e2c:	53 07       	cpc	r21, r19
     e2e:	5c f4       	brge	.+22     	; 0xe46 <inputVok()+0x4e>
     e30:	40 91 2e 02 	lds	r20, 0x022E	; 0x80022e <binvoltage>
     e34:	50 91 2f 02 	lds	r21, 0x022F	; 0x80022f <binvoltage+0x1>
     e38:	84 17       	cp	r24, r20
     e3a:	95 07       	cpc	r25, r21
     e3c:	24 f4       	brge	.+8      	; 0xe46 <inputVok()+0x4e>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	42 17       	cp	r20, r18
     e42:	53 07       	cpc	r21, r19
     e44:	0c f0       	brlt	.+2      	; 0xe48 <inputVok()+0x50>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:367
    return true;
  } else {
    return false;
     e46:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:369
  }
}
     e48:	08 95       	ret

00000e4a <checksystem()>:
_Z11checksystemv():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:530
}

//Check if Input,Output Voltage and current is within the set range

bool checksystem() {
  if(inputVok()) {
     e4a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <inputVok()>
     e4e:	88 23       	and	r24, r24
     e50:	29 f0       	breq	.+10     	; 0xe5c <checksystem()+0x12>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:531
    if(outputVok()) {
     e52:	0e 94 d3 06 	call	0xda6	; 0xda6 <outputVok()>
     e56:	81 11       	cpse	r24, r1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:532
      if(currentok()){
     e58:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <currentok()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:537
            return true;
      } else { return false; }
    } else { return false; }
  } else { return false; }
}
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	08 95       	ret

00000e60 <pulseIn.constprop.13>:
pulseIn.constprop.13():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.c:33
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	48 2f       	mov	r20, r24
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.c:38
{
  // cache the port and bit of the pin in order to speed up the
  // pulse width measuring loop and achieve finer resolution.  calling
  // digitalRead() instead yields much coarser resolution.
  uint8_t bit = digitalPinToBitMask(pin);
     e66:	e9 e8       	ldi	r30, 0x89	; 137
     e68:	f1 e0       	ldi	r31, 0x01	; 1
     e6a:	64 91       	lpm	r22, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.c:39
  uint8_t port = digitalPinToPort(pin);
     e6c:	e9 e6       	ldi	r30, 0x69	; 105
     e6e:	f1 e0       	ldi	r31, 0x01	; 1
     e70:	e4 91       	lpm	r30, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.c:40
  uint8_t stateMask = (state ? bit : 0);
     e72:	81 11       	cpse	r24, r1
     e74:	46 2f       	mov	r20, r22
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.c:46

  // convert the timeout from microseconds to a number of times through
  // the initial loop; it takes approximately 16 clock cycles per iteration
  unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

  unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	ee 0f       	add	r30, r30
     e7a:	ff 1f       	adc	r31, r31
     e7c:	e0 5c       	subi	r30, 0xC0	; 192
     e7e:	fe 4f       	sbci	r31, 0xFE	; 254
     e80:	85 91       	lpm	r24, Z+
     e82:	94 91       	lpm	r25, Z
     e84:	00 e2       	ldi	r16, 0x20	; 32
     e86:	11 ea       	ldi	r17, 0xA1	; 161
     e88:	27 e0       	ldi	r18, 0x07	; 7
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	0e 94 41 0c 	call	0x1882	; 0x1882 <countPulseASM>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.c:49

  // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
  if (width)
     e90:	61 15       	cp	r22, r1
     e92:	71 05       	cpc	r23, r1
     e94:	81 05       	cpc	r24, r1
     e96:	91 05       	cpc	r25, r1
     e98:	91 f0       	breq	.+36     	; 0xebe <pulseIn.constprop.13+0x5e>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.c:50
    return clockCyclesToMicroseconds(width * 16 + 16);
     e9a:	6f 5f       	subi	r22, 0xFF	; 255
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	24 e0       	ldi	r18, 0x04	; 4
     ea4:	66 0f       	add	r22, r22
     ea6:	77 1f       	adc	r23, r23
     ea8:	88 1f       	adc	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	2a 95       	dec	r18
     eae:	d1 f7       	brne	.-12     	; 0xea4 <pulseIn.constprop.13+0x44>
     eb0:	33 e0       	ldi	r19, 0x03	; 3
     eb2:	96 95       	lsr	r25
     eb4:	87 95       	ror	r24
     eb6:	77 95       	ror	r23
     eb8:	67 95       	ror	r22
     eba:	3a 95       	dec	r19
     ebc:	d1 f7       	brne	.-12     	; 0xeb2 <pulseIn.constprop.13+0x52>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.c:53
  else
    return 0;
}
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	08 95       	ret

00000ec4 <displayVar(int, int) [clone .constprop.11]>:
_Z10displayVarii.constprop.11():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1469

void done() {display("donE", 0);}

//Display INT Variable

void displayVar(int var, int deci) {
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	00 d0       	rcall	.+0      	; 0xece <displayVar(int, int) [clone .constprop.11]+0xa>
     ece:	00 d0       	rcall	.+0      	; 0xed0 <displayVar(int, int) [clone .constprop.11]+0xc>
     ed0:	1f 92       	push	r1
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1471
  char buffer[5];
  sprintf(buffer, "%4d", var);
     ed6:	9f 93       	push	r25
     ed8:	8f 93       	push	r24
     eda:	84 e1       	ldi	r24, 0x14	; 20
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	9f 93       	push	r25
     ee0:	8f 93       	push	r24
     ee2:	8e 01       	movw	r16, r28
     ee4:	0f 5f       	subi	r16, 0xFF	; 255
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	1f 93       	push	r17
     eea:	0f 93       	push	r16
     eec:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <sprintf>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1472
  display1.DisplayString(buffer, deci);
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	c8 01       	movw	r24, r16
     ef4:	0e 94 a6 01 	call	0x34c	; 0x34c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]>
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1473
}
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	08 95       	ret

00000f18 <voltCalibBI() [clone .part.19]>:
_Z7menuIHVv.part.6():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:904

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
     f18:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
     f1c:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
     f20:	0c 94 62 07 	jmp	0xec4	; 0xec4 <displayVar(int, int) [clone .constprop.11]>

00000f24 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:146
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
     f2e:	88 81       	ld	r24, Y
     f30:	99 81       	ldd	r25, Y+1	; 0x01
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	59 f0       	breq	.+22     	; 0xf4c <String::reserve(unsigned int)+0x28>
     f36:	2a 81       	ldd	r18, Y+2	; 0x02
     f38:	3b 81       	ldd	r19, Y+3	; 0x03
     f3a:	26 17       	cp	r18, r22
     f3c:	37 07       	cpc	r19, r23
     f3e:	30 f0       	brcs	.+12     	; 0xf4c <String::reserve(unsigned int)+0x28>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     f40:	81 e0       	ldi	r24, 0x01	; 1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	08 95       	ret
     f4c:	8b 01       	movw	r16, r22
changeBuffer():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     f4e:	6f 5f       	subi	r22, 0xFF	; 255
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <realloc>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	59 f0       	breq	.+22     	; 0xf70 <String::reserve(unsigned int)+0x4c>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
     f5a:	99 83       	std	Y+1, r25	; 0x01
     f5c:	88 83       	st	Y, r24
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
     f5e:	1b 83       	std	Y+3, r17	; 0x03
     f60:	0a 83       	std	Y+2, r16	; 0x02
_ZN6String7reserveEj():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     f62:	2c 81       	ldd	r18, Y+4	; 0x04
     f64:	3d 81       	ldd	r19, Y+5	; 0x05
     f66:	23 2b       	or	r18, r19
     f68:	59 f7       	brne	.-42     	; 0xf40 <String::reserve(unsigned int)+0x1c>
     f6a:	fc 01       	movw	r30, r24
     f6c:	10 82       	st	Z, r1
     f6e:	e8 cf       	rjmp	.-48     	; 0xf40 <String::reserve(unsigned int)+0x1c>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:152
    return 1;
  }
  return 0;
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	e7 cf       	rjmp	.-50     	; 0xf42 <String::reserve(unsigned int)+0x1e>

00000f74 <String::invalidate()>:
_ZN6String10invalidateEv():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
     f7a:	88 81       	ld	r24, Y
     f7c:	99 81       	ldd	r25, Y+1	; 0x01
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	11 f0       	breq	.+4      	; 0xf86 <String::invalidate()+0x12>
     f82:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <free>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
     f86:	19 82       	std	Y+1, r1	; 0x01
     f88:	18 82       	st	Y, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
     f8a:	1d 82       	std	Y+5, r1	; 0x05
     f8c:	1c 82       	std	Y+4, r1	; 0x04
     f8e:	1b 82       	std	Y+3, r1	; 0x03
     f90:	1a 82       	std	Y+2, r1	; 0x02
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:143
}
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:354
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:356
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     fa6:	fb 01       	movw	r30, r22
     fa8:	e0 80       	ld	r14, Z
     faa:	f1 80       	ldd	r15, Z+1	; 0x01
concat():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
     fac:	e1 14       	cp	r14, r1
     fae:	f1 04       	cpc	r15, r1
     fb0:	11 f1       	breq	.+68     	; 0xff6 <operator+(StringSumHelper const&, String const&)+0x5e>
_ZplRK15StringSumHelperRK6String():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     fb2:	04 81       	ldd	r16, Z+4	; 0x04
     fb4:	15 81       	ldd	r17, Z+5	; 0x05
concat():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
     fb6:	01 15       	cp	r16, r1
     fb8:	11 05       	cpc	r17, r1
     fba:	a9 f0       	breq	.+42     	; 0xfe6 <operator+(StringSumHelper const&, String const&)+0x4e>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	9d 81       	ldd	r25, Y+5	; 0x05
     fc0:	08 0f       	add	r16, r24
     fc2:	19 1f       	adc	r17, r25
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
     fc4:	b8 01       	movw	r22, r16
     fc6:	ce 01       	movw	r24, r28
     fc8:	0e 94 92 07 	call	0xf24	; 0xf24 <String::reserve(unsigned int)>
     fcc:	88 23       	and	r24, r24
     fce:	99 f0       	breq	.+38     	; 0xff6 <operator+(StringSumHelper const&, String const&)+0x5e>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:269
  strcpy(buffer + len, cstr);
     fd0:	28 81       	ld	r18, Y
     fd2:	39 81       	ldd	r19, Y+1	; 0x01
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	9d 81       	ldd	r25, Y+5	; 0x05
     fd8:	b7 01       	movw	r22, r14
     fda:	82 0f       	add	r24, r18
     fdc:	93 1f       	adc	r25, r19
     fde:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <strcpy>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:270
  len = newlen;
     fe2:	1d 83       	std	Y+5, r17	; 0x05
     fe4:	0c 83       	std	Y+4, r16	; 0x04
_ZplRK15StringSumHelperRK6String():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:358
StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
  return a;
}
     fe6:	ce 01       	movw	r24, r28
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	08 95       	ret
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     ff6:	ce 01       	movw	r24, r28
     ff8:	0e 94 ba 07 	call	0xf74	; 0xf74 <String::invalidate()>
     ffc:	f4 cf       	rjmp	.-24     	; 0xfe6 <operator+(StringSumHelper const&, String const&)+0x4e>

00000ffe <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     ffe:	ef 92       	push	r14
    1000:	ff 92       	push	r15
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	ec 01       	movw	r28, r24
    100c:	7b 01       	movw	r14, r22
    100e:	8a 01       	movw	r16, r20
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:172
  if (!reserve(length)) {
    1010:	ba 01       	movw	r22, r20
    1012:	0e 94 92 07 	call	0xf24	; 0xf24 <String::reserve(unsigned int)>
    1016:	81 11       	cpse	r24, r1
    1018:	0b c0       	rjmp	.+22     	; 0x1030 <String::copy(char const*, unsigned int)+0x32>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
    101a:	ce 01       	movw	r24, r28
    101c:	0e 94 ba 07 	call	0xf74	; 0xf74 <String::invalidate()>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:179
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
    1020:	ce 01       	movw	r24, r28
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	08 95       	ret
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    1030:	1d 83       	std	Y+5, r17	; 0x05
    1032:	0c 83       	std	Y+4, r16	; 0x04
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    1034:	b7 01       	movw	r22, r14
    1036:	88 81       	ld	r24, Y
    1038:	99 81       	ldd	r25, Y+1	; 0x01
    103a:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <strcpy>
    103e:	f0 cf       	rjmp	.-32     	; 0x1020 <String::copy(char const*, unsigned int)+0x22>

00001040 <String::String(int, unsigned char) [clone .constprop.6]>:
_ZN6StringC2Eih.constprop.6():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:76
  char buf[1 + 8 * sizeof(unsigned char)];
  utoa(value, buf, base);
  *this = buf;
}

String::String(int value, unsigned char base)
    1040:	ef 92       	push	r14
    1042:	ff 92       	push	r15
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	62 97       	sbiw	r28, 0x12	; 18
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	8c 01       	movw	r16, r24
    105e:	cb 01       	movw	r24, r22
_ZN6String4initEv():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    1060:	f8 01       	movw	r30, r16
    1062:	11 82       	std	Z+1, r1	; 0x01
    1064:	10 82       	st	Z, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    1066:	13 82       	std	Z+3, r1	; 0x03
    1068:	12 82       	std	Z+2, r1	; 0x02
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    106a:	15 82       	std	Z+5, r1	; 0x05
    106c:	14 82       	std	Z+4, r1	; 0x04
itoa():
c:\program files (x86)\arduino\hardware\tools\avr\avr\include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    106e:	4a e0       	ldi	r20, 0x0A	; 10
    1070:	9e 01       	movw	r18, r28
    1072:	2f 5f       	subi	r18, 0xFF	; 255
    1074:	3f 4f       	sbci	r19, 0xFF	; 255
    1076:	79 01       	movw	r14, r18
    1078:	b9 01       	movw	r22, r18
    107a:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__itoa_ncheck>
operator=():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    107e:	f7 01       	movw	r30, r14
    1080:	01 90       	ld	r0, Z+
    1082:	00 20       	and	r0, r0
    1084:	e9 f7       	brne	.-6      	; 0x1080 <String::String(int, unsigned char) [clone .constprop.6]+0x40>
    1086:	31 97       	sbiw	r30, 0x01	; 1
    1088:	af 01       	movw	r20, r30
    108a:	4e 19       	sub	r20, r14
    108c:	5f 09       	sbc	r21, r15
    108e:	b7 01       	movw	r22, r14
    1090:	c8 01       	movw	r24, r16
    1092:	0e 94 ff 07 	call	0xffe	; 0xffe <String::copy(char const*, unsigned int)>
_ZN6StringC2Eih.constprop.6():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:82
{
  init();
  char buf[2 + 8 * sizeof(int)];
  itoa(value, buf, base);
  *this = buf;
}
    1096:	62 96       	adiw	r28, 0x12	; 18
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	08 95       	ret

000010b0 <String::operator=(String const&)>:
_ZN6StringaSERKS_():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:215
  rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	ec 01       	movw	r28, r24
    10b6:	fb 01       	movw	r30, r22
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:216
  if (this == &rhs) return *this;
    10b8:	86 17       	cp	r24, r22
    10ba:	97 07       	cpc	r25, r23
    10bc:	49 f0       	breq	.+18     	; 0x10d0 <String::operator=(String const&)+0x20>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:218
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
    10be:	60 81       	ld	r22, Z
    10c0:	71 81       	ldd	r23, Z+1	; 0x01
    10c2:	61 15       	cp	r22, r1
    10c4:	71 05       	cpc	r23, r1
    10c6:	41 f0       	breq	.+16     	; 0x10d8 <String::operator=(String const&)+0x28>
    10c8:	44 81       	ldd	r20, Z+4	; 0x04
    10ca:	55 81       	ldd	r21, Z+5	; 0x05
    10cc:	0e 94 ff 07 	call	0xffe	; 0xffe <String::copy(char const*, unsigned int)>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:222
  else invalidate();
  
  return *this;
}
    10d0:	ce 01       	movw	r24, r28
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:219
String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
  else invalidate();
    10d8:	0e 94 ba 07 	call	0xf74	; 0xf74 <String::invalidate()>
    10dc:	f9 cf       	rjmp	.-14     	; 0x10d0 <String::operator=(String const&)+0x20>

000010de <String::String(String const&)>:
_ZN6String4initEv():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    10de:	fc 01       	movw	r30, r24
    10e0:	11 82       	std	Z+1, r1	; 0x01
    10e2:	10 82       	st	Z, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    10e4:	13 82       	std	Z+3, r1	; 0x03
    10e6:	12 82       	std	Z+2, r1	; 0x02
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    10e8:	15 82       	std	Z+5, r1	; 0x05
    10ea:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2ERKS_():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:37
}

String::String(const String &value)
{
  init();
  *this = value;
    10ec:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <String::operator=(String const&)>

000010f0 <String::String(char const*)>:
_ZN6String4initEv():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    10f0:	fc 01       	movw	r30, r24
    10f2:	11 82       	std	Z+1, r1	; 0x01
    10f4:	10 82       	st	Z, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    10f6:	13 82       	std	Z+3, r1	; 0x03
    10f8:	12 82       	std	Z+2, r1	; 0x02
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    10fa:	15 82       	std	Z+5, r1	; 0x05
    10fc:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    10fe:	fb 01       	movw	r30, r22
    1100:	01 90       	ld	r0, Z+
    1102:	00 20       	and	r0, r0
    1104:	e9 f7       	brne	.-6      	; 0x1100 <String::String(char const*)+0x10>
    1106:	31 97       	sbiw	r30, 0x01	; 1
    1108:	af 01       	movw	r20, r30
    110a:	46 1b       	sub	r20, r22
    110c:	57 0b       	sbc	r21, r23
    110e:	0c 94 ff 07 	jmp	0xffe	; 0xffe <String::copy(char const*, unsigned int)>

00001112 <String::~String()>:
_ZN6StringD2Ev():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    1112:	fc 01       	movw	r30, r24
    1114:	80 81       	ld	r24, Z
    1116:	91 81       	ldd	r25, Z+1	; 0x01
    1118:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <free>

0000111c <display(String, int) [clone .constprop.7]>:
_Z7display6Stringi.constprop.7():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1577
  }
}

//Display String Variable

void display(String str, int deci) {
    111c:	af 92       	push	r10
    111e:	bf 92       	push	r11
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	28 97       	sbiw	r28, 0x08	; 8
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	7c 01       	movw	r14, r24
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1588

  int str_len = str.length() + 1;
  char data[str_len];
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
}
    1142:	cd b6       	in	r12, 0x3d	; 61
    1144:	de b6       	in	r13, 0x3e	; 62
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1579

//Display String Variable

void display(String str, int deci) {
  int strl = str.length();
  if(strl < 4) {
    1146:	fc 01       	movw	r30, r24
    1148:	84 81       	ldd	r24, Z+4	; 0x04
    114a:	95 81       	ldd	r25, Z+5	; 0x05
    114c:	04 97       	sbiw	r24, 0x04	; 4
    114e:	2c f5       	brge	.+74     	; 0x119a <display(String, int) [clone .constprop.7]+0x7e>
_ZN6String4initEv():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    1150:	1a 82       	std	Y+2, r1	; 0x02
    1152:	19 82       	std	Y+1, r1	; 0x01
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    1154:	1c 82       	std	Y+4, r1	; 0x04
    1156:	1b 82       	std	Y+3, r1	; 0x03
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
    1158:	1e 82       	std	Y+6, r1	; 0x06
    115a:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:63

String::String(char c)
{
  init();
  char buf[2];
  buf[0] = c;
    115c:	80 e1       	ldi	r24, 0x10	; 16
    115e:	8f 83       	std	Y+7, r24	; 0x07
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:64
  buf[1] = 0;
    1160:	18 86       	std	Y+8, r1	; 0x08
operator=():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    1162:	be 01       	movw	r22, r28
    1164:	69 5f       	subi	r22, 0xF9	; 249
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	fb 01       	movw	r30, r22
    116a:	01 90       	ld	r0, Z+
    116c:	00 20       	and	r0, r0
    116e:	e9 f7       	brne	.-6      	; 0x116a <display(String, int) [clone .constprop.7]+0x4e>
    1170:	31 97       	sbiw	r30, 0x01	; 1
    1172:	af 01       	movw	r20, r30
    1174:	46 1b       	sub	r20, r22
    1176:	57 0b       	sbc	r21, r23
    1178:	ce 01       	movw	r24, r28
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	0e 94 ff 07 	call	0xffe	; 0xffe <String::copy(char const*, unsigned int)>
_Z7display6Stringi.constprop.7():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1581
    //char16 = no display on screen
    str = char(16) + str;
    1180:	b7 01       	movw	r22, r14
    1182:	ce 01       	movw	r24, r28
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	0e 94 cc 07 	call	0xf98	; 0xf98 <operator+(StringSumHelper const&, String const&)>
    118a:	bc 01       	movw	r22, r24
    118c:	c7 01       	movw	r24, r14
    118e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <String::operator=(String const&)>
_ZN15StringSumHelperD2Ev():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
    1192:	ce 01       	movw	r24, r28
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
    119a:	f7 01       	movw	r30, r14
    119c:	04 81       	ldd	r16, Z+4	; 0x04
    119e:	15 81       	ldd	r17, Z+5	; 0x05
_Z7display6Stringi.constprop.7():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1584
  }

  int str_len = str.length() + 1;
    11a0:	c8 01       	movw	r24, r16
    11a2:	01 96       	adiw	r24, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1585
  char data[str_len];
    11a4:	2d b7       	in	r18, 0x3d	; 61
    11a6:	3e b7       	in	r19, 0x3e	; 62
    11a8:	28 1b       	sub	r18, r24
    11aa:	39 0b       	sbc	r19, r25
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	3e bf       	out	0x3e, r19	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	2d bf       	out	0x3d, r18	; 61
    11b6:	ed b7       	in	r30, 0x3d	; 61
    11b8:	fe b7       	in	r31, 0x3e	; 62
    11ba:	31 96       	adiw	r30, 0x01	; 1
    11bc:	5f 01       	movw	r10, r30
getBytes():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:539
  return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
  if (!bufsize || !buf) return;
    11be:	89 2b       	or	r24, r25
    11c0:	21 f0       	breq	.+8      	; 0x11ca <display(String, int) [clone .constprop.7]+0xae>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:540
  if (index >= len) {
    11c2:	01 15       	cp	r16, r1
    11c4:	11 05       	cpc	r17, r1
    11c6:	d9 f4       	brne	.+54     	; 0x11fe <display(String, int) [clone .constprop.7]+0xe2>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:547
    return;
  }
  unsigned int n = bufsize - 1;
  if (n > len - index) n = len - index;
  strncpy((char *)buf, buffer + index, n);
  buf[n] = 0;
    11c8:	10 82       	st	Z, r1
_Z7display6Stringi.constprop.7():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1587
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	c5 01       	movw	r24, r10
    11ce:	0e 94 a6 01 	call	0x34c	; 0x34c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1588
}
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de be       	out	0x3e, r13	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd be       	out	0x3d, r12	; 61
    11dc:	28 96       	adiw	r28, 0x08	; 8
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	bf 90       	pop	r11
    11fa:	af 90       	pop	r10
    11fc:	08 95       	ret
getBytes():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:546
    buf[0] = 0;
    return;
  }
  unsigned int n = bufsize - 1;
  if (n > len - index) n = len - index;
  strncpy((char *)buf, buffer + index, n);
    11fe:	f7 01       	movw	r30, r14
    1200:	60 81       	ld	r22, Z
    1202:	71 81       	ldd	r23, Z+1	; 0x01
    1204:	a8 01       	movw	r20, r16
    1206:	c5 01       	movw	r24, r10
    1208:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <strncpy>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.cpp:547
  buf[n] = 0;
    120c:	f5 01       	movw	r30, r10
    120e:	e0 0f       	add	r30, r16
    1210:	f1 1f       	adc	r31, r17
    1212:	da cf       	rjmp	.-76     	; 0x11c8 <display(String, int) [clone .constprop.7]+0xac>

00001214 <updateScreenData(bool) [clone .part.5]>:
_Z16updateScreenDatab.part.5():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:608
    return false;
  }
}


void updateScreenData(bool status) {
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	00 d0       	rcall	.+0      	; 0x1220 <updateScreenData(bool) [clone .part.5]+0xc>
    1220:	00 d0       	rcall	.+0      	; 0x1222 <updateScreenData(bool) [clone .part.5]+0xe>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <updateScreenData(bool) [clone .part.5]+0x10>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	f8 2e       	mov	r15, r24
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:611
  //uncomment !mode and comment !read(setupPin) if setupPin is not being used
  if(!mode/*!read(setupPin)*/){
    if(!resetrefresh){
    122a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <resetrefresh>
    122e:	81 11       	cpse	r24, r1
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <updateScreenData(bool) [clone .part.5]+0x2c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:612
      refresh.reset();
    1232:	86 ec       	ldi	r24, 0xC6	; 198
    1234:	92 e0       	ldi	r25, 0x02	; 2
    1236:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.17]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:613
      resetrefresh = true;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <resetrefresh>
    1240:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <alarmOnce>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:615
    }
    if(!status && !alarmOnce){
    1244:	f1 10       	cpse	r15, r1
    1246:	03 c2       	rjmp	.+1030   	; 0x164e <updateScreenData(bool) [clone .part.5]+0x43a>
    1248:	81 11       	cpse	r24, r1
    124a:	03 c0       	rjmp	.+6      	; 0x1252 <updateScreenData(bool) [clone .part.5]+0x3e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:616
      alarmOnce = true;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <alarmOnce>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:623
    }
    if(status && alarmOnce){
      alarmOnce = false;
      menu == 0;
    }
    if(refresh.triggered()){
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	86 ec       	ldi	r24, 0xC6	; 198
    1256:	92 e0       	ldi	r25, 0x02	; 2
    1258:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
    125c:	88 23       	and	r24, r24
    125e:	01 f1       	breq	.+64     	; 0x12a0 <updateScreenData(bool) [clone .part.5]+0x8c>
    1260:	00 91 81 02 	lds	r16, 0x0281	; 0x800281 <menu>
    1264:	10 91 82 02 	lds	r17, 0x0282	; 0x800282 <menu+0x1>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:625

      OVo();
    1268:	0e 94 de 04 	call	0x9bc	; 0x9bc <OVo()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:626
      IVo();
    126c:	0e 94 ac 05 	call	0xb58	; 0xb58 <IVo()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:627
      ampo();
    1270:	0e 94 8e 04 	call	0x91c	; 0x91c <ampo()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:630


      switch (menu)
    1274:	02 30       	cpi	r16, 0x02	; 2
    1276:	11 05       	cpc	r17, r1
    1278:	09 f4       	brne	.+2      	; 0x127c <updateScreenData(bool) [clone .part.5]+0x68>
    127a:	79 c0       	rjmp	.+242    	; 0x136e <updateScreenData(bool) [clone .part.5]+0x15a>
    127c:	0c f0       	brlt	.+2      	; 0x1280 <updateScreenData(bool) [clone .part.5]+0x6c>
    127e:	40 c0       	rjmp	.+128    	; 0x1300 <updateScreenData(bool) [clone .part.5]+0xec>
    1280:	01 2b       	or	r16, r17
    1282:	09 f4       	brne	.+2      	; 0x1286 <updateScreenData(bool) [clone .part.5]+0x72>
    1284:	71 c0       	rjmp	.+226    	; 0x1368 <updateScreenData(bool) [clone .part.5]+0x154>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:647
          ampo();
          break;
        default:
          break;
      }
      if(!tmrstp){
    1286:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <tmrstp>
    128a:	81 11       	cpse	r24, r1
    128c:	09 c0       	rjmp	.+18     	; 0x12a0 <updateScreenData(bool) [clone .part.5]+0x8c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:648
        menu++;
    128e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <menu>
    1292:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <menu+0x1>
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <menu+0x1>
    129c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <menu>
    12a0:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <menu>
    12a4:	f0 91 82 02 	lds	r31, 0x0282	; 0x800282 <menu+0x1>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:654
      }
    }

    //Show Error if Available
    
    if(!status && menu == -1){
    12a8:	ff 20       	and	r15, r15
    12aa:	09 f4       	brne	.+2      	; 0x12ae <updateScreenData(bool) [clone .part.5]+0x9a>
    12ac:	66 c0       	rjmp	.+204    	; 0x137a <updateScreenData(bool) [clone .part.5]+0x166>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:680
          display("ALOL", 0);
        }
      }
    }

    switch (menu)
    12ae:	32 96       	adiw	r30, 0x02	; 2
    12b0:	e0 32       	cpi	r30, 0x20	; 32
    12b2:	f1 05       	cpc	r31, r1
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <updateScreenData(bool) [clone .part.5]+0xa4>
    12b6:	09 c1       	rjmp	.+530    	; 0x14ca <updateScreenData(bool) [clone .part.5]+0x2b6>
    12b8:	e0 5a       	subi	r30, 0xA0	; 160
    12ba:	f6 4f       	sbci	r31, 0xF6	; 246
    12bc:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__tablejump2__>
    12c0:	24 0b       	sbc	r18, r20
    12c2:	21 0b       	sbc	r18, r17
    12c4:	71 0a       	sbc	r7, r17
    12c6:	74 0a       	sbc	r7, r20
    12c8:	77 0a       	sbc	r7, r23
    12ca:	7e 0a       	sbc	r7, r30
    12cc:	81 0a       	sbc	r8, r17
    12ce:	86 0a       	sbc	r8, r22
    12d0:	89 0a       	sbc	r8, r25
    12d2:	8e 0a       	sbc	r8, r30
    12d4:	91 0a       	sbc	r9, r17
    12d6:	96 0a       	sbc	r9, r22
    12d8:	99 0a       	sbc	r9, r25
    12da:	9e 0a       	sbc	r9, r30
    12dc:	a1 0a       	sbc	r10, r17
    12de:	a6 0a       	sbc	r10, r22
    12e0:	a9 0a       	sbc	r10, r25
    12e2:	c3 0a       	sbc	r12, r19
    12e4:	c6 0a       	sbc	r12, r22
    12e6:	cf 0a       	sbc	r12, r31
    12e8:	d2 0a       	sbc	r13, r18
    12ea:	db 0a       	sbc	r13, r27
    12ec:	de 0a       	sbc	r13, r30
    12ee:	e7 0a       	sbc	r14, r23
    12f0:	ea 0a       	sbc	r14, r26
    12f2:	f3 0a       	sbc	r15, r19
    12f4:	f6 0a       	sbc	r15, r22
    12f6:	ff 0a       	sbc	r15, r31
    12f8:	02 0b       	sbc	r16, r18
    12fa:	07 0b       	sbc	r16, r23
    12fc:	0a 0b       	sbc	r16, r26
    12fe:	13 0b       	sbc	r17, r19
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:630
      OVo();
      IVo();
      ampo();


      switch (menu)
    1300:	04 30       	cpi	r16, 0x04	; 4
    1302:	11 05       	cpc	r17, r1
    1304:	b9 f1       	breq	.+110    	; 0x1374 <updateScreenData(bool) [clone .part.5]+0x160>
    1306:	0c 31       	cpi	r16, 0x1C	; 28
    1308:	11 05       	cpc	r17, r1
    130a:	09 f0       	breq	.+2      	; 0x130e <updateScreenData(bool) [clone .part.5]+0xfa>
    130c:	bc cf       	rjmp	.-136    	; 0x1286 <updateScreenData(bool) [clone .part.5]+0x72>
checkhz():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:354
//Checks the wavelenght of the Sine wave to calculate the frequency
//ontime is the time that sinewave stays Positive or above the 0v Threshold
//offtime is the time that sinewave stays negative or below the 0v Threshold
void checkhz() {
  //calculates the pulse width in milliseconds //timesout after 60ms to avoid blocking other code if no input is detected!
  ontime = pulseIn(hz, HIGH);
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	0e 94 30 07 	call	0xe60	; 0xe60 <pulseIn.constprop.13>
    1314:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <__data_end>
    1318:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <__data_end+0x1>
    131c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end+0x2>
    1320:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <__data_end+0x3>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:355
  offtime = pulseIn(hz, LOW);
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	0e 94 30 07 	call	0xe60	; 0xe60 <pulseIn.constprop.13>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:357
  //Calculates the Frequency by dividing the ontime and offtime with 1 sec time (or 1000000 ms)
  freq = 1000000.0 / (ontime + offtime);//(ontime + offtime);
    132a:	00 91 24 02 	lds	r16, 0x0224	; 0x800224 <__data_end>
    132e:	10 91 25 02 	lds	r17, 0x0225	; 0x800225 <__data_end+0x1>
    1332:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <__data_end+0x2>
    1336:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <__data_end+0x3>
    133a:	60 0f       	add	r22, r16
    133c:	71 1f       	adc	r23, r17
    133e:	82 1f       	adc	r24, r18
    1340:	93 1f       	adc	r25, r19
    1342:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
    1346:	9b 01       	movw	r18, r22
    1348:	ac 01       	movw	r20, r24
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	74 e2       	ldi	r23, 0x24	; 36
    134e:	84 e7       	ldi	r24, 0x74	; 116
    1350:	99 e4       	ldi	r25, 0x49	; 73
    1352:	0e 94 16 19 	call	0x322c	; 0x322c <__divsf3>
    1356:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <freq>
    135a:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <freq+0x1>
    135e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <freq+0x2>
    1362:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <freq+0x3>
    1366:	8f cf       	rjmp	.-226    	; 0x1286 <updateScreenData(bool) [clone .part.5]+0x72>
_Z16updateScreenDatab.part.5():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:636
      {
        case 28:
          checkhz();
          break;
        case 0:
          IVo();
    1368:	0e 94 ac 05 	call	0xb58	; 0xb58 <IVo()>
    136c:	8c cf       	rjmp	.-232    	; 0x1286 <updateScreenData(bool) [clone .part.5]+0x72>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:639
          break;
        case 2:
          OVo();
    136e:	0e 94 de 04 	call	0x9bc	; 0x9bc <OVo()>
    1372:	89 cf       	rjmp	.-238    	; 0x1286 <updateScreenData(bool) [clone .part.5]+0x72>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:642
          break;
        case 4:
          ampo();
    1374:	0e 94 8e 04 	call	0x91c	; 0x91c <ampo()>
    1378:	86 cf       	rjmp	.-244    	; 0x1286 <updateScreenData(bool) [clone .part.5]+0x72>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:654
      }
    }

    //Show Error if Available
    
    if(!status && menu == -1){
    137a:	ef 3f       	cpi	r30, 0xFF	; 255
    137c:	fe 07       	cpc	r31, r30
    137e:	09 f0       	breq	.+2      	; 0x1382 <updateScreenData(bool) [clone .part.5]+0x16e>
    1380:	96 cf       	rjmp	.-212    	; 0x12ae <updateScreenData(bool) [clone .part.5]+0x9a>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:655
      if(!inputVok() && !outputVok() && !currentok()){
    1382:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <inputVok()>
    1386:	18 2f       	mov	r17, r24
    1388:	0e 94 d3 06 	call	0xda6	; 0xda6 <outputVok()>
    138c:	11 11       	cpse	r17, r1
    138e:	48 c0       	rjmp	.+144    	; 0x1420 <updateScreenData(bool) [clone .part.5]+0x20c>
    1390:	81 11       	cpse	r24, r1
    1392:	07 c0       	rjmp	.+14     	; 0x13a2 <updateScreenData(bool) [clone .part.5]+0x18e>
    1394:	0e 94 c5 06 	call	0xd8a	; 0xd8a <currentok()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:656
        display("A AL", 0);
    1398:	68 e1       	ldi	r22, 0x18	; 24
    139a:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:655
    }

    //Show Error if Available
    
    if(!status && menu == -1){
      if(!inputVok() && !outputVok() && !currentok()){
    139c:	88 23       	and	r24, r24
    139e:	09 f4       	brne	.+2      	; 0x13a2 <updateScreenData(bool) [clone .part.5]+0x18e>
    13a0:	88 c0       	rjmp	.+272    	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
RINOK():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:560
}

//Update Run Mode Screen

bool RINOK() {
  if(rinvoltage > ILV && rinvoltage < IHV){
    13a2:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <rinvoltage>
    13a6:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <rinvoltage+0x1>
    13aa:	00 91 59 02 	lds	r16, 0x0259	; 0x800259 <ILV>
    13ae:	10 91 5a 02 	lds	r17, 0x025A	; 0x80025a <ILV+0x1>
    13b2:	08 17       	cp	r16, r24
    13b4:	19 07       	cpc	r17, r25
    13b6:	44 f4       	brge	.+16     	; 0x13c8 <updateScreenData(bool) [clone .part.5]+0x1b4>
    13b8:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <IHV>
    13bc:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <IHV+0x1>
    13c0:	82 17       	cp	r24, r18
    13c2:	93 07       	cpc	r25, r19
    13c4:	0c f4       	brge	.+2      	; 0x13c8 <updateScreenData(bool) [clone .part.5]+0x1b4>
    13c6:	57 c1       	rjmp	.+686    	; 0x1676 <updateScreenData(bool) [clone .part.5]+0x462>
YINOK():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:568
    return false;
  }
}

bool YINOK() {
  if(yinvoltage > ILV && yinvoltage < IHV){
    13c8:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <yinvoltage>
    13cc:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <yinvoltage+0x1>
    13d0:	08 17       	cp	r16, r24
    13d2:	19 07       	cpc	r17, r25
    13d4:	44 f4       	brge	.+16     	; 0x13e6 <updateScreenData(bool) [clone .part.5]+0x1d2>
    13d6:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <IHV>
    13da:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <IHV+0x1>
    13de:	82 17       	cp	r24, r18
    13e0:	93 07       	cpc	r25, r19
    13e2:	0c f4       	brge	.+2      	; 0x13e6 <updateScreenData(bool) [clone .part.5]+0x1d2>
    13e4:	3a c1       	rjmp	.+628    	; 0x165a <updateScreenData(bool) [clone .part.5]+0x446>
BINOK():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:576
    return false;
  }
}

bool BINOK() {
  if(binvoltage > ILV && binvoltage < IHV){
    13e6:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <binvoltage>
    13ea:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <binvoltage+0x1>
    13ee:	08 17       	cp	r16, r24
    13f0:	19 07       	cpc	r17, r25
    13f2:	44 f4       	brge	.+16     	; 0x1404 <updateScreenData(bool) [clone .part.5]+0x1f0>
    13f4:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <IHV>
    13f8:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <IHV+0x1>
    13fc:	82 17       	cp	r24, r18
    13fe:	93 07       	cpc	r25, r19
    1400:	0c f4       	brge	.+2      	; 0x1404 <updateScreenData(bool) [clone .part.5]+0x1f0>
    1402:	2b c1       	rjmp	.+598    	; 0x165a <updateScreenData(bool) [clone .part.5]+0x446>
_Z16updateScreenDatab.part.5():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:659
    if(!status && menu == -1){
      if(!inputVok() && !outputVok() && !currentok()){
        display("A AL", 0);
      } else {
        if(!inputVok()){
          if(!RINOK() && !YINOK() && !BINOK()) { display("A AI", 0);}
    1404:	6d e1       	ldi	r22, 0x1D	; 29
    1406:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:663
          else{
            if(!RINOK()){ display("A rI", 0); }
            if(!YINOK()){ display("A YI", 0); }
            if(!BINOK()){ display("A bI", 0); }
    1408:	ce 01       	movw	r24, r28
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    1410:	ce 01       	movw	r24, r28
    1412:	01 96       	adiw	r24, 0x01	; 1
    1414:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    1418:	ce 01       	movw	r24, r28
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:666
          }
        }
        if(!outputVok()){
    1420:	0e 94 d3 06 	call	0xda6	; 0xda6 <outputVok()>
    1424:	81 11       	cpse	r24, r1
    1426:	3f c0       	rjmp	.+126    	; 0x14a6 <updateScreenData(bool) [clone .part.5]+0x292>
ROTOK():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:584
    return false;
  }
}

bool ROTOK() {
  if(routvoltage > OLV && routvoltage < OHV){
    1428:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <routvoltage>
    142c:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <routvoltage+0x1>
    1430:	00 91 55 02 	lds	r16, 0x0255	; 0x800255 <OLV>
    1434:	10 91 56 02 	lds	r17, 0x0256	; 0x800256 <OLV+0x1>
    1438:	08 17       	cp	r16, r24
    143a:	19 07       	cpc	r17, r25
    143c:	44 f4       	brge	.+16     	; 0x144e <updateScreenData(bool) [clone .part.5]+0x23a>
    143e:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <OHV>
    1442:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <OHV+0x1>
    1446:	82 17       	cp	r24, r18
    1448:	93 07       	cpc	r25, r19
    144a:	0c f4       	brge	.+2      	; 0x144e <updateScreenData(bool) [clone .part.5]+0x23a>
    144c:	50 c1       	rjmp	.+672    	; 0x16ee <updateScreenData(bool) [clone .part.5]+0x4da>
YOTOK():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:592
    return false;
  }
}

bool YOTOK() {
  if(youtvoltage > OLV && youtvoltage < OHV){
    144e:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <youtvoltage>
    1452:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <youtvoltage+0x1>
    1456:	08 17       	cp	r16, r24
    1458:	19 07       	cpc	r17, r25
    145a:	44 f4       	brge	.+16     	; 0x146c <updateScreenData(bool) [clone .part.5]+0x258>
    145c:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <OHV>
    1460:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <OHV+0x1>
    1464:	82 17       	cp	r24, r18
    1466:	93 07       	cpc	r25, r19
    1468:	0c f4       	brge	.+2      	; 0x146c <updateScreenData(bool) [clone .part.5]+0x258>
    146a:	33 c1       	rjmp	.+614    	; 0x16d2 <updateScreenData(bool) [clone .part.5]+0x4be>
BOTOK():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:600
    return false;
  }
}

bool BOTOK() {
  if(boutvoltage > OLV && boutvoltage < OHV){
    146c:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <boutvoltage>
    1470:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <boutvoltage+0x1>
    1474:	08 17       	cp	r16, r24
    1476:	19 07       	cpc	r17, r25
    1478:	44 f4       	brge	.+16     	; 0x148a <updateScreenData(bool) [clone .part.5]+0x276>
    147a:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <OHV>
    147e:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <OHV+0x1>
    1482:	82 17       	cp	r24, r18
    1484:	93 07       	cpc	r25, r19
    1486:	0c f4       	brge	.+2      	; 0x148a <updateScreenData(bool) [clone .part.5]+0x276>
    1488:	24 c1       	rjmp	.+584    	; 0x16d2 <updateScreenData(bool) [clone .part.5]+0x4be>
_Z16updateScreenDatab.part.5():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:667
            if(!YINOK()){ display("A YI", 0); }
            if(!BINOK()){ display("A bI", 0); }
          }
        }
        if(!outputVok()){
          if(!ROTOK() && !YOTOK() && !BOTOK()) { display("A AO", 0);}
    148a:	6c e2       	ldi	r22, 0x2C	; 44
    148c:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:671
          else{
            if(!ROTOK()){ display("A rO", 0); }
            if(!YOTOK()){ display("A YO", 0); }
            if(!BOTOK()){ display("A bO", 0); }
    148e:	ce 01       	movw	r24, r28
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    1496:	ce 01       	movw	r24, r28
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    149e:	ce 01       	movw	r24, r28
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:674
          }
        }
        if(!currentok()){
    14a6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <currentok()>
    14aa:	81 11       	cpse	r24, r1
    14ac:	0e c0       	rjmp	.+28     	; 0x14ca <updateScreenData(bool) [clone .part.5]+0x2b6>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:675
          display("ALOL", 0);
    14ae:	6b e3       	ldi	r22, 0x3B	; 59
    14b0:	71 e0       	ldi	r23, 0x01	; 1
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    14ba:	ce 01       	movw	r24, r28
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    14c2:	ce 01       	movw	r24, r28
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:816
      } else {
        menu = -1;
      }
    }*/
  }
}
    14ca:	26 96       	adiw	r28, 0x06	; 6
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	08 95       	ret
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:683
    }

    switch (menu)
    {
    case 0:
      display("noor", 0);
    14e2:	60 e4       	ldi	r22, 0x40	; 64
    14e4:	71 e0       	ldi	r23, 0x01	; 1
    14e6:	e5 cf       	rjmp	.-54     	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:686
      break;
    case 1:
      display("r IP", 0);
    14e8:	65 e4       	ldi	r22, 0x45	; 69
    14ea:	71 e0       	ldi	r23, 0x01	; 1
    14ec:	e2 cf       	rjmp	.-60     	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:689
      break;
    case 2:
      displayVar(rinvoltage, 0);
    14ee:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <rinvoltage>
    14f2:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <rinvoltage+0x1>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:767
      break;
    case 27:
      display("FrEq", 0);
      break;
    case 28:
      displayVar((int)freq, 0);
    14f6:	0e 94 62 07 	call	0xec4	; 0xec4 <displayVar(int, int) [clone .constprop.11]>
    14fa:	e7 cf       	rjmp	.-50     	; 0x14ca <updateScreenData(bool) [clone .part.5]+0x2b6>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:692
      break;
    case 2:
      displayVar(rinvoltage, 0);
      break;
    case 3:
      display("r OP", 0);
    14fc:	6a e4       	ldi	r22, 0x4A	; 74
    14fe:	71 e0       	ldi	r23, 0x01	; 1
    1500:	d8 cf       	rjmp	.-80     	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:695
      break;
    case 4:
      displayVar(routvoltage, 0);
    1502:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <routvoltage>
    1506:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <routvoltage+0x1>
    150a:	f5 cf       	rjmp	.-22     	; 0x14f6 <updateScreenData(bool) [clone .part.5]+0x2e2>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:698
      break;
    case 5:
      display("Y IP", 0);
    150c:	6f e4       	ldi	r22, 0x4F	; 79
    150e:	71 e0       	ldi	r23, 0x01	; 1
    1510:	d0 cf       	rjmp	.-96     	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:701
      break;
    case 6:
      displayVar(yinvoltage, 0);
    1512:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <yinvoltage>
    1516:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <yinvoltage+0x1>
    151a:	ed cf       	rjmp	.-38     	; 0x14f6 <updateScreenData(bool) [clone .part.5]+0x2e2>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:704
      break;
    case 7:
      display("Y OP", 0);
    151c:	64 e5       	ldi	r22, 0x54	; 84
    151e:	71 e0       	ldi	r23, 0x01	; 1
    1520:	c8 cf       	rjmp	.-112    	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:707
      break;
    case 8:
      displayVar(youtvoltage, 0);
    1522:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <youtvoltage>
    1526:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <youtvoltage+0x1>
    152a:	e5 cf       	rjmp	.-54     	; 0x14f6 <updateScreenData(bool) [clone .part.5]+0x2e2>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:710
      break;
    case 9:
      display("b IP", 0);
    152c:	69 e5       	ldi	r22, 0x59	; 89
    152e:	71 e0       	ldi	r23, 0x01	; 1
    1530:	c0 cf       	rjmp	.-128    	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:713
      break;
    case 10:
      displayVar(binvoltage, 0);
    1532:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <binvoltage>
    1536:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <binvoltage+0x1>
    153a:	dd cf       	rjmp	.-70     	; 0x14f6 <updateScreenData(bool) [clone .part.5]+0x2e2>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:716
      break;
    case 11:
      display("b OP", 0);
    153c:	6e e5       	ldi	r22, 0x5E	; 94
    153e:	71 e0       	ldi	r23, 0x01	; 1
    1540:	b8 cf       	rjmp	.-144    	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:719
      break;
    case 12:
      displayVar(boutvoltage, 0);
    1542:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <boutvoltage>
    1546:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <boutvoltage+0x1>
    154a:	d5 cf       	rjmp	.-86     	; 0x14f6 <updateScreenData(bool) [clone .part.5]+0x2e2>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:722
      break;
    case 13:
      display("rYIP", 0);
    154c:	63 e6       	ldi	r22, 0x63	; 99
    154e:	71 e0       	ldi	r23, 0x01	; 1
    1550:	b0 cf       	rjmp	.-160    	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:725
      break;
    case 14:
      displayVar((rinvoltage + yinvoltage) * 0.866, 0);
    1552:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <rinvoltage>
    1556:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <rinvoltage+0x1>
    155a:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <yinvoltage>
    155e:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <yinvoltage+0x1>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:755
      break;
    case 23:
      display("brOP", 0);
      break;
    case 24:
      displayVar((boutvoltage + routvoltage) * 0.866, 0);
    1562:	68 0f       	add	r22, r24
    1564:	79 1f       	adc	r23, r25
    1566:	07 2e       	mov	r0, r23
    1568:	00 0c       	add	r0, r0
    156a:	88 0b       	sbc	r24, r24
    156c:	99 0b       	sbc	r25, r25
    156e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatsisf>
    1572:	2d e2       	ldi	r18, 0x2D	; 45
    1574:	32 eb       	ldi	r19, 0xB2	; 178
    1576:	4d e5       	ldi	r20, 0x5D	; 93
    1578:	5f e3       	ldi	r21, 0x3F	; 63
    157a:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:767
      break;
    case 27:
      display("FrEq", 0);
      break;
    case 28:
      displayVar((int)freq, 0);
    157e:	0e 94 88 19 	call	0x3310	; 0x3310 <__fixsfsi>
    1582:	cb 01       	movw	r24, r22
    1584:	b8 cf       	rjmp	.-144    	; 0x14f6 <updateScreenData(bool) [clone .part.5]+0x2e2>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:728
      break;
    case 14:
      displayVar((rinvoltage + yinvoltage) * 0.866, 0);
      break;
    case 15:
      display("rYOP", 0);
    1586:	68 e6       	ldi	r22, 0x68	; 104
    1588:	71 e0       	ldi	r23, 0x01	; 1
    158a:	93 cf       	rjmp	.-218    	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:731
      break;
    case 16:
      displayVar((routvoltage + youtvoltage) * 0.866, 0);
    158c:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <routvoltage>
    1590:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <routvoltage+0x1>
    1594:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <youtvoltage>
    1598:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <youtvoltage+0x1>
    159c:	e2 cf       	rjmp	.-60     	; 0x1562 <updateScreenData(bool) [clone .part.5]+0x34e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:734
      break;
    case 17:
      display("YbIP", 0);
    159e:	6d e6       	ldi	r22, 0x6D	; 109
    15a0:	71 e0       	ldi	r23, 0x01	; 1
    15a2:	87 cf       	rjmp	.-242    	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:737
      break;
    case 18:
      displayVar((yinvoltage + binvoltage) * 0.866, 0);
    15a4:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <yinvoltage>
    15a8:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <yinvoltage+0x1>
    15ac:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <binvoltage>
    15b0:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <binvoltage+0x1>
    15b4:	d6 cf       	rjmp	.-84     	; 0x1562 <updateScreenData(bool) [clone .part.5]+0x34e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:740
      break;
    case 19:
      display("YbOP", 0);
    15b6:	62 e7       	ldi	r22, 0x72	; 114
    15b8:	71 e0       	ldi	r23, 0x01	; 1
    15ba:	7b cf       	rjmp	.-266    	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:743
      break;
    case 20:
      displayVar((youtvoltage + boutvoltage) * 0.866, 0);
    15bc:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <youtvoltage>
    15c0:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <youtvoltage+0x1>
    15c4:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <boutvoltage>
    15c8:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <boutvoltage+0x1>
    15cc:	ca cf       	rjmp	.-108    	; 0x1562 <updateScreenData(bool) [clone .part.5]+0x34e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:746
      break;
    case 21:
      display("brIP", 0);
    15ce:	67 e7       	ldi	r22, 0x77	; 119
    15d0:	71 e0       	ldi	r23, 0x01	; 1
    15d2:	6f cf       	rjmp	.-290    	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:749
      break;
    case 22:
      displayVar((binvoltage + rinvoltage) * 0.866, 0);
    15d4:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <binvoltage>
    15d8:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <binvoltage+0x1>
    15dc:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <rinvoltage>
    15e0:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <rinvoltage+0x1>
    15e4:	be cf       	rjmp	.-132    	; 0x1562 <updateScreenData(bool) [clone .part.5]+0x34e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:752
      break;
    case 23:
      display("brOP", 0);
    15e6:	6c e7       	ldi	r22, 0x7C	; 124
    15e8:	71 e0       	ldi	r23, 0x01	; 1
    15ea:	63 cf       	rjmp	.-314    	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:755
      break;
    case 24:
      displayVar((boutvoltage + routvoltage) * 0.866, 0);
    15ec:	60 91 36 03 	lds	r22, 0x0336	; 0x800336 <boutvoltage>
    15f0:	70 91 37 03 	lds	r23, 0x0337	; 0x800337 <boutvoltage+0x1>
    15f4:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <routvoltage>
    15f8:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <routvoltage+0x1>
    15fc:	b2 cf       	rjmp	.-156    	; 0x1562 <updateScreenData(bool) [clone .part.5]+0x34e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:758
      break;
    case 25:
      display("LoAd", 0);
    15fe:	61 e8       	ldi	r22, 0x81	; 129
    1600:	71 e0       	ldi	r23, 0x01	; 1
    1602:	57 cf       	rjmp	.-338    	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:761
      break;
    case 26:
      displayVar((int)currentload, 0);
    1604:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <currentload>
    1608:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <currentload+0x1>
    160c:	74 cf       	rjmp	.-280    	; 0x14f6 <updateScreenData(bool) [clone .part.5]+0x2e2>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:764
      break;
    case 27:
      display("FrEq", 0);
    160e:	66 e8       	ldi	r22, 0x86	; 134
    1610:	71 e0       	ldi	r23, 0x01	; 1
    1612:	4f cf       	rjmp	.-354    	; 0x14b2 <updateScreenData(bool) [clone .part.5]+0x29e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:767
      break;
    case 28:
      displayVar((int)freq, 0);
    1614:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <freq>
    1618:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <freq+0x1>
    161c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <freq+0x2>
    1620:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <freq+0x3>
    1624:	ac cf       	rjmp	.-168    	; 0x157e <updateScreenData(bool) [clone .part.5]+0x36a>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:770
      break;
    case 29:
      if(status){
    1626:	ff 20       	and	r15, r15
    1628:	29 f0       	breq	.+10     	; 0x1634 <updateScreenData(bool) [clone .part.5]+0x420>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:771
        menu = 0;
    162a:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <menu+0x1>
    162e:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <menu>
    1632:	4b cf       	rjmp	.-362    	; 0x14ca <updateScreenData(bool) [clone .part.5]+0x2b6>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:773
      } else {
        menu = -1;
    1634:	8f ef       	ldi	r24, 0xFF	; 255
    1636:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:780
      break;
    case -2:
      menu = 28;
      break;
    case -1:
      if(status){ menu = 28; }
    1638:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <menu+0x1>
    163c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <menu>
    1640:	44 cf       	rjmp	.-376    	; 0x14ca <updateScreenData(bool) [clone .part.5]+0x2b6>
    1642:	ff 20       	and	r15, r15
    1644:	09 f4       	brne	.+2      	; 0x1648 <updateScreenData(bool) [clone .part.5]+0x434>
    1646:	41 cf       	rjmp	.-382    	; 0x14ca <updateScreenData(bool) [clone .part.5]+0x2b6>
    1648:	8c e1       	ldi	r24, 0x1C	; 28
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	f5 cf       	rjmp	.-22     	; 0x1638 <updateScreenData(bool) [clone .part.5]+0x424>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:619
    }
    if(!status && !alarmOnce){
      alarmOnce = true;
      menu == -1;
    }
    if(status && alarmOnce){
    164e:	88 23       	and	r24, r24
    1650:	09 f4       	brne	.+2      	; 0x1654 <updateScreenData(bool) [clone .part.5]+0x440>
    1652:	ff cd       	rjmp	.-1026   	; 0x1252 <updateScreenData(bool) [clone .part.5]+0x3e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:620
      alarmOnce = false;
    1654:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <alarmOnce>
    1658:	fc cd       	rjmp	.-1032   	; 0x1252 <updateScreenData(bool) [clone .part.5]+0x3e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:661
        display("A AL", 0);
      } else {
        if(!inputVok()){
          if(!RINOK() && !YINOK() && !BINOK()) { display("A AI", 0);}
          else{
            if(!RINOK()){ display("A rI", 0); }
    165a:	6b e8       	ldi	r22, 0x8B	; 139
    165c:	71 e0       	ldi	r23, 0x01	; 1
    165e:	ce 01       	movw	r24, r28
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    1666:	ce 01       	movw	r24, r28
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    166e:	ce 01       	movw	r24, r28
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
YINOK():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:568
    return false;
  }
}

bool YINOK() {
  if(yinvoltage > ILV && yinvoltage < IHV){
    1676:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <yinvoltage>
    167a:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <yinvoltage+0x1>
    167e:	08 17       	cp	r16, r24
    1680:	19 07       	cpc	r17, r25
    1682:	3c f4       	brge	.+14     	; 0x1692 <updateScreenData(bool) [clone .part.5]+0x47e>
    1684:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <IHV>
    1688:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <IHV+0x1>
    168c:	82 17       	cp	r24, r18
    168e:	93 07       	cpc	r25, r19
    1690:	74 f0       	brlt	.+28     	; 0x16ae <updateScreenData(bool) [clone .part.5]+0x49a>
_Z16updateScreenDatab.part.5():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:662
      } else {
        if(!inputVok()){
          if(!RINOK() && !YINOK() && !BINOK()) { display("A AI", 0);}
          else{
            if(!RINOK()){ display("A rI", 0); }
            if(!YINOK()){ display("A YI", 0); }
    1692:	62 e2       	ldi	r22, 0x22	; 34
    1694:	71 e0       	ldi	r23, 0x01	; 1
    1696:	ce 01       	movw	r24, r28
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    169e:	ce 01       	movw	r24, r28
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    16a6:	ce 01       	movw	r24, r28
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
BINOK():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:576
    return false;
  }
}

bool BINOK() {
  if(binvoltage > ILV && binvoltage < IHV){
    16ae:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <binvoltage>
    16b2:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <binvoltage+0x1>
    16b6:	08 17       	cp	r16, r24
    16b8:	19 07       	cpc	r17, r25
    16ba:	44 f4       	brge	.+16     	; 0x16cc <updateScreenData(bool) [clone .part.5]+0x4b8>
    16bc:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <IHV>
    16c0:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <IHV+0x1>
    16c4:	82 17       	cp	r24, r18
    16c6:	93 07       	cpc	r25, r19
    16c8:	0c f4       	brge	.+2      	; 0x16cc <updateScreenData(bool) [clone .part.5]+0x4b8>
    16ca:	aa ce       	rjmp	.-684    	; 0x1420 <updateScreenData(bool) [clone .part.5]+0x20c>
_Z16updateScreenDatab.part.5():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:663
        if(!inputVok()){
          if(!RINOK() && !YINOK() && !BINOK()) { display("A AI", 0);}
          else{
            if(!RINOK()){ display("A rI", 0); }
            if(!YINOK()){ display("A YI", 0); }
            if(!BINOK()){ display("A bI", 0); }
    16cc:	67 e2       	ldi	r22, 0x27	; 39
    16ce:	71 e0       	ldi	r23, 0x01	; 1
    16d0:	9b ce       	rjmp	.-714    	; 0x1408 <updateScreenData(bool) [clone .part.5]+0x1f4>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:669
          }
        }
        if(!outputVok()){
          if(!ROTOK() && !YOTOK() && !BOTOK()) { display("A AO", 0);}
          else{
            if(!ROTOK()){ display("A rO", 0); }
    16d2:	60 e9       	ldi	r22, 0x90	; 144
    16d4:	71 e0       	ldi	r23, 0x01	; 1
    16d6:	ce 01       	movw	r24, r28
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    16de:	ce 01       	movw	r24, r28
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    16e6:	ce 01       	movw	r24, r28
    16e8:	01 96       	adiw	r24, 0x01	; 1
    16ea:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
YOTOK():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:592
    return false;
  }
}

bool YOTOK() {
  if(youtvoltage > OLV && youtvoltage < OHV){
    16ee:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <youtvoltage>
    16f2:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <youtvoltage+0x1>
    16f6:	08 17       	cp	r16, r24
    16f8:	19 07       	cpc	r17, r25
    16fa:	3c f4       	brge	.+14     	; 0x170a <updateScreenData(bool) [clone .part.5]+0x4f6>
    16fc:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <OHV>
    1700:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <OHV+0x1>
    1704:	82 17       	cp	r24, r18
    1706:	93 07       	cpc	r25, r19
    1708:	74 f0       	brlt	.+28     	; 0x1726 <updateScreenData(bool) [clone .part.5]+0x512>
_Z16updateScreenDatab.part.5():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:670
        }
        if(!outputVok()){
          if(!ROTOK() && !YOTOK() && !BOTOK()) { display("A AO", 0);}
          else{
            if(!ROTOK()){ display("A rO", 0); }
            if(!YOTOK()){ display("A YO", 0); }
    170a:	61 e3       	ldi	r22, 0x31	; 49
    170c:	71 e0       	ldi	r23, 0x01	; 1
    170e:	ce 01       	movw	r24, r28
    1710:	01 96       	adiw	r24, 0x01	; 1
    1712:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    1716:	ce 01       	movw	r24, r28
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    171e:	ce 01       	movw	r24, r28
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
BOTOK():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:600
    return false;
  }
}

bool BOTOK() {
  if(boutvoltage > OLV && boutvoltage < OHV){
    1726:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <boutvoltage>
    172a:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <boutvoltage+0x1>
    172e:	08 17       	cp	r16, r24
    1730:	19 07       	cpc	r17, r25
    1732:	44 f4       	brge	.+16     	; 0x1744 <updateScreenData(bool) [clone .part.5]+0x530>
    1734:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <OHV>
    1738:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <OHV+0x1>
    173c:	82 17       	cp	r24, r18
    173e:	93 07       	cpc	r25, r19
    1740:	0c f4       	brge	.+2      	; 0x1744 <updateScreenData(bool) [clone .part.5]+0x530>
    1742:	b1 ce       	rjmp	.-670    	; 0x14a6 <updateScreenData(bool) [clone .part.5]+0x292>
_Z16updateScreenDatab.part.5():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:671
        if(!outputVok()){
          if(!ROTOK() && !YOTOK() && !BOTOK()) { display("A AO", 0);}
          else{
            if(!ROTOK()){ display("A rO", 0); }
            if(!YOTOK()){ display("A YO", 0); }
            if(!BOTOK()){ display("A bO", 0); }
    1744:	66 e3       	ldi	r22, 0x36	; 54
    1746:	71 e0       	ldi	r23, 0x01	; 1
    1748:	a2 ce       	rjmp	.-700    	; 0x148e <updateScreenData(bool) [clone .part.5]+0x27a>

0000174a <done()>:
_Z4donev():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1465
    break;
  }
}
}

void done() {display("donE", 0);}
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	00 d0       	rcall	.+0      	; 0x1750 <done()+0x6>
    1750:	00 d0       	rcall	.+0      	; 0x1752 <done()+0x8>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <done()+0xa>
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	65 e9       	ldi	r22, 0x95	; 149
    175a:	71 e0       	ldi	r23, 0x01	; 1
    175c:	ce 01       	movw	r24, r28
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    1764:	ce 01       	movw	r24, r28
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    176c:	ce 01       	movw	r24, r28
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
    1774:	26 96       	adiw	r28, 0x06	; 6
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	08 95       	ret

00001786 <menuEND()>:
_Z7menuENDv():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1108
    display("dIrb", 0);
  }
}


void menuEND() {
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	00 d0       	rcall	.+0      	; 0x178c <menuEND()+0x6>
    178c:	00 d0       	rcall	.+0      	; 0x178e <menuEND()+0x8>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <menuEND()+0xa>
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1109
  display("End", 0);
    1794:	6a e9       	ldi	r22, 0x9A	; 154
    1796:	71 e0       	ldi	r23, 0x01	; 1
    1798:	ce 01       	movw	r24, r28
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    17a0:	ce 01       	movw	r24, r28
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    17a8:	ce 01       	movw	r24, r28
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1110
}
    17b0:	26 96       	adiw	r28, 0x06	; 6
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	08 95       	ret

000017c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>:
_ZN11EEPROMClass6updateEih.isra.2():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	ec 01       	movw	r28, r24
    17ca:	16 2f       	mov	r17, r22
operator*():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    17cc:	0e 94 00 19 	call	0x3200	; 0x3200 <eeprom_read_byte>
update():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    17d0:	18 17       	cp	r17, r24
    17d2:	39 f0       	breq	.+14     	; 0x17e2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]+0x20>
_ZN5EERefaSEh():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    17d4:	61 2f       	mov	r22, r17
    17d6:	ce 01       	movw	r24, r28
_ZN11EEPROMClass6updateEih.isra.2():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
_ZN5EERefaSEh():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    17de:	0c 94 08 19 	jmp	0x3210	; 0x3210 <eeprom_write_byte>
_ZN11EEPROMClass6updateEih.isra.2():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	08 95       	ret

000017ea <EEPROMClass::read(int) [clone .isra.1]>:
_ZN11EEPROMClass4readEi.isra.1():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    17ea:	0c 94 00 19 	jmp	0x3200	; 0x3200 <eeprom_read_byte>

000017ee <__vector_18>:
__vector_18():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    17ee:	1f 92       	push	r1
    17f0:	0f 92       	push	r0
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	0f 92       	push	r0
    17f6:	11 24       	eor	r1, r1
    17f8:	2f 93       	push	r18
    17fa:	3f 93       	push	r19
    17fc:	8f 93       	push	r24
    17fe:	9f 93       	push	r25
    1800:	af 93       	push	r26
    1802:	bf 93       	push	r27
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    1804:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <timer0_millis>
    1808:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <timer0_millis+0x1>
    180c:	a0 91 b6 03 	lds	r26, 0x03B6	; 0x8003b6 <timer0_millis+0x2>
    1810:	b0 91 b7 03 	lds	r27, 0x03B7	; 0x8003b7 <timer0_millis+0x3>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    1814:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <timer0_fract>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    1818:	26 e0       	ldi	r18, 0x06	; 6
    181a:	23 0f       	add	r18, r19
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    181c:	2d 37       	cpi	r18, 0x7D	; 125
    181e:	68 f1       	brcs	.+90     	; 0x187a <__vector_18+0x8c>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    1820:	29 e8       	ldi	r18, 0x89	; 137
    1822:	23 0f       	add	r18, r19
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    1824:	03 96       	adiw	r24, 0x03	; 3
    1826:	a1 1d       	adc	r26, r1
    1828:	b1 1d       	adc	r27, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    182a:	20 93 3a 02 	sts	0x023A, r18	; 0x80023a <timer0_fract>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    182e:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <timer0_millis>
    1832:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <timer0_millis+0x1>
    1836:	a0 93 b6 03 	sts	0x03B6, r26	; 0x8003b6 <timer0_millis+0x2>
    183a:	b0 93 b7 03 	sts	0x03B7, r27	; 0x8003b7 <timer0_millis+0x3>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    183e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <timer0_overflow_count>
    1842:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <timer0_overflow_count+0x1>
    1846:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <timer0_overflow_count+0x2>
    184a:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <timer0_overflow_count+0x3>
    184e:	01 96       	adiw	r24, 0x01	; 1
    1850:	a1 1d       	adc	r26, r1
    1852:	b1 1d       	adc	r27, r1
    1854:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <timer0_overflow_count>
    1858:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <timer0_overflow_count+0x1>
    185c:	a0 93 3d 02 	sts	0x023D, r26	; 0x80023d <timer0_overflow_count+0x2>
    1860:	b0 93 3e 02 	sts	0x023E, r27	; 0x80023e <timer0_overflow_count+0x3>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    1864:	bf 91       	pop	r27
    1866:	af 91       	pop	r26
    1868:	9f 91       	pop	r25
    186a:	8f 91       	pop	r24
    186c:	3f 91       	pop	r19
    186e:	2f 91       	pop	r18
    1870:	0f 90       	pop	r0
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	0f 90       	pop	r0
    1876:	1f 90       	pop	r1
    1878:	18 95       	reti
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    187a:	02 96       	adiw	r24, 0x02	; 2
    187c:	a1 1d       	adc	r26, r1
    187e:	b1 1d       	adc	r27, r1
    1880:	d4 cf       	rjmp	.-88     	; 0x182a <__vector_18+0x3c>

00001882 <countPulseASM>:
countPulseASM():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:62

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
    1882:	cf 92       	push	r12
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:63
    push r13   ;   ;  131 pushqi1/1 [length = 1]
    1884:	df 92       	push	r13
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:64
    push r14   ;   ;  132 pushqi1/1 [length = 1]
    1886:	ef 92       	push	r14
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:65
    push r15   ;   ;  133 pushqi1/1 [length = 1]
    1888:	ff 92       	push	r15
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:66
    push r16   ;   ;  134 pushqi1/1 [length = 1]
    188a:	0f 93       	push	r16
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:67
    push r17   ;   ;  135 pushqi1/1 [length = 1]
    188c:	1f 93       	push	r17
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:72
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
    188e:	e8 2f       	mov	r30, r24
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:73
    mov r31,r25  ;  port, port
    1890:	f9 2f       	mov	r31, r25
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:79
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
    1892:	05 c0       	rjmp	.+10     	; 0x189e <countPulseASM+0x1c>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:83
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
    1894:	01 50       	subi	r16, 0x01	; 1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:84
    sbc r17, r1   ;  maxloops
    1896:	11 09       	sbc	r17, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:85
    sbc r18, r1   ;  maxloops
    1898:	21 09       	sbc	r18, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:86
    sbc r19, r1   ;  maxloops
    189a:	31 09       	sbc	r19, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:87
    breq .L13  ; ,   ;  19  branch  [length = 1]
    189c:	61 f1       	breq	.+88     	; 0x18f6 <countPulseASM+0x74>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:91
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
    189e:	90 81       	ld	r25, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:92
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
    18a0:	96 23       	and	r25, r22
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:93
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
    18a2:	94 17       	cp	r25, r20
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:94
    breq .L4   ; ,   ;  26  branch  [length = 1]
    18a4:	b9 f3       	breq	.-18     	; 0x1894 <countPulseASM+0x12>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:95
    rjmp .L6   ;   ;  184 jump  [length = 1]
    18a6:	05 c0       	rjmp	.+10     	; 0x18b2 <countPulseASM+0x30>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:104
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
    18a8:	01 50       	subi	r16, 0x01	; 1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:105
    sbc r17, r1   ;  maxloops
    18aa:	11 09       	sbc	r17, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:106
    sbc r18, r1   ;  maxloops
    18ac:	21 09       	sbc	r18, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:107
    sbc r19, r1   ;  maxloops
    18ae:	31 09       	sbc	r19, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:108
    breq .L13  ; ,   ;  33  branch  [length = 1]
    18b0:	11 f1       	breq	.+68     	; 0x18f6 <countPulseASM+0x74>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:112
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
    18b2:	90 81       	ld	r25, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:113
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
    18b4:	96 23       	and	r25, r22
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:114
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
    18b6:	94 13       	cpse	r25, r20
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:115
    rjmp .L7   ;
    18b8:	f7 cf       	rjmp	.-18     	; 0x18a8 <countPulseASM+0x26>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:116
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
    18ba:	c1 2c       	mov	r12, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:117
    mov r13, r1   ;  width
    18bc:	d1 2c       	mov	r13, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:118
    mov r14, r1   ;  width
    18be:	e1 2c       	mov	r14, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:119
    mov r15, r1   ;  width
    18c0:	f1 2c       	mov	r15, r1
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:120
    rjmp .L9   ;   ;  186 jump  [length = 1]
    18c2:	0a c0       	rjmp	.+20     	; 0x18d8 <countPulseASM+0x56>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:129
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
    18c4:	8f ef       	ldi	r24, 0xFF	; 255
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:130
    sub r12,r24  ;  width,
    18c6:	c8 1a       	sub	r12, r24
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:131
    sbc r13,r24  ;  width,
    18c8:	d8 0a       	sbc	r13, r24
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:132
    sbc r14,r24  ;  width,
    18ca:	e8 0a       	sbc	r14, r24
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:133
    sbc r15,r24  ;  width,
    18cc:	f8 0a       	sbc	r15, r24
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:134
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
    18ce:	0c 15       	cp	r16, r12
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:135
    cpc r17,r13  ;  maxloops, width
    18d0:	1d 05       	cpc	r17, r13
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:136
    cpc r18,r14  ;  maxloops, width
    18d2:	2e 05       	cpc	r18, r14
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:137
    cpc r19,r15  ;  maxloops, width
    18d4:	3f 05       	cpc	r19, r15
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:138
    breq .L13  ; ,   ;  52  branch  [length = 1]
    18d6:	79 f0       	breq	.+30     	; 0x18f6 <countPulseASM+0x74>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:142
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
    18d8:	80 81       	ld	r24, Z
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:143
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
    18da:	86 23       	and	r24, r22
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:144
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
    18dc:	84 17       	cp	r24, r20
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:145
    breq .L10  ; ,   ;  64  branch  [length = 1]
    18de:	91 f3       	breq	.-28     	; 0x18c4 <countPulseASM+0x42>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:151
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
    18e0:	6c 2d       	mov	r22, r12
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:152
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
    18e2:	7d 2d       	mov	r23, r13
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:153
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
    18e4:	8e 2d       	mov	r24, r14
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:154
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
    18e6:	9f 2d       	mov	r25, r15
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:157
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
    18e8:	1f 91       	pop	r17
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:158
    pop r16  ;   ;  172 popqi [length = 1]
    18ea:	0f 91       	pop	r16
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:159
    pop r15  ;   ;  173 popqi [length = 1]
    18ec:	ff 90       	pop	r15
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:160
    pop r14  ;   ;  174 popqi [length = 1]
    18ee:	ef 90       	pop	r14
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:161
    pop r13  ;   ;  175 popqi [length = 1]
    18f0:	df 90       	pop	r13
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:162
    pop r12  ;   ;  176 popqi [length = 1]
    18f2:	cf 90       	pop	r12
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:163
    ret  ;  177 return_from_epilogue  [length = 1]
    18f4:	08 95       	ret
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:166
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
    18f6:	60 e0       	ldi	r22, 0x00	; 0
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:167
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
    18f8:	70 e0       	ldi	r23, 0x00	; 0
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:168
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
    18fa:	80 e0       	ldi	r24, 0x00	; 0
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:169
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
    18fc:	90 e0       	ldi	r25, 0x00	; 0
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:172
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
    18fe:	1f 91       	pop	r17
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:173
    pop r16  ;   ;  139 popqi [length = 1]
    1900:	0f 91       	pop	r16
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:174
    pop r15  ;   ;  140 popqi [length = 1]
    1902:	ff 90       	pop	r15
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:175
    pop r14  ;   ;  141 popqi [length = 1]
    1904:	ef 90       	pop	r14
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:176
    pop r13  ;   ;  142 popqi [length = 1]
    1906:	df 90       	pop	r13
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:177
    pop r12  ;   ;  143 popqi [length = 1]
    1908:	cf 90       	pop	r12
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring_pulse.S:178
    ret  ;  144 return_from_epilogue  [length = 1]
    190a:	08 95       	ret

0000190c <BlockNot::addToTimerList()>:
_ZN8BlockNot14addToTimerListEv():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:640
void resetAllTimers(BlockNot *timer) {
        resetAllTimers(timer->BlockNot::getStartTime());
}

void BlockNot::addToTimerList() {
        if (firstTimer == nullptr) {
    190c:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <BlockNot::firstTimer>
    1910:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <BlockNot::firstTimer+0x1>
    1914:	23 2b       	or	r18, r19
    1916:	61 f4       	brne	.+24     	; 0x1930 <BlockNot::addToTimerList()+0x24>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:641
            firstTimer = currentTimer = this;
    1918:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <BlockNot::currentTimer+0x1>
    191c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <BlockNot::currentTimer>
    1920:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <BlockNot::firstTimer+0x1>
    1924:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <BlockNot::firstTimer>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:646
        } else {
            currentTimer->nextTimer = this;
            currentTimer = this;
        }
        this->nextTimer = nullptr;
    1928:	fc 01       	movw	r30, r24
    192a:	10 a2       	std	Z+32, r1	; 0x20
    192c:	17 8e       	std	Z+31, r1	; 0x1f
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:647
}
    192e:	08 95       	ret
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:643

void BlockNot::addToTimerList() {
        if (firstTimer == nullptr) {
            firstTimer = currentTimer = this;
        } else {
            currentTimer->nextTimer = this;
    1930:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <BlockNot::currentTimer>
    1934:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <BlockNot::currentTimer+0x1>
    1938:	90 a3       	std	Z+32, r25	; 0x20
    193a:	87 8f       	std	Z+31, r24	; 0x1f
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:644
            currentTimer = this;
    193c:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <BlockNot::currentTimer+0x1>
    1940:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <BlockNot::currentTimer>
    1944:	f1 cf       	rjmp	.-30     	; 0x1928 <BlockNot::addToTimerList()+0x1c>

00001946 <BlockNot::initDuration(unsigned long)>:
_ZN8BlockNot12initDurationEm():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:480

/**
 * Private Methods
 */

void BlockNot::initDuration(unsigned long time) {
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	ec 01       	movw	r28, r24
    194c:	cb 01       	movw	r24, r22
    194e:	ba 01       	movw	r22, r20
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:481
    switch(baseUnits) {
    1950:	2b 89       	ldd	r18, Y+19	; 0x13
    1952:	3c 89       	ldd	r19, Y+20	; 0x14
    1954:	21 30       	cpi	r18, 0x01	; 1
    1956:	31 05       	cpc	r19, r1
    1958:	a1 f0       	breq	.+40     	; 0x1982 <BlockNot::initDuration(unsigned long)+0x3c>
    195a:	30 f0       	brcs	.+12     	; 0x1968 <BlockNot::initDuration(unsigned long)+0x22>
    195c:	22 30       	cpi	r18, 0x02	; 2
    195e:	31 05       	cpc	r19, r1
    1960:	b9 f0       	breq	.+46     	; 0x1990 <BlockNot::initDuration(unsigned long)+0x4a>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:492
            break;
        case SECONDS:
            duration.seconds = time;
            break;
    }
}
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	08 95       	ret
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:483
 */

void BlockNot::initDuration(unsigned long time) {
    switch(baseUnits) {
        case MICROSECONDS:
            duration.micros = time;
    1968:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__floatunsisf>
_ZN8BlockNot5cTime7micro_taSEd():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:209

        class micro_t {
            double seconds;
        public:
            micro_t &operator=(double us) {
                seconds = us * .000001;
    196c:	2d eb       	ldi	r18, 0xBD	; 189
    196e:	37 e3       	ldi	r19, 0x37	; 55
    1970:	46 e8       	ldi	r20, 0x86	; 134
    1972:	55 e3       	ldi	r21, 0x35	; 53
_ZN8BlockNot5cTime7milli_taSEd():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:197

        class milli_t {
            double seconds;
        public:
            milli_t &operator=(double ms) {
                seconds = ms * .001;
    1974:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3>
_ZN8BlockNot12initDurationEm():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:489
            break;
        case MILLISECONDS:
            duration.millis = time;
            break;
        case SECONDS:
            duration.seconds = time;
    1978:	6d 8b       	std	Y+21, r22	; 0x15
    197a:	7e 8b       	std	Y+22, r23	; 0x16
    197c:	8f 8b       	std	Y+23, r24	; 0x17
    197e:	98 8f       	std	Y+24, r25	; 0x18
    1980:	f0 cf       	rjmp	.-32     	; 0x1962 <BlockNot::initDuration(unsigned long)+0x1c>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:486
    switch(baseUnits) {
        case MICROSECONDS:
            duration.micros = time;
            break;
        case MILLISECONDS:
            duration.millis = time;
    1982:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__floatunsisf>
_ZN8BlockNot5cTime7milli_taSEd():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:197
    1986:	2f e6       	ldi	r18, 0x6F	; 111
    1988:	32 e1       	ldi	r19, 0x12	; 18
    198a:	43 e8       	ldi	r20, 0x83	; 131
    198c:	5a e3       	ldi	r21, 0x3A	; 58
    198e:	f2 cf       	rjmp	.-28     	; 0x1974 <BlockNot::initDuration(unsigned long)+0x2e>
_ZN8BlockNot12initDurationEm():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:489
            break;
        case SECONDS:
            duration.seconds = time;
    1990:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__floatunsisf>
    1994:	f1 cf       	rjmp	.-30     	; 0x1978 <BlockNot::initDuration(unsigned long)+0x32>

00001996 <BlockNot::BlockNot(unsigned long)>:
_ZN8BlockNotC2Em():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:34
BlockNot::BlockNot() {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    if (global == GLOBAL_RESET) addToTimerList();
}

BlockNot::BlockNot(unsigned long time) {
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	ec 01       	movw	r28, r24
    19a0:	1c 82       	std	Y+4, r1	; 0x04
    19a2:	1d 82       	std	Y+5, r1	; 0x05
    19a4:	1e 82       	std	Y+6, r1	; 0x06
    19a6:	1f 82       	std	Y+7, r1	; 0x07
    19a8:	18 86       	std	Y+8, r1	; 0x08
    19aa:	19 86       	std	Y+9, r1	; 0x09
    19ac:	1a 86       	std	Y+10, r1	; 0x0a
    19ae:	1b 86       	std	Y+11, r1	; 0x0b
    19b0:	1c 86       	std	Y+12, r1	; 0x0c
    19b2:	1d 86       	std	Y+13, r1	; 0x0d
    19b4:	1e 86       	std	Y+14, r1	; 0x0e
    19b6:	1f 86       	std	Y+15, r1	; 0x0f
    19b8:	19 8a       	std	Y+17, r1	; 0x11
    19ba:	18 8a       	std	Y+16, r1	; 0x10
    19bc:	1a 8a       	std	Y+18, r1	; 0x12
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9c 8b       	std	Y+20, r25	; 0x14
    19c4:	8b 8b       	std	Y+19, r24	; 0x13
    19c6:	1e 8e       	std	Y+30, r1	; 0x1e
    19c8:	1d 8e       	std	Y+29, r1	; 0x1d
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:35
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    19ca:	00 91 b2 03 	lds	r16, 0x03B2	; 0x8003b2 <BlockNot::global>
    19ce:	10 91 b3 03 	lds	r17, 0x03B3	; 0x8003b3 <BlockNot::global+0x1>
    19d2:	01 30       	cpi	r16, 0x01	; 1
    19d4:	11 05       	cpc	r17, r1
    19d6:	11 f0       	breq	.+4      	; 0x19dc <BlockNot::BlockNot(unsigned long)+0x46>
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <BlockNot::global+0x1>
    19e0:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <BlockNot::global>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:36
    initDuration(time);
    19e4:	ce 01       	movw	r24, r28
    19e6:	0e 94 a3 0c 	call	0x1946	; 0x1946 <BlockNot::initDuration(unsigned long)>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:37
    reset();
    19ea:	ce 01       	movw	r24, r28
    19ec:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.17]>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:38
    if (global == GLOBAL_RESET) addToTimerList();
    19f0:	01 30       	cpi	r16, 0x01	; 1
    19f2:	11 05       	cpc	r17, r1
    19f4:	39 f0       	breq	.+14     	; 0x1a04 <BlockNot::BlockNot(unsigned long)+0x6e>
    19f6:	ce 01       	movw	r24, r28
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:39
}
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	1f 91       	pop	r17
    19fe:	0f 91       	pop	r16
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:38

BlockNot::BlockNot(unsigned long time) {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
    1a00:	0c 94 86 0c 	jmp	0x190c	; 0x190c <BlockNot::addToTimerList()>
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:39
}
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	08 95       	ret

00001a0e <main>:
main():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	a0 97       	sbiw	r28, 0x20	; 32
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
init():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1a22:	78 94       	sei
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1a24:	84 b5       	in	r24, 0x24	; 36
    1a26:	83 60       	ori	r24, 0x03	; 3
    1a28:	84 bd       	out	0x24, r24	; 36
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    1a2a:	85 b5       	in	r24, 0x25	; 37
    1a2c:	83 60       	ori	r24, 0x03	; 3
    1a2e:	85 bd       	out	0x25, r24	; 37
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1a30:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1a34:	81 60       	ori	r24, 0x01	; 1
    1a36:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1a40:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a44:	81 60       	ori	r24, 0x01	; 1
    1a46:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1a4a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1a4e:	81 60       	ori	r24, 0x01	; 1
    1a50:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    1a54:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1a58:	84 60       	ori	r24, 0x04	; 4
    1a5a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    1a5e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1a62:	81 60       	ori	r24, 0x01	; 1
    1a64:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    1a68:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    1a6c:	83 60       	ori	r24, 0x03	; 3
    1a6e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    1a72:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1a76:	81 60       	ori	r24, 0x01	; 1
    1a78:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    1a7c:	86 e8       	ldi	r24, 0x86	; 134
    1a7e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    1a82:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
Begin():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:78
	byte segA, byte segB, byte segC, byte segD, byte segE, byte segF, byte segG,
	byte segDP,
	byte segCol, byte segApos)
{
  //Bring all the variables in from the caller
  numberOfDigits = numOfDigits;
    1a86:	84 e0       	ldi	r24, 0x04	; 4
    1a88:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <display1+0x15>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:79
  digit1 = dig1;
    1a8c:	13 e1       	ldi	r17, 0x13	; 19
    1a8e:	10 93 6e 03 	sts	0x036E, r17	; 0x80036e <display1+0x5>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:80
  digit2 = dig2;
    1a92:	b2 e1       	ldi	r27, 0x12	; 18
    1a94:	b0 93 6f 03 	sts	0x036F, r27	; 0x80036f <display1+0x6>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:81
  digit3 = dig3;
    1a98:	a1 e1       	ldi	r26, 0x11	; 17
    1a9a:	a0 93 70 03 	sts	0x0370, r26	; 0x800370 <display1+0x7>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:82
  digit4 = dig4;
    1a9e:	f0 e1       	ldi	r31, 0x10	; 16
    1aa0:	f0 93 71 03 	sts	0x0371, r31	; 0x800371 <display1+0x8>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:83
  digitApostrophe = digitApos;
    1aa4:	8f ef       	ldi	r24, 0xFF	; 255
    1aa6:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <display1+0x9>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:84
  digitColon = digitCol;
    1aaa:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <display1+0xa>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:85
  segmentA = segA;
    1aae:	e8 e0       	ldi	r30, 0x08	; 8
    1ab0:	e0 93 76 03 	sts	0x0376, r30	; 0x800376 <display1+0xd>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:86
  segmentB = segB;
    1ab4:	79 e0       	ldi	r23, 0x09	; 9
    1ab6:	70 93 77 03 	sts	0x0377, r23	; 0x800377 <display1+0xe>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:87
  segmentC = segC;
    1aba:	6a e0       	ldi	r22, 0x0A	; 10
    1abc:	60 93 78 03 	sts	0x0378, r22	; 0x800378 <display1+0xf>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:88
  segmentD = segD;
    1ac0:	5b e0       	ldi	r21, 0x0B	; 11
    1ac2:	50 93 79 03 	sts	0x0379, r21	; 0x800379 <display1+0x10>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:89
  segmentE = segE;
    1ac6:	4c e0       	ldi	r20, 0x0C	; 12
    1ac8:	40 93 7a 03 	sts	0x037A, r20	; 0x80037a <display1+0x11>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:90
  segmentF = segF;
    1acc:	3d e0       	ldi	r19, 0x0D	; 13
    1ace:	30 93 7b 03 	sts	0x037B, r19	; 0x80037b <display1+0x12>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:91
  segmentG = segG;
    1ad2:	2e e0       	ldi	r18, 0x0E	; 14
    1ad4:	20 93 7c 03 	sts	0x037C, r18	; 0x80037c <display1+0x13>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:92
  segmentDP = segDP;
    1ad8:	9f e0       	ldi	r25, 0x0F	; 15
    1ada:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <display1+0x14>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:93
  segmentApostrophe = segApos;
    1ade:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <display1+0xb>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:94
  segmentColon = segCol;
    1ae2:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <display1+0xc>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:98

  //Assign input values to variables
  //mode is what the digit pins must be set at for it to be turned on. 0 for common cathode, 1 for common anode
  mode = mode_in;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <display1>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:101
  if(mode == COMMON_ANODE)
  {
    DigitOn = HIGH;
    1aec:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <display1+0x1>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:102
    DigitOff = LOW;
    1af0:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <display1+0x2>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:103
    SegOn = LOW;
    1af4:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <display1+0x3>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:104
    SegOff = HIGH;
    1af8:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <display1+0x4>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:114
    DigitOff = HIGH;
    SegOn = HIGH;
    SegOff = LOW;
  }

  DigitPins[0] = digit1;
    1afc:	10 93 81 03 	sts	0x0381, r17	; 0x800381 <display1+0x18>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:115
  DigitPins[1] = digit2;
    1b00:	b0 93 82 03 	sts	0x0382, r27	; 0x800382 <display1+0x19>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:116
  DigitPins[2] = digit3;
    1b04:	a0 93 83 03 	sts	0x0383, r26	; 0x800383 <display1+0x1a>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:117
  DigitPins[3] = digit4;
    1b08:	f0 93 84 03 	sts	0x0384, r31	; 0x800384 <display1+0x1b>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:118
  SegmentPins[0] = segmentA;
    1b0c:	e0 93 85 03 	sts	0x0385, r30	; 0x800385 <display1+0x1c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:119
  SegmentPins[1] = segmentB;
    1b10:	70 93 86 03 	sts	0x0386, r23	; 0x800386 <display1+0x1d>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:120
  SegmentPins[2] = segmentC;
    1b14:	60 93 87 03 	sts	0x0387, r22	; 0x800387 <display1+0x1e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:121
  SegmentPins[3] = segmentD;
    1b18:	50 93 88 03 	sts	0x0388, r21	; 0x800388 <display1+0x1f>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:122
  SegmentPins[4] = segmentE;
    1b1c:	40 93 89 03 	sts	0x0389, r20	; 0x800389 <display1+0x20>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:123
  SegmentPins[5] = segmentF;
    1b20:	30 93 8a 03 	sts	0x038A, r19	; 0x80038a <display1+0x21>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:124
  SegmentPins[6] = segmentG;
    1b24:	20 93 8b 03 	sts	0x038B, r18	; 0x80038b <display1+0x22>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:125
  SegmentPins[7] = segmentDP;
    1b28:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <display1+0x23>
main():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:129

  //Turn everything Off before setting pin as output
  //Set all digit pins off. Low for common anode, high for common cathode
  for (byte digit = 0 ; digit < numberOfDigits ; digit++)
    1b2c:	10 e0       	ldi	r17, 0x00	; 0
Begin():
    1b2e:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <display1+0x15>
    1b32:	18 17       	cp	r17, r24
    1b34:	98 f4       	brcc	.+38     	; 0x1b5c <main+0x14e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:131
  {
    digitalWrite(DigitPins[digit], DigitOff);
    1b36:	81 2f       	mov	r24, r17
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9c 01       	movw	r18, r24
    1b3c:	27 59       	subi	r18, 0x97	; 151
    1b3e:	3c 4f       	sbci	r19, 0xFC	; 252
    1b40:	79 01       	movw	r14, r18
    1b42:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <display1+0x2>
    1b46:	f9 01       	movw	r30, r18
    1b48:	80 8d       	ldd	r24, Z+24	; 0x18
    1b4a:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:132
    pinMode(DigitPins[digit], OUTPUT);
    1b4e:	61 e0       	ldi	r22, 0x01	; 1
    1b50:	f7 01       	movw	r30, r14
    1b52:	80 8d       	ldd	r24, Z+24	; 0x18
    1b54:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:129
  SegmentPins[6] = segmentG;
  SegmentPins[7] = segmentDP;

  //Turn everything Off before setting pin as output
  //Set all digit pins off. Low for common anode, high for common cathode
  for (byte digit = 0 ; digit < numberOfDigits ; digit++)
    1b58:	1f 5f       	subi	r17, 0xFF	; 255
    1b5a:	e9 cf       	rjmp	.-46     	; 0x1b2e <main+0x120>
    1b5c:	09 e6       	ldi	r16, 0x69	; 105
    1b5e:	13 e0       	ldi	r17, 0x03	; 3
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:137
    pinMode(DigitPins[digit], OUTPUT);
  }
  //Set all segment pins off. High for common anode, low for common cathode
  for (byte seg = 0 ; seg < 8 ; seg++)
  {
    digitalWrite(SegmentPins[seg], SegOff);
    1b60:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <display1+0x4>
    1b64:	f8 01       	movw	r30, r16
    1b66:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b68:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:138
    pinMode(SegmentPins[seg], OUTPUT);
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	f8 01       	movw	r30, r16
    1b70:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b72:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
    1b76:	0f 5f       	subi	r16, 0xFF	; 255
    1b78:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:135
  {
    digitalWrite(DigitPins[digit], DigitOff);
    pinMode(DigitPins[digit], OUTPUT);
  }
  //Set all segment pins off. High for common anode, low for common cathode
  for (byte seg = 0 ; seg < 8 ; seg++)
    1b7a:	f3 e0       	ldi	r31, 0x03	; 3
    1b7c:	01 37       	cpi	r16, 0x71	; 113
    1b7e:	1f 07       	cpc	r17, r31
    1b80:	79 f7       	brne	.-34     	; 0x1b60 <main+0x152>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:141
  {
    digitalWrite(SegmentPins[seg], SegOff);
    pinMode(SegmentPins[seg], OUTPUT);
  }

  if (digitColon != 255)
    1b82:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <display1+0xa>
    1b86:	8f 3f       	cpi	r24, 0xFF	; 255
    1b88:	a1 f0       	breq	.+40     	; 0x1bb2 <main+0x1a4>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:143
  {
	digitalWrite(digitColon, DigitOff);
    1b8a:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <display1+0x2>
    1b8e:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:144
	pinMode(digitColon, OUTPUT);
    1b92:	61 e0       	ldi	r22, 0x01	; 1
    1b94:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <display1+0xa>
    1b98:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:145
	digitalWrite(segmentColon, SegOff);
    1b9c:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <display1+0x4>
    1ba0:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <display1+0xc>
    1ba4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:146
	pinMode(segmentColon, OUTPUT);
    1ba8:	61 e0       	ldi	r22, 0x01	; 1
    1baa:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <display1+0xc>
    1bae:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:148
  }
  if (digitApostrophe != 255)
    1bb2:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <display1+0x9>
    1bb6:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb8:	a1 f0       	breq	.+40     	; 0x1be2 <main+0x1d4>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:150
  {
	digitalWrite(digitApostrophe, DigitOff);
    1bba:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <display1+0x2>
    1bbe:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:151
	pinMode(digitApostrophe, OUTPUT);
    1bc2:	61 e0       	ldi	r22, 0x01	; 1
    1bc4:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <display1+0x9>
    1bc8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:152
	digitalWrite(segmentApostrophe, SegOff);
    1bcc:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <display1+0x4>
    1bd0:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <display1+0xb>
    1bd4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:153
	pinMode(segmentApostrophe, OUTPUT);
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <display1+0xb>
    1bde:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
SetBrightness():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:179
//We need to error check and map the incoming value
void SevSeg::SetBrightness(byte percentBright)
{
	//Error check and scale brightnessLevel
	if(percentBright > 100) percentBright = 100;
	brightnessDelay = map(percentBright, 0, 100, 0, FRAMEPERIOD); //map brightnessDelay to 0 to the max which is framePeriod
    1be2:	80 ed       	ldi	r24, 0xD0	; 208
    1be4:	97 e0       	ldi	r25, 0x07	; 7
    1be6:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <display1+0x17>
    1bea:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <display1+0x16>
setup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:223
void setup() {
//Setup Display Data
setupDisplay();
//Setup Inputs 
//setIN(); is a custom Function Defined at the bottom of the Program!
setIN(ok);
    1bee:	84 e1       	ldi	r24, 0x14	; 20
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0e 94 8b 04 	call	0x916	; 0x916 <setIN(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:224
setIN(plus);
    1bf6:	85 e1       	ldi	r24, 0x15	; 21
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	0e 94 8b 04 	call	0x916	; 0x916 <setIN(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:225
setIN(minus);
    1bfe:	86 e1       	ldi	r24, 0x16	; 22
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 8b 04 	call	0x916	; 0x916 <setIN(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:226
setIN(RINPIN);
    1c06:	88 e1       	ldi	r24, 0x18	; 24
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 8b 04 	call	0x916	; 0x916 <setIN(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:227
setIN(YINPIN);
    1c0e:	89 e1       	ldi	r24, 0x19	; 25
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	0e 94 8b 04 	call	0x916	; 0x916 <setIN(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:228
setIN(BINPIN);
    1c16:	8a e1       	ldi	r24, 0x1A	; 26
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e 94 8b 04 	call	0x916	; 0x916 <setIN(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:229
setIN(ROTPIN);
    1c1e:	8b e1       	ldi	r24, 0x1B	; 27
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	0e 94 8b 04 	call	0x916	; 0x916 <setIN(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:230
setIN(YOTPIN);
    1c26:	8c e1       	ldi	r24, 0x1C	; 28
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 94 8b 04 	call	0x916	; 0x916 <setIN(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:231
setIN(BOTPIN);
    1c2e:	8d e1       	ldi	r24, 0x1D	; 29
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0e 94 8b 04 	call	0x916	; 0x916 <setIN(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:232
setIN(current);
    1c36:	8e e1       	ldi	r24, 0x1E	; 30
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	0e 94 8b 04 	call	0x916	; 0x916 <setIN(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:233
setIN(hz);
    1c3e:	8f e1       	ldi	r24, 0x1F	; 31
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 8b 04 	call	0x916	; 0x916 <setIN(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:241
//setIN(setupPin); //change setup mode from RUN/SETUP//
///////////////////////////////////////////////////////

//Set Outputs
//setOUT(); is a custom Function Defined at the bottom of the Program!
setOUT(motorRFW);
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	0e 94 88 04 	call	0x910	; 0x910 <setOUT(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:242
setOUT(motorRBW);
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 88 04 	call	0x910	; 0x910 <setOUT(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:243
setOUT(motorYFW);
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	0e 94 88 04 	call	0x910	; 0x910 <setOUT(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:244
setOUT(motorYBW);
    1c5e:	83 e0       	ldi	r24, 0x03	; 3
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	0e 94 88 04 	call	0x910	; 0x910 <setOUT(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:245
setOUT(motorBFW);
    1c66:	84 e0       	ldi	r24, 0x04	; 4
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	0e 94 88 04 	call	0x910	; 0x910 <setOUT(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:246
setOUT(motorBBW);
    1c6e:	85 e0       	ldi	r24, 0x05	; 5
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	0e 94 88 04 	call	0x910	; 0x910 <setOUT(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:247
setOUT(contactor);
    1c76:	86 e0       	ldi	r24, 0x06	; 6
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 94 88 04 	call	0x910	; 0x910 <setOUT(int)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:257
//uncomment when programming Arduino/MCU
/**/

//using the EEPROM.h Librabry Included by the Arduino IDE & Arduino Core

IHV = 2 * EEPROM.read(0);
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <IHV+0x1>
    1c90:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <IHV>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:258
ILV = 2 * EEPROM.read(1);
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <ILV+0x1>
    1ca6:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <ILV>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:259
OHV = 2 * EEPROM.read(2);
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <OHV+0x1>
    1cbc:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <OHV>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:260
OLV = 2 * EEPROM.read(3);
    1cc0:	83 e0       	ldi	r24, 0x03	; 3
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <OLV+0x1>
    1cd2:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <OLV>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:261
SETV = 2 * EEPROM.read(4);
    1cd6:	84 e0       	ldi	r24, 0x04	; 4
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <SETV+0x1>
    1ce8:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <SETV>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:262
OVL = EEPROM.read(5);
    1cec:	85 e0       	ldi	r24, 0x05	; 5
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <OVL+0x1>
    1cfa:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <OVL>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:263
TON = EEPROM.read(6);
    1cfe:	86 e0       	ldi	r24, 0x06	; 6
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1d06:	08 2f       	mov	r16, r24
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <TON+0x1>
    1d0e:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <TON>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:264
TOFF = EEPROM.read(7);
    1d12:	87 e0       	ldi	r24, 0x07	; 7
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1d1a:	18 2f       	mov	r17, r24
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <TOFF+0x1>
    1d22:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <TOFF>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:265
DIFF = EEPROM.read(8);
    1d26:	88 e0       	ldi	r24, 0x08	; 8
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <DIFF+0x1>
    1d34:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <DIFF>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:266
VCALRI = 4 * EEPROM.read(9);
    1d38:	89 e0       	ldi	r24, 0x09	; 9
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1d40:	24 e0       	ldi	r18, 0x04	; 4
    1d42:	82 9f       	mul	r24, r18
    1d44:	c0 01       	movw	r24, r0
    1d46:	11 24       	eor	r1, r1
    1d48:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <VCALRI+0x1>
    1d4c:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <VCALRI>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:267
VCALRO = 4 * EEPROM.read(10);
    1d50:	8a e0       	ldi	r24, 0x0A	; 10
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1d58:	34 e0       	ldi	r19, 0x04	; 4
    1d5a:	83 9f       	mul	r24, r19
    1d5c:	c0 01       	movw	r24, r0
    1d5e:	11 24       	eor	r1, r1
    1d60:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <VCALRO+0x1>
    1d64:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <VCALRO>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:268
VCALYI = 4 * EEPROM.read(11);
    1d68:	8b e0       	ldi	r24, 0x0B	; 11
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1d70:	e4 e0       	ldi	r30, 0x04	; 4
    1d72:	8e 9f       	mul	r24, r30
    1d74:	c0 01       	movw	r24, r0
    1d76:	11 24       	eor	r1, r1
    1d78:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <VCALYI+0x1>
    1d7c:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <VCALYI>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:269
VCALYO = 4 * EEPROM.read(12);
    1d80:	8c e0       	ldi	r24, 0x0C	; 12
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1d88:	f4 e0       	ldi	r31, 0x04	; 4
    1d8a:	8f 9f       	mul	r24, r31
    1d8c:	c0 01       	movw	r24, r0
    1d8e:	11 24       	eor	r1, r1
    1d90:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <VCALYO+0x1>
    1d94:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <VCALYO>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:270
VCALBI = 4 * EEPROM.read(13);
    1d98:	8d e0       	ldi	r24, 0x0D	; 13
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1da0:	24 e0       	ldi	r18, 0x04	; 4
    1da2:	82 9f       	mul	r24, r18
    1da4:	c0 01       	movw	r24, r0
    1da6:	11 24       	eor	r1, r1
    1da8:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <VCALBI+0x1>
    1dac:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <VCALBI>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:271
VCALBO = 4 * EEPROM.read(14);
    1db0:	8e e0       	ldi	r24, 0x0E	; 14
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1db8:	34 e0       	ldi	r19, 0x04	; 4
    1dba:	83 9f       	mul	r24, r19
    1dbc:	c0 01       	movw	r24, r0
    1dbe:	11 24       	eor	r1, r1
    1dc0:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <VCALBO+0x1>
    1dc4:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <VCALBO>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:272
ACAL = 4 * EEPROM.read(15);
    1dc8:	8f e0       	ldi	r24, 0x0F	; 15
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1dd0:	e4 e0       	ldi	r30, 0x04	; 4
    1dd2:	8e 9f       	mul	r24, r30
    1dd4:	c0 01       	movw	r24, r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <ACAL+0x1>
    1ddc:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <ACAL>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:273
DIRR = EEPROM.read(16);
    1de0:	80 e1       	ldi	r24, 0x10	; 16
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <DIRR+0x1>
    1dee:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <DIRR>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:274
DIRY = EEPROM.read(17);
    1df2:	81 e1       	ldi	r24, 0x11	; 17
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <DIRY+0x1>
    1e00:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <DIRY>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:275
DIRB = EEPROM.read(18);
    1e04:	82 e1       	ldi	r24, 0x12	; 18
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <EEPROMClass::read(int) [clone .isra.1]>
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <DIRB+0x1>
    1e12:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <DIRB>
initDuration():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
            break;
        case MILLISECONDS:
            duration.millis = time;
            break;
        case SECONDS:
            duration.seconds = time;
    1e16:	60 2f       	mov	r22, r16
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__floatunsisf>
    1e22:	60 93 2a 03 	sts	0x032A, r22	; 0x80032a <on+0x15>
    1e26:	70 93 2b 03 	sts	0x032B, r23	; 0x80032b <on+0x16>
    1e2a:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <on+0x17>
    1e2e:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <on+0x18>
setDuration():
    1e32:	85 e1       	ldi	r24, 0x15	; 21
    1e34:	93 e0       	ldi	r25, 0x03	; 3
    1e36:	0e 94 8d 03 	call	0x71a	; 0x71a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
initDuration():
    1e3a:	61 2f       	mov	r22, r17
    1e3c:	70 e0       	ldi	r23, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__floatunsisf>
    1e46:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <off+0x15>
    1e4a:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <off+0x16>
    1e4e:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <off+0x17>
    1e52:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <off+0x18>
setDuration():
    1e56:	84 ef       	ldi	r24, 0xF4	; 244
    1e58:	92 e0       	ldi	r25, 0x02	; 2
    1e5a:	0e 94 8d 03 	call	0x71a	; 0x71a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
setup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:308

//Setup Variable Timers after the variable is read from the Memory!
on.setDuration(TON, SECONDS);
off.setDuration(TOFF, SECONDS);
//Reset the Timers after time update.
on.reset();
    1e5e:	85 e1       	ldi	r24, 0x15	; 21
    1e60:	93 e0       	ldi	r25, 0x03	; 3
    1e62:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.17]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:309
off.reset();
    1e66:	84 ef       	ldi	r24, 0xF4	; 244
    1e68:	92 e0       	ldi	r25, 0x02	; 2
    1e6a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.17]>
checkok():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1274
//Check OK Button Pressed



void checkok() {
  if(read(ok) && okold == !read(ok)){
    1e6e:	77 24       	eor	r7, r7
    1e70:	73 94       	inc	r7
    1e72:	8e 01       	movw	r16, r28
    1e74:	01 5f       	subi	r16, 0xF1	; 241
    1e76:	1f 4f       	sbci	r17, 0xFF	; 255
main():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	a7 2e       	mov	r10, r23
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
    1e7e:	b7 2e       	mov	r11, r23
runSetup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1181
      case 1:
        voltCalibRI();
        if(enc > 999){
          enc = 0;
        } else if(enc < 0){
          enc = 999;
    1e80:	e7 ee       	ldi	r30, 0xE7	; 231
    1e82:	8e 2e       	mov	r8, r30
    1e84:	e3 e0       	ldi	r30, 0x03	; 3
    1e86:	9e 2e       	mov	r9, r30
checkok():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1274
//Check OK Button Pressed



void checkok() {
  if(read(ok) && okold == !read(ok)){
    1e88:	84 e1       	ldi	r24, 0x14	; 20
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    1e90:	88 23       	and	r24, r24
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <main+0x488>
    1e94:	0f c2       	rjmp	.+1054   	; 0x22b4 <main+0x8a6>
    1e96:	e0 90 65 03 	lds	r14, 0x0365	; 0x800365 <encMenu>
    1e9a:	f0 90 66 03 	lds	r15, 0x0366	; 0x800366 <encMenu+0x1>
    1e9e:	84 e1       	ldi	r24, 0x14	; 20
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    1ea6:	87 25       	eor	r24, r7
    1ea8:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <okold>
    1eac:	89 13       	cpse	r24, r25
    1eae:	02 c2       	rjmp	.+1028   	; 0x22b4 <main+0x8a6>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1275
  okold = read(ok);
    1eb0:	84 e1       	ldi	r24, 0x14	; 20
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    1eb8:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <okold>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1276
  if(encMenu != 10){
    1ebc:	fa e0       	ldi	r31, 0x0A	; 10
    1ebe:	ef 16       	cp	r14, r31
    1ec0:	f1 04       	cpc	r15, r1
    1ec2:	81 f1       	breq	.+96     	; 0x1f24 <main+0x516>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1277
    encMenu++;
    1ec4:	2f ef       	ldi	r18, 0xFF	; 255
    1ec6:	e2 1a       	sub	r14, r18
    1ec8:	f2 0a       	sbc	r15, r18
    1eca:	f0 92 66 03 	sts	0x0366, r15	; 0x800366 <encMenu+0x1>
    1ece:	e0 92 65 03 	sts	0x0365, r14	; 0x800365 <encMenu>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1289
    }
    else{
      encMenu++;
    }
  }
  if(!mode && !tmrstp){
    1ed2:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <mode>
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	06 c0       	rjmp	.+12     	; 0x1ee6 <main+0x4d8>
    1eda:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <tmrstp>
    1ede:	81 11       	cpse	r24, r1
    1ee0:	47 c0       	rjmp	.+142    	; 0x1f70 <main+0x562>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1290
    tmrstp = true;
    1ee2:	70 92 5d 02 	sts	0x025D, r7	; 0x80025d <tmrstp>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1295
  }
  else if(!mode) {
    tmrstp = false;
  }
  refresh.reset();
    1ee6:	86 ec       	ldi	r24, 0xC6	; 198
    1ee8:	92 e0       	ldi	r25, 0x02	; 2
    1eea:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.17]>
    1eee:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <encMenu>
    1ef2:	f0 91 66 03 	lds	r31, 0x0366	; 0x800366 <encMenu+0x1>
encUpdate():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1331
}

//Update Parameters on Menu Change

void encUpdate() {
if(auth == false){  
    1ef6:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <auth>
    1efa:	31 97       	sbiw	r30, 0x01	; 1
    1efc:	81 11       	cpse	r24, r1
    1efe:	15 c3       	rjmp	.+1578   	; 0x252a <main+0xb1c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1332
  switch (encMenu)
    1f00:	ea 30       	cpi	r30, 0x0A	; 10
    1f02:	f1 05       	cpc	r31, r1
    1f04:	08 f0       	brcs	.+2      	; 0x1f08 <main+0x4fa>
    1f06:	f6 c0       	rjmp	.+492    	; 0x20f4 <main+0x6e6>
    1f08:	e8 57       	subi	r30, 0x78	; 120
    1f0a:	f0 4f       	sbci	r31, 0xF0	; 240
    1f0c:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__tablejump2__>
    1f10:	bb 0f       	add	r27, r27
    1f12:	c4 0f       	add	r28, r20
    1f14:	d1 0f       	add	r29, r17
    1f16:	de 0f       	add	r29, r30
    1f18:	eb 0f       	add	r30, r27
    1f1a:	f8 0f       	add	r31, r24
    1f1c:	05 10       	cpse	r0, r5
    1f1e:	12 10       	cpse	r1, r2
    1f20:	3b 10       	cpse	r3, r11
    1f22:	60 10       	cpse	r6, r0
checkok():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1280
  okold = read(ok);
  if(encMenu != 10){
    encMenu++;
  } else if (encMenu == 10){
    // here 1313 is the secret admin code for opening motor direction and calibration settings
    if(padm[ 0 ] == 1 && padm[ 1 ] == 3 && padm[ 2 ] == 1 && padm[ 3 ] == 3){
    1f24:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <padm>
    1f28:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <padm+0x1>
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	c9 f4       	brne	.+50     	; 0x1f62 <main+0x554>
    1f30:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <padm+0x2>
    1f34:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <padm+0x3>
    1f38:	03 97       	sbiw	r24, 0x03	; 3
    1f3a:	99 f4       	brne	.+38     	; 0x1f62 <main+0x554>
    1f3c:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <padm+0x4>
    1f40:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <padm+0x5>
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	69 f4       	brne	.+26     	; 0x1f62 <main+0x554>
    1f48:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <padm+0x6>
    1f4c:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <padm+0x7>
    1f50:	03 97       	sbiw	r24, 0x03	; 3
    1f52:	39 f4       	brne	.+14     	; 0x1f62 <main+0x554>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1282
      //if(padm == pass){
      auth = true;
    1f54:	70 92 e9 02 	sts	0x02E9, r7	; 0x8002e9 <auth>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1283
      encMenu = 0;
    1f58:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <encMenu+0x1>
    1f5c:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <encMenu>
    1f60:	b8 cf       	rjmp	.-144    	; 0x1ed2 <main+0x4c4>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1286
    }
    else{
      encMenu++;
    1f62:	8b e0       	ldi	r24, 0x0B	; 11
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <encMenu+0x1>
    1f6a:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <encMenu>
    1f6e:	b1 cf       	rjmp	.-158    	; 0x1ed2 <main+0x4c4>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1293
  }
  if(!mode && !tmrstp){
    tmrstp = true;
  }
  else if(!mode) {
    tmrstp = false;
    1f70:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <tmrstp>
    1f74:	b8 cf       	rjmp	.-144    	; 0x1ee6 <main+0x4d8>
encUpdate():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1337
  switch (encMenu)
  {
  case 0:
    break;
  case 1:
    enc = IHV;
    1f76:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <IHV>
    1f7a:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <IHV+0x1>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1454
    enc = DIRY;
    done();
    break;
  case 11:
    DIRY = enc;
    enc = DIRB;
    1f7e:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <enc+0x1>
    1f82:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <enc>
    1f86:	74 c0       	rjmp	.+232    	; 0x2070 <main+0x662>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1341
  case 1:
    enc = IHV;
    done();
    break;
  case 2:
    IHV = enc;
    1f88:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    1f8c:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    1f90:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <IHV+0x1>
    1f94:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <IHV>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1342
    enc = ILV;
    1f98:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <ILV>
    1f9c:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <ILV+0x1>
    1fa0:	ee cf       	rjmp	.-36     	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1346
    done();
    break;
  case 3:
    ILV = enc;
    1fa2:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    1fa6:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    1faa:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <ILV+0x1>
    1fae:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <ILV>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1347
    enc = OHV;
    1fb2:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <OHV>
    1fb6:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <OHV+0x1>
    1fba:	e1 cf       	rjmp	.-62     	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1351
    done();
    break;
  case 4:
    OHV = enc;
    1fbc:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    1fc0:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    1fc4:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <OHV+0x1>
    1fc8:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <OHV>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1352
    enc = OLV;
    1fcc:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <OLV>
    1fd0:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <OLV+0x1>
    1fd4:	d4 cf       	rjmp	.-88     	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1356
    done();
    break;
  case 5:
    OLV = enc;
    1fd6:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    1fda:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    1fde:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <OLV+0x1>
    1fe2:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <OLV>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1357
    enc = SETV;
    1fe6:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <SETV>
    1fea:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <SETV+0x1>
    1fee:	c7 cf       	rjmp	.-114    	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1361
    done();
    break;
  case 6:
    SETV = enc;
    1ff0:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    1ff4:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    1ff8:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <SETV+0x1>
    1ffc:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <SETV>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1362
    enc = OVL;
    2000:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <OVL>
    2004:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <OVL+0x1>
    2008:	ba cf       	rjmp	.-140    	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1366
    done();
    break;
  case 7:
    OVL = enc;
    200a:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    200e:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    2012:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <OVL+0x1>
    2016:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <OVL>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1367
    enc = TON;
    201a:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <TON>
    201e:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <TON+0x1>
    2022:	ad cf       	rjmp	.-166    	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1371
    done();
    break;
  case 8:
    TON = enc;
    2024:	60 91 e7 02 	lds	r22, 0x02E7	; 0x8002e7 <enc>
    2028:	70 91 e8 02 	lds	r23, 0x02E8	; 0x8002e8 <enc+0x1>
    202c:	70 93 52 02 	sts	0x0252, r23	; 0x800252 <TON+0x1>
    2030:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <TON>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1372
    enc = TOFF;
    2034:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <TOFF>
    2038:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <TOFF+0x1>
    203c:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <enc+0x1>
    2040:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <enc>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1373
    on.setDuration(TON, SECONDS);
    2044:	07 2e       	mov	r0, r23
    2046:	00 0c       	add	r0, r0
    2048:	88 0b       	sbc	r24, r24
    204a:	99 0b       	sbc	r25, r25
initDuration():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
    204c:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__floatunsisf>
    2050:	60 93 2a 03 	sts	0x032A, r22	; 0x80032a <on+0x15>
    2054:	70 93 2b 03 	sts	0x032B, r23	; 0x80032b <on+0x16>
    2058:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <on+0x17>
    205c:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <on+0x18>
setDuration():
    2060:	85 e1       	ldi	r24, 0x15	; 21
    2062:	93 e0       	ldi	r25, 0x03	; 3
    2064:	0e 94 8d 03 	call	0x71a	; 0x71a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
encUpdate():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1374
    on.reset();
    2068:	85 e1       	ldi	r24, 0x15	; 21
    206a:	93 e0       	ldi	r25, 0x03	; 3
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1381
    break;
  case 9:
    TOFF = enc;
    enc = DIFF;
    off.setDuration(TOFF, SECONDS);
    off.reset();
    206c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.17]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1459
    enc = DIRB;
    done();
    break;
  case 12:
    DIRB = enc;
    done();
    2070:	0e 94 a5 0b 	call	0x174a	; 0x174a <done()>
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <main+0x6e6>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1378
    on.setDuration(TON, SECONDS);
    on.reset();
    done();
    break;
  case 9:
    TOFF = enc;
    2076:	60 91 e7 02 	lds	r22, 0x02E7	; 0x8002e7 <enc>
    207a:	70 91 e8 02 	lds	r23, 0x02E8	; 0x8002e8 <enc+0x1>
    207e:	70 93 50 02 	sts	0x0250, r23	; 0x800250 <TOFF+0x1>
    2082:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <TOFF>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1379
    enc = DIFF;
    2086:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <DIFF>
    208a:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <DIFF+0x1>
    208e:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <enc+0x1>
    2092:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <enc>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1380
    off.setDuration(TOFF, SECONDS);
    2096:	07 2e       	mov	r0, r23
    2098:	00 0c       	add	r0, r0
    209a:	88 0b       	sbc	r24, r24
    209c:	99 0b       	sbc	r25, r25
initDuration():
C:\Users\admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
    209e:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__floatunsisf>
    20a2:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <off+0x15>
    20a6:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <off+0x16>
    20aa:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <off+0x17>
    20ae:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <off+0x18>
setDuration():
    20b2:	84 ef       	ldi	r24, 0xF4	; 244
    20b4:	92 e0       	ldi	r25, 0x02	; 2
    20b6:	0e 94 8d 03 	call	0x71a	; 0x71a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
encUpdate():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1381
    off.reset();
    20ba:	84 ef       	ldi	r24, 0xF4	; 244
    20bc:	92 e0       	ldi	r25, 0x02	; 2
    20be:	d6 cf       	rjmp	.-84     	; 0x206c <main+0x65e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1385
    done();
    break;
  case 10:
    DIFF = enc;
    20c0:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    20c4:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    20c8:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <DIFF+0x1>
    20cc:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <DIFF>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1386
    done();
    20d0:	0e 94 a5 0b 	call	0x174a	; 0x174a <done()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1387
    padm[ 0 ] = 0;
    20d4:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <padm+0x1>
    20d8:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <padm>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1388
    padm[ 1 ] = 0;
    20dc:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <padm+0x3>
    20e0:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <padm+0x2>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1389
    padm[ 2 ] = 0;
    20e4:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <padm+0x5>
    20e8:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <padm+0x4>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1390
    padm[ 3 ] = 0;
    20ec:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <padm+0x7>
    20f0:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <padm+0x6>
eepromUpdate():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1307
}

//Save Parameters to MCU EEPROM Memory (only if changed)

void eepromUpdate() {
  EEPROM.update(0, IHV/2);
    20f4:	60 91 5b 02 	lds	r22, 0x025B	; 0x80025b <IHV>
    20f8:	70 91 5c 02 	lds	r23, 0x025C	; 0x80025c <IHV+0x1>
    20fc:	77 ff       	sbrs	r23, 7
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <main+0x6f6>
    2100:	6f 5f       	subi	r22, 0xFF	; 255
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	75 95       	asr	r23
    2106:	67 95       	ror	r22
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1308
  EEPROM.update(1, ILV/2);
    2110:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <ILV>
    2114:	70 91 5a 02 	lds	r23, 0x025A	; 0x80025a <ILV+0x1>
    2118:	77 ff       	sbrs	r23, 7
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <main+0x712>
    211c:	6f 5f       	subi	r22, 0xFF	; 255
    211e:	7f 4f       	sbci	r23, 0xFF	; 255
    2120:	75 95       	asr	r23
    2122:	67 95       	ror	r22
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1309
  EEPROM.update(2, OHV/2);
    212c:	60 91 57 02 	lds	r22, 0x0257	; 0x800257 <OHV>
    2130:	70 91 58 02 	lds	r23, 0x0258	; 0x800258 <OHV+0x1>
    2134:	77 ff       	sbrs	r23, 7
    2136:	02 c0       	rjmp	.+4      	; 0x213c <main+0x72e>
    2138:	6f 5f       	subi	r22, 0xFF	; 255
    213a:	7f 4f       	sbci	r23, 0xFF	; 255
    213c:	75 95       	asr	r23
    213e:	67 95       	ror	r22
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1310
  EEPROM.update(3, OLV/2);
    2148:	60 91 55 02 	lds	r22, 0x0255	; 0x800255 <OLV>
    214c:	70 91 56 02 	lds	r23, 0x0256	; 0x800256 <OLV+0x1>
    2150:	77 ff       	sbrs	r23, 7
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <main+0x74a>
    2154:	6f 5f       	subi	r22, 0xFF	; 255
    2156:	7f 4f       	sbci	r23, 0xFF	; 255
    2158:	75 95       	asr	r23
    215a:	67 95       	ror	r22
    215c:	83 e0       	ldi	r24, 0x03	; 3
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1311
  EEPROM.update(4, SETV/2);
    2164:	60 91 3e 03 	lds	r22, 0x033E	; 0x80033e <SETV>
    2168:	70 91 3f 03 	lds	r23, 0x033F	; 0x80033f <SETV+0x1>
    216c:	77 ff       	sbrs	r23, 7
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <main+0x766>
    2170:	6f 5f       	subi	r22, 0xFF	; 255
    2172:	7f 4f       	sbci	r23, 0xFF	; 255
    2174:	75 95       	asr	r23
    2176:	67 95       	ror	r22
    2178:	84 e0       	ldi	r24, 0x04	; 4
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1312
  EEPROM.update(5, OVL);
    2180:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <OVL>
    2184:	85 e0       	ldi	r24, 0x05	; 5
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1313
  EEPROM.update(6, TON);
    218c:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <TON>
    2190:	86 e0       	ldi	r24, 0x06	; 6
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1314
  EEPROM.update(7, TOFF);
    2198:	60 91 4f 02 	lds	r22, 0x024F	; 0x80024f <TOFF>
    219c:	87 e0       	ldi	r24, 0x07	; 7
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1315
  EEPROM.update(8, DIFF);
    21a4:	60 91 4d 02 	lds	r22, 0x024D	; 0x80024d <DIFF>
    21a8:	88 e0       	ldi	r24, 0x08	; 8
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1316
  EEPROM.update(9, VCALRI/4);
    21b0:	60 91 4b 02 	lds	r22, 0x024B	; 0x80024b <VCALRI>
    21b4:	70 91 4c 02 	lds	r23, 0x024C	; 0x80024c <VCALRI+0x1>
    21b8:	77 ff       	sbrs	r23, 7
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <main+0x7b2>
    21bc:	6d 5f       	subi	r22, 0xFD	; 253
    21be:	7f 4f       	sbci	r23, 0xFF	; 255
    21c0:	75 95       	asr	r23
    21c2:	67 95       	ror	r22
    21c4:	75 95       	asr	r23
    21c6:	67 95       	ror	r22
    21c8:	89 e0       	ldi	r24, 0x09	; 9
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1317
  EEPROM.update(10, VCALRO/4);
    21d0:	60 91 49 02 	lds	r22, 0x0249	; 0x800249 <VCALRO>
    21d4:	70 91 4a 02 	lds	r23, 0x024A	; 0x80024a <VCALRO+0x1>
    21d8:	77 ff       	sbrs	r23, 7
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <main+0x7d2>
    21dc:	6d 5f       	subi	r22, 0xFD	; 253
    21de:	7f 4f       	sbci	r23, 0xFF	; 255
    21e0:	75 95       	asr	r23
    21e2:	67 95       	ror	r22
    21e4:	75 95       	asr	r23
    21e6:	67 95       	ror	r22
    21e8:	8a e0       	ldi	r24, 0x0A	; 10
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1318
  EEPROM.update(11, VCALYI/4);
    21f0:	60 91 47 02 	lds	r22, 0x0247	; 0x800247 <VCALYI>
    21f4:	70 91 48 02 	lds	r23, 0x0248	; 0x800248 <VCALYI+0x1>
    21f8:	77 ff       	sbrs	r23, 7
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <main+0x7f2>
    21fc:	6d 5f       	subi	r22, 0xFD	; 253
    21fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2200:	75 95       	asr	r23
    2202:	67 95       	ror	r22
    2204:	75 95       	asr	r23
    2206:	67 95       	ror	r22
    2208:	8b e0       	ldi	r24, 0x0B	; 11
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1319
  EEPROM.update(12, VCALYO/4);
    2210:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <VCALYO>
    2214:	70 91 46 02 	lds	r23, 0x0246	; 0x800246 <VCALYO+0x1>
    2218:	77 ff       	sbrs	r23, 7
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <main+0x812>
    221c:	6d 5f       	subi	r22, 0xFD	; 253
    221e:	7f 4f       	sbci	r23, 0xFF	; 255
    2220:	75 95       	asr	r23
    2222:	67 95       	ror	r22
    2224:	75 95       	asr	r23
    2226:	67 95       	ror	r22
    2228:	8c e0       	ldi	r24, 0x0C	; 12
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1320
  EEPROM.update(13, VCALBI/4);
    2230:	60 91 43 02 	lds	r22, 0x0243	; 0x800243 <VCALBI>
    2234:	70 91 44 02 	lds	r23, 0x0244	; 0x800244 <VCALBI+0x1>
    2238:	77 ff       	sbrs	r23, 7
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <main+0x832>
    223c:	6d 5f       	subi	r22, 0xFD	; 253
    223e:	7f 4f       	sbci	r23, 0xFF	; 255
    2240:	75 95       	asr	r23
    2242:	67 95       	ror	r22
    2244:	75 95       	asr	r23
    2246:	67 95       	ror	r22
    2248:	8d e0       	ldi	r24, 0x0D	; 13
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1321
  EEPROM.update(14, VCALBO/4);
    2250:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <VCALBO>
    2254:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <VCALBO+0x1>
    2258:	77 ff       	sbrs	r23, 7
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <main+0x852>
    225c:	6d 5f       	subi	r22, 0xFD	; 253
    225e:	7f 4f       	sbci	r23, 0xFF	; 255
    2260:	75 95       	asr	r23
    2262:	67 95       	ror	r22
    2264:	75 95       	asr	r23
    2266:	67 95       	ror	r22
    2268:	8e e0       	ldi	r24, 0x0E	; 14
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1322
  EEPROM.update(15, ACAL/4);
    2270:	60 91 3f 02 	lds	r22, 0x023F	; 0x80023f <ACAL>
    2274:	70 91 40 02 	lds	r23, 0x0240	; 0x800240 <ACAL+0x1>
    2278:	77 ff       	sbrs	r23, 7
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <main+0x872>
    227c:	6d 5f       	subi	r22, 0xFD	; 253
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
    2280:	75 95       	asr	r23
    2282:	67 95       	ror	r22
    2284:	75 95       	asr	r23
    2286:	67 95       	ror	r22
    2288:	8f e0       	ldi	r24, 0x0F	; 15
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1323
  EEPROM.update(16, DIRR);
    2290:	60 91 42 03 	lds	r22, 0x0342	; 0x800342 <DIRR>
    2294:	80 e1       	ldi	r24, 0x10	; 16
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1324
  EEPROM.update(17, DIRY);
    229c:	60 91 3c 03 	lds	r22, 0x033C	; 0x80033c <DIRY>
    22a0:	81 e1       	ldi	r24, 0x11	; 17
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1325
  EEPROM.update(18, DIRB);
    22a8:	60 91 38 03 	lds	r22, 0x0338	; 0x800338 <DIRB>
    22ac:	82 e1       	ldi	r24, 0x12	; 18
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
checkok():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1299
  }
  refresh.reset();
  encUpdate();
  eepromUpdate();
  }
  if(read(ok) == false){
    22b4:	84 e1       	ldi	r24, 0x14	; 20
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    22bc:	81 11       	cpse	r24, r1
    22be:	06 c0       	rjmp	.+12     	; 0x22cc <main+0x8be>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1300
  okold = read(ok);
    22c0:	84 e1       	ldi	r24, 0x14	; 20
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    22c8:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <okold>
checkplus():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1480
//Check Plus Button Pressed



void checkplus() {
  if(encMenu != 10){
    22cc:	e0 90 65 03 	lds	r14, 0x0365	; 0x800365 <encMenu>
    22d0:	f0 90 66 03 	lds	r15, 0x0366	; 0x800366 <encMenu+0x1>
    22d4:	3a e0       	ldi	r19, 0x0A	; 10
    22d6:	e3 16       	cp	r14, r19
    22d8:	f1 04       	cpc	r15, r1
    22da:	e9 f0       	breq	.+58     	; 0x2316 <main+0x908>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1481
    if(read(plus)){
    22dc:	85 e1       	ldi	r24, 0x15	; 21
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    22e4:	88 23       	and	r24, r24
    22e6:	b9 f0       	breq	.+46     	; 0x2316 <main+0x908>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1482
      if(btn0.triggered(false)){
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	80 e6       	ldi	r24, 0x60	; 96
    22ec:	92 e0       	ldi	r25, 0x02	; 2
    22ee:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
    22f2:	88 23       	and	r24, r24
    22f4:	81 f0       	breq	.+32     	; 0x2316 <main+0x908>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1483
        if(inch.triggered(true)){
    22f6:	61 e0       	ldi	r22, 0x01	; 1
    22f8:	84 e8       	ldi	r24, 0x84	; 132
    22fa:	92 e0       	ldi	r25, 0x02	; 2
    22fc:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
    2300:	88 23       	and	r24, r24
    2302:	49 f0       	breq	.+18     	; 0x2316 <main+0x908>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1484
          enc++;
    2304:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    2308:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    230c:	01 96       	adiw	r24, 0x01	; 1
    230e:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <enc+0x1>
    2312:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <enc>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1489
        }
      }
    }
  }
  if(read(plus) && plusold == !read(plus)){
    2316:	85 e1       	ldi	r24, 0x15	; 21
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    231e:	88 23       	and	r24, r24
    2320:	51 f1       	breq	.+84     	; 0x2376 <main+0x968>
    2322:	85 e1       	ldi	r24, 0x15	; 21
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    232a:	87 25       	eor	r24, r7
    232c:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <plusold>
    2330:	89 13       	cpse	r24, r25
    2332:	21 c0       	rjmp	.+66     	; 0x2376 <main+0x968>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1490
  plusold = read(plus);
    2334:	85 e1       	ldi	r24, 0x15	; 21
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    233c:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <plusold>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1491
  if(encMenu != 10){
    2340:	8a e0       	ldi	r24, 0x0A	; 10
    2342:	e8 16       	cp	r14, r24
    2344:	f1 04       	cpc	r15, r1
    2346:	09 f4       	brne	.+2      	; 0x234a <main+0x93c>
    2348:	87 c1       	rjmp	.+782    	; 0x2658 <main+0xc4a>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1492
    enc++;
    234a:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    234e:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    2352:	01 96       	adiw	r24, 0x01	; 1
    2354:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <enc+0x1>
    2358:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <enc>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1512
        break;
      default:
        break;
    }
  }
  if(!mode){
    235c:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <mode>
    2360:	81 11       	cpse	r24, r1
    2362:	09 c0       	rjmp	.+18     	; 0x2376 <main+0x968>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1513
    menu++;
    2364:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <menu>
    2368:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <menu+0x1>
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <menu+0x1>
    2372:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <menu>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1516
  }
  }
  if(read(plus) == false){
    2376:	85 e1       	ldi	r24, 0x15	; 21
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    237e:	81 11       	cpse	r24, r1
    2380:	0a c0       	rjmp	.+20     	; 0x2396 <main+0x988>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1517
  plusold = read(plus);
    2382:	85 e1       	ldi	r24, 0x15	; 21
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    238a:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <plusold>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1518
  btn0.reset();
    238e:	80 e6       	ldi	r24, 0x60	; 96
    2390:	92 e0       	ldi	r25, 0x02	; 2
    2392:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.17]>
checkminus():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1527
//Check Minus Button Pressed



void checkminus() {
  if(encMenu != 10){
    2396:	9a e0       	ldi	r25, 0x0A	; 10
    2398:	e9 16       	cp	r14, r25
    239a:	f1 04       	cpc	r15, r1
    239c:	e9 f0       	breq	.+58     	; 0x23d8 <main+0x9ca>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1528
    if(read(minus)){
    239e:	86 e1       	ldi	r24, 0x16	; 22
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    23a6:	88 23       	and	r24, r24
    23a8:	b9 f0       	breq	.+46     	; 0x23d8 <main+0x9ca>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1529
      if(btn1.triggered(false)){
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	85 ea       	ldi	r24, 0xA5	; 165
    23ae:	92 e0       	ldi	r25, 0x02	; 2
    23b0:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
    23b4:	88 23       	and	r24, r24
    23b6:	81 f0       	breq	.+32     	; 0x23d8 <main+0x9ca>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1530
        if(inch.triggered(true)){
    23b8:	61 e0       	ldi	r22, 0x01	; 1
    23ba:	84 e8       	ldi	r24, 0x84	; 132
    23bc:	92 e0       	ldi	r25, 0x02	; 2
    23be:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
    23c2:	88 23       	and	r24, r24
    23c4:	49 f0       	breq	.+18     	; 0x23d8 <main+0x9ca>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1531
          enc--;
    23c6:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    23ca:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <enc+0x1>
    23d4:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <enc>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1536
        }
      }
    }
  }
  if(read(minus) && minusold == !read(minus)){
    23d8:	86 e1       	ldi	r24, 0x16	; 22
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    23e0:	88 23       	and	r24, r24
    23e2:	51 f1       	breq	.+84     	; 0x2438 <main+0xa2a>
    23e4:	86 e1       	ldi	r24, 0x16	; 22
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    23ec:	87 25       	eor	r24, r7
    23ee:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <minusold>
    23f2:	89 13       	cpse	r24, r25
    23f4:	21 c0       	rjmp	.+66     	; 0x2438 <main+0xa2a>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1537
    minusold = read(minus);
    23f6:	86 e1       	ldi	r24, 0x16	; 22
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    23fe:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <minusold>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1538
    if(encMenu != 10){
    2402:	ea e0       	ldi	r30, 0x0A	; 10
    2404:	ee 16       	cp	r14, r30
    2406:	f1 04       	cpc	r15, r1
    2408:	09 f4       	brne	.+2      	; 0x240c <main+0x9fe>
    240a:	5a c5       	rjmp	.+2740   	; 0x2ec0 <main+0x14b2>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1539
      enc--;
    240c:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    2410:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <enc+0x1>
    241a:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <enc>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1543
    } if(encMenu == 10) {
      digstat = digstat + 1;
    }
    if(!mode){
    241e:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <mode>
    2422:	81 11       	cpse	r24, r1
    2424:	09 c0       	rjmp	.+18     	; 0x2438 <main+0xa2a>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1544
      menu--;
    2426:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <menu>
    242a:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <menu+0x1>
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <menu+0x1>
    2434:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <menu>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1547
    }
  }
  if(read(minus) == false){
    2438:	86 e1       	ldi	r24, 0x16	; 22
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    2440:	81 11       	cpse	r24, r1
    2442:	0a c0       	rjmp	.+20     	; 0x2458 <main+0xa4a>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1548
  minusold = read(minus);
    2444:	86 e1       	ldi	r24, 0x16	; 22
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    244c:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <minusold>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1549
  btn1.reset();
    2450:	85 ea       	ldi	r24, 0xA5	; 165
    2452:	92 e0       	ldi	r25, 0x02	; 2
    2454:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.17]>
loop():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:331
  }
*/
///////////////////////////////////////////////////////
  //Switch to Parameter Edit/Run Mode
  /* Uncomment this for not using setup Pin*/
  if(mode){
    2458:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <mode>
    245c:	88 23       	and	r24, r24
    245e:	09 f4       	brne	.+2      	; 0x2462 <main+0xa54>
    2460:	02 c4       	rjmp	.+2052   	; 0x2c66 <main+0x1258>
runSetup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1115
}

//Change Screens/Menus on pessing OK/Menu

void runSetup() {
  if(digstat > 3){ digstat = 0; }
    2462:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <digstat>
    2466:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <digstat+0x1>
    246a:	04 97       	sbiw	r24, 0x04	; 4
    246c:	24 f0       	brlt	.+8      	; 0x2476 <main+0xa68>
    246e:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <digstat+0x1>
    2472:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <digstat>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1116
  if(padm[ 0 ] > 9) { padm[ 0 ] = 0; }
    2476:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <padm>
    247a:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <padm+0x1>
    247e:	0a 97       	sbiw	r24, 0x0a	; 10
    2480:	24 f0       	brlt	.+8      	; 0x248a <main+0xa7c>
    2482:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <padm+0x1>
    2486:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <padm>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1117
  if(padm[ 1 ] > 9) { padm[ 1 ] = 0; }
    248a:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <padm+0x2>
    248e:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <padm+0x3>
    2492:	0a 97       	sbiw	r24, 0x0a	; 10
    2494:	24 f0       	brlt	.+8      	; 0x249e <main+0xa90>
    2496:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <padm+0x3>
    249a:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <padm+0x2>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1118
  if(padm[ 2 ] > 9) { padm[ 2 ] = 0; }
    249e:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <padm+0x4>
    24a2:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <padm+0x5>
    24a6:	0a 97       	sbiw	r24, 0x0a	; 10
    24a8:	24 f0       	brlt	.+8      	; 0x24b2 <main+0xaa4>
    24aa:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <padm+0x5>
    24ae:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <padm+0x4>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1119
  if(padm[ 3 ] > 9) { padm[ 3 ] = 0; }
    24b2:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <padm+0x6>
    24b6:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <padm+0x7>
    24ba:	0a 97       	sbiw	r24, 0x0a	; 10
    24bc:	24 f0       	brlt	.+8      	; 0x24c6 <main+0xab8>
    24be:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <padm+0x7>
    24c2:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <padm+0x6>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1120
  int OTs[7] = { motorRFW, motorRBW, motorYFW, motorYBW, motorBFW, motorBBW, contactor };
    24c6:	8e e0       	ldi	r24, 0x0E	; 14
    24c8:	e6 e0       	ldi	r30, 0x06	; 6
    24ca:	f1 e0       	ldi	r31, 0x01	; 1
    24cc:	de 01       	movw	r26, r28
    24ce:	11 96       	adiw	r26, 0x01	; 1
    24d0:	01 90       	ld	r0, Z+
    24d2:	0d 92       	st	X+, r0
    24d4:	8a 95       	dec	r24
    24d6:	e1 f7       	brne	.-8      	; 0x24d0 <main+0xac2>
    24d8:	9e 01       	movw	r18, r28
    24da:	2f 5f       	subi	r18, 0xFF	; 255
    24dc:	3f 4f       	sbci	r19, 0xFF	; 255
    24de:	69 01       	movw	r12, r18
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1123
  //digitalWrite(contactor, HIGH);
  for(int i = 0; i < 7; i++){
    digitalWrite(OTs[i], LOW);
    24e0:	f6 01       	movw	r30, r12
    24e2:	80 81       	ld	r24, Z
    24e4:	f2 e0       	ldi	r31, 0x02	; 2
    24e6:	cf 0e       	add	r12, r31
    24e8:	d1 1c       	adc	r13, r1
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1122
  if(padm[ 1 ] > 9) { padm[ 1 ] = 0; }
  if(padm[ 2 ] > 9) { padm[ 2 ] = 0; }
  if(padm[ 3 ] > 9) { padm[ 3 ] = 0; }
  int OTs[7] = { motorRFW, motorRBW, motorYFW, motorYBW, motorBFW, motorBBW, contactor };
  //digitalWrite(contactor, HIGH);
  for(int i = 0; i < 7; i++){
    24f0:	0c 15       	cp	r16, r12
    24f2:	1d 05       	cpc	r17, r13
    24f4:	a9 f7       	brne	.-22     	; 0x24e0 <main+0xad2>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1125
    digitalWrite(OTs[i], LOW);
  }
  if(auth == false){
    24f6:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <auth>
    24fa:	81 11       	cpse	r24, r1
    24fc:	fd c0       	rjmp	.+506    	; 0x26f8 <main+0xcea>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1126
    switch (encMenu)
    24fe:	2c e0       	ldi	r18, 0x0C	; 12
    2500:	e2 16       	cp	r14, r18
    2502:	f1 04       	cpc	r15, r1
    2504:	08 f0       	brcs	.+2      	; 0x2508 <main+0xafa>
    2506:	1f c2       	rjmp	.+1086   	; 0x2946 <main+0xf38>
    2508:	f7 01       	movw	r30, r14
    250a:	e7 57       	subi	r30, 0x77	; 119
    250c:	fd 4e       	sbci	r31, 0xED	; 237
    250e:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__tablejump2__>
    2512:	65 13       	cpse	r22, r21
    2514:	71 13       	cpse	r23, r17
    2516:	9a 13       	cpse	r25, r26
    2518:	a7 13       	cpse	r26, r23
    251a:	b4 13       	cpse	r27, r20
    251c:	c1 13       	cpse	r28, r17
    251e:	ce 13       	cpse	r28, r30
    2520:	db 13       	cpse	r29, r27
    2522:	e8 13       	cpse	r30, r24
    2524:	f5 13       	cpse	r31, r21
    2526:	02 14       	cp	r0, r2
    2528:	a0 14       	cp	r10, r0
encUpdate():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1397
  default:
    break;
  }
}
if(auth == true){
  switch (encMenu)
    252a:	ec 30       	cpi	r30, 0x0C	; 12
    252c:	f1 05       	cpc	r31, r1
    252e:	08 f0       	brcs	.+2      	; 0x2532 <main+0xb24>
    2530:	e1 cd       	rjmp	.-1086   	; 0x20f4 <main+0x6e6>
    2532:	e3 56       	subi	r30, 0x63	; 99
    2534:	fd 4e       	sbci	r31, 0xED	; 237
    2536:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__tablejump2__>
    253a:	a9 12       	cpse	r10, r25
    253c:	ae 12       	cpse	r10, r30
    253e:	bb 12       	cpse	r11, r27
    2540:	c8 12       	cpse	r12, r24
    2542:	d5 12       	cpse	r13, r21
    2544:	e2 12       	cpse	r14, r18
    2546:	ef 12       	cpse	r14, r31
    2548:	fc 12       	cpse	r15, r28
    254a:	09 13       	cpse	r16, r25
    254c:	7a 10       	cpse	r7, r10
    254e:	16 13       	cpse	r17, r22
    2550:	23 13       	cpse	r18, r19
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1402
  {
  case 0:
    break;
  case 1:
    enc = VCALRI;
    2552:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <VCALRI>
    2556:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <VCALRI+0x1>
    255a:	11 cd       	rjmp	.-1502   	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1406
    done();
    break;
  case 2:
    VCALRI = enc;
    255c:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    2560:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    2564:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <VCALRI+0x1>
    2568:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <VCALRI>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1408
    //VCALBRI = VCALRI/1000;
    enc = VCALRO;
    256c:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <VCALRO>
    2570:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <VCALRO+0x1>
    2574:	04 cd       	rjmp	.-1528   	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1412
    done();
    break;
  case 3:
    VCALRO = enc;
    2576:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    257a:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    257e:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <VCALRO+0x1>
    2582:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <VCALRO>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1414
    //VCALBRO = VCALRO/1000;
    enc = VCALYI;
    2586:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <VCALYI>
    258a:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <VCALYI+0x1>
    258e:	f7 cc       	rjmp	.-1554   	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1418
    done();
    break;
  case 4:
    VCALYI = enc;
    2590:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    2594:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    2598:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <VCALYI+0x1>
    259c:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <VCALYI>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1420
    //VCALBYI = VCALYI/1000;
    enc = VCALYO;
    25a0:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <VCALYO>
    25a4:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <VCALYO+0x1>
    25a8:	ea cc       	rjmp	.-1580   	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1424
    done();
    break;
  case 5:
    VCALYO = enc;
    25aa:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    25ae:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    25b2:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <VCALYO+0x1>
    25b6:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <VCALYO>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1426
    //VCALBYO = VCALYO/1000;
    enc = VCALBI;
    25ba:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <VCALBI>
    25be:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <VCALBI+0x1>
    25c2:	dd cc       	rjmp	.-1606   	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1430
    done();
    break;
  case 6:
    VCALBI = enc;
    25c4:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    25c8:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    25cc:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <VCALBI+0x1>
    25d0:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <VCALBI>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1432
    //VCALBBI = VCALBI/1000;
    enc = VCALBO;
    25d4:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <VCALBO>
    25d8:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <VCALBO+0x1>
    25dc:	d0 cc       	rjmp	.-1632   	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1436
    done();
    break;
  case 7:
    VCALBO = enc;
    25de:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    25e2:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    25e6:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <VCALBO+0x1>
    25ea:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <VCALBO>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1438
    //VCALBBO = VCALBO/1000;
    enc = ACAL;
    25ee:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <ACAL>
    25f2:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <ACAL+0x1>
    25f6:	c3 cc       	rjmp	.-1658   	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1442
    done();
    break;
  case 8:
    ACAL = enc;
    25f8:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    25fc:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    2600:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <ACAL+0x1>
    2604:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <ACAL>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1444
    //acalb = ACAL/1000;
    enc = DIRR;
    2608:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <DIRR>
    260c:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <DIRR+0x1>
    2610:	b6 cc       	rjmp	.-1684   	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1448
    done();
    break;
  case 9:
    DIRR = enc;
    2612:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    2616:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    261a:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <DIRR+0x1>
    261e:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <DIRR>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1449
    enc = DIRY;
    2622:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <DIRY>
    2626:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <DIRY+0x1>
    262a:	a9 cc       	rjmp	.-1710   	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1453
    done();
    break;
  case 11:
    DIRY = enc;
    262c:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    2630:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    2634:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <DIRY+0x1>
    2638:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <DIRY>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1454
    enc = DIRB;
    263c:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <DIRB>
    2640:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <DIRB+0x1>
    2644:	9c cc       	rjmp	.-1736   	; 0x1f7e <main+0x570>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1458
    done();
    break;
  case 12:
    DIRB = enc;
    2646:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    264a:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    264e:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <DIRB+0x1>
    2652:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <DIRB>
    2656:	0c cd       	rjmp	.-1512   	; 0x2070 <main+0x662>
checkplus():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1494
  if(read(plus) && plusold == !read(plus)){
  plusold = read(plus);
  if(encMenu != 10){
    enc++;
  } else {
    switch (digstat)
    2658:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <digstat>
    265c:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <digstat+0x1>
    2660:	81 30       	cpi	r24, 0x01	; 1
    2662:	91 05       	cpc	r25, r1
    2664:	f1 f0       	breq	.+60     	; 0x26a2 <main+0xc94>
    2666:	6c f4       	brge	.+26     	; 0x2682 <main+0xc74>
    2668:	89 2b       	or	r24, r25
    266a:	09 f0       	breq	.+2      	; 0x266e <main+0xc60>
    266c:	77 ce       	rjmp	.-786    	; 0x235c <main+0x94e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1497
    {
      case 0:
        padm[ 0 ]++;
    266e:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <padm>
    2672:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <padm+0x1>
    2676:	01 96       	adiw	r24, 0x01	; 1
    2678:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <padm+0x1>
    267c:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <padm>
    2680:	6d ce       	rjmp	.-806    	; 0x235c <main+0x94e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1494
  if(read(plus) && plusold == !read(plus)){
  plusold = read(plus);
  if(encMenu != 10){
    enc++;
  } else {
    switch (digstat)
    2682:	82 30       	cpi	r24, 0x02	; 2
    2684:	91 05       	cpc	r25, r1
    2686:	b9 f0       	breq	.+46     	; 0x26b6 <main+0xca8>
    2688:	03 97       	sbiw	r24, 0x03	; 3
    268a:	09 f0       	breq	.+2      	; 0x268e <main+0xc80>
    268c:	67 ce       	rjmp	.-818    	; 0x235c <main+0x94e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1506
        break;
      case 2:
        padm[ 2 ]++;
        break;
      case 3:
        padm[ 3 ]++;
    268e:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <padm+0x6>
    2692:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <padm+0x7>
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <padm+0x7>
    269c:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <padm+0x6>
    26a0:	5d ce       	rjmp	.-838    	; 0x235c <main+0x94e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1500
    {
      case 0:
        padm[ 0 ]++;
        break;
      case 1:
        padm[ 1 ]++;
    26a2:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <padm+0x2>
    26a6:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <padm+0x3>
    26aa:	01 96       	adiw	r24, 0x01	; 1
    26ac:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <padm+0x3>
    26b0:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <padm+0x2>
    26b4:	53 ce       	rjmp	.-858    	; 0x235c <main+0x94e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1503
        break;
      case 2:
        padm[ 2 ]++;
    26b6:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <padm+0x4>
    26ba:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <padm+0x5>
    26be:	01 96       	adiw	r24, 0x01	; 1
    26c0:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <padm+0x5>
    26c4:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <padm+0x4>
    26c8:	49 ce       	rjmp	.-878    	; 0x235c <main+0x94e>
home():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:897

////////////////////////////////////////////////////////////
//Setp display on Setup Mode

void home() {
  display("SETP", 0);
    26ca:	6e e9       	ldi	r22, 0x9E	; 158
    26cc:	71 e0       	ldi	r23, 0x01	; 1
menuDIFF():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:988

void menuDIFF() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("dIFF", 0);
    26ce:	c8 01       	movw	r24, r16
    26d0:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    26d4:	c8 01       	movw	r24, r16
    26d6:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    26da:	c8 01       	movw	r24, r16
    26dc:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
    26e0:	0b c0       	rjmp	.+22     	; 0x26f8 <main+0xcea>
menuIHV():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:903
}

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	86 ec       	ldi	r24, 0xC6	; 198
    26e6:	92 e0       	ldi	r25, 0x02	; 2
    26e8:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:906
    displayVar(enc, 0);
  } else {
    display("IHu", 0);
    26ec:	63 ea       	ldi	r22, 0xA3	; 163
    26ee:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:903
}

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    26f0:	88 23       	and	r24, r24
    26f2:	69 f3       	breq	.-38     	; 0x26ce <main+0xcc0>
    26f4:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
runSetup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1169
    default:
      encMenu = 0;
      break;
    }
  }
  if(auth == true)
    26f8:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <auth>
    26fc:	88 23       	and	r24, r24
    26fe:	09 f4       	brne	.+2      	; 0x2702 <main+0xcf4>
    2700:	4c c1       	rjmp	.+664    	; 0x299a <main+0xf8c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1171
  {
    switch (encMenu)
    2702:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <encMenu>
    2706:	f0 91 66 03 	lds	r31, 0x0366	; 0x800366 <encMenu+0x1>
    270a:	ed 30       	cpi	r30, 0x0D	; 13
    270c:	f1 05       	cpc	r31, r1
    270e:	08 f0       	brcs	.+2      	; 0x2712 <main+0xd04>
    2710:	a5 c2       	rjmp	.+1354   	; 0x2c5c <main+0x124e>
    2712:	e3 57       	subi	r30, 0x73	; 115
    2714:	fc 4e       	sbci	r31, 0xEC	; 236
    2716:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__tablejump2__>
    271a:	a8 14       	cp	r10, r8
    271c:	b4 14       	cp	r11, r4
    271e:	16 15       	cp	r17, r6
    2720:	2b 15       	cp	r18, r11
    2722:	40 15       	cp	r20, r0
    2724:	65 15       	cp	r22, r5
    2726:	72 15       	cp	r23, r2
    2728:	88 15       	cp	r24, r8
    272a:	9e 15       	cp	r25, r14
    272c:	d0 15       	cp	r29, r0
    272e:	fa 15       	cp	r31, r10
    2730:	01 16       	cp	r0, r17
    2732:	2b 16       	cp	r2, r27
menuILV():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:913
}

//Setup Input low Voltage

void menuILV() {
  if(refresh.triggered(false)){
    2734:	60 e0       	ldi	r22, 0x00	; 0
    2736:	86 ec       	ldi	r24, 0xC6	; 198
    2738:	92 e0       	ldi	r25, 0x02	; 2
    273a:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:916
    displayVar(enc, 0);
  } else {
    display("ILu", 0);
    273e:	67 ea       	ldi	r22, 0xA7	; 167
    2740:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:913
}

//Setup Input low Voltage

void menuILV() {
  if(refresh.triggered(false)){
    2742:	88 23       	and	r24, r24
    2744:	09 f4       	brne	.+2      	; 0x2748 <main+0xd3a>
    2746:	c3 cf       	rjmp	.-122    	; 0x26ce <main+0xcc0>
    2748:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
    274c:	d5 cf       	rjmp	.-86     	; 0x26f8 <main+0xcea>
menuOHV():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:923
}

//Setup Output High Voltage

void menuOHV() {
  if(refresh.triggered(false)){
    274e:	60 e0       	ldi	r22, 0x00	; 0
    2750:	86 ec       	ldi	r24, 0xC6	; 198
    2752:	92 e0       	ldi	r25, 0x02	; 2
    2754:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:926
    displayVar(enc, 0);
  } else {
    display("OHu", 0);
    2758:	6b ea       	ldi	r22, 0xAB	; 171
    275a:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:923
}

//Setup Output High Voltage

void menuOHV() {
  if(refresh.triggered(false)){
    275c:	88 23       	and	r24, r24
    275e:	09 f4       	brne	.+2      	; 0x2762 <main+0xd54>
    2760:	b6 cf       	rjmp	.-148    	; 0x26ce <main+0xcc0>
    2762:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
    2766:	c8 cf       	rjmp	.-112    	; 0x26f8 <main+0xcea>
menuOLV():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:933
}

//Setup Output Low Voltage

void menuOLV() {
  if(refresh.triggered(false)){
    2768:	60 e0       	ldi	r22, 0x00	; 0
    276a:	86 ec       	ldi	r24, 0xC6	; 198
    276c:	92 e0       	ldi	r25, 0x02	; 2
    276e:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:936
    displayVar(enc, 0);
  } else {
    display("OLu", 0);
    2772:	6f ea       	ldi	r22, 0xAF	; 175
    2774:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:933
}

//Setup Output Low Voltage

void menuOLV() {
  if(refresh.triggered(false)){
    2776:	88 23       	and	r24, r24
    2778:	09 f4       	brne	.+2      	; 0x277c <main+0xd6e>
    277a:	a9 cf       	rjmp	.-174    	; 0x26ce <main+0xcc0>
    277c:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
    2780:	bb cf       	rjmp	.-138    	; 0x26f8 <main+0xcea>
menuSETV():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:943
}

//Setup Set Voltage

void menuSETV() {
  if(refresh.triggered(false)){
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	86 ec       	ldi	r24, 0xC6	; 198
    2786:	92 e0       	ldi	r25, 0x02	; 2
    2788:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:946
    displayVar(enc, 0);
  } else {
    display("SETu", 0);
    278c:	63 eb       	ldi	r22, 0xB3	; 179
    278e:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:943
}

//Setup Set Voltage

void menuSETV() {
  if(refresh.triggered(false)){
    2790:	88 23       	and	r24, r24
    2792:	09 f4       	brne	.+2      	; 0x2796 <main+0xd88>
    2794:	9c cf       	rjmp	.-200    	; 0x26ce <main+0xcc0>
    2796:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
    279a:	ae cf       	rjmp	.-164    	; 0x26f8 <main+0xcea>
menuOVL():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:953
}

//Setup Overload

void menuOVL() {
  if(refresh.triggered(false)){
    279c:	60 e0       	ldi	r22, 0x00	; 0
    279e:	86 ec       	ldi	r24, 0xC6	; 198
    27a0:	92 e0       	ldi	r25, 0x02	; 2
    27a2:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:956
    displayVar(enc, 0);
  } else {
    display("OuL", 0);
    27a6:	68 eb       	ldi	r22, 0xB8	; 184
    27a8:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:953
}

//Setup Overload

void menuOVL() {
  if(refresh.triggered(false)){
    27aa:	88 23       	and	r24, r24
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <main+0xda2>
    27ae:	8f cf       	rjmp	.-226    	; 0x26ce <main+0xcc0>
    27b0:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
    27b4:	a1 cf       	rjmp	.-190    	; 0x26f8 <main+0xcea>
menuTON():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:963
}

//Setup Waiting time for Output Relay to turn on

void menuTON() {
  if(refresh.triggered(false)){
    27b6:	60 e0       	ldi	r22, 0x00	; 0
    27b8:	86 ec       	ldi	r24, 0xC6	; 198
    27ba:	92 e0       	ldi	r25, 0x02	; 2
    27bc:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:966
    displayVar(enc, 0);
  } else {
    display("tOn", 0);
    27c0:	6c eb       	ldi	r22, 0xBC	; 188
    27c2:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:963
}

//Setup Waiting time for Output Relay to turn on

void menuTON() {
  if(refresh.triggered(false)){
    27c4:	88 23       	and	r24, r24
    27c6:	09 f4       	brne	.+2      	; 0x27ca <main+0xdbc>
    27c8:	82 cf       	rjmp	.-252    	; 0x26ce <main+0xcc0>
    27ca:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
    27ce:	94 cf       	rjmp	.-216    	; 0x26f8 <main+0xcea>
menuTOFF():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:973
}

//Setup Waiting time for Output Relay to turn off

void menuTOFF() {
  if(refresh.triggered(false)){
    27d0:	60 e0       	ldi	r22, 0x00	; 0
    27d2:	86 ec       	ldi	r24, 0xC6	; 198
    27d4:	92 e0       	ldi	r25, 0x02	; 2
    27d6:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:976
    displayVar(enc, 0);
  } else {
    display("tOFF", 0);
    27da:	60 ec       	ldi	r22, 0xC0	; 192
    27dc:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:973
}

//Setup Waiting time for Output Relay to turn off

void menuTOFF() {
  if(refresh.triggered(false)){
    27de:	88 23       	and	r24, r24
    27e0:	09 f4       	brne	.+2      	; 0x27e4 <main+0xdd6>
    27e2:	75 cf       	rjmp	.-278    	; 0x26ce <main+0xcc0>
    27e4:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
    27e8:	87 cf       	rjmp	.-242    	; 0x26f8 <main+0xcea>
menuDIFF():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:985


//setup voltage difference from set voltage to move motor

void menuDIFF() {
  if(refresh.triggered(false)){
    27ea:	60 e0       	ldi	r22, 0x00	; 0
    27ec:	86 ec       	ldi	r24, 0xC6	; 198
    27ee:	92 e0       	ldi	r25, 0x02	; 2
    27f0:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:988
    displayVar(enc, 0);
  } else {
    display("dIFF", 0);
    27f4:	65 ec       	ldi	r22, 0xC5	; 197
    27f6:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:985


//setup voltage difference from set voltage to move motor

void menuDIFF() {
  if(refresh.triggered(false)){
    27f8:	88 23       	and	r24, r24
    27fa:	09 f4       	brne	.+2      	; 0x27fe <main+0xdf0>
    27fc:	68 cf       	rjmp	.-304    	; 0x26ce <main+0xcc0>
    27fe:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
    2802:	7a cf       	rjmp	.-268    	; 0x26f8 <main+0xcea>
menuPADM():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:993
    display("dIFF", 0);
  }
}

void menuPADM() {
    String padnumber;
    2804:	69 e9       	ldi	r22, 0x99	; 153
    2806:	71 e0       	ldi	r23, 0x01	; 1
    2808:	ce 01       	movw	r24, r28
    280a:	4b 96       	adiw	r24, 0x1b	; 27
    280c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:994
    padnumber = padnumber + (String)padm[ 0 ];
    2810:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <padm>
    2814:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <padm+0x1>
    2818:	c8 01       	movw	r24, r16
    281a:	0e 94 20 08 	call	0x1040	; 0x1040 <String::String(int, unsigned char) [clone .constprop.6]>
_ZN15StringSumHelperC2ERK6String():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.h:216
{
public:
  StringSumHelper(const String &s) : String(s) {}
    281e:	be 01       	movw	r22, r28
    2820:	65 5e       	subi	r22, 0xE5	; 229
    2822:	7f 4f       	sbci	r23, 0xFF	; 255
    2824:	ce 01       	movw	r24, r28
    2826:	45 96       	adiw	r24, 0x15	; 21
    2828:	0e 94 6f 08 	call	0x10de	; 0x10de <String::String(String const&)>
menuPADM():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:994
    282c:	b8 01       	movw	r22, r16
    282e:	ce 01       	movw	r24, r28
    2830:	45 96       	adiw	r24, 0x15	; 21
    2832:	0e 94 cc 07 	call	0xf98	; 0xf98 <operator+(StringSumHelper const&, String const&)>
    2836:	bc 01       	movw	r22, r24
    2838:	ce 01       	movw	r24, r28
    283a:	4b 96       	adiw	r24, 0x1b	; 27
    283c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <String::operator=(String const&)>
_ZN15StringSumHelperD2Ev():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
    2840:	ce 01       	movw	r24, r28
    2842:	45 96       	adiw	r24, 0x15	; 21
    2844:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
menuPADM():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:994
    2848:	c8 01       	movw	r24, r16
    284a:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:995
    padnumber = padnumber + (String)padm[ 1 ];
    284e:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <padm+0x2>
    2852:	70 91 ed 02 	lds	r23, 0x02ED	; 0x8002ed <padm+0x3>
    2856:	c8 01       	movw	r24, r16
    2858:	0e 94 20 08 	call	0x1040	; 0x1040 <String::String(int, unsigned char) [clone .constprop.6]>
_ZN15StringSumHelperC2ERK6String():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.h:216
{
public:
  StringSumHelper(const String &s) : String(s) {}
    285c:	be 01       	movw	r22, r28
    285e:	65 5e       	subi	r22, 0xE5	; 229
    2860:	7f 4f       	sbci	r23, 0xFF	; 255
    2862:	ce 01       	movw	r24, r28
    2864:	45 96       	adiw	r24, 0x15	; 21
    2866:	0e 94 6f 08 	call	0x10de	; 0x10de <String::String(String const&)>
menuPADM():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:995
    286a:	b8 01       	movw	r22, r16
    286c:	ce 01       	movw	r24, r28
    286e:	45 96       	adiw	r24, 0x15	; 21
    2870:	0e 94 cc 07 	call	0xf98	; 0xf98 <operator+(StringSumHelper const&, String const&)>
    2874:	bc 01       	movw	r22, r24
    2876:	ce 01       	movw	r24, r28
    2878:	4b 96       	adiw	r24, 0x1b	; 27
    287a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <String::operator=(String const&)>
_ZN15StringSumHelperD2Ev():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
    287e:	ce 01       	movw	r24, r28
    2880:	45 96       	adiw	r24, 0x15	; 21
    2882:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
menuPADM():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:995
    2886:	c8 01       	movw	r24, r16
    2888:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:996
    padnumber = padnumber + (String)padm[ 2 ];
    288c:	60 91 ee 02 	lds	r22, 0x02EE	; 0x8002ee <padm+0x4>
    2890:	70 91 ef 02 	lds	r23, 0x02EF	; 0x8002ef <padm+0x5>
    2894:	c8 01       	movw	r24, r16
    2896:	0e 94 20 08 	call	0x1040	; 0x1040 <String::String(int, unsigned char) [clone .constprop.6]>
_ZN15StringSumHelperC2ERK6String():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.h:216
{
public:
  StringSumHelper(const String &s) : String(s) {}
    289a:	be 01       	movw	r22, r28
    289c:	65 5e       	subi	r22, 0xE5	; 229
    289e:	7f 4f       	sbci	r23, 0xFF	; 255
    28a0:	ce 01       	movw	r24, r28
    28a2:	45 96       	adiw	r24, 0x15	; 21
    28a4:	0e 94 6f 08 	call	0x10de	; 0x10de <String::String(String const&)>
menuPADM():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:996
    28a8:	b8 01       	movw	r22, r16
    28aa:	ce 01       	movw	r24, r28
    28ac:	45 96       	adiw	r24, 0x15	; 21
    28ae:	0e 94 cc 07 	call	0xf98	; 0xf98 <operator+(StringSumHelper const&, String const&)>
    28b2:	bc 01       	movw	r22, r24
    28b4:	ce 01       	movw	r24, r28
    28b6:	4b 96       	adiw	r24, 0x1b	; 27
    28b8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <String::operator=(String const&)>
_ZN15StringSumHelperD2Ev():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
    28bc:	ce 01       	movw	r24, r28
    28be:	45 96       	adiw	r24, 0x15	; 21
    28c0:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
menuPADM():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:996
    28c4:	c8 01       	movw	r24, r16
    28c6:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:997
    padnumber = padnumber + (String)padm[ 3 ];
    28ca:	60 91 f0 02 	lds	r22, 0x02F0	; 0x8002f0 <padm+0x6>
    28ce:	70 91 f1 02 	lds	r23, 0x02F1	; 0x8002f1 <padm+0x7>
    28d2:	c8 01       	movw	r24, r16
    28d4:	0e 94 20 08 	call	0x1040	; 0x1040 <String::String(int, unsigned char) [clone .constprop.6]>
_ZN15StringSumHelperC2ERK6String():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.h:216
{
public:
  StringSumHelper(const String &s) : String(s) {}
    28d8:	be 01       	movw	r22, r28
    28da:	65 5e       	subi	r22, 0xE5	; 229
    28dc:	7f 4f       	sbci	r23, 0xFF	; 255
    28de:	ce 01       	movw	r24, r28
    28e0:	45 96       	adiw	r24, 0x15	; 21
    28e2:	0e 94 6f 08 	call	0x10de	; 0x10de <String::String(String const&)>
menuPADM():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:997
    28e6:	b8 01       	movw	r22, r16
    28e8:	ce 01       	movw	r24, r28
    28ea:	45 96       	adiw	r24, 0x15	; 21
    28ec:	0e 94 cc 07 	call	0xf98	; 0xf98 <operator+(StringSumHelper const&, String const&)>
    28f0:	bc 01       	movw	r22, r24
    28f2:	ce 01       	movw	r24, r28
    28f4:	4b 96       	adiw	r24, 0x1b	; 27
    28f6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <String::operator=(String const&)>
_ZN15StringSumHelperD2Ev():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
    28fa:	ce 01       	movw	r24, r28
    28fc:	45 96       	adiw	r24, 0x15	; 21
    28fe:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
menuPADM():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:997
    2902:	c8 01       	movw	r24, r16
    2904:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:998
    if(refresh.triggered(false)){
    2908:	60 e0       	ldi	r22, 0x00	; 0
    290a:	86 ec       	ldi	r24, 0xC6	; 198
    290c:	92 e0       	ldi	r25, 0x02	; 2
    290e:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
    2912:	88 23       	and	r24, r24
    2914:	79 f0       	breq	.+30     	; 0x2934 <main+0xf26>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:999
    display(padnumber, 0);
    2916:	be 01       	movw	r22, r28
    2918:	65 5e       	subi	r22, 0xE5	; 229
    291a:	7f 4f       	sbci	r23, 0xFF	; 255
    291c:	c8 01       	movw	r24, r16
    291e:	0e 94 6f 08 	call	0x10de	; 0x10de <String::String(String const&)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1001
  } else {
    display("P Ad", 0);
    2922:	c8 01       	movw	r24, r16
    2924:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    2928:	c8 01       	movw	r24, r16
    292a:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:993
    display("dIFF", 0);
  }
}

void menuPADM() {
    String padnumber;
    292e:	ce 01       	movw	r24, r28
    2930:	4b 96       	adiw	r24, 0x1b	; 27
    2932:	d4 ce       	rjmp	.-600    	; 0x26dc <main+0xcce>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1001
    padnumber = padnumber + (String)padm[ 2 ];
    padnumber = padnumber + (String)padm[ 3 ];
    if(refresh.triggered(false)){
    display(padnumber, 0);
  } else {
    display("P Ad", 0);
    2934:	6a ec       	ldi	r22, 0xCA	; 202
    2936:	71 e0       	ldi	r23, 0x01	; 1
    2938:	c8 01       	movw	r24, r16
    293a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    293e:	f1 cf       	rjmp	.-30     	; 0x2922 <main+0xf14>
runSetup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1162
      break;
    case 10:
      menuPADM();
      break;
    case 11:
      menuEND();
    2940:	0e 94 c3 0b 	call	0x1786	; 0x1786 <menuEND()>
    2944:	d9 ce       	rjmp	.-590    	; 0x26f8 <main+0xcea>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1165
      break;
    default:
      encMenu = 0;
    2946:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <encMenu+0x1>
    294a:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <encMenu>
    294e:	d4 ce       	rjmp	.-600    	; 0x26f8 <main+0xcea>
adminHome():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1007
  }
}


void adminHome(){
  display("nAS", 0);
    2950:	6f ec       	ldi	r22, 0xCF	; 207
    2952:	71 e0       	ldi	r23, 0x01	; 1
motorDirY():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1086
}

void motorDirY() {
  if(refresh.triggered(false)){
    if(enc == 0){
      display("Y Fd", 0);
    2954:	c8 01       	movw	r24, r16
    2956:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    295a:	c8 01       	movw	r24, r16
    295c:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    2960:	c8 01       	movw	r24, r16
    2962:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
    2966:	19 c0       	rjmp	.+50     	; 0x299a <main+0xf8c>
voltCalibRI():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1011
void adminHome(){
  display("nAS", 0);
}

void voltCalibRI() {
  if(refresh.triggered(false)){
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	86 ec       	ldi	r24, 0xC6	; 198
    296c:	92 e0       	ldi	r25, 0x02	; 2
    296e:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1014
    displayVar(enc, 0);
  } else {
    display("rICL", 0);
    2972:	63 ed       	ldi	r22, 0xD3	; 211
    2974:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1011
void adminHome(){
  display("nAS", 0);
}

void voltCalibRI() {
  if(refresh.triggered(false)){
    2976:	88 23       	and	r24, r24
    2978:	09 f4       	brne	.+2      	; 0x297c <main+0xf6e>
    297a:	4e c0       	rjmp	.+156    	; 0x2a18 <main+0x100a>
    297c:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
runSetup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1178
      case 0:
        adminHome();
        break;
      case 1:
        voltCalibRI();
        if(enc > 999){
    2980:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    2984:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    2988:	88 3e       	cpi	r24, 0xE8	; 232
    298a:	33 e0       	ldi	r19, 0x03	; 3
    298c:	93 07       	cpc	r25, r19
    298e:	0c f4       	brge	.+2      	; 0x2992 <main+0xf84>
    2990:	89 c0       	rjmp	.+274    	; 0x2aa4 <main+0x1096>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1179
          enc = 0;
    2992:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <enc+0x1>
    2996:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <enc>
loop():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:336
  if(mode){
    runSetup();
  } else {
    runNormal();
  }
  if(read(ok) && read(plus) && read(minus) && switched == false){
    299a:	84 e1       	ldi	r24, 0x14	; 20
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    29a2:	88 23       	and	r24, r24
    29a4:	d9 f0       	breq	.+54     	; 0x29dc <main+0xfce>
    29a6:	85 e1       	ldi	r24, 0x15	; 21
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    29ae:	88 23       	and	r24, r24
    29b0:	a9 f0       	breq	.+42     	; 0x29dc <main+0xfce>
    29b2:	86 e1       	ldi	r24, 0x16	; 22
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    29ba:	88 23       	and	r24, r24
    29bc:	79 f0       	breq	.+30     	; 0x29dc <main+0xfce>
    29be:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <switched>
    29c2:	81 11       	cpse	r24, r1
    29c4:	0b c0       	rjmp	.+22     	; 0x29dc <main+0xfce>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:337
    mode = !mode;
    29c6:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <mode>
    29ca:	87 25       	eor	r24, r7
    29cc:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <mode>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:338
    switched = true;
    29d0:	70 92 67 03 	sts	0x0367, r7	; 0x800367 <switched>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:339
    encMenu = 0;
    29d4:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <encMenu+0x1>
    29d8:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <encMenu>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:341
  }
  if(!read(ok) && !read(plus) && !read(minus) && switched == true){
    29dc:	84 e1       	ldi	r24, 0x14	; 20
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    29e4:	81 11       	cpse	r24, r1
    29e6:	11 c0       	rjmp	.+34     	; 0x2a0a <main+0xffc>
    29e8:	85 e1       	ldi	r24, 0x15	; 21
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    29f0:	81 11       	cpse	r24, r1
    29f2:	0b c0       	rjmp	.+22     	; 0x2a0a <main+0xffc>
    29f4:	86 e1       	ldi	r24, 0x16	; 22
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <read(int)>
    29fc:	81 11       	cpse	r24, r1
    29fe:	05 c0       	rjmp	.+10     	; 0x2a0a <main+0xffc>
    2a00:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <switched>
    2a04:	81 11       	cpse	r24, r1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:342
    switched = false;
    2a06:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <switched>
main():
C:\Program Files (x86)\Arduino\hardware\MightyCore-master\avr\cores\MCUdude_corefiles/main.cpp:47
    2a0a:	a1 14       	cp	r10, r1
    2a0c:	b1 04       	cpc	r11, r1
    2a0e:	09 f4       	brne	.+2      	; 0x2a12 <main+0x1004>
    2a10:	3b ca       	rjmp	.-2954   	; 0x1e88 <main+0x47a>
    2a12:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2a16:	38 ca       	rjmp	.-2960   	; 0x1e88 <main+0x47a>
voltCalibRI():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1014

void voltCalibRI() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("rICL", 0);
    2a18:	c8 01       	movw	r24, r16
    2a1a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    2a1e:	c8 01       	movw	r24, r16
    2a20:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    2a24:	c8 01       	movw	r24, r16
    2a26:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
    2a2a:	aa cf       	rjmp	.-172    	; 0x2980 <main+0xf72>
voltCalibRO():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1020
  }
}


void voltCalibRO() {
  if(refresh.triggered(false)){
    2a2c:	60 e0       	ldi	r22, 0x00	; 0
    2a2e:	86 ec       	ldi	r24, 0xC6	; 198
    2a30:	92 e0       	ldi	r25, 0x02	; 2
    2a32:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1023
    displayVar(enc, 0);
  } else {
    display("roCL", 0);
    2a36:	68 ed       	ldi	r22, 0xD8	; 216
    2a38:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1020
  }
}


void voltCalibRO() {
  if(refresh.triggered(false)){
    2a3a:	88 23       	and	r24, r24
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <main+0x1032>
    2a3e:	5e c0       	rjmp	.+188    	; 0x2afc <main+0x10ee>
    2a40:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
runSetup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1218
          enc = 999;
        }
        break;
      case 6:
        voltCalibBO();
        if(enc > 999){
    2a44:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    2a48:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    2a4c:	88 3e       	cpi	r24, 0xE8	; 232
    2a4e:	e3 e0       	ldi	r30, 0x03	; 3
    2a50:	9e 07       	cpc	r25, r30
    2a52:	44 f1       	brlt	.+80     	; 0x2aa4 <main+0x1096>
    2a54:	9e cf       	rjmp	.-196    	; 0x2992 <main+0xf84>
voltCalibYI():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1029
  }
}


void voltCalibYI() {
  if(refresh.triggered(false)){
    2a56:	60 e0       	ldi	r22, 0x00	; 0
    2a58:	86 ec       	ldi	r24, 0xC6	; 198
    2a5a:	92 e0       	ldi	r25, 0x02	; 2
    2a5c:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1032
    displayVar(enc, 0);
  } else {
    display("YICL", 0);
    2a60:	6d ed       	ldi	r22, 0xDD	; 221
    2a62:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1029
  }
}


void voltCalibYI() {
  if(refresh.triggered(false)){
    2a64:	88 23       	and	r24, r24
    2a66:	09 f4       	brne	.+2      	; 0x2a6a <main+0x105c>
    2a68:	5f c0       	rjmp	.+190    	; 0x2b28 <main+0x111a>
    2a6a:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
runSetup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1226
          enc = 999;
        }
        break;
      case 7:
        ampCalib();
        if(enc > 999){
    2a6e:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    2a72:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    2a76:	88 3e       	cpi	r24, 0xE8	; 232
    2a78:	f3 e0       	ldi	r31, 0x03	; 3
    2a7a:	9f 07       	cpc	r25, r31
    2a7c:	9c f0       	brlt	.+38     	; 0x2aa4 <main+0x1096>
    2a7e:	89 cf       	rjmp	.-238    	; 0x2992 <main+0xf84>
voltCalibYO():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1038
  }
}


void voltCalibYO() {
  if(refresh.triggered(false)){
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	86 ec       	ldi	r24, 0xC6	; 198
    2a84:	92 e0       	ldi	r25, 0x02	; 2
    2a86:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
    2a8a:	88 23       	and	r24, r24
    2a8c:	91 f0       	breq	.+36     	; 0x2ab2 <main+0x10a4>
    2a8e:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
runSetup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1202
          enc = 999;
        }
        break;
      case 4:
        voltCalibYO();
        if(enc > 999){
    2a92:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <enc>
    2a96:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <enc+0x1>
    2a9a:	88 3e       	cpi	r24, 0xE8	; 232
    2a9c:	23 e0       	ldi	r18, 0x03	; 3
    2a9e:	92 07       	cpc	r25, r18
    2aa0:	0c f0       	brlt	.+2      	; 0x2aa4 <main+0x1096>
    2aa2:	77 cf       	rjmp	.-274    	; 0x2992 <main+0xf84>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1180
        break;
      case 1:
        voltCalibRI();
        if(enc > 999){
          enc = 0;
        } else if(enc < 0){
    2aa4:	97 ff       	sbrs	r25, 7
    2aa6:	79 cf       	rjmp	.-270    	; 0x299a <main+0xf8c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1181
          enc = 999;
    2aa8:	90 92 e8 02 	sts	0x02E8, r9	; 0x8002e8 <enc+0x1>
    2aac:	80 92 e7 02 	sts	0x02E7, r8	; 0x8002e7 <enc>
    2ab0:	74 cf       	rjmp	.-280    	; 0x299a <main+0xf8c>
voltCalibYO():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1041

void voltCalibYO() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("YoCL", 0);
    2ab2:	62 ee       	ldi	r22, 0xE2	; 226
    2ab4:	71 e0       	ldi	r23, 0x01	; 1
    2ab6:	c8 01       	movw	r24, r16
    2ab8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    2abc:	c8 01       	movw	r24, r16
    2abe:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    2ac2:	c8 01       	movw	r24, r16
    2ac4:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
    2ac8:	e4 cf       	rjmp	.-56     	; 0x2a92 <main+0x1084>
voltCalibBI():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1047
  }
}


void voltCalibBI() {
  if(refresh.triggered(false)){
    2aca:	60 e0       	ldi	r22, 0x00	; 0
    2acc:	86 ec       	ldi	r24, 0xC6	; 198
    2ace:	92 e0       	ldi	r25, 0x02	; 2
    2ad0:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1050
    displayVar(enc, 0);
  } else {
    display("bICL", 0);
    2ad4:	67 ee       	ldi	r22, 0xE7	; 231
    2ad6:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1047
  }
}


void voltCalibBI() {
  if(refresh.triggered(false)){
    2ad8:	88 23       	and	r24, r24
    2ada:	09 f4       	brne	.+2      	; 0x2ade <main+0x10d0>
    2adc:	9d cf       	rjmp	.-198    	; 0x2a18 <main+0x100a>
    2ade:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
    2ae2:	4e cf       	rjmp	.-356    	; 0x2980 <main+0xf72>
voltCalibBO():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1056
  }
}


void voltCalibBO() {
  if(refresh.triggered(false)){
    2ae4:	60 e0       	ldi	r22, 0x00	; 0
    2ae6:	86 ec       	ldi	r24, 0xC6	; 198
    2ae8:	92 e0       	ldi	r25, 0x02	; 2
    2aea:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1059
    displayVar(enc, 0);
  } else {
    display("boCL", 0);
    2aee:	6c ee       	ldi	r22, 0xEC	; 236
    2af0:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1056
  }
}


void voltCalibBO() {
  if(refresh.triggered(false)){
    2af2:	88 23       	and	r24, r24
    2af4:	19 f0       	breq	.+6      	; 0x2afc <main+0x10ee>
    2af6:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
    2afa:	a4 cf       	rjmp	.-184    	; 0x2a44 <main+0x1036>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1059
    displayVar(enc, 0);
  } else {
    display("boCL", 0);
    2afc:	c8 01       	movw	r24, r16
    2afe:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    2b02:	c8 01       	movw	r24, r16
    2b04:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    2b08:	c8 01       	movw	r24, r16
    2b0a:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
    2b0e:	9a cf       	rjmp	.-204    	; 0x2a44 <main+0x1036>
ampCalib():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1064
  }
}

void ampCalib() {
  if(refresh.triggered(false)){
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	86 ec       	ldi	r24, 0xC6	; 198
    2b14:	92 e0       	ldi	r25, 0x02	; 2
    2b16:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1067
    displayVar(enc, 0);
  } else {
    display("ACAL", 0);
    2b1a:	61 ef       	ldi	r22, 0xF1	; 241
    2b1c:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1064
    display("boCL", 0);
  }
}

void ampCalib() {
  if(refresh.triggered(false)){
    2b1e:	88 23       	and	r24, r24
    2b20:	19 f0       	breq	.+6      	; 0x2b28 <main+0x111a>
    2b22:	0e 94 8c 07 	call	0xf18	; 0xf18 <voltCalibBI() [clone .part.19]>
    2b26:	a3 cf       	rjmp	.-186    	; 0x2a6e <main+0x1060>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1067
    displayVar(enc, 0);
  } else {
    display("ACAL", 0);
    2b28:	c8 01       	movw	r24, r16
    2b2a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    2b2e:	c8 01       	movw	r24, r16
    2b30:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    2b34:	c8 01       	movw	r24, r16
    2b36:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
    2b3a:	99 cf       	rjmp	.-206    	; 0x2a6e <main+0x1060>
motorDirR():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1072
  }
}

void motorDirR() {
  if(refresh.triggered(false)){
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	86 ec       	ldi	r24, 0xC6	; 198
    2b40:	92 e0       	ldi	r25, 0x02	; 2
    2b42:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
    2b46:	e0 90 e7 02 	lds	r14, 0x02E7	; 0x8002e7 <enc>
    2b4a:	f0 90 e8 02 	lds	r15, 0x02E8	; 0x8002e8 <enc+0x1>
    2b4e:	88 23       	and	r24, r24
    2b50:	d9 f0       	breq	.+54     	; 0x2b88 <main+0x117a>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1074
    if(enc == 0){
      display("R Fd", 0);
    2b52:	66 ef       	ldi	r22, 0xF6	; 246
    2b54:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1073
  }
}

void motorDirR() {
  if(refresh.triggered(false)){
    if(enc == 0){
    2b56:	e1 14       	cp	r14, r1
    2b58:	f1 04       	cpc	r15, r1
    2b5a:	09 f4       	brne	.+2      	; 0x2b5e <main+0x1150>
    2b5c:	fb ce       	rjmp	.-522    	; 0x2954 <main+0xf46>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1076
      display("R Fd", 0);
    } else if(enc == 1){
      display("R bd", 0);
    2b5e:	6b ef       	ldi	r22, 0xFB	; 251
    2b60:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1075

void motorDirR() {
  if(refresh.triggered(false)){
    if(enc == 0){
      display("R Fd", 0);
    } else if(enc == 1){
    2b62:	21 e0       	ldi	r18, 0x01	; 1
    2b64:	e2 16       	cp	r14, r18
    2b66:	f1 04       	cpc	r15, r1
    2b68:	09 f4       	brne	.+2      	; 0x2b6c <main+0x115e>
    2b6a:	f4 ce       	rjmp	.-536    	; 0x2954 <main+0xf46>
runSetup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1234
          enc = 999;
        }
        break;
      case 8:
        motorDirR();
        if(enc > 1){
    2b6c:	32 e0       	ldi	r19, 0x02	; 2
    2b6e:	e3 16       	cp	r14, r19
    2b70:	f1 04       	cpc	r15, r1
    2b72:	0c f0       	brlt	.+2      	; 0x2b76 <main+0x1168>
    2b74:	0e cf       	rjmp	.-484    	; 0x2992 <main+0xf84>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1236
          enc = 0;
        } else if (enc < 0){
    2b76:	f7 fe       	sbrs	r15, 7
    2b78:	10 cf       	rjmp	.-480    	; 0x299a <main+0xf8c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1237
          enc = 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <enc+0x1>
    2b82:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <enc>
    2b86:	09 cf       	rjmp	.-494    	; 0x299a <main+0xf8c>
motorDirR():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1079
      display("R Fd", 0);
    } else if(enc == 1){
      display("R bd", 0);
    }
  } else {
    display("dIrr", 0);
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	72 e0       	ldi	r23, 0x02	; 2
    2b8c:	c8 01       	movw	r24, r16
    2b8e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    2b92:	c8 01       	movw	r24, r16
    2b94:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    2b98:	c8 01       	movw	r24, r16
    2b9a:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
    2b9e:	e6 cf       	rjmp	.-52     	; 0x2b6c <main+0x115e>
motorDirY():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1084
  }
}

void motorDirY() {
  if(refresh.triggered(false)){
    2ba0:	60 e0       	ldi	r22, 0x00	; 0
    2ba2:	86 ec       	ldi	r24, 0xC6	; 198
    2ba4:	92 e0       	ldi	r25, 0x02	; 2
    2ba6:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
    2baa:	e0 90 e7 02 	lds	r14, 0x02E7	; 0x8002e7 <enc>
    2bae:	f0 90 e8 02 	lds	r15, 0x02E8	; 0x8002e8 <enc+0x1>
    2bb2:	88 23       	and	r24, r24
    2bb4:	99 f0       	breq	.+38     	; 0x2bdc <main+0x11ce>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1085
    if(enc == 0){
    2bb6:	e1 14       	cp	r14, r1
    2bb8:	f1 04       	cpc	r15, r1
    2bba:	19 f4       	brne	.+6      	; 0x2bc2 <main+0x11b4>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1086
      display("Y Fd", 0);
    2bbc:	65 e0       	ldi	r22, 0x05	; 5
    2bbe:	72 e0       	ldi	r23, 0x02	; 2
    2bc0:	c9 ce       	rjmp	.-622    	; 0x2954 <main+0xf46>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1088
    } else if(enc == 1){
      display("Y bd", 0);
    2bc2:	6a e0       	ldi	r22, 0x0A	; 10
    2bc4:	72 e0       	ldi	r23, 0x02	; 2
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1087

void motorDirY() {
  if(refresh.triggered(false)){
    if(enc == 0){
      display("Y Fd", 0);
    } else if(enc == 1){
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	e8 16       	cp	r14, r24
    2bca:	f1 04       	cpc	r15, r1
    2bcc:	09 f4       	brne	.+2      	; 0x2bd0 <main+0x11c2>
    2bce:	c2 ce       	rjmp	.-636    	; 0x2954 <main+0xf46>
runSetup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1242
          enc = 1;
        }
        break;
      case 9:
        motorDirY();
        if(enc > 1){
    2bd0:	92 e0       	ldi	r25, 0x02	; 2
    2bd2:	e9 16       	cp	r14, r25
    2bd4:	f1 04       	cpc	r15, r1
    2bd6:	0c f0       	brlt	.+2      	; 0x2bda <main+0x11cc>
    2bd8:	dc ce       	rjmp	.-584    	; 0x2992 <main+0xf84>
    2bda:	cd cf       	rjmp	.-102    	; 0x2b76 <main+0x1168>
motorDirY():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1091
      display("Y Fd", 0);
    } else if(enc == 1){
      display("Y bd", 0);
    }
  } else {
    display("dIrY", 0);
    2bdc:	6f e0       	ldi	r22, 0x0F	; 15
    2bde:	72 e0       	ldi	r23, 0x02	; 2
    2be0:	c8 01       	movw	r24, r16
    2be2:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    2be6:	c8 01       	movw	r24, r16
    2be8:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    2bec:	c8 01       	movw	r24, r16
    2bee:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
    2bf2:	ee cf       	rjmp	.-36     	; 0x2bd0 <main+0x11c2>
runSetup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1249
        } else if (enc < 0){
          enc = 1;
        }
        break;
      case 10:
        encMenu = 11;
    2bf4:	8b e0       	ldi	r24, 0x0B	; 11
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <encMenu+0x1>
    2bfc:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <encMenu>
    2c00:	cc ce       	rjmp	.-616    	; 0x299a <main+0xf8c>
motorDirB():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1096
    display("dIrY", 0);
  }
}

void motorDirB() {
  if(refresh.triggered(false)){
    2c02:	60 e0       	ldi	r22, 0x00	; 0
    2c04:	86 ec       	ldi	r24, 0xC6	; 198
    2c06:	92 e0       	ldi	r25, 0x02	; 2
    2c08:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
    2c0c:	e0 90 e7 02 	lds	r14, 0x02E7	; 0x8002e7 <enc>
    2c10:	f0 90 e8 02 	lds	r15, 0x02E8	; 0x8002e8 <enc+0x1>
    2c14:	88 23       	and	r24, r24
    2c16:	99 f0       	breq	.+38     	; 0x2c3e <main+0x1230>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1098
    if(enc == 0){
      display("b Fd", 0);
    2c18:	64 e1       	ldi	r22, 0x14	; 20
    2c1a:	72 e0       	ldi	r23, 0x02	; 2
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1097
  }
}

void motorDirB() {
  if(refresh.triggered(false)){
    if(enc == 0){
    2c1c:	e1 14       	cp	r14, r1
    2c1e:	f1 04       	cpc	r15, r1
    2c20:	09 f4       	brne	.+2      	; 0x2c24 <main+0x1216>
    2c22:	98 ce       	rjmp	.-720    	; 0x2954 <main+0xf46>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1100
      display("b Fd", 0);
    } else if(enc == 1){
      display("b bd", 0);
    2c24:	69 e1       	ldi	r22, 0x19	; 25
    2c26:	72 e0       	ldi	r23, 0x02	; 2
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1099

void motorDirB() {
  if(refresh.triggered(false)){
    if(enc == 0){
      display("b Fd", 0);
    } else if(enc == 1){
    2c28:	e1 e0       	ldi	r30, 0x01	; 1
    2c2a:	ee 16       	cp	r14, r30
    2c2c:	f1 04       	cpc	r15, r1
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <main+0x1224>
    2c30:	91 ce       	rjmp	.-734    	; 0x2954 <main+0xf46>
runSetup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1253
      case 10:
        encMenu = 11;
        break;
      case 11:
        motorDirB();
        if(enc > 1){
    2c32:	f2 e0       	ldi	r31, 0x02	; 2
    2c34:	ef 16       	cp	r14, r31
    2c36:	f1 04       	cpc	r15, r1
    2c38:	0c f0       	brlt	.+2      	; 0x2c3c <main+0x122e>
    2c3a:	ab ce       	rjmp	.-682    	; 0x2992 <main+0xf84>
    2c3c:	9c cf       	rjmp	.-200    	; 0x2b76 <main+0x1168>
motorDirB():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1103
      display("b Fd", 0);
    } else if(enc == 1){
      display("b bd", 0);
    }
  } else {
    display("dIrb", 0);
    2c3e:	6e e1       	ldi	r22, 0x1E	; 30
    2c40:	72 e0       	ldi	r23, 0x02	; 2
    2c42:	c8 01       	movw	r24, r16
    2c44:	0e 94 78 08 	call	0x10f0	; 0x10f0 <String::String(char const*)>
    2c48:	c8 01       	movw	r24, r16
    2c4a:	0e 94 8e 08 	call	0x111c	; 0x111c <display(String, int) [clone .constprop.7]>
    2c4e:	c8 01       	movw	r24, r16
    2c50:	0e 94 89 08 	call	0x1112	; 0x1112 <String::~String()>
    2c54:	ee cf       	rjmp	.-36     	; 0x2c32 <main+0x1224>
runSetup():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1260
        } else if (enc < 0){
          enc = 1;
        }
        break;
      case 12:
        menuEND();
    2c56:	0e 94 c3 0b 	call	0x1786	; 0x1786 <menuEND()>
    2c5a:	9f ce       	rjmp	.-706    	; 0x299a <main+0xf8c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1263
        break;
      default:
        encMenu = 0;
    2c5c:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <encMenu+0x1>
    2c60:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <encMenu>
    2c64:	9a ce       	rjmp	.-716    	; 0x299a <main+0xf8c>
runNormal():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:430


//Run Mode

void runNormal() {
  if(checkin.triggered()){
    2c66:	61 e0       	ldi	r22, 0x01	; 1
    2c68:	84 e4       	ldi	r24, 0x44	; 68
    2c6a:	93 e0       	ldi	r25, 0x03	; 3
    2c6c:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
    2c70:	88 23       	and	r24, r24
    2c72:	31 f0       	breq	.+12     	; 0x2c80 <main+0x1272>
checkinputs():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:837
/////////////////////////////////////////////////////////////////


//update inputs once based on highest voltage...
void checkinputs() {
  IVo();
    2c74:	0e 94 ac 05 	call	0xb58	; 0xb58 <IVo()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:838
  OVo();
    2c78:	0e 94 de 04 	call	0x9bc	; 0x9bc <OVo()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:839
  ampo();
    2c7c:	0e 94 8e 04 	call	0x91c	; 0x91c <ampo()>
    2c80:	c0 90 40 03 	lds	r12, 0x0340	; 0x800340 <routvoltage>
    2c84:	d0 90 41 03 	lds	r13, 0x0341	; 0x800341 <routvoltage+0x1>
    2c88:	e0 90 3e 03 	lds	r14, 0x033E	; 0x80033e <SETV>
    2c8c:	f0 90 3f 03 	lds	r15, 0x033F	; 0x80033f <SETV+0x1>
runNormal():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:439
    //ampo();                   //
    ////////////////////////////// No Longer Used...!
    checkinputs();
  }
  //digitalWrite(motor0Rev, HIGH);
  if(DIRR == 0){
    2c90:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <DIRR>
    2c94:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <DIRR+0x1>
    2c98:	89 2b       	or	r24, r25
    2c9a:	09 f0       	breq	.+2      	; 0x2c9e <main+0x1290>
    2c9c:	4e c0       	rjmp	.+156    	; 0x2d3a <main+0x132c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:440
  if(routvoltage < SETV && rdiffcheck() && inputVok() && currentok()){
    2c9e:	ce 14       	cp	r12, r14
    2ca0:	df 04       	cpc	r13, r15
    2ca2:	94 f4       	brge	.+36     	; 0x2cc8 <main+0x12ba>
    2ca4:	0e 94 ac 06 	call	0xd58	; 0xd58 <rdiffcheck()>
    2ca8:	88 23       	and	r24, r24
    2caa:	71 f0       	breq	.+28     	; 0x2cc8 <main+0x12ba>
    2cac:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <inputVok()>
    2cb0:	88 23       	and	r24, r24
    2cb2:	51 f0       	breq	.+20     	; 0x2cc8 <main+0x12ba>
    2cb4:	0e 94 c5 06 	call	0xd8a	; 0xd8a <currentok()>
    2cb8:	88 23       	and	r24, r24
    2cba:	31 f0       	breq	.+12     	; 0x2cc8 <main+0x12ba>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:441
    digitalWrite(motorRFW, HIGH);
    2cbc:	61 e0       	ldi	r22, 0x01	; 1
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:448
    digitalWrite(motorRFW, LOW);
  }
  if(routvoltage > SETV && rdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorRBW, HIGH);
  } else {
    digitalWrite(motorRBW, LOW);
    2cc4:	60 e0       	ldi	r22, 0x00	; 0
    2cc6:	14 c0       	rjmp	.+40     	; 0x2cf0 <main+0x12e2>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:443
  //digitalWrite(motor0Rev, HIGH);
  if(DIRR == 0){
  if(routvoltage < SETV && rdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorRFW, HIGH);
  } else {
    digitalWrite(motorRFW, LOW);
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:445
  }
  if(routvoltage > SETV && rdiffcheck() && inputVok() && currentok()){
    2cd0:	ec 14       	cp	r14, r12
    2cd2:	fd 04       	cpc	r15, r13
    2cd4:	bc f7       	brge	.-18     	; 0x2cc4 <main+0x12b6>
    2cd6:	0e 94 ac 06 	call	0xd58	; 0xd58 <rdiffcheck()>
    2cda:	88 23       	and	r24, r24
    2cdc:	99 f3       	breq	.-26     	; 0x2cc4 <main+0x12b6>
    2cde:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <inputVok()>
    2ce2:	88 23       	and	r24, r24
    2ce4:	79 f3       	breq	.-34     	; 0x2cc4 <main+0x12b6>
    2ce6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <currentok()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:446
    digitalWrite(motorRBW, HIGH);
    2cea:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:445
  if(routvoltage < SETV && rdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorRFW, HIGH);
  } else {
    digitalWrite(motorRFW, LOW);
  }
  if(routvoltage > SETV && rdiffcheck() && inputVok() && currentok()){
    2cec:	88 23       	and	r24, r24
    2cee:	51 f3       	breq	.-44     	; 0x2cc4 <main+0x12b6>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:446
    digitalWrite(motorRBW, HIGH);
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
    2cf6:	c0 90 3a 03 	lds	r12, 0x033A	; 0x80033a <youtvoltage>
    2cfa:	d0 90 3b 03 	lds	r13, 0x033B	; 0x80033b <youtvoltage+0x1>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:464
    digitalWrite(motorRBW, LOW);
  }
  }


  if(DIRY == 0){
    2cfe:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <DIRY>
    2d02:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <DIRY+0x1>
    2d06:	89 2b       	or	r24, r25
    2d08:	a9 f5       	brne	.+106    	; 0x2d74 <main+0x1366>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:465
  if(youtvoltage < SETV && ydiffcheck() && inputVok() && currentok()){
    2d0a:	ce 14       	cp	r12, r14
    2d0c:	df 04       	cpc	r13, r15
    2d0e:	64 f4       	brge	.+24     	; 0x2d28 <main+0x131a>
    2d10:	0e 94 93 06 	call	0xd26	; 0xd26 <ydiffcheck()>
    2d14:	88 23       	and	r24, r24
    2d16:	41 f0       	breq	.+16     	; 0x2d28 <main+0x131a>
    2d18:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <inputVok()>
    2d1c:	88 23       	and	r24, r24
    2d1e:	21 f0       	breq	.+8      	; 0x2d28 <main+0x131a>
    2d20:	0e 94 c5 06 	call	0xd8a	; 0xd8a <currentok()>
    2d24:	81 11       	cpse	r24, r1
    2d26:	21 c0       	rjmp	.+66     	; 0x2d6a <main+0x135c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:468
    digitalWrite(motorYFW, HIGH);
  } else {
    digitalWrite(motorYFW, LOW);
    2d28:	60 e0       	ldi	r22, 0x00	; 0
    2d2a:	82 e0       	ldi	r24, 0x02	; 2
    2d2c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:470
  }
  if(youtvoltage > SETV && ydiffcheck() && inputVok() && currentok()){
    2d30:	ec 14       	cp	r14, r12
    2d32:	fd 04       	cpc	r15, r13
    2d34:	ac f1       	brlt	.+106    	; 0x2da0 <main+0x1392>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:473
    digitalWrite(motorYBW, HIGH);
  } else {
    digitalWrite(motorYBW, LOW);
    2d36:	60 e0       	ldi	r22, 0x00	; 0
    2d38:	41 c0       	rjmp	.+130    	; 0x2dbc <main+0x13ae>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:451
    digitalWrite(motorRBW, HIGH);
  } else {
    digitalWrite(motorRBW, LOW);
  }
  }else{
  if(routvoltage > SETV && rdiffcheck() && inputVok() && currentok()){
    2d3a:	ec 14       	cp	r14, r12
    2d3c:	fd 04       	cpc	r15, r13
    2d3e:	64 f4       	brge	.+24     	; 0x2d58 <main+0x134a>
    2d40:	0e 94 ac 06 	call	0xd58	; 0xd58 <rdiffcheck()>
    2d44:	88 23       	and	r24, r24
    2d46:	41 f0       	breq	.+16     	; 0x2d58 <main+0x134a>
    2d48:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <inputVok()>
    2d4c:	88 23       	and	r24, r24
    2d4e:	21 f0       	breq	.+8      	; 0x2d58 <main+0x134a>
    2d50:	0e 94 c5 06 	call	0xd8a	; 0xd8a <currentok()>
    2d54:	81 11       	cpse	r24, r1
    2d56:	b2 cf       	rjmp	.-156    	; 0x2cbc <main+0x12ae>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:454
    digitalWrite(motorRFW, HIGH);
  } else {
    digitalWrite(motorRFW, LOW);
    2d58:	60 e0       	ldi	r22, 0x00	; 0
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:456
  }
  if(routvoltage < SETV && rdiffcheck() && inputVok() && currentok()){
    2d60:	ce 14       	cp	r12, r14
    2d62:	df 04       	cpc	r13, r15
    2d64:	0c f4       	brge	.+2      	; 0x2d68 <main+0x135a>
    2d66:	b7 cf       	rjmp	.-146    	; 0x2cd6 <main+0x12c8>
    2d68:	ad cf       	rjmp	.-166    	; 0x2cc4 <main+0x12b6>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:466
  }


  if(DIRY == 0){
  if(youtvoltage < SETV && ydiffcheck() && inputVok() && currentok()){
    digitalWrite(motorYFW, HIGH);
    2d6a:	61 e0       	ldi	r22, 0x01	; 1
    2d6c:	82 e0       	ldi	r24, 0x02	; 2
    2d6e:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
    2d72:	e1 cf       	rjmp	.-62     	; 0x2d36 <main+0x1328>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:476
    digitalWrite(motorYBW, HIGH);
  } else {
    digitalWrite(motorYBW, LOW);
  }
  }else{
  if(youtvoltage > SETV && ydiffcheck() && inputVok() && currentok()){
    2d74:	ec 14       	cp	r14, r12
    2d76:	fd 04       	cpc	r15, r13
    2d78:	64 f4       	brge	.+24     	; 0x2d92 <main+0x1384>
    2d7a:	0e 94 93 06 	call	0xd26	; 0xd26 <ydiffcheck()>
    2d7e:	88 23       	and	r24, r24
    2d80:	41 f0       	breq	.+16     	; 0x2d92 <main+0x1384>
    2d82:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <inputVok()>
    2d86:	88 23       	and	r24, r24
    2d88:	21 f0       	breq	.+8      	; 0x2d92 <main+0x1384>
    2d8a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <currentok()>
    2d8e:	81 11       	cpse	r24, r1
    2d90:	ec cf       	rjmp	.-40     	; 0x2d6a <main+0x135c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:479
    digitalWrite(motorYFW, HIGH);
  } else {
    digitalWrite(motorYFW, LOW);
    2d92:	60 e0       	ldi	r22, 0x00	; 0
    2d94:	82 e0       	ldi	r24, 0x02	; 2
    2d96:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:481
  }
  if(youtvoltage < SETV && ydiffcheck() && inputVok() && currentok()){
    2d9a:	ce 14       	cp	r12, r14
    2d9c:	df 04       	cpc	r13, r15
    2d9e:	5c f6       	brge	.-106    	; 0x2d36 <main+0x1328>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:470
  if(youtvoltage < SETV && ydiffcheck() && inputVok() && currentok()){
    digitalWrite(motorYFW, HIGH);
  } else {
    digitalWrite(motorYFW, LOW);
  }
  if(youtvoltage > SETV && ydiffcheck() && inputVok() && currentok()){
    2da0:	0e 94 93 06 	call	0xd26	; 0xd26 <ydiffcheck()>
    2da4:	88 23       	and	r24, r24
    2da6:	39 f2       	breq	.-114    	; 0x2d36 <main+0x1328>
    2da8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <inputVok()>
    2dac:	88 23       	and	r24, r24
    2dae:	19 f2       	breq	.-122    	; 0x2d36 <main+0x1328>
    2db0:	0e 94 c5 06 	call	0xd8a	; 0xd8a <currentok()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:471
    digitalWrite(motorYBW, HIGH);
    2db4:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:470
  if(youtvoltage < SETV && ydiffcheck() && inputVok() && currentok()){
    digitalWrite(motorYFW, HIGH);
  } else {
    digitalWrite(motorYFW, LOW);
  }
  if(youtvoltage > SETV && ydiffcheck() && inputVok() && currentok()){
    2db6:	88 23       	and	r24, r24
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <main+0x13ae>
    2dba:	bd cf       	rjmp	.-134    	; 0x2d36 <main+0x1328>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:471
    digitalWrite(motorYBW, HIGH);
    2dbc:	83 e0       	ldi	r24, 0x03	; 3
    2dbe:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
    2dc2:	c0 90 36 03 	lds	r12, 0x0336	; 0x800336 <boutvoltage>
    2dc6:	d0 90 37 03 	lds	r13, 0x0337	; 0x800337 <boutvoltage+0x1>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:491
  }




  if(DIRB == 0){
    2dca:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <DIRB>
    2dce:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <DIRB+0x1>
    2dd2:	89 2b       	or	r24, r25
    2dd4:	e9 f4       	brne	.+58     	; 0x2e10 <main+0x1402>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:492
  if(boutvoltage < SETV && bdiffcheck() && inputVok() && currentok()){
    2dd6:	ce 14       	cp	r12, r14
    2dd8:	df 04       	cpc	r13, r15
    2dda:	64 f4       	brge	.+24     	; 0x2df4 <main+0x13e6>
    2ddc:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <bdiffcheck()>
    2de0:	88 23       	and	r24, r24
    2de2:	41 f0       	breq	.+16     	; 0x2df4 <main+0x13e6>
    2de4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <inputVok()>
    2de8:	88 23       	and	r24, r24
    2dea:	21 f0       	breq	.+8      	; 0x2df4 <main+0x13e6>
    2dec:	0e 94 c5 06 	call	0xd8a	; 0xd8a <currentok()>
    2df0:	81 11       	cpse	r24, r1
    2df2:	09 c0       	rjmp	.+18     	; 0x2e06 <main+0x13f8>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:495
    digitalWrite(motorBFW, HIGH);
  } else {
    digitalWrite(motorBFW, LOW);
    2df4:	60 e0       	ldi	r22, 0x00	; 0
    2df6:	84 e0       	ldi	r24, 0x04	; 4
    2df8:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:497
  }
  if(boutvoltage > SETV && bdiffcheck() && inputVok() && currentok()){
    2dfc:	ec 14       	cp	r14, r12
    2dfe:	fd 04       	cpc	r15, r13
    2e00:	ec f0       	brlt	.+58     	; 0x2e3c <main+0x142e>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:500
    digitalWrite(motorBBW, HIGH);
  } else {
    digitalWrite(motorBBW, LOW);
    2e02:	60 e0       	ldi	r22, 0x00	; 0
    2e04:	28 c0       	rjmp	.+80     	; 0x2e56 <main+0x1448>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:493



  if(DIRB == 0){
  if(boutvoltage < SETV && bdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorBFW, HIGH);
    2e06:	61 e0       	ldi	r22, 0x01	; 1
    2e08:	84 e0       	ldi	r24, 0x04	; 4
    2e0a:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
    2e0e:	f9 cf       	rjmp	.-14     	; 0x2e02 <main+0x13f4>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:503
    digitalWrite(motorBBW, HIGH);
  } else {
    digitalWrite(motorBBW, LOW);
  }
  }else{
  if(boutvoltage > SETV && bdiffcheck() && inputVok() && currentok()){
    2e10:	ec 14       	cp	r14, r12
    2e12:	fd 04       	cpc	r15, r13
    2e14:	64 f4       	brge	.+24     	; 0x2e2e <main+0x1420>
    2e16:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <bdiffcheck()>
    2e1a:	88 23       	and	r24, r24
    2e1c:	41 f0       	breq	.+16     	; 0x2e2e <main+0x1420>
    2e1e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <inputVok()>
    2e22:	88 23       	and	r24, r24
    2e24:	21 f0       	breq	.+8      	; 0x2e2e <main+0x1420>
    2e26:	0e 94 c5 06 	call	0xd8a	; 0xd8a <currentok()>
    2e2a:	81 11       	cpse	r24, r1
    2e2c:	ec cf       	rjmp	.-40     	; 0x2e06 <main+0x13f8>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:506
    digitalWrite(motorBFW, HIGH);
  } else {
    digitalWrite(motorBFW, LOW);
    2e2e:	60 e0       	ldi	r22, 0x00	; 0
    2e30:	84 e0       	ldi	r24, 0x04	; 4
    2e32:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:508
  }
  if(boutvoltage < SETV && bdiffcheck() && inputVok() && currentok()){
    2e36:	ce 14       	cp	r12, r14
    2e38:	df 04       	cpc	r13, r15
    2e3a:	1c f7       	brge	.-58     	; 0x2e02 <main+0x13f4>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:497
  if(boutvoltage < SETV && bdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorBFW, HIGH);
  } else {
    digitalWrite(motorBFW, LOW);
  }
  if(boutvoltage > SETV && bdiffcheck() && inputVok() && currentok()){
    2e3c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <bdiffcheck()>
    2e40:	88 23       	and	r24, r24
    2e42:	f9 f2       	breq	.-66     	; 0x2e02 <main+0x13f4>
    2e44:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <inputVok()>
    2e48:	88 23       	and	r24, r24
    2e4a:	d9 f2       	breq	.-74     	; 0x2e02 <main+0x13f4>
    2e4c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <currentok()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:498
    digitalWrite(motorBBW, HIGH);
    2e50:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:497
  if(boutvoltage < SETV && bdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorBFW, HIGH);
  } else {
    digitalWrite(motorBFW, LOW);
  }
  if(boutvoltage > SETV && bdiffcheck() && inputVok() && currentok()){
    2e52:	88 23       	and	r24, r24
    2e54:	b1 f2       	breq	.-84     	; 0x2e02 <main+0x13f4>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:498
    digitalWrite(motorBBW, HIGH);
    2e56:	85 e0       	ldi	r24, 0x05	; 5
    2e58:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:517
  }
  }



  if(checksystem()){
    2e5c:	0e 94 25 07 	call	0xe4a	; 0xe4a <checksystem()>
    2e60:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <mode>
    2e64:	88 23       	and	r24, r24
    2e66:	c1 f0       	breq	.+48     	; 0x2e98 <main+0x148a>
updateScreenData():
    2e68:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:610
}


void updateScreenData(bool status) {
  //uncomment !mode and comment !read(setupPin) if setupPin is not being used
  if(!mode/*!read(setupPin)*/){
    2e6a:	99 23       	and	r25, r25
    2e6c:	c1 f0       	breq	.+48     	; 0x2e9e <main+0x1490>
updatePower():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:543

//Control Output Supply Relay

void updatePower() {
  //digitalWrite(contactor, HIGH);
  if(checksystem()){
    2e6e:	0e 94 25 07 	call	0xe4a	; 0xe4a <checksystem()>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:544
    if(on.triggered(false)){  
    2e72:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:543

//Control Output Supply Relay

void updatePower() {
  //digitalWrite(contactor, HIGH);
  if(checksystem()){
    2e74:	88 23       	and	r24, r24
    2e76:	b1 f0       	breq	.+44     	; 0x2ea4 <main+0x1496>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:544
    if(on.triggered(false)){  
    2e78:	85 e1       	ldi	r24, 0x15	; 21
    2e7a:	93 e0       	ldi	r25, 0x03	; 3
    2e7c:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
    2e80:	88 23       	and	r24, r24
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <main+0x1478>
    2e84:	8a cd       	rjmp	.-1260   	; 0x299a <main+0xf8c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:545
      digitalWrite(contactor, HIGH);
    2e86:	61 e0       	ldi	r22, 0x01	; 1
    2e88:	86 e0       	ldi	r24, 0x06	; 6
    2e8a:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:546
      off.reset();
    2e8e:	84 ef       	ldi	r24, 0xF4	; 244
    2e90:	92 e0       	ldi	r25, 0x02	; 2
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:552
    }
  }
  else {
    if(off.triggered(false)) {
      digitalWrite(contactor, LOW);
      on.reset();
    2e92:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.17]>
    2e96:	81 cd       	rjmp	.-1278   	; 0x299a <main+0xf8c>
updateScreenData():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:610
}


void updateScreenData(bool status) {
  //uncomment !mode and comment !read(setupPin) if setupPin is not being used
  if(!mode/*!read(setupPin)*/){
    2e98:	91 11       	cpse	r25, r1
    2e9a:	e9 cf       	rjmp	.-46     	; 0x2e6e <main+0x1460>
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	0e 94 0a 09 	call	0x1214	; 0x1214 <updateScreenData(bool) [clone .part.5]>
    2ea2:	e5 cf       	rjmp	.-54     	; 0x2e6e <main+0x1460>
updatePower():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:550
      digitalWrite(contactor, HIGH);
      off.reset();
    }
  }
  else {
    if(off.triggered(false)) {
    2ea4:	84 ef       	ldi	r24, 0xF4	; 244
    2ea6:	92 e0       	ldi	r25, 0x02	; 2
    2ea8:	0e 94 19 04 	call	0x832	; 0x832 <BlockNot::triggered(bool)>
    2eac:	88 23       	and	r24, r24
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <main+0x14a4>
    2eb0:	74 cd       	rjmp	.-1304   	; 0x299a <main+0xf8c>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:551
      digitalWrite(contactor, LOW);
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	86 e0       	ldi	r24, 0x06	; 6
    2eb6:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:552
      on.reset();
    2eba:	85 e1       	ldi	r24, 0x15	; 21
    2ebc:	93 e0       	ldi	r25, 0x03	; 3
    2ebe:	e9 cf       	rjmp	.-46     	; 0x2e92 <main+0x1484>
checkminus():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1541
  if(read(minus) && minusold == !read(minus)){
    minusold = read(minus);
    if(encMenu != 10){
      enc--;
    } if(encMenu == 10) {
      digstat = digstat + 1;
    2ec0:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <digstat>
    2ec4:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <digstat+0x1>
    2ec8:	01 96       	adiw	r24, 0x01	; 1
    2eca:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <digstat+0x1>
    2ece:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <digstat>
    2ed2:	a5 ca       	rjmp	.-2742   	; 0x241e <main+0xa10>

00002ed4 <_GLOBAL__sub_I_display1>:
_GLOBAL__sub_I_display1():
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:67
#include "SevSeg.h"

SevSeg::SevSeg()
{
  //Initial values
  DecAposColon = 0; //This variable tracks the decimal place, apostrophe, and colon (if the display has support)
    2ed4:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <display1+0x48>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:132


//Intialize the SevenSegament Display
SevSeg display1;
//Timer that updates Main screen every Second.
BlockNot refresh(1, SECONDS);
    2ed8:	41 e0       	ldi	r20, 0x01	; 1
    2eda:	50 e0       	ldi	r21, 0x00	; 0
    2edc:	60 e0       	ldi	r22, 0x00	; 0
    2ede:	70 e0       	ldi	r23, 0x00	; 0
    2ee0:	86 ec       	ldi	r24, 0xC6	; 198
    2ee2:	92 e0       	ldi	r25, 0x02	; 2
    2ee4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.16]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:133
BlockNot btn0(1, SECONDS);
    2ee8:	41 e0       	ldi	r20, 0x01	; 1
    2eea:	50 e0       	ldi	r21, 0x00	; 0
    2eec:	60 e0       	ldi	r22, 0x00	; 0
    2eee:	70 e0       	ldi	r23, 0x00	; 0
    2ef0:	80 e6       	ldi	r24, 0x60	; 96
    2ef2:	92 e0       	ldi	r25, 0x02	; 2
    2ef4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.16]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:134
BlockNot btn1(1, SECONDS);
    2ef8:	41 e0       	ldi	r20, 0x01	; 1
    2efa:	50 e0       	ldi	r21, 0x00	; 0
    2efc:	60 e0       	ldi	r22, 0x00	; 0
    2efe:	70 e0       	ldi	r23, 0x00	; 0
    2f00:	85 ea       	ldi	r24, 0xA5	; 165
    2f02:	92 e0       	ldi	r25, 0x02	; 2
    2f04:	0e 94 db 03 	call	0x7b6	; 0x7b6 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.16]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:135
BlockNot inch(100);
    2f08:	44 e6       	ldi	r20, 0x64	; 100
    2f0a:	50 e0       	ldi	r21, 0x00	; 0
    2f0c:	60 e0       	ldi	r22, 0x00	; 0
    2f0e:	70 e0       	ldi	r23, 0x00	; 0
    2f10:	84 e8       	ldi	r24, 0x84	; 132
    2f12:	92 e0       	ldi	r25, 0x02	; 2
    2f14:	0e 94 cb 0c 	call	0x1996	; 0x1996 <BlockNot::BlockNot(unsigned long)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:137
//Timer that updates all Input Variables
BlockNot checkin(250);
    2f18:	4a ef       	ldi	r20, 0xFA	; 250
    2f1a:	50 e0       	ldi	r21, 0x00	; 0
    2f1c:	60 e0       	ldi	r22, 0x00	; 0
    2f1e:	70 e0       	ldi	r23, 0x00	; 0
    2f20:	84 e4       	ldi	r24, 0x44	; 68
    2f22:	93 e0       	ldi	r25, 0x03	; 3
    2f24:	0e 94 cb 0c 	call	0x1996	; 0x1996 <BlockNot::BlockNot(unsigned long)>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:215
bool mode = false;
bool switched = false;
bool tmrstp;
/**/

BlockNot on(TON, SECONDS);
    2f28:	40 91 51 02 	lds	r20, 0x0251	; 0x800251 <TON>
    2f2c:	50 91 52 02 	lds	r21, 0x0252	; 0x800252 <TON+0x1>
    2f30:	05 2e       	mov	r0, r21
    2f32:	00 0c       	add	r0, r0
    2f34:	66 0b       	sbc	r22, r22
    2f36:	77 0b       	sbc	r23, r23
    2f38:	85 e1       	ldi	r24, 0x15	; 21
    2f3a:	93 e0       	ldi	r25, 0x03	; 3
    2f3c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.16]>
C:\Users\admin\Desktop\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:216
BlockNot off(TOFF, SECONDS);
    2f40:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <TOFF>
    2f44:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <TOFF+0x1>
    2f48:	05 2e       	mov	r0, r21
    2f4a:	00 0c       	add	r0, r0
    2f4c:	66 0b       	sbc	r22, r22
    2f4e:	77 0b       	sbc	r23, r23
    2f50:	84 ef       	ldi	r24, 0xF4	; 244
    2f52:	92 e0       	ldi	r25, 0x02	; 2
    2f54:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.16]>

00002f58 <__itoa_ncheck>:
__itoa_ncheck():
    2f58:	bb 27       	eor	r27, r27
    2f5a:	4a 30       	cpi	r20, 0x0A	; 10
    2f5c:	31 f4       	brne	.+12     	; 0x2f6a <__itoa_ncheck+0x12>
    2f5e:	99 23       	and	r25, r25
    2f60:	22 f4       	brpl	.+8      	; 0x2f6a <__itoa_ncheck+0x12>
    2f62:	bd e2       	ldi	r27, 0x2D	; 45
    2f64:	90 95       	com	r25
    2f66:	81 95       	neg	r24
    2f68:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6a:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__utoa_common>

00002f6e <__utoa_ncheck>:
__utoa_ncheck():
    2f6e:	bb 27       	eor	r27, r27

00002f70 <__utoa_common>:
    2f70:	fb 01       	movw	r30, r22
    2f72:	55 27       	eor	r21, r21
    2f74:	aa 27       	eor	r26, r26
    2f76:	88 0f       	add	r24, r24
    2f78:	99 1f       	adc	r25, r25
    2f7a:	aa 1f       	adc	r26, r26
    2f7c:	a4 17       	cp	r26, r20
    2f7e:	10 f0       	brcs	.+4      	; 0x2f84 <__utoa_common+0x14>
    2f80:	a4 1b       	sub	r26, r20
    2f82:	83 95       	inc	r24
    2f84:	50 51       	subi	r21, 0x10	; 16
    2f86:	b9 f7       	brne	.-18     	; 0x2f76 <__utoa_common+0x6>
    2f88:	a0 5d       	subi	r26, 0xD0	; 208
    2f8a:	aa 33       	cpi	r26, 0x3A	; 58
    2f8c:	08 f0       	brcs	.+2      	; 0x2f90 <__utoa_common+0x20>
    2f8e:	a9 5d       	subi	r26, 0xD9	; 217
    2f90:	a1 93       	st	Z+, r26
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	79 f7       	brne	.-34     	; 0x2f74 <__utoa_common+0x4>
    2f96:	b1 11       	cpse	r27, r1
    2f98:	b1 93       	st	Z+, r27
    2f9a:	11 92       	st	Z+, r1
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <strrev>

00002fa2 <strrev>:
strrev():
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	67 2f       	mov	r22, r23
    2fa8:	71 91       	ld	r23, Z+
    2faa:	77 23       	and	r23, r23
    2fac:	e1 f7       	brne	.-8      	; 0x2fa6 <strrev+0x4>
    2fae:	32 97       	sbiw	r30, 0x02	; 2
    2fb0:	04 c0       	rjmp	.+8      	; 0x2fba <strrev+0x18>
    2fb2:	7c 91       	ld	r23, X
    2fb4:	6d 93       	st	X+, r22
    2fb6:	70 83       	st	Z, r23
    2fb8:	62 91       	ld	r22, -Z
    2fba:	ae 17       	cp	r26, r30
    2fbc:	bf 07       	cpc	r27, r31
    2fbe:	c8 f3       	brcs	.-14     	; 0x2fb2 <strrev+0x10>
    2fc0:	08 95       	ret

00002fc2 <__floatunsisf>:
__floatunsisf():
    2fc2:	e8 94       	clt
    2fc4:	09 c0       	rjmp	.+18     	; 0x2fd8 <__floatsisf+0x12>

00002fc6 <__floatsisf>:
    2fc6:	97 fb       	bst	r25, 7
    2fc8:	3e f4       	brtc	.+14     	; 0x2fd8 <__floatsisf+0x12>
    2fca:	90 95       	com	r25
    2fcc:	80 95       	com	r24
    2fce:	70 95       	com	r23
    2fd0:	61 95       	neg	r22
    2fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd4:	8f 4f       	sbci	r24, 0xFF	; 255
    2fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd8:	99 23       	and	r25, r25
    2fda:	a9 f0       	breq	.+42     	; 0x3006 <__floatsisf+0x40>
    2fdc:	f9 2f       	mov	r31, r25
    2fde:	96 e9       	ldi	r25, 0x96	; 150
    2fe0:	bb 27       	eor	r27, r27
    2fe2:	93 95       	inc	r25
    2fe4:	f6 95       	lsr	r31
    2fe6:	87 95       	ror	r24
    2fe8:	77 95       	ror	r23
    2fea:	67 95       	ror	r22
    2fec:	b7 95       	ror	r27
    2fee:	f1 11       	cpse	r31, r1
    2ff0:	f8 cf       	rjmp	.-16     	; 0x2fe2 <__floatsisf+0x1c>
    2ff2:	fa f4       	brpl	.+62     	; 0x3032 <__floatsisf+0x6c>
    2ff4:	bb 0f       	add	r27, r27
    2ff6:	11 f4       	brne	.+4      	; 0x2ffc <__floatsisf+0x36>
    2ff8:	60 ff       	sbrs	r22, 0
    2ffa:	1b c0       	rjmp	.+54     	; 0x3032 <__floatsisf+0x6c>
    2ffc:	6f 5f       	subi	r22, 0xFF	; 255
    2ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    3000:	8f 4f       	sbci	r24, 0xFF	; 255
    3002:	9f 4f       	sbci	r25, 0xFF	; 255
    3004:	16 c0       	rjmp	.+44     	; 0x3032 <__floatsisf+0x6c>
    3006:	88 23       	and	r24, r24
    3008:	11 f0       	breq	.+4      	; 0x300e <__floatsisf+0x48>
    300a:	96 e9       	ldi	r25, 0x96	; 150
    300c:	11 c0       	rjmp	.+34     	; 0x3030 <__floatsisf+0x6a>
    300e:	77 23       	and	r23, r23
    3010:	21 f0       	breq	.+8      	; 0x301a <__floatsisf+0x54>
    3012:	9e e8       	ldi	r25, 0x8E	; 142
    3014:	87 2f       	mov	r24, r23
    3016:	76 2f       	mov	r23, r22
    3018:	05 c0       	rjmp	.+10     	; 0x3024 <__floatsisf+0x5e>
    301a:	66 23       	and	r22, r22
    301c:	71 f0       	breq	.+28     	; 0x303a <__floatsisf+0x74>
    301e:	96 e8       	ldi	r25, 0x86	; 134
    3020:	86 2f       	mov	r24, r22
    3022:	70 e0       	ldi	r23, 0x00	; 0
    3024:	60 e0       	ldi	r22, 0x00	; 0
    3026:	2a f0       	brmi	.+10     	; 0x3032 <__floatsisf+0x6c>
    3028:	9a 95       	dec	r25
    302a:	66 0f       	add	r22, r22
    302c:	77 1f       	adc	r23, r23
    302e:	88 1f       	adc	r24, r24
    3030:	da f7       	brpl	.-10     	; 0x3028 <__floatsisf+0x62>
    3032:	88 0f       	add	r24, r24
    3034:	96 95       	lsr	r25
    3036:	87 95       	ror	r24
    3038:	97 f9       	bld	r25, 7
    303a:	08 95       	ret

0000303c <__fp_cmp>:
__fp_cmp():
    303c:	99 0f       	add	r25, r25
    303e:	00 08       	sbc	r0, r0
    3040:	55 0f       	add	r21, r21
    3042:	aa 0b       	sbc	r26, r26
    3044:	e0 e8       	ldi	r30, 0x80	; 128
    3046:	fe ef       	ldi	r31, 0xFE	; 254
    3048:	16 16       	cp	r1, r22
    304a:	17 06       	cpc	r1, r23
    304c:	e8 07       	cpc	r30, r24
    304e:	f9 07       	cpc	r31, r25
    3050:	c0 f0       	brcs	.+48     	; 0x3082 <__fp_cmp+0x46>
    3052:	12 16       	cp	r1, r18
    3054:	13 06       	cpc	r1, r19
    3056:	e4 07       	cpc	r30, r20
    3058:	f5 07       	cpc	r31, r21
    305a:	98 f0       	brcs	.+38     	; 0x3082 <__fp_cmp+0x46>
    305c:	62 1b       	sub	r22, r18
    305e:	73 0b       	sbc	r23, r19
    3060:	84 0b       	sbc	r24, r20
    3062:	95 0b       	sbc	r25, r21
    3064:	39 f4       	brne	.+14     	; 0x3074 <__fp_cmp+0x38>
    3066:	0a 26       	eor	r0, r26
    3068:	61 f0       	breq	.+24     	; 0x3082 <__fp_cmp+0x46>
    306a:	23 2b       	or	r18, r19
    306c:	24 2b       	or	r18, r20
    306e:	25 2b       	or	r18, r21
    3070:	21 f4       	brne	.+8      	; 0x307a <__fp_cmp+0x3e>
    3072:	08 95       	ret
    3074:	0a 26       	eor	r0, r26
    3076:	09 f4       	brne	.+2      	; 0x307a <__fp_cmp+0x3e>
    3078:	a1 40       	sbci	r26, 0x01	; 1
    307a:	a6 95       	lsr	r26
    307c:	8f ef       	ldi	r24, 0xFF	; 255
    307e:	81 1d       	adc	r24, r1
    3080:	81 1d       	adc	r24, r1
    3082:	08 95       	ret

00003084 <__mulsf3>:
__mulsf3():
    3084:	0e 94 55 18 	call	0x30aa	; 0x30aa <__mulsf3x>
    3088:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__fp_round>
    308c:	0e 94 b8 18 	call	0x3170	; 0x3170 <__fp_pscA>
    3090:	38 f0       	brcs	.+14     	; 0x30a0 <__mulsf3+0x1c>
    3092:	0e 94 bf 18 	call	0x317e	; 0x317e <__fp_pscB>
    3096:	20 f0       	brcs	.+8      	; 0x30a0 <__mulsf3+0x1c>
    3098:	95 23       	and	r25, r21
    309a:	11 f0       	breq	.+4      	; 0x30a0 <__mulsf3+0x1c>
    309c:	0c 94 af 18 	jmp	0x315e	; 0x315e <__fp_inf>
    30a0:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__fp_nan>
    30a4:	11 24       	eor	r1, r1
    30a6:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__fp_szero>

000030aa <__mulsf3x>:
__mulsf3x():
    30aa:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__fp_split3>
    30ae:	70 f3       	brcs	.-36     	; 0x308c <__mulsf3+0x8>

000030b0 <__mulsf3_pse>:
    30b0:	95 9f       	mul	r25, r21
    30b2:	c1 f3       	breq	.-16     	; 0x30a4 <__mulsf3+0x20>
    30b4:	95 0f       	add	r25, r21
    30b6:	50 e0       	ldi	r21, 0x00	; 0
    30b8:	55 1f       	adc	r21, r21
    30ba:	62 9f       	mul	r22, r18
    30bc:	f0 01       	movw	r30, r0
    30be:	72 9f       	mul	r23, r18
    30c0:	bb 27       	eor	r27, r27
    30c2:	f0 0d       	add	r31, r0
    30c4:	b1 1d       	adc	r27, r1
    30c6:	63 9f       	mul	r22, r19
    30c8:	aa 27       	eor	r26, r26
    30ca:	f0 0d       	add	r31, r0
    30cc:	b1 1d       	adc	r27, r1
    30ce:	aa 1f       	adc	r26, r26
    30d0:	64 9f       	mul	r22, r20
    30d2:	66 27       	eor	r22, r22
    30d4:	b0 0d       	add	r27, r0
    30d6:	a1 1d       	adc	r26, r1
    30d8:	66 1f       	adc	r22, r22
    30da:	82 9f       	mul	r24, r18
    30dc:	22 27       	eor	r18, r18
    30de:	b0 0d       	add	r27, r0
    30e0:	a1 1d       	adc	r26, r1
    30e2:	62 1f       	adc	r22, r18
    30e4:	73 9f       	mul	r23, r19
    30e6:	b0 0d       	add	r27, r0
    30e8:	a1 1d       	adc	r26, r1
    30ea:	62 1f       	adc	r22, r18
    30ec:	83 9f       	mul	r24, r19
    30ee:	a0 0d       	add	r26, r0
    30f0:	61 1d       	adc	r22, r1
    30f2:	22 1f       	adc	r18, r18
    30f4:	74 9f       	mul	r23, r20
    30f6:	33 27       	eor	r19, r19
    30f8:	a0 0d       	add	r26, r0
    30fa:	61 1d       	adc	r22, r1
    30fc:	23 1f       	adc	r18, r19
    30fe:	84 9f       	mul	r24, r20
    3100:	60 0d       	add	r22, r0
    3102:	21 1d       	adc	r18, r1
    3104:	82 2f       	mov	r24, r18
    3106:	76 2f       	mov	r23, r22
    3108:	6a 2f       	mov	r22, r26
    310a:	11 24       	eor	r1, r1
    310c:	9f 57       	subi	r25, 0x7F	; 127
    310e:	50 40       	sbci	r21, 0x00	; 0
    3110:	9a f0       	brmi	.+38     	; 0x3138 <__mulsf3_pse+0x88>
    3112:	f1 f0       	breq	.+60     	; 0x3150 <__mulsf3_pse+0xa0>
    3114:	88 23       	and	r24, r24
    3116:	4a f0       	brmi	.+18     	; 0x312a <__mulsf3_pse+0x7a>
    3118:	ee 0f       	add	r30, r30
    311a:	ff 1f       	adc	r31, r31
    311c:	bb 1f       	adc	r27, r27
    311e:	66 1f       	adc	r22, r22
    3120:	77 1f       	adc	r23, r23
    3122:	88 1f       	adc	r24, r24
    3124:	91 50       	subi	r25, 0x01	; 1
    3126:	50 40       	sbci	r21, 0x00	; 0
    3128:	a9 f7       	brne	.-22     	; 0x3114 <__mulsf3_pse+0x64>
    312a:	9e 3f       	cpi	r25, 0xFE	; 254
    312c:	51 05       	cpc	r21, r1
    312e:	80 f0       	brcs	.+32     	; 0x3150 <__mulsf3_pse+0xa0>
    3130:	0c 94 af 18 	jmp	0x315e	; 0x315e <__fp_inf>
    3134:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__fp_szero>
    3138:	5f 3f       	cpi	r21, 0xFF	; 255
    313a:	e4 f3       	brlt	.-8      	; 0x3134 <__mulsf3_pse+0x84>
    313c:	98 3e       	cpi	r25, 0xE8	; 232
    313e:	d4 f3       	brlt	.-12     	; 0x3134 <__mulsf3_pse+0x84>
    3140:	86 95       	lsr	r24
    3142:	77 95       	ror	r23
    3144:	67 95       	ror	r22
    3146:	b7 95       	ror	r27
    3148:	f7 95       	ror	r31
    314a:	e7 95       	ror	r30
    314c:	9f 5f       	subi	r25, 0xFF	; 255
    314e:	c1 f7       	brne	.-16     	; 0x3140 <__mulsf3_pse+0x90>
    3150:	fe 2b       	or	r31, r30
    3152:	88 0f       	add	r24, r24
    3154:	91 1d       	adc	r25, r1
    3156:	96 95       	lsr	r25
    3158:	87 95       	ror	r24
    315a:	97 f9       	bld	r25, 7
    315c:	08 95       	ret

0000315e <__fp_inf>:
    315e:	97 f9       	bld	r25, 7
    3160:	9f 67       	ori	r25, 0x7F	; 127
    3162:	80 e8       	ldi	r24, 0x80	; 128
    3164:	70 e0       	ldi	r23, 0x00	; 0
    3166:	60 e0       	ldi	r22, 0x00	; 0
    3168:	08 95       	ret

0000316a <__fp_nan>:
    316a:	9f ef       	ldi	r25, 0xFF	; 255
    316c:	80 ec       	ldi	r24, 0xC0	; 192
    316e:	08 95       	ret

00003170 <__fp_pscA>:
    3170:	00 24       	eor	r0, r0
    3172:	0a 94       	dec	r0
    3174:	16 16       	cp	r1, r22
    3176:	17 06       	cpc	r1, r23
    3178:	18 06       	cpc	r1, r24
    317a:	09 06       	cpc	r0, r25
__fp_pscA():
    317c:	08 95       	ret

0000317e <__fp_pscB>:
__fp_pscB():
    317e:	00 24       	eor	r0, r0
    3180:	0a 94       	dec	r0
    3182:	12 16       	cp	r1, r18
    3184:	13 06       	cpc	r1, r19
    3186:	14 06       	cpc	r1, r20
    3188:	05 06       	cpc	r0, r21
    318a:	08 95       	ret

0000318c <__fp_round>:
__fp_round():
    318c:	09 2e       	mov	r0, r25
    318e:	03 94       	inc	r0
    3190:	00 0c       	add	r0, r0
    3192:	11 f4       	brne	.+4      	; 0x3198 <__fp_round+0xc>
    3194:	88 23       	and	r24, r24
    3196:	52 f0       	brmi	.+20     	; 0x31ac <__fp_round+0x20>
    3198:	bb 0f       	add	r27, r27
    319a:	40 f4       	brcc	.+16     	; 0x31ac <__fp_round+0x20>
    319c:	bf 2b       	or	r27, r31
    319e:	11 f4       	brne	.+4      	; 0x31a4 <__fp_round+0x18>
    31a0:	60 ff       	sbrs	r22, 0
    31a2:	04 c0       	rjmp	.+8      	; 0x31ac <__fp_round+0x20>
    31a4:	6f 5f       	subi	r22, 0xFF	; 255
    31a6:	7f 4f       	sbci	r23, 0xFF	; 255
    31a8:	8f 4f       	sbci	r24, 0xFF	; 255
    31aa:	9f 4f       	sbci	r25, 0xFF	; 255
    31ac:	08 95       	ret

000031ae <__fp_split3>:
__fp_split3():
    31ae:	57 fd       	sbrc	r21, 7
    31b0:	90 58       	subi	r25, 0x80	; 128
    31b2:	44 0f       	add	r20, r20
    31b4:	55 1f       	adc	r21, r21
    31b6:	59 f0       	breq	.+22     	; 0x31ce <__fp_splitA+0x10>
    31b8:	5f 3f       	cpi	r21, 0xFF	; 255
    31ba:	71 f0       	breq	.+28     	; 0x31d8 <__fp_splitA+0x1a>
    31bc:	47 95       	ror	r20

000031be <__fp_splitA>:
    31be:	88 0f       	add	r24, r24
    31c0:	97 fb       	bst	r25, 7
    31c2:	99 1f       	adc	r25, r25
    31c4:	61 f0       	breq	.+24     	; 0x31de <__fp_splitA+0x20>
    31c6:	9f 3f       	cpi	r25, 0xFF	; 255
    31c8:	79 f0       	breq	.+30     	; 0x31e8 <__fp_splitA+0x2a>
    31ca:	87 95       	ror	r24
    31cc:	08 95       	ret
    31ce:	12 16       	cp	r1, r18
    31d0:	13 06       	cpc	r1, r19
    31d2:	14 06       	cpc	r1, r20
    31d4:	55 1f       	adc	r21, r21
    31d6:	f2 cf       	rjmp	.-28     	; 0x31bc <__fp_split3+0xe>
    31d8:	46 95       	lsr	r20
    31da:	f1 df       	rcall	.-30     	; 0x31be <__fp_splitA>
    31dc:	08 c0       	rjmp	.+16     	; 0x31ee <__fp_splitA+0x30>
    31de:	16 16       	cp	r1, r22
    31e0:	17 06       	cpc	r1, r23
    31e2:	18 06       	cpc	r1, r24
    31e4:	99 1f       	adc	r25, r25
    31e6:	f1 cf       	rjmp	.-30     	; 0x31ca <__fp_splitA+0xc>
    31e8:	86 95       	lsr	r24
    31ea:	71 05       	cpc	r23, r1
    31ec:	61 05       	cpc	r22, r1
    31ee:	08 94       	sec
    31f0:	08 95       	ret

000031f2 <__fp_zero>:
__fp_zero():
    31f2:	e8 94       	clt

000031f4 <__fp_szero>:
    31f4:	bb 27       	eor	r27, r27
    31f6:	66 27       	eor	r22, r22
    31f8:	77 27       	eor	r23, r23
    31fa:	cb 01       	movw	r24, r22
    31fc:	97 f9       	bld	r25, 7
    31fe:	08 95       	ret

00003200 <eeprom_read_byte>:
eeprom_read_byte():
    3200:	f9 99       	sbic	0x1f, 1	; 31
    3202:	fe cf       	rjmp	.-4      	; 0x3200 <eeprom_read_byte>
    3204:	92 bd       	out	0x22, r25	; 34
    3206:	81 bd       	out	0x21, r24	; 33
    3208:	f8 9a       	sbi	0x1f, 0	; 31
    320a:	99 27       	eor	r25, r25
    320c:	80 b5       	in	r24, 0x20	; 32
    320e:	08 95       	ret

00003210 <eeprom_write_byte>:
eeprom_write_byte():
    3210:	26 2f       	mov	r18, r22

00003212 <eeprom_write_r18>:
    3212:	f9 99       	sbic	0x1f, 1	; 31
    3214:	fe cf       	rjmp	.-4      	; 0x3212 <eeprom_write_r18>
    3216:	1f ba       	out	0x1f, r1	; 31
    3218:	92 bd       	out	0x22, r25	; 34
    321a:	81 bd       	out	0x21, r24	; 33
    321c:	20 bd       	out	0x20, r18	; 32
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	fa 9a       	sbi	0x1f, 2	; 31
    3224:	f9 9a       	sbi	0x1f, 1	; 31
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	01 96       	adiw	r24, 0x01	; 1
    322a:	08 95       	ret

0000322c <__divsf3>:
__divsf3():
    322c:	0e 94 2a 19 	call	0x3254	; 0x3254 <__divsf3x>
    3230:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__fp_round>
    3234:	0e 94 bf 18 	call	0x317e	; 0x317e <__fp_pscB>
    3238:	58 f0       	brcs	.+22     	; 0x3250 <__divsf3+0x24>
    323a:	0e 94 b8 18 	call	0x3170	; 0x3170 <__fp_pscA>
    323e:	40 f0       	brcs	.+16     	; 0x3250 <__divsf3+0x24>
    3240:	29 f4       	brne	.+10     	; 0x324c <__divsf3+0x20>
    3242:	5f 3f       	cpi	r21, 0xFF	; 255
    3244:	29 f0       	breq	.+10     	; 0x3250 <__divsf3+0x24>
    3246:	0c 94 af 18 	jmp	0x315e	; 0x315e <__fp_inf>
    324a:	51 11       	cpse	r21, r1
    324c:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__fp_szero>
    3250:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__fp_nan>

00003254 <__divsf3x>:
__divsf3x():
    3254:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__fp_split3>
    3258:	68 f3       	brcs	.-38     	; 0x3234 <__divsf3+0x8>

0000325a <__divsf3_pse>:
    325a:	99 23       	and	r25, r25
    325c:	b1 f3       	breq	.-20     	; 0x324a <__divsf3+0x1e>
    325e:	55 23       	and	r21, r21
    3260:	91 f3       	breq	.-28     	; 0x3246 <__divsf3+0x1a>
    3262:	95 1b       	sub	r25, r21
    3264:	55 0b       	sbc	r21, r21
    3266:	bb 27       	eor	r27, r27
    3268:	aa 27       	eor	r26, r26
    326a:	62 17       	cp	r22, r18
    326c:	73 07       	cpc	r23, r19
    326e:	84 07       	cpc	r24, r20
    3270:	38 f0       	brcs	.+14     	; 0x3280 <__divsf3_pse+0x26>
    3272:	9f 5f       	subi	r25, 0xFF	; 255
    3274:	5f 4f       	sbci	r21, 0xFF	; 255
    3276:	22 0f       	add	r18, r18
    3278:	33 1f       	adc	r19, r19
    327a:	44 1f       	adc	r20, r20
    327c:	aa 1f       	adc	r26, r26
    327e:	a9 f3       	breq	.-22     	; 0x326a <__divsf3_pse+0x10>
    3280:	35 d0       	rcall	.+106    	; 0x32ec <__divsf3_pse+0x92>
    3282:	0e 2e       	mov	r0, r30
    3284:	3a f0       	brmi	.+14     	; 0x3294 <__divsf3_pse+0x3a>
    3286:	e0 e8       	ldi	r30, 0x80	; 128
    3288:	32 d0       	rcall	.+100    	; 0x32ee <__divsf3_pse+0x94>
    328a:	91 50       	subi	r25, 0x01	; 1
    328c:	50 40       	sbci	r21, 0x00	; 0
    328e:	e6 95       	lsr	r30
    3290:	00 1c       	adc	r0, r0
    3292:	ca f7       	brpl	.-14     	; 0x3286 <__divsf3_pse+0x2c>
    3294:	2b d0       	rcall	.+86     	; 0x32ec <__divsf3_pse+0x92>
    3296:	fe 2f       	mov	r31, r30
    3298:	29 d0       	rcall	.+82     	; 0x32ec <__divsf3_pse+0x92>
    329a:	66 0f       	add	r22, r22
    329c:	77 1f       	adc	r23, r23
    329e:	88 1f       	adc	r24, r24
    32a0:	bb 1f       	adc	r27, r27
    32a2:	26 17       	cp	r18, r22
    32a4:	37 07       	cpc	r19, r23
    32a6:	48 07       	cpc	r20, r24
    32a8:	ab 07       	cpc	r26, r27
    32aa:	b0 e8       	ldi	r27, 0x80	; 128
    32ac:	09 f0       	breq	.+2      	; 0x32b0 <__divsf3_pse+0x56>
    32ae:	bb 0b       	sbc	r27, r27
    32b0:	80 2d       	mov	r24, r0
    32b2:	bf 01       	movw	r22, r30
    32b4:	ff 27       	eor	r31, r31
    32b6:	93 58       	subi	r25, 0x83	; 131
    32b8:	5f 4f       	sbci	r21, 0xFF	; 255
    32ba:	3a f0       	brmi	.+14     	; 0x32ca <__divsf3_pse+0x70>
    32bc:	9e 3f       	cpi	r25, 0xFE	; 254
    32be:	51 05       	cpc	r21, r1
    32c0:	78 f0       	brcs	.+30     	; 0x32e0 <__divsf3_pse+0x86>
    32c2:	0c 94 af 18 	jmp	0x315e	; 0x315e <__fp_inf>
    32c6:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__fp_szero>
    32ca:	5f 3f       	cpi	r21, 0xFF	; 255
    32cc:	e4 f3       	brlt	.-8      	; 0x32c6 <__divsf3_pse+0x6c>
    32ce:	98 3e       	cpi	r25, 0xE8	; 232
    32d0:	d4 f3       	brlt	.-12     	; 0x32c6 <__divsf3_pse+0x6c>
    32d2:	86 95       	lsr	r24
    32d4:	77 95       	ror	r23
    32d6:	67 95       	ror	r22
    32d8:	b7 95       	ror	r27
    32da:	f7 95       	ror	r31
    32dc:	9f 5f       	subi	r25, 0xFF	; 255
    32de:	c9 f7       	brne	.-14     	; 0x32d2 <__divsf3_pse+0x78>
    32e0:	88 0f       	add	r24, r24
    32e2:	91 1d       	adc	r25, r1
    32e4:	96 95       	lsr	r25
    32e6:	87 95       	ror	r24
    32e8:	97 f9       	bld	r25, 7
    32ea:	08 95       	ret
    32ec:	e1 e0       	ldi	r30, 0x01	; 1
    32ee:	66 0f       	add	r22, r22
    32f0:	77 1f       	adc	r23, r23
    32f2:	88 1f       	adc	r24, r24
    32f4:	bb 1f       	adc	r27, r27
    32f6:	62 17       	cp	r22, r18
    32f8:	73 07       	cpc	r23, r19
    32fa:	84 07       	cpc	r24, r20
    32fc:	ba 07       	cpc	r27, r26
    32fe:	20 f0       	brcs	.+8      	; 0x3308 <__divsf3_pse+0xae>
    3300:	62 1b       	sub	r22, r18
    3302:	73 0b       	sbc	r23, r19
    3304:	84 0b       	sbc	r24, r20
    3306:	ba 0b       	sbc	r27, r26
    3308:	ee 1f       	adc	r30, r30
    330a:	88 f7       	brcc	.-30     	; 0x32ee <__divsf3_pse+0x94>
    330c:	e0 95       	com	r30
    330e:	08 95       	ret

00003310 <__fixsfsi>:
    3310:	0e 94 8f 19 	call	0x331e	; 0x331e <__fixunssfsi>
    3314:	68 94       	set
    3316:	b1 11       	cpse	r27, r1
    3318:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__fp_szero>
    331c:	08 95       	ret

0000331e <__fixunssfsi>:
    331e:	0e 94 df 18 	call	0x31be	; 0x31be <__fp_splitA>
    3322:	88 f0       	brcs	.+34     	; 0x3346 <__fixunssfsi+0x28>
    3324:	9f 57       	subi	r25, 0x7F	; 127
    3326:	98 f0       	brcs	.+38     	; 0x334e <__fixunssfsi+0x30>
    3328:	b9 2f       	mov	r27, r25
    332a:	99 27       	eor	r25, r25
    332c:	b7 51       	subi	r27, 0x17	; 23
    332e:	b0 f0       	brcs	.+44     	; 0x335c <__fixunssfsi+0x3e>
__fixunssfsi():
    3330:	e1 f0       	breq	.+56     	; 0x336a <__fixunssfsi+0x4c>
    3332:	66 0f       	add	r22, r22
    3334:	77 1f       	adc	r23, r23
    3336:	88 1f       	adc	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	1a f0       	brmi	.+6      	; 0x3342 <__fixunssfsi+0x24>
    333c:	ba 95       	dec	r27
    333e:	c9 f7       	brne	.-14     	; 0x3332 <__fixunssfsi+0x14>
    3340:	14 c0       	rjmp	.+40     	; 0x336a <__fixunssfsi+0x4c>
    3342:	b1 30       	cpi	r27, 0x01	; 1
    3344:	91 f0       	breq	.+36     	; 0x336a <__fixunssfsi+0x4c>
    3346:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <__fp_zero>
    334a:	b1 e0       	ldi	r27, 0x01	; 1
    334c:	08 95       	ret
    334e:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__fp_zero>
    3352:	67 2f       	mov	r22, r23
    3354:	78 2f       	mov	r23, r24
    3356:	88 27       	eor	r24, r24
    3358:	b8 5f       	subi	r27, 0xF8	; 248
    335a:	39 f0       	breq	.+14     	; 0x336a <__fixunssfsi+0x4c>
    335c:	b9 3f       	cpi	r27, 0xF9	; 249
    335e:	cc f3       	brlt	.-14     	; 0x3352 <__fixunssfsi+0x34>
    3360:	86 95       	lsr	r24
    3362:	77 95       	ror	r23
    3364:	67 95       	ror	r22
    3366:	b3 95       	inc	r27
    3368:	d9 f7       	brne	.-10     	; 0x3360 <__fixunssfsi+0x42>
    336a:	3e f4       	brtc	.+14     	; 0x337a <__fixunssfsi+0x5c>
    336c:	90 95       	com	r25
    336e:	80 95       	com	r24
    3370:	70 95       	com	r23
    3372:	61 95       	neg	r22
    3374:	7f 4f       	sbci	r23, 0xFF	; 255
    3376:	8f 4f       	sbci	r24, 0xFF	; 255
    3378:	9f 4f       	sbci	r25, 0xFF	; 255
    337a:	08 95       	ret

0000337c <__gesf2>:
__gesf2():
    337c:	0e 94 1e 18 	call	0x303c	; 0x303c <__fp_cmp>
    3380:	08 f4       	brcc	.+2      	; 0x3384 <__gesf2+0x8>
    3382:	8f ef       	ldi	r24, 0xFF	; 255
    3384:	08 95       	ret

00003386 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    3386:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    3388:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    338a:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    338c:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    338e:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    3390:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    3392:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    3394:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    3396:	09 94       	ijmp

00003398 <malloc>:
malloc():
    3398:	0f 93       	push	r16
    339a:	1f 93       	push	r17
    339c:	cf 93       	push	r28
    339e:	df 93       	push	r29
    33a0:	82 30       	cpi	r24, 0x02	; 2
    33a2:	91 05       	cpc	r25, r1
    33a4:	10 f4       	brcc	.+4      	; 0x33aa <malloc+0x12>
    33a6:	82 e0       	ldi	r24, 0x02	; 2
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	e0 91 ba 03 	lds	r30, 0x03BA	; 0x8003ba <__flp>
    33ae:	f0 91 bb 03 	lds	r31, 0x03BB	; 0x8003bb <__flp+0x1>
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	b0 e0       	ldi	r27, 0x00	; 0
    33b8:	a0 e0       	ldi	r26, 0x00	; 0
    33ba:	30 97       	sbiw	r30, 0x00	; 0
    33bc:	99 f4       	brne	.+38     	; 0x33e4 <malloc+0x4c>
    33be:	21 15       	cp	r18, r1
    33c0:	31 05       	cpc	r19, r1
    33c2:	09 f4       	brne	.+2      	; 0x33c6 <malloc+0x2e>
    33c4:	4a c0       	rjmp	.+148    	; 0x345a <malloc+0xc2>
    33c6:	28 1b       	sub	r18, r24
    33c8:	39 0b       	sbc	r19, r25
    33ca:	24 30       	cpi	r18, 0x04	; 4
    33cc:	31 05       	cpc	r19, r1
    33ce:	d8 f5       	brcc	.+118    	; 0x3446 <malloc+0xae>
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	9b 81       	ldd	r25, Y+3	; 0x03
    33d4:	61 15       	cp	r22, r1
    33d6:	71 05       	cpc	r23, r1
    33d8:	89 f1       	breq	.+98     	; 0x343c <malloc+0xa4>
    33da:	fb 01       	movw	r30, r22
    33dc:	93 83       	std	Z+3, r25	; 0x03
    33de:	82 83       	std	Z+2, r24	; 0x02
    33e0:	fe 01       	movw	r30, r28
    33e2:	11 c0       	rjmp	.+34     	; 0x3406 <malloc+0x6e>
    33e4:	40 81       	ld	r20, Z
    33e6:	51 81       	ldd	r21, Z+1	; 0x01
    33e8:	02 81       	ldd	r16, Z+2	; 0x02
    33ea:	13 81       	ldd	r17, Z+3	; 0x03
    33ec:	48 17       	cp	r20, r24
    33ee:	59 07       	cpc	r21, r25
    33f0:	e0 f0       	brcs	.+56     	; 0x342a <malloc+0x92>
    33f2:	48 17       	cp	r20, r24
    33f4:	59 07       	cpc	r21, r25
    33f6:	99 f4       	brne	.+38     	; 0x341e <malloc+0x86>
    33f8:	10 97       	sbiw	r26, 0x00	; 0
    33fa:	61 f0       	breq	.+24     	; 0x3414 <malloc+0x7c>
    33fc:	12 96       	adiw	r26, 0x02	; 2
    33fe:	0c 93       	st	X, r16
    3400:	12 97       	sbiw	r26, 0x02	; 2
    3402:	13 96       	adiw	r26, 0x03	; 3
    3404:	1c 93       	st	X, r17
    3406:	32 96       	adiw	r30, 0x02	; 2
    3408:	cf 01       	movw	r24, r30
    340a:	df 91       	pop	r29
    340c:	cf 91       	pop	r28
    340e:	1f 91       	pop	r17
    3410:	0f 91       	pop	r16
    3412:	08 95       	ret
    3414:	00 93 ba 03 	sts	0x03BA, r16	; 0x8003ba <__flp>
    3418:	10 93 bb 03 	sts	0x03BB, r17	; 0x8003bb <__flp+0x1>
    341c:	f4 cf       	rjmp	.-24     	; 0x3406 <malloc+0x6e>
    341e:	21 15       	cp	r18, r1
    3420:	31 05       	cpc	r19, r1
    3422:	51 f0       	breq	.+20     	; 0x3438 <malloc+0xa0>
    3424:	42 17       	cp	r20, r18
    3426:	53 07       	cpc	r21, r19
    3428:	38 f0       	brcs	.+14     	; 0x3438 <malloc+0xa0>
    342a:	a9 01       	movw	r20, r18
    342c:	db 01       	movw	r26, r22
    342e:	9a 01       	movw	r18, r20
    3430:	bd 01       	movw	r22, r26
    3432:	df 01       	movw	r26, r30
    3434:	f8 01       	movw	r30, r16
    3436:	c1 cf       	rjmp	.-126    	; 0x33ba <malloc+0x22>
    3438:	ef 01       	movw	r28, r30
    343a:	f9 cf       	rjmp	.-14     	; 0x342e <malloc+0x96>
    343c:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <__flp+0x1>
    3440:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <__flp>
    3444:	cd cf       	rjmp	.-102    	; 0x33e0 <malloc+0x48>
    3446:	fe 01       	movw	r30, r28
    3448:	e2 0f       	add	r30, r18
    344a:	f3 1f       	adc	r31, r19
    344c:	81 93       	st	Z+, r24
    344e:	91 93       	st	Z+, r25
    3450:	22 50       	subi	r18, 0x02	; 2
    3452:	31 09       	sbc	r19, r1
    3454:	39 83       	std	Y+1, r19	; 0x01
    3456:	28 83       	st	Y, r18
    3458:	d7 cf       	rjmp	.-82     	; 0x3408 <malloc+0x70>
    345a:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <__brkval>
    345e:	30 91 b9 03 	lds	r19, 0x03B9	; 0x8003b9 <__brkval+0x1>
    3462:	23 2b       	or	r18, r19
    3464:	41 f4       	brne	.+16     	; 0x3476 <malloc+0xde>
    3466:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    346a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    346e:	30 93 b9 03 	sts	0x03B9, r19	; 0x8003b9 <__brkval+0x1>
    3472:	20 93 b8 03 	sts	0x03B8, r18	; 0x8003b8 <__brkval>
    3476:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    347a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    347e:	21 15       	cp	r18, r1
    3480:	31 05       	cpc	r19, r1
    3482:	41 f4       	brne	.+16     	; 0x3494 <malloc+0xfc>
    3484:	2d b7       	in	r18, 0x3d	; 61
    3486:	3e b7       	in	r19, 0x3e	; 62
    3488:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    348c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3490:	24 1b       	sub	r18, r20
    3492:	35 0b       	sbc	r19, r21
    3494:	e0 91 b8 03 	lds	r30, 0x03B8	; 0x8003b8 <__brkval>
    3498:	f0 91 b9 03 	lds	r31, 0x03B9	; 0x8003b9 <__brkval+0x1>
    349c:	e2 17       	cp	r30, r18
    349e:	f3 07       	cpc	r31, r19
    34a0:	a0 f4       	brcc	.+40     	; 0x34ca <malloc+0x132>
    34a2:	2e 1b       	sub	r18, r30
    34a4:	3f 0b       	sbc	r19, r31
    34a6:	28 17       	cp	r18, r24
    34a8:	39 07       	cpc	r19, r25
    34aa:	78 f0       	brcs	.+30     	; 0x34ca <malloc+0x132>
    34ac:	ac 01       	movw	r20, r24
    34ae:	4e 5f       	subi	r20, 0xFE	; 254
    34b0:	5f 4f       	sbci	r21, 0xFF	; 255
    34b2:	24 17       	cp	r18, r20
    34b4:	35 07       	cpc	r19, r21
    34b6:	48 f0       	brcs	.+18     	; 0x34ca <malloc+0x132>
    34b8:	4e 0f       	add	r20, r30
    34ba:	5f 1f       	adc	r21, r31
    34bc:	50 93 b9 03 	sts	0x03B9, r21	; 0x8003b9 <__brkval+0x1>
    34c0:	40 93 b8 03 	sts	0x03B8, r20	; 0x8003b8 <__brkval>
    34c4:	81 93       	st	Z+, r24
    34c6:	91 93       	st	Z+, r25
    34c8:	9f cf       	rjmp	.-194    	; 0x3408 <malloc+0x70>
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	e0 e0       	ldi	r30, 0x00	; 0
    34ce:	9c cf       	rjmp	.-200    	; 0x3408 <malloc+0x70>

000034d0 <free>:
free():
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	00 97       	sbiw	r24, 0x00	; 0
    34d6:	e9 f0       	breq	.+58     	; 0x3512 <free+0x42>
    34d8:	fc 01       	movw	r30, r24
    34da:	32 97       	sbiw	r30, 0x02	; 2
    34dc:	13 82       	std	Z+3, r1	; 0x03
    34de:	12 82       	std	Z+2, r1	; 0x02
    34e0:	a0 91 ba 03 	lds	r26, 0x03BA	; 0x8003ba <__flp>
    34e4:	b0 91 bb 03 	lds	r27, 0x03BB	; 0x8003bb <__flp+0x1>
    34e8:	ed 01       	movw	r28, r26
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	10 97       	sbiw	r26, 0x00	; 0
    34f0:	a1 f4       	brne	.+40     	; 0x351a <free+0x4a>
    34f2:	20 81       	ld	r18, Z
    34f4:	31 81       	ldd	r19, Z+1	; 0x01
    34f6:	82 0f       	add	r24, r18
    34f8:	93 1f       	adc	r25, r19
    34fa:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <__brkval>
    34fe:	30 91 b9 03 	lds	r19, 0x03B9	; 0x8003b9 <__brkval+0x1>
    3502:	28 17       	cp	r18, r24
    3504:	39 07       	cpc	r19, r25
    3506:	09 f0       	breq	.+2      	; 0x350a <free+0x3a>
    3508:	61 c0       	rjmp	.+194    	; 0x35cc <free+0xfc>
    350a:	f0 93 b9 03 	sts	0x03B9, r31	; 0x8003b9 <__brkval+0x1>
    350e:	e0 93 b8 03 	sts	0x03B8, r30	; 0x8003b8 <__brkval>
    3512:	df 91       	pop	r29
    3514:	cf 91       	pop	r28
    3516:	08 95       	ret
    3518:	ea 01       	movw	r28, r20
    351a:	ce 17       	cp	r28, r30
    351c:	df 07       	cpc	r29, r31
    351e:	e8 f5       	brcc	.+122    	; 0x359a <free+0xca>
    3520:	4a 81       	ldd	r20, Y+2	; 0x02
    3522:	5b 81       	ldd	r21, Y+3	; 0x03
    3524:	9e 01       	movw	r18, r28
    3526:	41 15       	cp	r20, r1
    3528:	51 05       	cpc	r21, r1
    352a:	b1 f7       	brne	.-20     	; 0x3518 <free+0x48>
    352c:	e9 01       	movw	r28, r18
    352e:	fb 83       	std	Y+3, r31	; 0x03
    3530:	ea 83       	std	Y+2, r30	; 0x02
    3532:	49 91       	ld	r20, Y+
    3534:	59 91       	ld	r21, Y+
    3536:	c4 0f       	add	r28, r20
    3538:	d5 1f       	adc	r29, r21
    353a:	ec 17       	cp	r30, r28
    353c:	fd 07       	cpc	r31, r29
    353e:	61 f4       	brne	.+24     	; 0x3558 <free+0x88>
    3540:	80 81       	ld	r24, Z
    3542:	91 81       	ldd	r25, Z+1	; 0x01
    3544:	02 96       	adiw	r24, 0x02	; 2
    3546:	84 0f       	add	r24, r20
    3548:	95 1f       	adc	r25, r21
    354a:	e9 01       	movw	r28, r18
    354c:	99 83       	std	Y+1, r25	; 0x01
    354e:	88 83       	st	Y, r24
    3550:	82 81       	ldd	r24, Z+2	; 0x02
    3552:	93 81       	ldd	r25, Z+3	; 0x03
    3554:	9b 83       	std	Y+3, r25	; 0x03
    3556:	8a 83       	std	Y+2, r24	; 0x02
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	e0 e0       	ldi	r30, 0x00	; 0
    355c:	12 96       	adiw	r26, 0x02	; 2
    355e:	8d 91       	ld	r24, X+
    3560:	9c 91       	ld	r25, X
    3562:	13 97       	sbiw	r26, 0x03	; 3
    3564:	00 97       	sbiw	r24, 0x00	; 0
    3566:	b9 f5       	brne	.+110    	; 0x35d6 <free+0x106>
    3568:	2d 91       	ld	r18, X+
    356a:	3c 91       	ld	r19, X
    356c:	11 97       	sbiw	r26, 0x01	; 1
    356e:	cd 01       	movw	r24, r26
    3570:	02 96       	adiw	r24, 0x02	; 2
    3572:	82 0f       	add	r24, r18
    3574:	93 1f       	adc	r25, r19
    3576:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <__brkval>
    357a:	30 91 b9 03 	lds	r19, 0x03B9	; 0x8003b9 <__brkval+0x1>
    357e:	28 17       	cp	r18, r24
    3580:	39 07       	cpc	r19, r25
    3582:	39 f6       	brne	.-114    	; 0x3512 <free+0x42>
    3584:	30 97       	sbiw	r30, 0x00	; 0
    3586:	51 f5       	brne	.+84     	; 0x35dc <free+0x10c>
    3588:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <__flp+0x1>
    358c:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <__flp>
    3590:	b0 93 b9 03 	sts	0x03B9, r27	; 0x8003b9 <__brkval+0x1>
    3594:	a0 93 b8 03 	sts	0x03B8, r26	; 0x8003b8 <__brkval>
    3598:	bc cf       	rjmp	.-136    	; 0x3512 <free+0x42>
    359a:	d3 83       	std	Z+3, r29	; 0x03
    359c:	c2 83       	std	Z+2, r28	; 0x02
    359e:	40 81       	ld	r20, Z
    35a0:	51 81       	ldd	r21, Z+1	; 0x01
    35a2:	84 0f       	add	r24, r20
    35a4:	95 1f       	adc	r25, r21
    35a6:	c8 17       	cp	r28, r24
    35a8:	d9 07       	cpc	r29, r25
    35aa:	61 f4       	brne	.+24     	; 0x35c4 <free+0xf4>
    35ac:	4e 5f       	subi	r20, 0xFE	; 254
    35ae:	5f 4f       	sbci	r21, 0xFF	; 255
    35b0:	88 81       	ld	r24, Y
    35b2:	99 81       	ldd	r25, Y+1	; 0x01
    35b4:	48 0f       	add	r20, r24
    35b6:	59 1f       	adc	r21, r25
    35b8:	51 83       	std	Z+1, r21	; 0x01
    35ba:	40 83       	st	Z, r20
    35bc:	8a 81       	ldd	r24, Y+2	; 0x02
    35be:	9b 81       	ldd	r25, Y+3	; 0x03
    35c0:	93 83       	std	Z+3, r25	; 0x03
    35c2:	82 83       	std	Z+2, r24	; 0x02
    35c4:	21 15       	cp	r18, r1
    35c6:	31 05       	cpc	r19, r1
    35c8:	09 f0       	breq	.+2      	; 0x35cc <free+0xfc>
    35ca:	b0 cf       	rjmp	.-160    	; 0x352c <free+0x5c>
    35cc:	f0 93 bb 03 	sts	0x03BB, r31	; 0x8003bb <__flp+0x1>
    35d0:	e0 93 ba 03 	sts	0x03BA, r30	; 0x8003ba <__flp>
    35d4:	9e cf       	rjmp	.-196    	; 0x3512 <free+0x42>
    35d6:	fd 01       	movw	r30, r26
    35d8:	dc 01       	movw	r26, r24
    35da:	c0 cf       	rjmp	.-128    	; 0x355c <free+0x8c>
    35dc:	13 82       	std	Z+3, r1	; 0x03
    35de:	12 82       	std	Z+2, r1	; 0x02
    35e0:	d7 cf       	rjmp	.-82     	; 0x3590 <free+0xc0>

000035e2 <realloc>:
realloc():
    35e2:	4f 92       	push	r4
    35e4:	5f 92       	push	r5
    35e6:	6f 92       	push	r6
    35e8:	7f 92       	push	r7
    35ea:	8f 92       	push	r8
    35ec:	9f 92       	push	r9
    35ee:	af 92       	push	r10
    35f0:	bf 92       	push	r11
    35f2:	cf 92       	push	r12
    35f4:	df 92       	push	r13
    35f6:	ef 92       	push	r14
    35f8:	ff 92       	push	r15
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
    3602:	8c 01       	movw	r16, r24
    3604:	00 97       	sbiw	r24, 0x00	; 0
    3606:	99 f4       	brne	.+38     	; 0x362e <realloc+0x4c>
    3608:	cb 01       	movw	r24, r22
    360a:	df 91       	pop	r29
    360c:	cf 91       	pop	r28
    360e:	1f 91       	pop	r17
    3610:	0f 91       	pop	r16
    3612:	ff 90       	pop	r15
    3614:	ef 90       	pop	r14
    3616:	df 90       	pop	r13
    3618:	cf 90       	pop	r12
    361a:	bf 90       	pop	r11
    361c:	af 90       	pop	r10
    361e:	9f 90       	pop	r9
    3620:	8f 90       	pop	r8
    3622:	7f 90       	pop	r7
    3624:	6f 90       	pop	r6
    3626:	5f 90       	pop	r5
    3628:	4f 90       	pop	r4
    362a:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <malloc>
    362e:	fc 01       	movw	r30, r24
    3630:	e6 0f       	add	r30, r22
    3632:	f7 1f       	adc	r31, r23
    3634:	9c 01       	movw	r18, r24
    3636:	22 50       	subi	r18, 0x02	; 2
    3638:	31 09       	sbc	r19, r1
    363a:	e2 17       	cp	r30, r18
    363c:	f3 07       	cpc	r31, r19
    363e:	08 f4       	brcc	.+2      	; 0x3642 <realloc+0x60>
    3640:	ae c0       	rjmp	.+348    	; 0x379e <realloc+0x1bc>
    3642:	d9 01       	movw	r26, r18
    3644:	cd 91       	ld	r28, X+
    3646:	dc 91       	ld	r29, X
    3648:	11 97       	sbiw	r26, 0x01	; 1
    364a:	c6 17       	cp	r28, r22
    364c:	d7 07       	cpc	r29, r23
    364e:	20 f1       	brcs	.+72     	; 0x3698 <realloc+0xb6>
    3650:	c5 30       	cpi	r28, 0x05	; 5
    3652:	d1 05       	cpc	r29, r1
    3654:	78 f0       	brcs	.+30     	; 0x3674 <realloc+0x92>
    3656:	ce 01       	movw	r24, r28
    3658:	04 97       	sbiw	r24, 0x04	; 4
    365a:	86 17       	cp	r24, r22
    365c:	97 07       	cpc	r25, r23
    365e:	50 f0       	brcs	.+20     	; 0x3674 <realloc+0x92>
    3660:	c6 1b       	sub	r28, r22
    3662:	d7 0b       	sbc	r29, r23
    3664:	22 97       	sbiw	r28, 0x02	; 2
    3666:	c1 93       	st	Z+, r28
    3668:	d1 93       	st	Z+, r29
    366a:	6d 93       	st	X+, r22
    366c:	7c 93       	st	X, r23
    366e:	cf 01       	movw	r24, r30
    3670:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <free>
    3674:	c8 01       	movw	r24, r16
    3676:	df 91       	pop	r29
    3678:	cf 91       	pop	r28
    367a:	1f 91       	pop	r17
    367c:	0f 91       	pop	r16
    367e:	ff 90       	pop	r15
    3680:	ef 90       	pop	r14
    3682:	df 90       	pop	r13
    3684:	cf 90       	pop	r12
    3686:	bf 90       	pop	r11
    3688:	af 90       	pop	r10
    368a:	9f 90       	pop	r9
    368c:	8f 90       	pop	r8
    368e:	7f 90       	pop	r7
    3690:	6f 90       	pop	r6
    3692:	5f 90       	pop	r5
    3694:	4f 90       	pop	r4
    3696:	08 95       	ret
    3698:	5b 01       	movw	r10, r22
    369a:	ac 1a       	sub	r10, r28
    369c:	bd 0a       	sbc	r11, r29
    369e:	4c 01       	movw	r8, r24
    36a0:	8c 0e       	add	r8, r28
    36a2:	9d 1e       	adc	r9, r29
    36a4:	a0 91 ba 03 	lds	r26, 0x03BA	; 0x8003ba <__flp>
    36a8:	b0 91 bb 03 	lds	r27, 0x03BB	; 0x8003bb <__flp+0x1>
    36ac:	51 2c       	mov	r5, r1
    36ae:	41 2c       	mov	r4, r1
    36b0:	f1 2c       	mov	r15, r1
    36b2:	e1 2c       	mov	r14, r1
    36b4:	10 97       	sbiw	r26, 0x00	; 0
    36b6:	31 f5       	brne	.+76     	; 0x3704 <realloc+0x122>
    36b8:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <__brkval>
    36bc:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <__brkval+0x1>
    36c0:	88 15       	cp	r24, r8
    36c2:	99 05       	cpc	r25, r9
    36c4:	09 f0       	breq	.+2      	; 0x36c8 <realloc+0xe6>
    36c6:	5c c0       	rjmp	.+184    	; 0x3780 <realloc+0x19e>
    36c8:	46 16       	cp	r4, r22
    36ca:	57 06       	cpc	r5, r23
    36cc:	08 f0       	brcs	.+2      	; 0x36d0 <realloc+0xee>
    36ce:	58 c0       	rjmp	.+176    	; 0x3780 <realloc+0x19e>
    36d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    36d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    36d8:	00 97       	sbiw	r24, 0x00	; 0
    36da:	41 f4       	brne	.+16     	; 0x36ec <realloc+0x10a>
    36dc:	8d b7       	in	r24, 0x3d	; 61
    36de:	9e b7       	in	r25, 0x3e	; 62
    36e0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    36e4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    36e8:	84 1b       	sub	r24, r20
    36ea:	95 0b       	sbc	r25, r21
    36ec:	e8 17       	cp	r30, r24
    36ee:	f9 07       	cpc	r31, r25
    36f0:	08 f0       	brcs	.+2      	; 0x36f4 <realloc+0x112>
    36f2:	55 c0       	rjmp	.+170    	; 0x379e <realloc+0x1bc>
    36f4:	f0 93 b9 03 	sts	0x03B9, r31	; 0x8003b9 <__brkval+0x1>
    36f8:	e0 93 b8 03 	sts	0x03B8, r30	; 0x8003b8 <__brkval>
    36fc:	f9 01       	movw	r30, r18
    36fe:	71 83       	std	Z+1, r23	; 0x01
    3700:	60 83       	st	Z, r22
    3702:	b8 cf       	rjmp	.-144    	; 0x3674 <realloc+0x92>
    3704:	8d 91       	ld	r24, X+
    3706:	9c 91       	ld	r25, X
    3708:	11 97       	sbiw	r26, 0x01	; 1
    370a:	12 96       	adiw	r26, 0x02	; 2
    370c:	6c 90       	ld	r6, X
    370e:	12 97       	sbiw	r26, 0x02	; 2
    3710:	13 96       	adiw	r26, 0x03	; 3
    3712:	7c 90       	ld	r7, X
    3714:	13 97       	sbiw	r26, 0x03	; 3
    3716:	a8 15       	cp	r26, r8
    3718:	b9 05       	cpc	r27, r9
    371a:	59 f5       	brne	.+86     	; 0x3772 <realloc+0x190>
    371c:	6c 01       	movw	r12, r24
    371e:	42 e0       	ldi	r20, 0x02	; 2
    3720:	c4 0e       	add	r12, r20
    3722:	d1 1c       	adc	r13, r1
    3724:	ca 14       	cp	r12, r10
    3726:	db 04       	cpc	r13, r11
    3728:	20 f1       	brcs	.+72     	; 0x3772 <realloc+0x190>
    372a:	ac 01       	movw	r20, r24
    372c:	4a 19       	sub	r20, r10
    372e:	5b 09       	sbc	r21, r11
    3730:	da 01       	movw	r26, r20
    3732:	12 96       	adiw	r26, 0x02	; 2
    3734:	15 97       	sbiw	r26, 0x05	; 5
    3736:	80 f0       	brcs	.+32     	; 0x3758 <realloc+0x176>
    3738:	62 82       	std	Z+2, r6	; 0x02
    373a:	73 82       	std	Z+3, r7	; 0x03
    373c:	51 83       	std	Z+1, r21	; 0x01
    373e:	40 83       	st	Z, r20
    3740:	d9 01       	movw	r26, r18
    3742:	6d 93       	st	X+, r22
    3744:	7c 93       	st	X, r23
    3746:	e1 14       	cp	r14, r1
    3748:	f1 04       	cpc	r15, r1
    374a:	71 f0       	breq	.+28     	; 0x3768 <realloc+0x186>
    374c:	d7 01       	movw	r26, r14
    374e:	13 96       	adiw	r26, 0x03	; 3
    3750:	fc 93       	st	X, r31
    3752:	ee 93       	st	-X, r30
    3754:	12 97       	sbiw	r26, 0x02	; 2
    3756:	8e cf       	rjmp	.-228    	; 0x3674 <realloc+0x92>
    3758:	22 96       	adiw	r28, 0x02	; 2
    375a:	8c 0f       	add	r24, r28
    375c:	9d 1f       	adc	r25, r29
    375e:	f9 01       	movw	r30, r18
    3760:	91 83       	std	Z+1, r25	; 0x01
    3762:	80 83       	st	Z, r24
    3764:	f3 01       	movw	r30, r6
    3766:	ef cf       	rjmp	.-34     	; 0x3746 <realloc+0x164>
    3768:	f0 93 bb 03 	sts	0x03BB, r31	; 0x8003bb <__flp+0x1>
    376c:	e0 93 ba 03 	sts	0x03BA, r30	; 0x8003ba <__flp>
    3770:	81 cf       	rjmp	.-254    	; 0x3674 <realloc+0x92>
    3772:	48 16       	cp	r4, r24
    3774:	59 06       	cpc	r5, r25
    3776:	08 f4       	brcc	.+2      	; 0x377a <realloc+0x198>
    3778:	2c 01       	movw	r4, r24
    377a:	7d 01       	movw	r14, r26
    377c:	d3 01       	movw	r26, r6
    377e:	9a cf       	rjmp	.-204    	; 0x36b4 <realloc+0xd2>
    3780:	cb 01       	movw	r24, r22
    3782:	0e 94 cc 19 	call	0x3398	; 0x3398 <malloc>
    3786:	7c 01       	movw	r14, r24
    3788:	00 97       	sbiw	r24, 0x00	; 0
    378a:	49 f0       	breq	.+18     	; 0x379e <realloc+0x1bc>
    378c:	ae 01       	movw	r20, r28
    378e:	b8 01       	movw	r22, r16
    3790:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <memcpy>
    3794:	c8 01       	movw	r24, r16
    3796:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <free>
    379a:	87 01       	movw	r16, r14
    379c:	6b cf       	rjmp	.-298    	; 0x3674 <realloc+0x92>
    379e:	10 e0       	ldi	r17, 0x00	; 0
    37a0:	00 e0       	ldi	r16, 0x00	; 0
    37a2:	68 cf       	rjmp	.-304    	; 0x3674 <realloc+0x92>

000037a4 <memcpy>:
memcpy():
    37a4:	fb 01       	movw	r30, r22
    37a6:	dc 01       	movw	r26, r24
    37a8:	02 c0       	rjmp	.+4      	; 0x37ae <memcpy+0xa>
    37aa:	01 90       	ld	r0, Z+
    37ac:	0d 92       	st	X+, r0
    37ae:	41 50       	subi	r20, 0x01	; 1
    37b0:	50 40       	sbci	r21, 0x00	; 0
    37b2:	d8 f7       	brcc	.-10     	; 0x37aa <memcpy+0x6>
    37b4:	08 95       	ret

000037b6 <strcpy>:
strcpy():
    37b6:	fb 01       	movw	r30, r22
    37b8:	dc 01       	movw	r26, r24
    37ba:	01 90       	ld	r0, Z+
    37bc:	0d 92       	st	X+, r0
    37be:	00 20       	and	r0, r0
    37c0:	e1 f7       	brne	.-8      	; 0x37ba <strcpy+0x4>
    37c2:	08 95       	ret

000037c4 <strncpy>:
strncpy():
    37c4:	fb 01       	movw	r30, r22
    37c6:	dc 01       	movw	r26, r24
    37c8:	41 50       	subi	r20, 0x01	; 1
    37ca:	50 40       	sbci	r21, 0x00	; 0
    37cc:	48 f0       	brcs	.+18     	; 0x37e0 <strncpy+0x1c>
    37ce:	01 90       	ld	r0, Z+
    37d0:	0d 92       	st	X+, r0
    37d2:	00 20       	and	r0, r0
    37d4:	c9 f7       	brne	.-14     	; 0x37c8 <strncpy+0x4>
    37d6:	01 c0       	rjmp	.+2      	; 0x37da <strncpy+0x16>
    37d8:	1d 92       	st	X+, r1
    37da:	41 50       	subi	r20, 0x01	; 1
    37dc:	50 40       	sbci	r21, 0x00	; 0
    37de:	e0 f7       	brcc	.-8      	; 0x37d8 <strncpy+0x14>
    37e0:	08 95       	ret

000037e2 <sprintf>:
sprintf():
    37e2:	0f 93       	push	r16
    37e4:	1f 93       	push	r17
    37e6:	cf 93       	push	r28
    37e8:	df 93       	push	r29
    37ea:	cd b7       	in	r28, 0x3d	; 61
    37ec:	de b7       	in	r29, 0x3e	; 62
    37ee:	2e 97       	sbiw	r28, 0x0e	; 14
    37f0:	0f b6       	in	r0, 0x3f	; 63
    37f2:	f8 94       	cli
    37f4:	de bf       	out	0x3e, r29	; 62
    37f6:	0f be       	out	0x3f, r0	; 63
    37f8:	cd bf       	out	0x3d, r28	; 61
    37fa:	0d 89       	ldd	r16, Y+21	; 0x15
    37fc:	1e 89       	ldd	r17, Y+22	; 0x16
    37fe:	86 e0       	ldi	r24, 0x06	; 6
    3800:	8c 83       	std	Y+4, r24	; 0x04
    3802:	1a 83       	std	Y+2, r17	; 0x02
    3804:	09 83       	std	Y+1, r16	; 0x01
    3806:	8f ef       	ldi	r24, 0xFF	; 255
    3808:	9f e7       	ldi	r25, 0x7F	; 127
    380a:	9e 83       	std	Y+6, r25	; 0x06
    380c:	8d 83       	std	Y+5, r24	; 0x05
    380e:	ae 01       	movw	r20, r28
    3810:	47 5e       	subi	r20, 0xE7	; 231
    3812:	5f 4f       	sbci	r21, 0xFF	; 255
    3814:	6f 89       	ldd	r22, Y+23	; 0x17
    3816:	78 8d       	ldd	r23, Y+24	; 0x18
    3818:	ce 01       	movw	r24, r28
    381a:	01 96       	adiw	r24, 0x01	; 1
    381c:	0e 94 21 1c 	call	0x3842	; 0x3842 <vfprintf>
    3820:	2f 81       	ldd	r18, Y+7	; 0x07
    3822:	38 85       	ldd	r19, Y+8	; 0x08
    3824:	02 0f       	add	r16, r18
    3826:	13 1f       	adc	r17, r19
    3828:	f8 01       	movw	r30, r16
    382a:	10 82       	st	Z, r1
    382c:	2e 96       	adiw	r28, 0x0e	; 14
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	df 91       	pop	r29
    383a:	cf 91       	pop	r28
    383c:	1f 91       	pop	r17
    383e:	0f 91       	pop	r16
    3840:	08 95       	ret

00003842 <vfprintf>:
vfprintf():
    3842:	2f 92       	push	r2
    3844:	3f 92       	push	r3
    3846:	4f 92       	push	r4
    3848:	5f 92       	push	r5
    384a:	6f 92       	push	r6
    384c:	7f 92       	push	r7
    384e:	8f 92       	push	r8
    3850:	9f 92       	push	r9
    3852:	af 92       	push	r10
    3854:	bf 92       	push	r11
    3856:	cf 92       	push	r12
    3858:	df 92       	push	r13
    385a:	ef 92       	push	r14
    385c:	ff 92       	push	r15
    385e:	0f 93       	push	r16
    3860:	1f 93       	push	r17
    3862:	cf 93       	push	r28
    3864:	df 93       	push	r29
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
    386a:	2b 97       	sbiw	r28, 0x0b	; 11
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	f8 94       	cli
    3870:	de bf       	out	0x3e, r29	; 62
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	cd bf       	out	0x3d, r28	; 61
    3876:	7c 01       	movw	r14, r24
    3878:	3b 01       	movw	r6, r22
    387a:	8a 01       	movw	r16, r20
    387c:	fc 01       	movw	r30, r24
    387e:	17 82       	std	Z+7, r1	; 0x07
    3880:	16 82       	std	Z+6, r1	; 0x06
    3882:	83 81       	ldd	r24, Z+3	; 0x03
    3884:	81 ff       	sbrs	r24, 1
    3886:	dd c1       	rjmp	.+954    	; 0x3c42 <vfprintf+0x400>
    3888:	ce 01       	movw	r24, r28
    388a:	01 96       	adiw	r24, 0x01	; 1
    388c:	5c 01       	movw	r10, r24
    388e:	f7 01       	movw	r30, r14
    3890:	93 81       	ldd	r25, Z+3	; 0x03
    3892:	f3 01       	movw	r30, r6
    3894:	93 fd       	sbrc	r25, 3
    3896:	85 91       	lpm	r24, Z+
    3898:	93 ff       	sbrs	r25, 3
    389a:	81 91       	ld	r24, Z+
    389c:	3f 01       	movw	r6, r30
    389e:	88 23       	and	r24, r24
    38a0:	09 f4       	brne	.+2      	; 0x38a4 <vfprintf+0x62>
    38a2:	53 c1       	rjmp	.+678    	; 0x3b4a <vfprintf+0x308>
    38a4:	85 32       	cpi	r24, 0x25	; 37
    38a6:	39 f4       	brne	.+14     	; 0x38b6 <vfprintf+0x74>
    38a8:	93 fd       	sbrc	r25, 3
    38aa:	85 91       	lpm	r24, Z+
    38ac:	93 ff       	sbrs	r25, 3
    38ae:	81 91       	ld	r24, Z+
    38b0:	3f 01       	movw	r6, r30
    38b2:	85 32       	cpi	r24, 0x25	; 37
    38b4:	29 f4       	brne	.+10     	; 0x38c0 <vfprintf+0x7e>
    38b6:	b7 01       	movw	r22, r14
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <fputc>
    38be:	e7 cf       	rjmp	.-50     	; 0x388e <vfprintf+0x4c>
    38c0:	91 2c       	mov	r9, r1
    38c2:	21 2c       	mov	r2, r1
    38c4:	31 2c       	mov	r3, r1
    38c6:	ff e1       	ldi	r31, 0x1F	; 31
    38c8:	f3 15       	cp	r31, r3
    38ca:	38 f0       	brcs	.+14     	; 0x38da <vfprintf+0x98>
    38cc:	8b 32       	cpi	r24, 0x2B	; 43
    38ce:	11 f1       	breq	.+68     	; 0x3914 <vfprintf+0xd2>
    38d0:	90 f4       	brcc	.+36     	; 0x38f6 <vfprintf+0xb4>
    38d2:	80 32       	cpi	r24, 0x20	; 32
    38d4:	09 f1       	breq	.+66     	; 0x3918 <vfprintf+0xd6>
    38d6:	83 32       	cpi	r24, 0x23	; 35
    38d8:	29 f1       	breq	.+74     	; 0x3924 <vfprintf+0xe2>
    38da:	37 fc       	sbrc	r3, 7
    38dc:	3c c0       	rjmp	.+120    	; 0x3956 <vfprintf+0x114>
    38de:	20 ed       	ldi	r18, 0xD0	; 208
    38e0:	28 0f       	add	r18, r24
    38e2:	2a 30       	cpi	r18, 0x0A	; 10
    38e4:	50 f5       	brcc	.+84     	; 0x393a <vfprintf+0xf8>
    38e6:	36 fe       	sbrs	r3, 6
    38e8:	20 c0       	rjmp	.+64     	; 0x392a <vfprintf+0xe8>
    38ea:	8a e0       	ldi	r24, 0x0A	; 10
    38ec:	98 9e       	mul	r9, r24
    38ee:	20 0d       	add	r18, r0
    38f0:	11 24       	eor	r1, r1
    38f2:	92 2e       	mov	r9, r18
    38f4:	06 c0       	rjmp	.+12     	; 0x3902 <vfprintf+0xc0>
    38f6:	8d 32       	cpi	r24, 0x2D	; 45
    38f8:	91 f0       	breq	.+36     	; 0x391e <vfprintf+0xdc>
    38fa:	80 33       	cpi	r24, 0x30	; 48
    38fc:	71 f7       	brne	.-36     	; 0x38da <vfprintf+0x98>
    38fe:	68 94       	set
    3900:	30 f8       	bld	r3, 0
    3902:	f3 01       	movw	r30, r6
    3904:	93 fd       	sbrc	r25, 3
    3906:	85 91       	lpm	r24, Z+
    3908:	93 ff       	sbrs	r25, 3
    390a:	81 91       	ld	r24, Z+
    390c:	3f 01       	movw	r6, r30
    390e:	81 11       	cpse	r24, r1
    3910:	da cf       	rjmp	.-76     	; 0x38c6 <vfprintf+0x84>
    3912:	21 c0       	rjmp	.+66     	; 0x3956 <vfprintf+0x114>
    3914:	68 94       	set
    3916:	31 f8       	bld	r3, 1
    3918:	68 94       	set
    391a:	32 f8       	bld	r3, 2
    391c:	f2 cf       	rjmp	.-28     	; 0x3902 <vfprintf+0xc0>
    391e:	68 94       	set
    3920:	33 f8       	bld	r3, 3
    3922:	ef cf       	rjmp	.-34     	; 0x3902 <vfprintf+0xc0>
    3924:	68 94       	set
    3926:	34 f8       	bld	r3, 4
    3928:	ec cf       	rjmp	.-40     	; 0x3902 <vfprintf+0xc0>
    392a:	ea e0       	ldi	r30, 0x0A	; 10
    392c:	2e 9e       	mul	r2, r30
    392e:	20 0d       	add	r18, r0
    3930:	11 24       	eor	r1, r1
    3932:	22 2e       	mov	r2, r18
    3934:	68 94       	set
    3936:	35 f8       	bld	r3, 5
    3938:	e4 cf       	rjmp	.-56     	; 0x3902 <vfprintf+0xc0>
    393a:	8e 32       	cpi	r24, 0x2E	; 46
    393c:	29 f4       	brne	.+10     	; 0x3948 <vfprintf+0x106>
    393e:	36 fc       	sbrc	r3, 6
    3940:	04 c1       	rjmp	.+520    	; 0x3b4a <vfprintf+0x308>
    3942:	68 94       	set
    3944:	36 f8       	bld	r3, 6
    3946:	dd cf       	rjmp	.-70     	; 0x3902 <vfprintf+0xc0>
    3948:	8c 36       	cpi	r24, 0x6C	; 108
    394a:	19 f4       	brne	.+6      	; 0x3952 <vfprintf+0x110>
    394c:	68 94       	set
    394e:	37 f8       	bld	r3, 7
    3950:	d8 cf       	rjmp	.-80     	; 0x3902 <vfprintf+0xc0>
    3952:	88 36       	cpi	r24, 0x68	; 104
    3954:	b1 f2       	breq	.-84     	; 0x3902 <vfprintf+0xc0>
    3956:	98 2f       	mov	r25, r24
    3958:	9f 7d       	andi	r25, 0xDF	; 223
    395a:	95 54       	subi	r25, 0x45	; 69
    395c:	93 30       	cpi	r25, 0x03	; 3
    395e:	e0 f0       	brcs	.+56     	; 0x3998 <vfprintf+0x156>
    3960:	83 36       	cpi	r24, 0x63	; 99
    3962:	a1 f1       	breq	.+104    	; 0x39cc <vfprintf+0x18a>
    3964:	83 37       	cpi	r24, 0x73	; 115
    3966:	c1 f1       	breq	.+112    	; 0x39d8 <vfprintf+0x196>
    3968:	83 35       	cpi	r24, 0x53	; 83
    396a:	09 f0       	breq	.+2      	; 0x396e <vfprintf+0x12c>
    396c:	63 c0       	rjmp	.+198    	; 0x3a34 <vfprintf+0x1f2>
    396e:	28 01       	movw	r4, r16
    3970:	f2 e0       	ldi	r31, 0x02	; 2
    3972:	4f 0e       	add	r4, r31
    3974:	51 1c       	adc	r5, r1
    3976:	f8 01       	movw	r30, r16
    3978:	c0 80       	ld	r12, Z
    397a:	d1 80       	ldd	r13, Z+1	; 0x01
    397c:	69 2d       	mov	r22, r9
    397e:	70 e0       	ldi	r23, 0x00	; 0
    3980:	36 fc       	sbrc	r3, 6
    3982:	02 c0       	rjmp	.+4      	; 0x3988 <vfprintf+0x146>
    3984:	6f ef       	ldi	r22, 0xFF	; 255
    3986:	7f ef       	ldi	r23, 0xFF	; 255
    3988:	c6 01       	movw	r24, r12
    398a:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <strnlen_P>
    398e:	4c 01       	movw	r8, r24
    3990:	68 94       	set
    3992:	37 f8       	bld	r3, 7
    3994:	82 01       	movw	r16, r4
    3996:	0a c0       	rjmp	.+20     	; 0x39ac <vfprintf+0x16a>
    3998:	0c 5f       	subi	r16, 0xFC	; 252
    399a:	1f 4f       	sbci	r17, 0xFF	; 255
    399c:	ff e3       	ldi	r31, 0x3F	; 63
    399e:	f9 83       	std	Y+1, r31	; 0x01
    39a0:	88 24       	eor	r8, r8
    39a2:	83 94       	inc	r8
    39a4:	91 2c       	mov	r9, r1
    39a6:	65 01       	movw	r12, r10
    39a8:	e8 94       	clt
    39aa:	37 f8       	bld	r3, 7
    39ac:	33 fe       	sbrs	r3, 3
    39ae:	2d c0       	rjmp	.+90     	; 0x3a0a <vfprintf+0x1c8>
    39b0:	52 2c       	mov	r5, r2
    39b2:	81 14       	cp	r8, r1
    39b4:	91 04       	cpc	r9, r1
    39b6:	71 f5       	brne	.+92     	; 0x3a14 <vfprintf+0x1d2>
    39b8:	55 20       	and	r5, r5
    39ba:	09 f4       	brne	.+2      	; 0x39be <vfprintf+0x17c>
    39bc:	68 cf       	rjmp	.-304    	; 0x388e <vfprintf+0x4c>
    39be:	b7 01       	movw	r22, r14
    39c0:	80 e2       	ldi	r24, 0x20	; 32
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <fputc>
    39c8:	5a 94       	dec	r5
    39ca:	f6 cf       	rjmp	.-20     	; 0x39b8 <vfprintf+0x176>
    39cc:	f8 01       	movw	r30, r16
    39ce:	80 81       	ld	r24, Z
    39d0:	89 83       	std	Y+1, r24	; 0x01
    39d2:	0e 5f       	subi	r16, 0xFE	; 254
    39d4:	1f 4f       	sbci	r17, 0xFF	; 255
    39d6:	e4 cf       	rjmp	.-56     	; 0x39a0 <vfprintf+0x15e>
    39d8:	28 01       	movw	r4, r16
    39da:	f2 e0       	ldi	r31, 0x02	; 2
    39dc:	4f 0e       	add	r4, r31
    39de:	51 1c       	adc	r5, r1
    39e0:	f8 01       	movw	r30, r16
    39e2:	c0 80       	ld	r12, Z
    39e4:	d1 80       	ldd	r13, Z+1	; 0x01
    39e6:	69 2d       	mov	r22, r9
    39e8:	70 e0       	ldi	r23, 0x00	; 0
    39ea:	36 fc       	sbrc	r3, 6
    39ec:	02 c0       	rjmp	.+4      	; 0x39f2 <vfprintf+0x1b0>
    39ee:	6f ef       	ldi	r22, 0xFF	; 255
    39f0:	7f ef       	ldi	r23, 0xFF	; 255
    39f2:	c6 01       	movw	r24, r12
    39f4:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <strnlen>
    39f8:	4c 01       	movw	r8, r24
    39fa:	82 01       	movw	r16, r4
    39fc:	d5 cf       	rjmp	.-86     	; 0x39a8 <vfprintf+0x166>
    39fe:	b7 01       	movw	r22, r14
    3a00:	80 e2       	ldi	r24, 0x20	; 32
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <fputc>
    3a08:	2a 94       	dec	r2
    3a0a:	28 14       	cp	r2, r8
    3a0c:	19 04       	cpc	r1, r9
    3a0e:	09 f0       	breq	.+2      	; 0x3a12 <vfprintf+0x1d0>
    3a10:	b0 f7       	brcc	.-20     	; 0x39fe <vfprintf+0x1bc>
    3a12:	ce cf       	rjmp	.-100    	; 0x39b0 <vfprintf+0x16e>
    3a14:	f6 01       	movw	r30, r12
    3a16:	37 fc       	sbrc	r3, 7
    3a18:	85 91       	lpm	r24, Z+
    3a1a:	37 fe       	sbrs	r3, 7
    3a1c:	81 91       	ld	r24, Z+
    3a1e:	6f 01       	movw	r12, r30
    3a20:	b7 01       	movw	r22, r14
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <fputc>
    3a28:	51 10       	cpse	r5, r1
    3a2a:	5a 94       	dec	r5
    3a2c:	f1 e0       	ldi	r31, 0x01	; 1
    3a2e:	8f 1a       	sub	r8, r31
    3a30:	91 08       	sbc	r9, r1
    3a32:	bf cf       	rjmp	.-130    	; 0x39b2 <vfprintf+0x170>
    3a34:	84 36       	cpi	r24, 0x64	; 100
    3a36:	19 f0       	breq	.+6      	; 0x3a3e <vfprintf+0x1fc>
    3a38:	89 36       	cpi	r24, 0x69	; 105
    3a3a:	09 f0       	breq	.+2      	; 0x3a3e <vfprintf+0x1fc>
    3a3c:	77 c0       	rjmp	.+238    	; 0x3b2c <vfprintf+0x2ea>
    3a3e:	f8 01       	movw	r30, r16
    3a40:	37 fe       	sbrs	r3, 7
    3a42:	6b c0       	rjmp	.+214    	; 0x3b1a <vfprintf+0x2d8>
    3a44:	60 81       	ld	r22, Z
    3a46:	71 81       	ldd	r23, Z+1	; 0x01
    3a48:	82 81       	ldd	r24, Z+2	; 0x02
    3a4a:	93 81       	ldd	r25, Z+3	; 0x03
    3a4c:	0c 5f       	subi	r16, 0xFC	; 252
    3a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a50:	f3 2d       	mov	r31, r3
    3a52:	ff 76       	andi	r31, 0x6F	; 111
    3a54:	3f 2e       	mov	r3, r31
    3a56:	97 ff       	sbrs	r25, 7
    3a58:	09 c0       	rjmp	.+18     	; 0x3a6c <vfprintf+0x22a>
    3a5a:	90 95       	com	r25
    3a5c:	80 95       	com	r24
    3a5e:	70 95       	com	r23
    3a60:	61 95       	neg	r22
    3a62:	7f 4f       	sbci	r23, 0xFF	; 255
    3a64:	8f 4f       	sbci	r24, 0xFF	; 255
    3a66:	9f 4f       	sbci	r25, 0xFF	; 255
    3a68:	68 94       	set
    3a6a:	37 f8       	bld	r3, 7
    3a6c:	2a e0       	ldi	r18, 0x0A	; 10
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	a5 01       	movw	r20, r10
    3a72:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__ultoa_invert>
    3a76:	c8 2e       	mov	r12, r24
    3a78:	ca 18       	sub	r12, r10
    3a7a:	8c 2c       	mov	r8, r12
    3a7c:	43 2c       	mov	r4, r3
    3a7e:	36 fe       	sbrs	r3, 6
    3a80:	0c c0       	rjmp	.+24     	; 0x3a9a <vfprintf+0x258>
    3a82:	e8 94       	clt
    3a84:	40 f8       	bld	r4, 0
    3a86:	c9 14       	cp	r12, r9
    3a88:	40 f4       	brcc	.+16     	; 0x3a9a <vfprintf+0x258>
    3a8a:	34 fe       	sbrs	r3, 4
    3a8c:	05 c0       	rjmp	.+10     	; 0x3a98 <vfprintf+0x256>
    3a8e:	32 fc       	sbrc	r3, 2
    3a90:	03 c0       	rjmp	.+6      	; 0x3a98 <vfprintf+0x256>
    3a92:	f3 2d       	mov	r31, r3
    3a94:	fe 7e       	andi	r31, 0xEE	; 238
    3a96:	4f 2e       	mov	r4, r31
    3a98:	89 2c       	mov	r8, r9
    3a9a:	44 fe       	sbrs	r4, 4
    3a9c:	aa c0       	rjmp	.+340    	; 0x3bf2 <vfprintf+0x3b0>
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	ec 0d       	add	r30, r12
    3aa2:	f1 1d       	adc	r31, r1
    3aa4:	80 81       	ld	r24, Z
    3aa6:	80 33       	cpi	r24, 0x30	; 48
    3aa8:	09 f0       	breq	.+2      	; 0x3aac <vfprintf+0x26a>
    3aaa:	9c c0       	rjmp	.+312    	; 0x3be4 <vfprintf+0x3a2>
    3aac:	24 2d       	mov	r18, r4
    3aae:	29 7e       	andi	r18, 0xE9	; 233
    3ab0:	42 2e       	mov	r4, r18
    3ab2:	84 2d       	mov	r24, r4
    3ab4:	88 70       	andi	r24, 0x08	; 8
    3ab6:	58 2e       	mov	r5, r24
    3ab8:	43 fc       	sbrc	r4, 3
    3aba:	aa c0       	rjmp	.+340    	; 0x3c10 <vfprintf+0x3ce>
    3abc:	40 fe       	sbrs	r4, 0
    3abe:	a4 c0       	rjmp	.+328    	; 0x3c08 <vfprintf+0x3c6>
    3ac0:	9c 2c       	mov	r9, r12
    3ac2:	82 14       	cp	r8, r2
    3ac4:	18 f4       	brcc	.+6      	; 0x3acc <vfprintf+0x28a>
    3ac6:	2c 0c       	add	r2, r12
    3ac8:	92 2c       	mov	r9, r2
    3aca:	98 18       	sub	r9, r8
    3acc:	44 fe       	sbrs	r4, 4
    3ace:	a6 c0       	rjmp	.+332    	; 0x3c1c <vfprintf+0x3da>
    3ad0:	b7 01       	movw	r22, r14
    3ad2:	80 e3       	ldi	r24, 0x30	; 48
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <fputc>
    3ada:	42 fe       	sbrs	r4, 2
    3adc:	09 c0       	rjmp	.+18     	; 0x3af0 <vfprintf+0x2ae>
    3ade:	88 e7       	ldi	r24, 0x78	; 120
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	41 fe       	sbrs	r4, 1
    3ae4:	02 c0       	rjmp	.+4      	; 0x3aea <vfprintf+0x2a8>
    3ae6:	88 e5       	ldi	r24, 0x58	; 88
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	b7 01       	movw	r22, r14
    3aec:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <fputc>
    3af0:	c9 14       	cp	r12, r9
    3af2:	08 f4       	brcc	.+2      	; 0x3af6 <vfprintf+0x2b4>
    3af4:	9f c0       	rjmp	.+318    	; 0x3c34 <vfprintf+0x3f2>
    3af6:	ca 94       	dec	r12
    3af8:	d1 2c       	mov	r13, r1
    3afa:	9f ef       	ldi	r25, 0xFF	; 255
    3afc:	c9 1a       	sub	r12, r25
    3afe:	d9 0a       	sbc	r13, r25
    3b00:	ca 0c       	add	r12, r10
    3b02:	db 1c       	adc	r13, r11
    3b04:	f6 01       	movw	r30, r12
    3b06:	82 91       	ld	r24, -Z
    3b08:	6f 01       	movw	r12, r30
    3b0a:	b7 01       	movw	r22, r14
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <fputc>
    3b12:	ac 14       	cp	r10, r12
    3b14:	bd 04       	cpc	r11, r13
    3b16:	b1 f7       	brne	.-20     	; 0x3b04 <vfprintf+0x2c2>
    3b18:	4f cf       	rjmp	.-354    	; 0x39b8 <vfprintf+0x176>
    3b1a:	60 81       	ld	r22, Z
    3b1c:	71 81       	ldd	r23, Z+1	; 0x01
    3b1e:	07 2e       	mov	r0, r23
    3b20:	00 0c       	add	r0, r0
    3b22:	88 0b       	sbc	r24, r24
    3b24:	99 0b       	sbc	r25, r25
    3b26:	0e 5f       	subi	r16, 0xFE	; 254
    3b28:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2a:	92 cf       	rjmp	.-220    	; 0x3a50 <vfprintf+0x20e>
    3b2c:	d3 2c       	mov	r13, r3
    3b2e:	e8 94       	clt
    3b30:	d4 f8       	bld	r13, 4
    3b32:	2a e0       	ldi	r18, 0x0A	; 10
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	85 37       	cpi	r24, 0x75	; 117
    3b38:	e1 f1       	breq	.+120    	; 0x3bb2 <vfprintf+0x370>
    3b3a:	23 2d       	mov	r18, r3
    3b3c:	29 7f       	andi	r18, 0xF9	; 249
    3b3e:	d2 2e       	mov	r13, r18
    3b40:	8f 36       	cpi	r24, 0x6F	; 111
    3b42:	a9 f1       	breq	.+106    	; 0x3bae <vfprintf+0x36c>
    3b44:	f0 f4       	brcc	.+60     	; 0x3b82 <vfprintf+0x340>
    3b46:	88 35       	cpi	r24, 0x58	; 88
    3b48:	51 f1       	breq	.+84     	; 0x3b9e <vfprintf+0x35c>
    3b4a:	f7 01       	movw	r30, r14
    3b4c:	86 81       	ldd	r24, Z+6	; 0x06
    3b4e:	97 81       	ldd	r25, Z+7	; 0x07
    3b50:	2b 96       	adiw	r28, 0x0b	; 11
    3b52:	0f b6       	in	r0, 0x3f	; 63
    3b54:	f8 94       	cli
    3b56:	de bf       	out	0x3e, r29	; 62
    3b58:	0f be       	out	0x3f, r0	; 63
    3b5a:	cd bf       	out	0x3d, r28	; 61
    3b5c:	df 91       	pop	r29
    3b5e:	cf 91       	pop	r28
    3b60:	1f 91       	pop	r17
    3b62:	0f 91       	pop	r16
    3b64:	ff 90       	pop	r15
    3b66:	ef 90       	pop	r14
    3b68:	df 90       	pop	r13
    3b6a:	cf 90       	pop	r12
    3b6c:	bf 90       	pop	r11
    3b6e:	af 90       	pop	r10
    3b70:	9f 90       	pop	r9
    3b72:	8f 90       	pop	r8
    3b74:	7f 90       	pop	r7
    3b76:	6f 90       	pop	r6
    3b78:	5f 90       	pop	r5
    3b7a:	4f 90       	pop	r4
    3b7c:	3f 90       	pop	r3
    3b7e:	2f 90       	pop	r2
    3b80:	08 95       	ret
    3b82:	80 37       	cpi	r24, 0x70	; 112
    3b84:	49 f0       	breq	.+18     	; 0x3b98 <vfprintf+0x356>
    3b86:	88 37       	cpi	r24, 0x78	; 120
    3b88:	01 f7       	brne	.-64     	; 0x3b4a <vfprintf+0x308>
    3b8a:	d4 fe       	sbrs	r13, 4
    3b8c:	02 c0       	rjmp	.+4      	; 0x3b92 <vfprintf+0x350>
    3b8e:	68 94       	set
    3b90:	d2 f8       	bld	r13, 2
    3b92:	20 e1       	ldi	r18, 0x10	; 16
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	0d c0       	rjmp	.+26     	; 0x3bb2 <vfprintf+0x370>
    3b98:	68 94       	set
    3b9a:	d4 f8       	bld	r13, 4
    3b9c:	f6 cf       	rjmp	.-20     	; 0x3b8a <vfprintf+0x348>
    3b9e:	34 fe       	sbrs	r3, 4
    3ba0:	03 c0       	rjmp	.+6      	; 0x3ba8 <vfprintf+0x366>
    3ba2:	82 2f       	mov	r24, r18
    3ba4:	86 60       	ori	r24, 0x06	; 6
    3ba6:	d8 2e       	mov	r13, r24
    3ba8:	20 e1       	ldi	r18, 0x10	; 16
    3baa:	32 e0       	ldi	r19, 0x02	; 2
    3bac:	02 c0       	rjmp	.+4      	; 0x3bb2 <vfprintf+0x370>
    3bae:	28 e0       	ldi	r18, 0x08	; 8
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	f8 01       	movw	r30, r16
    3bb4:	d7 fe       	sbrs	r13, 7
    3bb6:	0f c0       	rjmp	.+30     	; 0x3bd6 <vfprintf+0x394>
    3bb8:	60 81       	ld	r22, Z
    3bba:	71 81       	ldd	r23, Z+1	; 0x01
    3bbc:	82 81       	ldd	r24, Z+2	; 0x02
    3bbe:	93 81       	ldd	r25, Z+3	; 0x03
    3bc0:	0c 5f       	subi	r16, 0xFC	; 252
    3bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc4:	a5 01       	movw	r20, r10
    3bc6:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__ultoa_invert>
    3bca:	c8 2e       	mov	r12, r24
    3bcc:	ca 18       	sub	r12, r10
    3bce:	3d 2c       	mov	r3, r13
    3bd0:	e8 94       	clt
    3bd2:	37 f8       	bld	r3, 7
    3bd4:	52 cf       	rjmp	.-348    	; 0x3a7a <vfprintf+0x238>
    3bd6:	60 81       	ld	r22, Z
    3bd8:	71 81       	ldd	r23, Z+1	; 0x01
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
    3bde:	0e 5f       	subi	r16, 0xFE	; 254
    3be0:	1f 4f       	sbci	r17, 0xFF	; 255
    3be2:	f0 cf       	rjmp	.-32     	; 0x3bc4 <vfprintf+0x382>
    3be4:	42 fc       	sbrc	r4, 2
    3be6:	02 c0       	rjmp	.+4      	; 0x3bec <vfprintf+0x3aa>
    3be8:	83 94       	inc	r8
    3bea:	63 cf       	rjmp	.-314    	; 0x3ab2 <vfprintf+0x270>
    3bec:	83 94       	inc	r8
    3bee:	83 94       	inc	r8
    3bf0:	60 cf       	rjmp	.-320    	; 0x3ab2 <vfprintf+0x270>
    3bf2:	84 2d       	mov	r24, r4
    3bf4:	86 78       	andi	r24, 0x86	; 134
    3bf6:	09 f4       	brne	.+2      	; 0x3bfa <vfprintf+0x3b8>
    3bf8:	5c cf       	rjmp	.-328    	; 0x3ab2 <vfprintf+0x270>
    3bfa:	f6 cf       	rjmp	.-20     	; 0x3be8 <vfprintf+0x3a6>
    3bfc:	b7 01       	movw	r22, r14
    3bfe:	80 e2       	ldi	r24, 0x20	; 32
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <fputc>
    3c06:	83 94       	inc	r8
    3c08:	82 14       	cp	r8, r2
    3c0a:	c0 f3       	brcs	.-16     	; 0x3bfc <vfprintf+0x3ba>
    3c0c:	51 2c       	mov	r5, r1
    3c0e:	5e cf       	rjmp	.-324    	; 0x3acc <vfprintf+0x28a>
    3c10:	52 2c       	mov	r5, r2
    3c12:	58 18       	sub	r5, r8
    3c14:	82 14       	cp	r8, r2
    3c16:	08 f4       	brcc	.+2      	; 0x3c1a <vfprintf+0x3d8>
    3c18:	59 cf       	rjmp	.-334    	; 0x3acc <vfprintf+0x28a>
    3c1a:	f8 cf       	rjmp	.-16     	; 0x3c0c <vfprintf+0x3ca>
    3c1c:	84 2d       	mov	r24, r4
    3c1e:	86 78       	andi	r24, 0x86	; 134
    3c20:	09 f4       	brne	.+2      	; 0x3c24 <vfprintf+0x3e2>
    3c22:	66 cf       	rjmp	.-308    	; 0x3af0 <vfprintf+0x2ae>
    3c24:	8b e2       	ldi	r24, 0x2B	; 43
    3c26:	41 fe       	sbrs	r4, 1
    3c28:	80 e2       	ldi	r24, 0x20	; 32
    3c2a:	47 fc       	sbrc	r4, 7
    3c2c:	8d e2       	ldi	r24, 0x2D	; 45
    3c2e:	b7 01       	movw	r22, r14
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	5c cf       	rjmp	.-328    	; 0x3aec <vfprintf+0x2aa>
    3c34:	b7 01       	movw	r22, r14
    3c36:	80 e3       	ldi	r24, 0x30	; 48
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <fputc>
    3c3e:	9a 94       	dec	r9
    3c40:	57 cf       	rjmp	.-338    	; 0x3af0 <vfprintf+0x2ae>
    3c42:	8f ef       	ldi	r24, 0xFF	; 255
    3c44:	9f ef       	ldi	r25, 0xFF	; 255
    3c46:	84 cf       	rjmp	.-248    	; 0x3b50 <vfprintf+0x30e>

00003c48 <strnlen_P>:
strnlen_P():
    3c48:	fc 01       	movw	r30, r24
    3c4a:	05 90       	lpm	r0, Z+
    3c4c:	61 50       	subi	r22, 0x01	; 1
    3c4e:	70 40       	sbci	r23, 0x00	; 0
    3c50:	01 10       	cpse	r0, r1
    3c52:	d8 f7       	brcc	.-10     	; 0x3c4a <strnlen_P+0x2>
    3c54:	80 95       	com	r24
    3c56:	90 95       	com	r25
    3c58:	8e 0f       	add	r24, r30
    3c5a:	9f 1f       	adc	r25, r31
    3c5c:	08 95       	ret

00003c5e <strnlen>:
strnlen():
    3c5e:	fc 01       	movw	r30, r24
    3c60:	61 50       	subi	r22, 0x01	; 1
    3c62:	70 40       	sbci	r23, 0x00	; 0
    3c64:	01 90       	ld	r0, Z+
    3c66:	01 10       	cpse	r0, r1
    3c68:	d8 f7       	brcc	.-10     	; 0x3c60 <strnlen+0x2>
    3c6a:	80 95       	com	r24
    3c6c:	90 95       	com	r25
    3c6e:	8e 0f       	add	r24, r30
    3c70:	9f 1f       	adc	r25, r31
    3c72:	08 95       	ret

00003c74 <fputc>:
fputc():
    3c74:	0f 93       	push	r16
    3c76:	1f 93       	push	r17
    3c78:	cf 93       	push	r28
    3c7a:	df 93       	push	r29
    3c7c:	18 2f       	mov	r17, r24
    3c7e:	09 2f       	mov	r16, r25
    3c80:	eb 01       	movw	r28, r22
    3c82:	8b 81       	ldd	r24, Y+3	; 0x03
    3c84:	81 fd       	sbrc	r24, 1
    3c86:	09 c0       	rjmp	.+18     	; 0x3c9a <fputc+0x26>
    3c88:	1f ef       	ldi	r17, 0xFF	; 255
    3c8a:	0f ef       	ldi	r16, 0xFF	; 255
    3c8c:	81 2f       	mov	r24, r17
    3c8e:	90 2f       	mov	r25, r16
    3c90:	df 91       	pop	r29
    3c92:	cf 91       	pop	r28
    3c94:	1f 91       	pop	r17
    3c96:	0f 91       	pop	r16
    3c98:	08 95       	ret
    3c9a:	82 ff       	sbrs	r24, 2
    3c9c:	14 c0       	rjmp	.+40     	; 0x3cc6 <fputc+0x52>
    3c9e:	2e 81       	ldd	r18, Y+6	; 0x06
    3ca0:	3f 81       	ldd	r19, Y+7	; 0x07
    3ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ca4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ca6:	28 17       	cp	r18, r24
    3ca8:	39 07       	cpc	r19, r25
    3caa:	3c f4       	brge	.+14     	; 0x3cba <fputc+0x46>
    3cac:	e8 81       	ld	r30, Y
    3cae:	f9 81       	ldd	r31, Y+1	; 0x01
    3cb0:	cf 01       	movw	r24, r30
    3cb2:	01 96       	adiw	r24, 0x01	; 1
    3cb4:	99 83       	std	Y+1, r25	; 0x01
    3cb6:	88 83       	st	Y, r24
    3cb8:	10 83       	st	Z, r17
    3cba:	8e 81       	ldd	r24, Y+6	; 0x06
    3cbc:	9f 81       	ldd	r25, Y+7	; 0x07
    3cbe:	01 96       	adiw	r24, 0x01	; 1
    3cc0:	9f 83       	std	Y+7, r25	; 0x07
    3cc2:	8e 83       	std	Y+6, r24	; 0x06
    3cc4:	e3 cf       	rjmp	.-58     	; 0x3c8c <fputc+0x18>
    3cc6:	e8 85       	ldd	r30, Y+8	; 0x08
    3cc8:	f9 85       	ldd	r31, Y+9	; 0x09
    3cca:	81 2f       	mov	r24, r17
    3ccc:	09 95       	icall
    3cce:	89 2b       	or	r24, r25
    3cd0:	a1 f3       	breq	.-24     	; 0x3cba <fputc+0x46>
    3cd2:	da cf       	rjmp	.-76     	; 0x3c88 <fputc+0x14>

00003cd4 <__ultoa_invert>:
__ultoa_invert():
    3cd4:	fa 01       	movw	r30, r20
    3cd6:	aa 27       	eor	r26, r26
    3cd8:	28 30       	cpi	r18, 0x08	; 8
    3cda:	51 f1       	breq	.+84     	; 0x3d30 <__ultoa_invert+0x5c>
    3cdc:	20 31       	cpi	r18, 0x10	; 16
    3cde:	81 f1       	breq	.+96     	; 0x3d40 <__ultoa_invert+0x6c>
    3ce0:	e8 94       	clt
    3ce2:	6f 93       	push	r22
    3ce4:	6e 7f       	andi	r22, 0xFE	; 254
    3ce6:	6e 5f       	subi	r22, 0xFE	; 254
    3ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cea:	8f 4f       	sbci	r24, 0xFF	; 255
    3cec:	9f 4f       	sbci	r25, 0xFF	; 255
    3cee:	af 4f       	sbci	r26, 0xFF	; 255
    3cf0:	b1 e0       	ldi	r27, 0x01	; 1
    3cf2:	3e d0       	rcall	.+124    	; 0x3d70 <__ultoa_invert+0x9c>
    3cf4:	b4 e0       	ldi	r27, 0x04	; 4
    3cf6:	3c d0       	rcall	.+120    	; 0x3d70 <__ultoa_invert+0x9c>
    3cf8:	67 0f       	add	r22, r23
    3cfa:	78 1f       	adc	r23, r24
    3cfc:	89 1f       	adc	r24, r25
    3cfe:	9a 1f       	adc	r25, r26
    3d00:	a1 1d       	adc	r26, r1
    3d02:	68 0f       	add	r22, r24
    3d04:	79 1f       	adc	r23, r25
    3d06:	8a 1f       	adc	r24, r26
    3d08:	91 1d       	adc	r25, r1
    3d0a:	a1 1d       	adc	r26, r1
    3d0c:	6a 0f       	add	r22, r26
    3d0e:	71 1d       	adc	r23, r1
    3d10:	81 1d       	adc	r24, r1
    3d12:	91 1d       	adc	r25, r1
    3d14:	a1 1d       	adc	r26, r1
    3d16:	20 d0       	rcall	.+64     	; 0x3d58 <__ultoa_invert+0x84>
    3d18:	09 f4       	brne	.+2      	; 0x3d1c <__ultoa_invert+0x48>
    3d1a:	68 94       	set
    3d1c:	3f 91       	pop	r19
    3d1e:	2a e0       	ldi	r18, 0x0A	; 10
    3d20:	26 9f       	mul	r18, r22
    3d22:	11 24       	eor	r1, r1
    3d24:	30 19       	sub	r19, r0
    3d26:	30 5d       	subi	r19, 0xD0	; 208
    3d28:	31 93       	st	Z+, r19
    3d2a:	de f6       	brtc	.-74     	; 0x3ce2 <__ultoa_invert+0xe>
    3d2c:	cf 01       	movw	r24, r30
    3d2e:	08 95       	ret
    3d30:	46 2f       	mov	r20, r22
    3d32:	47 70       	andi	r20, 0x07	; 7
    3d34:	40 5d       	subi	r20, 0xD0	; 208
    3d36:	41 93       	st	Z+, r20
    3d38:	b3 e0       	ldi	r27, 0x03	; 3
    3d3a:	0f d0       	rcall	.+30     	; 0x3d5a <__ultoa_invert+0x86>
    3d3c:	c9 f7       	brne	.-14     	; 0x3d30 <__ultoa_invert+0x5c>
    3d3e:	f6 cf       	rjmp	.-20     	; 0x3d2c <__ultoa_invert+0x58>
    3d40:	46 2f       	mov	r20, r22
    3d42:	4f 70       	andi	r20, 0x0F	; 15
    3d44:	40 5d       	subi	r20, 0xD0	; 208
    3d46:	4a 33       	cpi	r20, 0x3A	; 58
    3d48:	18 f0       	brcs	.+6      	; 0x3d50 <__ultoa_invert+0x7c>
    3d4a:	49 5d       	subi	r20, 0xD9	; 217
    3d4c:	31 fd       	sbrc	r19, 1
    3d4e:	40 52       	subi	r20, 0x20	; 32
    3d50:	41 93       	st	Z+, r20
    3d52:	02 d0       	rcall	.+4      	; 0x3d58 <__ultoa_invert+0x84>
    3d54:	a9 f7       	brne	.-22     	; 0x3d40 <__ultoa_invert+0x6c>
    3d56:	ea cf       	rjmp	.-44     	; 0x3d2c <__ultoa_invert+0x58>
    3d58:	b4 e0       	ldi	r27, 0x04	; 4
    3d5a:	a6 95       	lsr	r26
    3d5c:	97 95       	ror	r25
    3d5e:	87 95       	ror	r24
    3d60:	77 95       	ror	r23
    3d62:	67 95       	ror	r22
    3d64:	ba 95       	dec	r27
    3d66:	c9 f7       	brne	.-14     	; 0x3d5a <__ultoa_invert+0x86>
    3d68:	00 97       	sbiw	r24, 0x00	; 0
    3d6a:	61 05       	cpc	r22, r1
    3d6c:	71 05       	cpc	r23, r1
    3d6e:	08 95       	ret
    3d70:	9b 01       	movw	r18, r22
    3d72:	ac 01       	movw	r20, r24
    3d74:	0a 2e       	mov	r0, r26
    3d76:	06 94       	lsr	r0
    3d78:	57 95       	ror	r21
    3d7a:	47 95       	ror	r20
    3d7c:	37 95       	ror	r19
    3d7e:	27 95       	ror	r18
    3d80:	ba 95       	dec	r27
    3d82:	c9 f7       	brne	.-14     	; 0x3d76 <__ultoa_invert+0xa2>
    3d84:	62 0f       	add	r22, r18
    3d86:	73 1f       	adc	r23, r19
    3d88:	84 1f       	adc	r24, r20
    3d8a:	95 1f       	adc	r25, r21
    3d8c:	a0 1d       	adc	r26, r0
    3d8e:	08 95       	ret

00003d90 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    3d90:	f8 94       	cli

00003d92 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    3d92:	ff cf       	rjmp	.-2      	; 0x3d92 <__stop_program>
