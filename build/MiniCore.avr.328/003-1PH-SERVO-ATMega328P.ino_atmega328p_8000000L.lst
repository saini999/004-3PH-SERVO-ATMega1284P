
C:\Users\Admin\AppData\Local\Temp\arduino-sketch-580181F89BC105EA71F74E351EC0AE76/003-1PH-SERVO-ATMega328P.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
       8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
       c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      10:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      14:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      18:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      1c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      20:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      24:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      28:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      2c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      30:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      3c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      40:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__vector_16>
      44:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      4c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      50:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      54:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      58:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      5c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      60:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      64:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	24 00       	.word	0x0024	; ????
      6e:	27 00       	.word	0x0027	; ????
      70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <digital_pin_to_timer_PGM>:
      7c:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
      8c:	00 00 00 00 00 00 00                                .......

00000093 <characterArray>:
      93:	7e 30 6d 79 33 5b 5f 70 7f 7b 77 1f 4e 3d 4f 47     ~0my3[_p.{w.N=OG
	...
      b3:	00 00 22 00 00 00 00 20 4e 78 00 00 04 01 00 00     ..".... Nx......
      c3:	7e 30 6d 79 33 5b 5f 70 7f 7b 00 00 00 00 00 00     ~0my3[_p.{......
      d3:	00 77 1f 4e 3d 4f 47 5e 37 30 38 00 0e 00 15 7e     .w.N=OG^708....~
      e3:	67 73 05 5b 0f 3e 00 00 00 3b 00 4e 00 78 00 08     gs.[.>...;.N.x..
      f3:	02 77 1f 0d 3d 6f 47 5e 17 10 38 00 30 00 15 1d     .w..=oG^..8.0...
     103:	67 73 05 5b 0f 1c 00 00 00 00 00 00 00 00 00 00     gs.[............

00000113 <port_to_input_PGM>:
     113:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000011d <digital_pin_to_port_PGM>:
     11d:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     12d:	03 03 03 03 02 02 03                                .......

00000134 <digital_pin_to_bit_mask_PGM>:
     134:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     144:	04 08 10 20 40 80 40 00                             ... @.@.

0000014c <__ctors_start>:
__ctors_start():
     14c:	8f 0d       	add	r24, r15

0000014e <__ctors_end>:
__dtors_end():
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf ef       	ldi	r28, 0xFF	; 255
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     15a:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     15c:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     15e:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     160:	e6 e8       	ldi	r30, 0x86	; 134
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     162:	f9 e2       	ldi	r31, 0x29	; 41
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     166:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     168:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     16a:	a8 36       	cpi	r26, 0x68	; 104
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     16c:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     170:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     172:	a8 e6       	ldi	r26, 0x68	; 104
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     174:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     17a:	a5 37       	cpi	r26, 0x75	; 117
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     17c:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>

00000180 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     180:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     182:	c7 ea       	ldi	r28, 0xA7	; 167
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     184:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     186:	04 c0       	rjmp	.+8      	; 0x190 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     188:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     18a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     18c:	0e 94 19 10 	call	0x2032	; 0x2032 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     190:	c6 3a       	cpi	r28, 0xA6	; 166
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     192:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     194:	c9 f7       	brne	.-14     	; 0x188 <__do_global_ctors+0x8>
     196:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <main>
     19a:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <_exit>

0000019e <__bad_interrupt>:
__vector_22():
     19e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a2 <turnOffPWM>:
turnOffPWM():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     1a2:	84 30       	cpi	r24, 0x04	; 4
     1a4:	81 f0       	breq	.+32     	; 0x1c6 <turnOffPWM+0x24>
     1a6:	28 f4       	brcc	.+10     	; 0x1b2 <turnOffPWM+0x10>
     1a8:	82 30       	cpi	r24, 0x02	; 2
     1aa:	e9 f0       	breq	.+58     	; 0x1e6 <turnOffPWM+0x44>
     1ac:	83 30       	cpi	r24, 0x03	; 3
     1ae:	f9 f0       	breq	.+62     	; 0x1ee <turnOffPWM+0x4c>
     1b0:	08 95       	ret
     1b2:	88 30       	cpi	r24, 0x08	; 8
     1b4:	71 f0       	breq	.+28     	; 0x1d2 <turnOffPWM+0x30>
     1b6:	89 30       	cpi	r24, 0x09	; 9
     1b8:	91 f0       	breq	.+36     	; 0x1de <turnOffPWM+0x3c>
     1ba:	85 30       	cpi	r24, 0x05	; 5
     1bc:	b9 f4       	brne	.+46     	; 0x1ec <turnOffPWM+0x4a>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     1be:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     1c2:	8f 7d       	andi	r24, 0xDF	; 223
     1c4:	03 c0       	rjmp	.+6      	; 0x1cc <turnOffPWM+0x2a>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     1c6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     1ca:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     1cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     1d0:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     1d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     1d6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     1d8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     1dc:	08 95       	ret
     1de:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     1e2:	8f 7d       	andi	r24, 0xDF	; 223
     1e4:	f9 cf       	rjmp	.-14     	; 0x1d8 <turnOffPWM+0x36>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     1e6:	84 b5       	in	r24, 0x24	; 36
     1e8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     1ea:	84 bd       	out	0x24, r24	; 36
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     1ec:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     1ee:	84 b5       	in	r24, 0x24	; 36
     1f0:	8f 7d       	andi	r24, 0xDF	; 223
     1f2:	fb cf       	rjmp	.-10     	; 0x1ea <turnOffPWM+0x48>

000001f4 <digitalWrite>:
digitalWrite():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     1f4:	1f 93       	push	r17
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     1fa:	28 2f       	mov	r18, r24
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	f9 01       	movw	r30, r18
     200:	e4 58       	subi	r30, 0x84	; 132
     202:	ff 4f       	sbci	r31, 0xFF	; 255
     204:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     206:	f9 01       	movw	r30, r18
     208:	ec 5c       	subi	r30, 0xCC	; 204
     20a:	fe 4f       	sbci	r31, 0xFE	; 254
     20c:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     20e:	f9 01       	movw	r30, r18
     210:	e3 5e       	subi	r30, 0xE3	; 227
     212:	fe 4f       	sbci	r31, 0xFE	; 254
     214:	c4 91       	lpm	r28, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     216:	cc 23       	and	r28, r28
     218:	a9 f0       	breq	.+42     	; 0x244 <digitalWrite+0x50>
     21a:	16 2f       	mov	r17, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     21c:	81 11       	cpse	r24, r1
     21e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <turnOffPWM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     222:	ec 2f       	mov	r30, r28
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	ee 0f       	add	r30, r30
     228:	ff 1f       	adc	r31, r31
     22a:	ee 58       	subi	r30, 0x8E	; 142
     22c:	ff 4f       	sbci	r31, 0xFF	; 255
     22e:	a5 91       	lpm	r26, Z+
     230:	b4 91       	lpm	r27, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     232:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     234:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     236:	ec 91       	ld	r30, X
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     238:	11 11       	cpse	r17, r1
     23a:	08 c0       	rjmp	.+16     	; 0x24c <digitalWrite+0x58>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     23c:	d0 95       	com	r29
     23e:	de 23       	and	r29, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     240:	dc 93       	st	X, r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     242:	8f bf       	out	0x3f, r24	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     24c:	de 2b       	or	r29, r30
     24e:	f8 cf       	rjmp	.-16     	; 0x240 <digitalWrite+0x4c>

00000250 <pinMode>:
pinMode():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	fc 01       	movw	r30, r24
     258:	ec 5c       	subi	r30, 0xCC	; 204
     25a:	fe 4f       	sbci	r31, 0xFE	; 254
     25c:	24 91       	lpm	r18, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     25e:	83 5e       	subi	r24, 0xE3	; 227
     260:	9e 4f       	sbci	r25, 0xFE	; 254
     262:	fc 01       	movw	r30, r24
     264:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     266:	88 23       	and	r24, r24
     268:	d1 f0       	breq	.+52     	; 0x29e <pinMode+0x4e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	fc 01       	movw	r30, r24
     272:	e8 59       	subi	r30, 0x98	; 152
     274:	ff 4f       	sbci	r31, 0xFF	; 255
     276:	a5 91       	lpm	r26, Z+
     278:	b4 91       	lpm	r27, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     27a:	fc 01       	movw	r30, r24
     27c:	ee 58       	subi	r30, 0x8E	; 142
     27e:	ff 4f       	sbci	r31, 0xFF	; 255
     280:	c5 91       	lpm	r28, Z+
     282:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     284:	61 11       	cpse	r22, r1
     286:	0e c0       	rjmp	.+28     	; 0x2a4 <pinMode+0x54>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     288:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     28a:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     28c:	8c 91       	ld	r24, X
     28e:	e2 2f       	mov	r30, r18
     290:	e0 95       	com	r30
     292:	8e 23       	and	r24, r30
     294:	8c 93       	st	X, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     296:	28 81       	ld	r18, Y
     298:	e2 23       	and	r30, r18
     29a:	e8 83       	st	Y, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     29c:	9f bf       	out	0x3f, r25	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     2a4:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     2a6:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     2a8:	ec 91       	ld	r30, X
     2aa:	e2 2b       	or	r30, r18
     2ac:	ec 93       	st	X, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     2ae:	8f bf       	out	0x3f, r24	; 63
     2b0:	f6 cf       	rjmp	.-20     	; 0x29e <pinMode+0x4e>

000002b2 <analogRead>:
analogRead():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
     2b2:	8e 50       	subi	r24, 0x0E	; 14
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     2b4:	80 64       	ori	r24, 0x40	; 64
     2b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     2ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2be:	80 64       	ori	r24, 0x40	; 64
     2c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
     2c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2c8:	86 fd       	sbrc	r24, 6
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <analogRead+0x12>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
     2cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
     2d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
     2d4:	08 95       	ret

000002d6 <delayMicroseconds>:
delayMicroseconds():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
     2d6:	00 00       	nop
     2d8:	00 00       	nop
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:767
    "nop" "\n\t"
    "nop"); //just waiting 2 cycles

  // for a 1 and 2 microsecond delay, simply return.  the overhead
  // of the function call takes 16 (18) cycles, which is 2us
  if (us <= 2) return; // = 3 cycles, (4 when true)
     2da:	83 30       	cpi	r24, 0x03	; 3
     2dc:	91 05       	cpc	r25, r1
     2de:	28 f0       	brcs	.+10     	; 0x2ea <delayMicroseconds+0x14>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:772

  // the following loop takes 1/2 of a microsecond (4 cycles)
  // per iteration, so execute it twice for each microsecond of
  // delay requested.
  us <<= 1; //x2 us, = 2 cycles
     2e0:	88 0f       	add	r24, r24
     2e2:	99 1f       	adc	r25, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:777

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
     2e4:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <delayMicroseconds+0x10>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     2ea:	08 95       	ret

000002ec <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]>:
DisplayString():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:189
/*******************************************************************************************/
//Given a string such as "-A32", we display -A32
//Each digit is displayed for ~2000us, and cycles through the 4 digits
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
     2ec:	6f 92       	push	r6
     2ee:	7f 92       	push	r7
     2f0:	9f 92       	push	r9
     2f2:	bf 92       	push	r11
     2f4:	cf 92       	push	r12
     2f6:	df 92       	push	r13
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	7c 01       	movw	r14, r24
     304:	96 2e       	mov	r9, r22
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:192
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     306:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:238
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
		}
		//Service the decimal point, apostrophe and colon
		if ((DecAposColon & (1<<(digit-1))) && (digit < 5)) //Test DecAposColon to see if we need to turn on a decimal point
     308:	c6 2e       	mov	r12, r22
     30a:	d1 2c       	mov	r13, r1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:273
			  digitalWrite(digit4, DigitOff);
			  break;
			//This only currently works for 4 digits
		}
		// The display is on for microSeconds(brightnessLevel + 1), now turn off for the remainder of the framePeriod
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     30c:	81 ed       	ldi	r24, 0xD1	; 209
     30e:	68 2e       	mov	r6, r24
     310:	87 e0       	ldi	r24, 0x07	; 7
     312:	78 2e       	mov	r7, r24
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:192
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     314:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <display1+0x15>
     318:	81 17       	cp	r24, r17
     31a:	08 f4       	brcc	.+2      	; 0x31e <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x32>
     31c:	0d c1       	rjmp	.+538    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:194
	{
		switch(digit)
     31e:	c1 2f       	mov	r28, r17
     320:	d0 e0       	ldi	r29, 0x00	; 0
     322:	12 30       	cpi	r17, 0x02	; 2
     324:	09 f4       	brne	.+2      	; 0x328 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x3c>
     326:	55 c0       	rjmp	.+170    	; 0x3d2 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0xe6>
     328:	08 f0       	brcs	.+2      	; 0x32c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x40>
     32a:	47 c0       	rjmp	.+142    	; 0x3ba <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0xce>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:197
		{
			case 1:
				digitalWrite(digit1, DigitOn);
     32c:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <display1+0x1>
     330:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <display1+0x5>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     334:	11 30       	cpi	r17, 0x01	; 1
     336:	09 f4       	brne	.+2      	; 0x33a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x4e>
     338:	49 c0       	rjmp	.+146    	; 0x3cc <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0xe0>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:215

		//Here we access the array of segments
		//This could be cleaned up a bit but it works
		//displayCharacter(toDisplay[digit-1]); //Now display this digit
		// displayArray (defined in SevSeg.h) decides which segments are turned on for each number or symbol
		unsigned char characterToDisplay = toDisplay[digit-1];
     33a:	f7 01       	movw	r30, r14
     33c:	ec 0f       	add	r30, r28
     33e:	fd 1f       	adc	r31, r29
     340:	31 97       	sbiw	r30, 0x01	; 1
     342:	b0 80       	ld	r11, Z
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:216
		if (characterToDisplay & 0x80)	// bit 7 enables bit-per-segment control
     344:	b7 fe       	sbrs	r11, 7
     346:	4f c0       	rjmp	.+158    	; 0x3e6 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0xfa>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:218
		{	// Each bit of characterToDisplay turns on a single segment (from A-to-G)
			if (characterToDisplay & 0x01) digitalWrite(segmentA, SegOn);
     348:	b0 fe       	sbrs	r11, 0
     34a:	06 c0       	rjmp	.+12     	; 0x358 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x6c>
     34c:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     350:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <display1+0xd>
     354:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:219
			if (characterToDisplay & 0x02) digitalWrite(segmentB, SegOn);
     358:	b1 fe       	sbrs	r11, 1
     35a:	06 c0       	rjmp	.+12     	; 0x368 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x7c>
     35c:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     360:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <display1+0xe>
     364:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:220
			if (characterToDisplay & 0x04) digitalWrite(segmentC, SegOn);
     368:	b2 fe       	sbrs	r11, 2
     36a:	06 c0       	rjmp	.+12     	; 0x378 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x8c>
     36c:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     370:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <display1+0xf>
     374:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:221
			if (characterToDisplay & 0x08) digitalWrite(segmentD, SegOn);
     378:	b3 fe       	sbrs	r11, 3
     37a:	06 c0       	rjmp	.+12     	; 0x388 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x9c>
     37c:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     380:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <display1+0x10>
     384:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:222
			if (characterToDisplay & 0x10) digitalWrite(segmentE, SegOn);
     388:	b4 fe       	sbrs	r11, 4
     38a:	06 c0       	rjmp	.+12     	; 0x398 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0xac>
     38c:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     390:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <display1+0x11>
     394:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:223
			if (characterToDisplay & 0x20) digitalWrite(segmentF, SegOn);
     398:	b5 fe       	sbrs	r11, 5
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0xbc>
     39c:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     3a0:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <display1+0x12>
     3a4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:224
			if (characterToDisplay & 0x40) digitalWrite(segmentG, SegOn);
     3a8:	b6 fe       	sbrs	r11, 6
     3aa:	54 c0       	rjmp	.+168    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:235
			if (chr & (1<<5)) digitalWrite(segmentB, SegOn);
			if (chr & (1<<4)) digitalWrite(segmentC, SegOn);
			if (chr & (1<<3)) digitalWrite(segmentD, SegOn);
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
     3ac:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     3b0:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <display1+0x13>
     3b4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
     3b8:	4d c0       	rjmp	.+154    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     3ba:	13 30       	cpi	r17, 0x03	; 3
     3bc:	79 f0       	breq	.+30     	; 0x3dc <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0xf0>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:206
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
				break;
			case 4:
				digitalWrite(digit4, DigitOn);
     3be:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <display1+0x1>
     3c2:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <display1+0x8>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     3c6:	14 30       	cpi	r17, 0x04	; 4
     3c8:	09 f0       	breq	.+2      	; 0x3cc <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0xe0>
     3ca:	b7 cf       	rjmp	.-146    	; 0x33a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x4e>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:206
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
				break;
			case 4:
				digitalWrite(digit4, DigitOn);
     3cc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
     3d0:	b4 cf       	rjmp	.-152    	; 0x33a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x4e>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:200
		{
			case 1:
				digitalWrite(digit1, DigitOn);
				break;
			case 2:
				digitalWrite(digit2, DigitOn);
     3d2:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <display1+0x1>
     3d6:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <display1+0x6>
     3da:	f8 cf       	rjmp	.-16     	; 0x3cc <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0xe0>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:203
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
     3dc:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <display1+0x1>
     3e0:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <display1+0x7>
     3e4:	f3 cf       	rjmp	.-26     	; 0x3cc <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0xe0>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:228
			if (characterToDisplay & 0x20) digitalWrite(segmentF, SegOn);
			if (characterToDisplay & 0x40) digitalWrite(segmentG, SegOn);
		}
		else
		{
			const uint8_t chr = pgm_read_byte(&characterArray[characterToDisplay]);
     3e6:	eb 2d       	mov	r30, r11
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	ed 56       	subi	r30, 0x6D	; 109
     3ec:	ff 4f       	sbci	r31, 0xFF	; 255
     3ee:	b4 90       	lpm	r11, Z
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:229
			if (chr & (1<<6)) digitalWrite(segmentA, SegOn);
     3f0:	b6 fe       	sbrs	r11, 6
     3f2:	06 c0       	rjmp	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f4:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     3f8:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <display1+0xd>
     3fc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:230
			if (chr & (1<<5)) digitalWrite(segmentB, SegOn);
     400:	b5 fe       	sbrs	r11, 5
     402:	06 c0       	rjmp	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     404:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     408:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <display1+0xe>
     40c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:231
			if (chr & (1<<4)) digitalWrite(segmentC, SegOn);
     410:	b4 fe       	sbrs	r11, 4
     412:	06 c0       	rjmp	.+12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     414:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     418:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <display1+0xf>
     41c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:232
			if (chr & (1<<3)) digitalWrite(segmentD, SegOn);
     420:	b3 fe       	sbrs	r11, 3
     422:	06 c0       	rjmp	.+12     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     424:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     428:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <display1+0x10>
     42c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:233
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
     430:	b2 fe       	sbrs	r11, 2
     432:	06 c0       	rjmp	.+12     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     434:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     438:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <display1+0x11>
     43c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:234
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
     440:	b1 fe       	sbrs	r11, 1
     442:	06 c0       	rjmp	.+12     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     444:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     448:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <display1+0x12>
     44c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:235
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
     450:	b0 fc       	sbrc	r11, 0
     452:	ac cf       	rjmp	.-168    	; 0x3ac <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0xc0>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:238
		}
		//Service the decimal point, apostrophe and colon
		if ((DecAposColon & (1<<(digit-1))) && (digit < 5)) //Test DecAposColon to see if we need to turn on a decimal point
     454:	21 97       	sbiw	r28, 0x01	; 1
     456:	c6 01       	movw	r24, r12
     458:	02 c0       	rjmp	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45a:	95 95       	asr	r25
     45c:	87 95       	ror	r24
     45e:	ca 95       	dec	r28
     460:	e2 f7       	brpl	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     462:	80 ff       	sbrs	r24, 0
     464:	08 c0       	rjmp	.+16     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     466:	15 30       	cpi	r17, 0x05	; 5
     468:	30 f4       	brcc	.+12     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:239
			digitalWrite(segmentDP, SegOn);
     46a:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     46e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <display1+0x14>
     472:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:241

		delayMicroseconds(brightnessDelay + 1); //Display this digit for a fraction of a second (between 1us and 5000us, 500-2000 is pretty good)
     476:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <display1+0x16>
     47a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <display1+0x17>
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <delayMicroseconds>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:246
		//The + 1 is a bit of a hack but it removes the possible zero display (0 causes display to become bright and flickery)
		//If you set this too long, the display will start to flicker. Set it to 25000 for some fun.

		//Turn off all segments
		digitalWrite(segmentA, SegOff);
     484:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <display1+0x4>
     488:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <display1+0xd>
     48c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:247
		digitalWrite(segmentB, SegOff);
     490:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <display1+0x4>
     494:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <display1+0xe>
     498:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:248
		digitalWrite(segmentC, SegOff);
     49c:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <display1+0x4>
     4a0:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <display1+0xf>
     4a4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:249
		digitalWrite(segmentD, SegOff);
     4a8:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <display1+0x4>
     4ac:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <display1+0x10>
     4b0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:250
		digitalWrite(segmentE, SegOff);
     4b4:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <display1+0x4>
     4b8:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <display1+0x11>
     4bc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:251
		digitalWrite(segmentF, SegOff);
     4c0:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <display1+0x4>
     4c4:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <display1+0x12>
     4c8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:252
		digitalWrite(segmentG, SegOff);
     4cc:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <display1+0x4>
     4d0:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <display1+0x13>
     4d4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:253
		digitalWrite(segmentDP, SegOff);
     4d8:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <display1+0x4>
     4dc:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <display1+0x14>
     4e0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:256

		//Turn off this digit
		switch(digit)
     4e4:	12 30       	cpi	r17, 0x02	; 2
     4e6:	f1 f0       	breq	.+60     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     4e8:	90 f4       	brcc	.+36     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:259
		{
			case 1:
			  digitalWrite(digit1, DigitOff);
     4ea:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <display1+0x2>
     4ee:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <display1+0x5>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     4f2:	11 30       	cpi	r17, 0x01	; 1
     4f4:	a1 f0       	breq	.+40     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:273
			  digitalWrite(digit4, DigitOff);
			  break;
			//This only currently works for 4 digits
		}
		// The display is on for microSeconds(brightnessLevel + 1), now turn off for the remainder of the framePeriod
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     4f6:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <display1+0x16>
     4fa:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <display1+0x17>
     4fe:	93 01       	movw	r18, r6
     500:	28 1b       	sub	r18, r24
     502:	39 0b       	sbc	r19, r25
     504:	c9 01       	movw	r24, r18
     506:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <delayMicroseconds>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:192
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     50a:	1f 5f       	subi	r17, 0xFF	; 255
     50c:	03 cf       	rjmp	.-506    	; 0x314 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x28>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     50e:	13 30       	cpi	r17, 0x03	; 3
     510:	71 f0       	breq	.+28     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:268
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
			  break;
			case 4:
			  digitalWrite(digit4, DigitOff);
     512:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <display1+0x2>
     516:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <display1+0x8>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     51a:	14 30       	cpi	r17, 0x04	; 4
     51c:	61 f7       	brne	.-40     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:268
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
			  break;
			case 4:
			  digitalWrite(digit4, DigitOff);
     51e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
     522:	e9 cf       	rjmp	.-46     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:262
		{
			case 1:
			  digitalWrite(digit1, DigitOff);
			  break;
			case 2:
			  digitalWrite(digit2, DigitOff);
     524:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <display1+0x2>
     528:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <display1+0x6>
     52c:	f8 cf       	rjmp	.-16     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:265
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
     52e:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <display1+0x2>
     532:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <display1+0x7>
     536:	f3 cf       	rjmp	.-26     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:279
	}

	//After we've gone through the digits, we control the colon and apostrophe (if the display supports it)

	//Turn on the colon and/or apostrophe
	if ((digitColon != 255) || (digitApostrophe != 255))
     538:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <display1+0xa>
     53c:	8f 3f       	cpi	r24, 0xFF	; 255
     53e:	29 f4       	brne	.+10     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     540:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <display1+0x9>
     544:	9f 3f       	cpi	r25, 0xFF	; 255
     546:	09 f4       	brne	.+2      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     548:	4e c0       	rjmp	.+156    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:281
	{
		if (DecAposColon & (1<<4)) //Test to see if we need to turn on the Colon
     54a:	94 fe       	sbrs	r9, 4
     54c:	0a c0       	rjmp	.+20     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:283
		{
			digitalWrite(digitColon, DigitOn);
     54e:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <display1+0x1>
     552:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:284
			digitalWrite(segmentColon, SegOn);
     556:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     55a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <display1+0xc>
     55e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:286
		}
		if (DecAposColon & (1<<5)) //Test DecAposColon to see if we need to turn on Apostrophe
     562:	95 fe       	sbrs	r9, 5
     564:	0c c0       	rjmp	.+24     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:288
		{
			digitalWrite(digitApostrophe, DigitOn);
     566:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <display1+0x1>
     56a:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <display1+0x9>
     56e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:289
			digitalWrite(segmentApostrophe, SegOn);
     572:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <display1+0x3>
     576:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <display1+0xb>
     57a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:291
		}
		delayMicroseconds(brightnessDelay + 1); //Display this digit for a fraction of a second (between 1us and 5000us, 500-2000 is pretty good)
     57e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <display1+0x16>
     582:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <display1+0x17>
     586:	01 96       	adiw	r24, 0x01	; 1
     588:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <delayMicroseconds>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:294

		//Turn off the colon and/or apostrophe
		digitalWrite(digitColon, DigitOff);
     58c:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <display1+0x2>
     590:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <display1+0xa>
     594:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:295
		digitalWrite(segmentColon, SegOff);
     598:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <display1+0x4>
     59c:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <display1+0xc>
     5a0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:296
		digitalWrite(digitApostrophe, DigitOff);
     5a4:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <display1+0x2>
     5a8:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <display1+0x9>
     5ac:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:297
		digitalWrite(segmentApostrophe, SegOff);
     5b0:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <display1+0x4>
     5b4:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <display1+0xb>
     5b8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:298
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     5bc:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <display1+0x16>
     5c0:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <display1+0x17>
     5c4:	81 ed       	ldi	r24, 0xD1	; 209
     5c6:	97 e0       	ldi	r25, 0x07	; 7
     5c8:	82 1b       	sub	r24, r18
     5ca:	93 0b       	sbc	r25, r19
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:301
	}

}
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	1f 91       	pop	r17
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	cf 90       	pop	r12
     5da:	bf 90       	pop	r11
     5dc:	9f 90       	pop	r9
     5de:	7f 90       	pop	r7
     5e0:	6f 90       	pop	r6
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:298
		//Turn off the colon and/or apostrophe
		digitalWrite(digitColon, DigitOff);
		digitalWrite(segmentColon, SegOff);
		digitalWrite(digitApostrophe, DigitOff);
		digitalWrite(segmentApostrophe, SegOff);
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     5e2:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <delayMicroseconds>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:301
	}

}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	bf 90       	pop	r11
     5f6:	9f 90       	pop	r9
     5f8:	7f 90       	pop	r7
     5fa:	6f 90       	pop	r6
     5fc:	08 95       	ret

000005fe <micros>:
micros():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     5fe:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     600:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     602:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <timer0_overflow_count>
     606:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <timer0_overflow_count+0x1>
     60a:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <timer0_overflow_count+0x2>
     60e:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <timer0_overflow_count+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     612:	26 b5       	in	r18, 0x26	; 38
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     614:	a8 9b       	sbis	0x15, 0	; 21
     616:	05 c0       	rjmp	.+10     	; 0x622 <micros+0x24>
     618:	2f 3f       	cpi	r18, 0xFF	; 255
     61a:	19 f0       	breq	.+6      	; 0x622 <micros+0x24>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	a1 1d       	adc	r26, r1
     620:	b1 1d       	adc	r27, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     622:	3f bf       	out	0x3f, r19	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     624:	ba 2f       	mov	r27, r26
     626:	a9 2f       	mov	r26, r25
     628:	98 2f       	mov	r25, r24
     62a:	88 27       	eor	r24, r24
     62c:	bc 01       	movw	r22, r24
     62e:	cd 01       	movw	r24, r26
     630:	62 0f       	add	r22, r18
     632:	71 1d       	adc	r23, r1
     634:	81 1d       	adc	r24, r1
     636:	91 1d       	adc	r25, r1
     638:	43 e0       	ldi	r20, 0x03	; 3
     63a:	66 0f       	add	r22, r22
     63c:	77 1f       	adc	r23, r23
     63e:	88 1f       	adc	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	4a 95       	dec	r20
     644:	d1 f7       	brne	.-12     	; 0x63a <micros+0x3c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     646:	08 95       	ret

00000648 <BlockNot::reset(unsigned long) [clone .constprop.18]>:
reset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:444
    return result;
}

void BlockNot::switchTo(Unit units) { baseUnits = units; }

void BlockNot::reset(const unsigned long newStartTime) {
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	ec 01       	movw	r28, r24
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:447
   unsigned long finalStartTime = newStartTime;
    if(newStartTime == 0) {
        switch(baseUnits) {
     652:	8b 89       	ldd	r24, Y+19	; 0x13
     654:	9c 89       	ldd	r25, Y+20	; 0x14
     656:	81 30       	cpi	r24, 0x01	; 1
     658:	91 05       	cpc	r25, r1
     65a:	d9 f0       	breq	.+54     	; 0x692 <BlockNot::reset(unsigned long) [clone .constprop.18]+0x4a>
     65c:	30 f0       	brcs	.+12     	; 0x66a <BlockNot::reset(unsigned long) [clone .constprop.18]+0x22>
     65e:	02 97       	sbiw	r24, 0x02	; 2
     660:	c1 f0       	breq	.+48     	; 0x692 <BlockNot::reset(unsigned long) [clone .constprop.18]+0x4a>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:445
}

void BlockNot::switchTo(Unit units) { baseUnits = units; }

void BlockNot::reset(const unsigned long newStartTime) {
   unsigned long finalStartTime = newStartTime;
     662:	00 e0       	ldi	r16, 0x00	; 0
     664:	10 e0       	ldi	r17, 0x00	; 0
     666:	98 01       	movw	r18, r16
     668:	0a c0       	rjmp	.+20     	; 0x67e <BlockNot::reset(unsigned long) [clone .constprop.18]+0x36>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:449
    if(newStartTime == 0) {
        switch(baseUnits) {
            case MICROSECONDS:
                finalStartTime = micros() + microsOffset;
     66a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <micros>
     66e:	08 85       	ldd	r16, Y+8	; 0x08
     670:	19 85       	ldd	r17, Y+9	; 0x09
     672:	2a 85       	ldd	r18, Y+10	; 0x0a
     674:	3b 85       	ldd	r19, Y+11	; 0x0b
     676:	06 0f       	add	r16, r22
     678:	17 1f       	adc	r17, r23
     67a:	28 1f       	adc	r18, r24
     67c:	39 1f       	adc	r19, r25
resetTimer():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:509
            break;
    }
}

void BlockNot::resetTimer(const unsigned long newStartTime) {
    startTime = newStartTime;
     67e:	08 83       	st	Y, r16
     680:	19 83       	std	Y+1, r17	; 0x01
     682:	2a 83       	std	Y+2, r18	; 0x02
     684:	3b 83       	std	Y+3, r19	; 0x03
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:510
    onceTriggered = false;
     686:	1a 8a       	std	Y+18, r1	; 0x12
reset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:460
                finalStartTime = millis() + millisOffset;
                break;
        }
    }
    resetTimer(finalStartTime);
}
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	08 95       	ret
millis():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     692:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     694:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     696:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <timer0_millis>
     69a:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <timer0_millis+0x1>
     69e:	a0 91 6f 02 	lds	r26, 0x026F	; 0x80026f <timer0_millis+0x2>
     6a2:	b0 91 70 02 	lds	r27, 0x0270	; 0x800270 <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     6a6:	2f bf       	out	0x3f, r18	; 63
reset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:455
                break;
            case MILLISECONDS:
                finalStartTime = millis() + millisOffset;
                break;
            case SECONDS:
                finalStartTime = millis() + millisOffset;
     6a8:	0c 81       	ldd	r16, Y+4	; 0x04
     6aa:	1d 81       	ldd	r17, Y+5	; 0x05
     6ac:	2e 81       	ldd	r18, Y+6	; 0x06
     6ae:	3f 81       	ldd	r19, Y+7	; 0x07
     6b0:	08 0f       	add	r16, r24
     6b2:	19 1f       	adc	r17, r25
     6b4:	2a 1f       	adc	r18, r26
     6b6:	3b 1f       	adc	r19, r27
     6b8:	e2 cf       	rjmp	.-60     	; 0x67e <BlockNot::reset(unsigned long) [clone .constprop.18]+0x36>

000006ba <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>:
_ZN8BlockNot11setDurationEm4Unitb.part.3():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:189
    if (resetOption) reset();
}

void BlockNot::setDuration(const unsigned long time, Unit inUnits, bool resetOption) {
    initDuration(time, inUnits);
    if (resetOption) reset();
     6ba:	0c 94 24 03 	jmp	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.18]>

000006be <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]>:
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:50
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
}

BlockNot::BlockNot(unsigned long time, Unit units) {
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	ec 01       	movw	r28, r24
     6c8:	1c 82       	std	Y+4, r1	; 0x04
     6ca:	1d 82       	std	Y+5, r1	; 0x05
     6cc:	1e 82       	std	Y+6, r1	; 0x06
     6ce:	1f 82       	std	Y+7, r1	; 0x07
     6d0:	18 86       	std	Y+8, r1	; 0x08
     6d2:	19 86       	std	Y+9, r1	; 0x09
     6d4:	1a 86       	std	Y+10, r1	; 0x0a
     6d6:	1b 86       	std	Y+11, r1	; 0x0b
     6d8:	1c 86       	std	Y+12, r1	; 0x0c
     6da:	1d 86       	std	Y+13, r1	; 0x0d
     6dc:	1e 86       	std	Y+14, r1	; 0x0e
     6de:	1f 86       	std	Y+15, r1	; 0x0f
     6e0:	19 8a       	std	Y+17, r1	; 0x11
     6e2:	18 8a       	std	Y+16, r1	; 0x10
     6e4:	1a 8a       	std	Y+18, r1	; 0x12
     6e6:	1e 8e       	std	Y+30, r1	; 0x1e
     6e8:	1d 8e       	std	Y+29, r1	; 0x1d
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:51
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
     6ea:	00 91 6b 02 	lds	r16, 0x026B	; 0x80026b <BlockNot::global>
     6ee:	10 91 6c 02 	lds	r17, 0x026C	; 0x80026c <BlockNot::global+0x1>
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	01 30       	cpi	r16, 0x01	; 1
     6f8:	11 05       	cpc	r17, r1
     6fa:	11 f0       	breq	.+4      	; 0x700 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]+0x42>
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <BlockNot::global+0x1>
     704:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <BlockNot::global>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:52
    baseUnits = units;
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	9c 8b       	std	Y+20, r25	; 0x14
     70e:	8b 8b       	std	Y+19, r24	; 0x13
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:489
            break;
        case MILLISECONDS:
            duration.millis = time;
            break;
        case SECONDS:
            duration.seconds = time;
     710:	cb 01       	movw	r24, r22
     712:	ba 01       	movw	r22, r20
     714:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__floatunsisf>
     718:	6d 8b       	std	Y+21, r22	; 0x15
     71a:	7e 8b       	std	Y+22, r23	; 0x16
     71c:	8f 8b       	std	Y+23, r24	; 0x17
     71e:	98 8f       	std	Y+24, r25	; 0x18
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:54

BlockNot::BlockNot(unsigned long time, Unit units) {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    baseUnits = units;
    initDuration(time);
    reset();
     720:	ce 01       	movw	r24, r28
     722:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:55
    if (global == GLOBAL_RESET) addToTimerList();
     726:	01 30       	cpi	r16, 0x01	; 1
     728:	11 05       	cpc	r17, r1
     72a:	39 f0       	breq	.+14     	; 0x73a <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]+0x7c>
     72c:	ce 01       	movw	r24, r28
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:56
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:55
BlockNot::BlockNot(unsigned long time, Unit units) {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    baseUnits = units;
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
     736:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <BlockNot::addToTimerList()>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:56
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	08 95       	ret

00000744 <BlockNot::timeSinceReset()>:
timeSinceReset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:513
void BlockNot::resetTimer(const unsigned long newStartTime) {
    startTime = newStartTime;
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
     744:	cf 92       	push	r12
     746:	df 92       	push	r13
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	ec 01       	movw	r28, r24
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:515
    unsigned long result = 0L;
    unsigned long millisBase = millisOffset + millis();
     756:	6c 81       	ldd	r22, Y+4	; 0x04
     758:	7d 81       	ldd	r23, Y+5	; 0x05
     75a:	8e 81       	ldd	r24, Y+6	; 0x06
     75c:	9f 81       	ldd	r25, Y+7	; 0x07
millis():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     75e:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     760:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     762:	c0 90 6d 02 	lds	r12, 0x026D	; 0x80026d <timer0_millis>
     766:	d0 90 6e 02 	lds	r13, 0x026E	; 0x80026e <timer0_millis+0x1>
     76a:	e0 90 6f 02 	lds	r14, 0x026F	; 0x80026f <timer0_millis+0x2>
     76e:	f0 90 70 02 	lds	r15, 0x0270	; 0x800270 <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     772:	2f bf       	out	0x3f, r18	; 63
timeSinceReset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:516
    switch (baseUnits) {
     774:	2b 89       	ldd	r18, Y+19	; 0x13
     776:	3c 89       	ldd	r19, Y+20	; 0x14
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	39 f0       	breq	.+14     	; 0x78c <BlockNot::timeSinceReset()+0x48>
     77e:	23 30       	cpi	r18, 0x03	; 3
     780:	31 05       	cpc	r19, r1
     782:	f8 f0       	brcs	.+62     	; 0x7c2 <BlockNot::timeSinceReset()+0x7e>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:514
    startTime = newStartTime;
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
    unsigned long result = 0L;
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	cb 01       	movw	r24, r22
     78a:	12 c0       	rjmp	.+36     	; 0x7b0 <BlockNot::timeSinceReset()+0x6c>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:518
    unsigned long millisBase = millisOffset + millis();
    switch (baseUnits) {
        case MICROSECONDS:
            result = microsOffset + micros() - startTime;
     78c:	c8 84       	ldd	r12, Y+8	; 0x08
     78e:	d9 84       	ldd	r13, Y+9	; 0x09
     790:	ea 84       	ldd	r14, Y+10	; 0x0a
     792:	fb 84       	ldd	r15, Y+11	; 0x0b
     794:	0e 94 ff 02 	call	0x5fe	; 0x5fe <micros>
     798:	08 81       	ld	r16, Y
     79a:	19 81       	ldd	r17, Y+1	; 0x01
     79c:	2a 81       	ldd	r18, Y+2	; 0x02
     79e:	3b 81       	ldd	r19, Y+3	; 0x03
     7a0:	c0 1a       	sub	r12, r16
     7a2:	d1 0a       	sbc	r13, r17
     7a4:	e2 0a       	sbc	r14, r18
     7a6:	f3 0a       	sbc	r15, r19
     7a8:	6c 0d       	add	r22, r12
     7aa:	7d 1d       	adc	r23, r13
     7ac:	8e 1d       	adc	r24, r14
     7ae:	9f 1d       	adc	r25, r15
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:528
        case SECONDS:
            result = millisBase - startTime;
            break;
    }
    return result;
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	ff 90       	pop	r15
     7ba:	ef 90       	pop	r14
     7bc:	df 90       	pop	r13
     7be:	cf 90       	pop	r12
     7c0:	08 95       	ret
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:515
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
    unsigned long result = 0L;
    unsigned long millisBase = millisOffset + millis();
     7c2:	6c 0d       	add	r22, r12
     7c4:	7d 1d       	adc	r23, r13
     7c6:	8e 1d       	adc	r24, r14
     7c8:	9f 1d       	adc	r25, r15
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:524
            break;
        case MILLISECONDS:
            result = millisBase - startTime;
            break;
        case SECONDS:
            result = millisBase - startTime;
     7ca:	c8 80       	ld	r12, Y
     7cc:	d9 80       	ldd	r13, Y+1	; 0x01
     7ce:	ea 80       	ldd	r14, Y+2	; 0x02
     7d0:	fb 80       	ldd	r15, Y+3	; 0x03
     7d2:	6c 19       	sub	r22, r12
     7d4:	7d 09       	sbc	r23, r13
     7d6:	8e 09       	sbc	r24, r14
     7d8:	9f 09       	sbc	r25, r15
     7da:	ea cf       	rjmp	.-44     	; 0x7b0 <BlockNot::timeSinceReset()+0x6c>

000007dc <BlockNot::triggered(bool)>:
triggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:236
            break;
    }
    if (resetOption) reset();
}

bool BlockNot::triggered(bool resetOption) {
     7dc:	cf 92       	push	r12
     7de:	df 92       	push	r13
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	ec 01       	movw	r28, r24
     7ee:	06 2f       	mov	r16, r22
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:532
    return result;
}

bool BlockNot::hasTriggered() {
    bool triggered;
    switch(baseUnits) {
     7f0:	8b 89       	ldd	r24, Y+19	; 0x13
     7f2:	9c 89       	ldd	r25, Y+20	; 0x14
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	91 05       	cpc	r25, r1
     7f8:	91 f1       	breq	.+100    	; 0x85e <BlockNot::triggered(bool)+0x82>
     7fa:	c0 f0       	brcs	.+48     	; 0x82c <BlockNot::triggered(bool)+0x50>
     7fc:	02 97       	sbiw	r24, 0x02	; 2
     7fe:	79 f1       	breq	.+94     	; 0x85e <BlockNot::triggered(bool)+0x82>
triggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:238
    if (resetOption) reset();
}

bool BlockNot::triggered(bool resetOption) {
    bool triggered = hasTriggered();
    if (resetOption && triggered) {
     800:	00 23       	and	r16, r16
     802:	29 f0       	breq	.+10     	; 0x80e <BlockNot::triggered(bool)+0x32>
     804:	11 23       	and	r17, r17
     806:	19 f0       	breq	.+6      	; 0x80e <BlockNot::triggered(bool)+0x32>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:239
        reset();
     808:	ce 01       	movw	r24, r28
     80a:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:241
    }
    if (timerState == RUNNING) return triggered;
     80e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     810:	9e 8d       	ldd	r25, Y+30	; 0x1e
     812:	89 2b       	or	r24, r25
     814:	09 f0       	breq	.+2      	; 0x818 <BlockNot::triggered(bool)+0x3c>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:242
    else return false;
     816:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:243
}
     818:	81 2f       	mov	r24, r17
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	df 90       	pop	r13
     828:	cf 90       	pop	r12
     82a:	08 95       	ret
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:534

bool BlockNot::hasTriggered() {
    bool triggered;
    switch(baseUnits) {
        case MICROSECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.micros;
     82c:	ce 01       	movw	r24, r28
     82e:	0e 94 a2 03 	call	0x744	; 0x744 <BlockNot::timeSinceReset()>
     832:	6b 01       	movw	r12, r22
     834:	7c 01       	movw	r14, r24
_ZNK8BlockNot5cTime7micro_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:213
            micro_t &operator=(double us) {
                seconds = us * .000001;
                return *this;
            }
            operator double() const {
                return seconds * 1000000.0;
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	34 e2       	ldi	r19, 0x24	; 36
     83a:	44 e7       	ldi	r20, 0x74	; 116
     83c:	59 e4       	ldi	r21, 0x49	; 73
_ZNK8BlockNot5cTime7milli_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:201
            milli_t &operator=(double ms) {
                seconds = ms * .001;
                return *this;
            }
            operator double() const {
                return seconds * 1000.0;
     83e:	6d 89       	ldd	r22, Y+21	; 0x15
     840:	7e 89       	ldd	r23, Y+22	; 0x16
     842:	8f 89       	ldd	r24, Y+23	; 0x17
     844:	98 8d       	ldd	r25, Y+24	; 0x18
     846:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:540
            break;
        case MILLISECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.millis;
            break;
        case SECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.millis;
     84a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__fixunssfsi>
     84e:	11 e0       	ldi	r17, 0x01	; 1
     850:	c6 16       	cp	r12, r22
     852:	d7 06       	cpc	r13, r23
     854:	e8 06       	cpc	r14, r24
     856:	f9 06       	cpc	r15, r25
     858:	98 f6       	brcc	.-90     	; 0x800 <BlockNot::triggered(bool)+0x24>
     85a:	10 e0       	ldi	r17, 0x00	; 0
     85c:	d1 cf       	rjmp	.-94     	; 0x800 <BlockNot::triggered(bool)+0x24>
     85e:	ce 01       	movw	r24, r28
     860:	0e 94 a2 03 	call	0x744	; 0x744 <BlockNot::timeSinceReset()>
     864:	6b 01       	movw	r12, r22
     866:	7c 01       	movw	r14, r24
_ZNK8BlockNot5cTime7milli_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:201
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	4a e7       	ldi	r20, 0x7A	; 122
     86e:	54 e4       	ldi	r21, 0x44	; 68
     870:	e6 cf       	rjmp	.-52     	; 0x83e <BlockNot::triggered(bool)+0x62>

00000872 <read(int)>:
read():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:845
  pinMode(PIN, OUTPUT);
}

//Read Input

bool read(int PIN) {
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	9c 01       	movw	r18, r24
digitalRead():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
     878:	fc 01       	movw	r30, r24
     87a:	e4 58       	subi	r30, 0x84	; 132
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     880:	f9 01       	movw	r30, r18
     882:	ec 5c       	subi	r30, 0xCC	; 204
     884:	fe 4f       	sbci	r31, 0xFE	; 254
     886:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     888:	f9 01       	movw	r30, r18
     88a:	e3 5e       	subi	r30, 0xE3	; 227
     88c:	fe 4f       	sbci	r31, 0xFE	; 254
     88e:	c4 91       	lpm	r28, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     890:	cc 23       	and	r28, r28
     892:	79 f0       	breq	.+30     	; 0x8b2 <read(int)+0x40>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     894:	81 11       	cpse	r24, r1
     896:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <turnOffPWM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     89a:	ec 2f       	mov	r30, r28
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	ee 0f       	add	r30, r30
     8a0:	ff 1f       	adc	r31, r31
     8a2:	ed 5e       	subi	r30, 0xED	; 237
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	a5 91       	lpm	r26, Z+
     8a8:	b4 91       	lpm	r27, Z
     8aa:	ec 91       	ld	r30, X
     8ac:	ed 23       	and	r30, r29
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <read(int)+0x42>
read():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:849
  if(digitalRead(PIN)) {
    return true;
  } else {
    return false;
     8b2:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:851
  }
}
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <setIN(int)>:
setIN():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:834
}

// Setup Inputs

void setIN(int PIN) {
  pinMode(PIN, INPUT);
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	0c 94 28 01 	jmp	0x250	; 0x250 <pinMode>

000008c0 <ampo()>:
ampo():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:545
    }
  }
outvoltage = oppv;
}

void ampo() {
     8c0:	cf 92       	push	r12
     8c2:	df 92       	push	r13
     8c4:	ef 92       	push	r14
     8c6:	ff 92       	push	r15
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	ca e0       	ldi	r28, 0x0A	; 10
     8ce:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:548
float ampov;
for(int i=0; i<10; i++) {
  if((0.343 * analogRead(current)) > ampov){
     8d0:	83 e1       	ldi	r24, 0x13	; 19
     8d2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
     8d6:	bc 01       	movw	r22, r24
     8d8:	99 0f       	add	r25, r25
     8da:	88 0b       	sbc	r24, r24
     8dc:	99 0b       	sbc	r25, r25
     8de:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__floatsisf>
     8e2:	22 eb       	ldi	r18, 0xB2	; 178
     8e4:	3d e9       	ldi	r19, 0x9D	; 157
     8e6:	4f ea       	ldi	r20, 0xAF	; 175
     8e8:	5e e3       	ldi	r21, 0x3E	; 62
     8ea:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     8ee:	a7 01       	movw	r20, r14
     8f0:	96 01       	movw	r18, r12
     8f2:	0e 94 14 10 	call	0x2028	; 0x2028 <__gesf2>
     8f6:	18 16       	cp	r1, r24
     8f8:	8c f4       	brge	.+34     	; 0x91c <__stack+0x1d>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:549
    ampov = 0.343 * analogRead(current);
     8fa:	83 e1       	ldi	r24, 0x13	; 19
     8fc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
     900:	bc 01       	movw	r22, r24
     902:	99 0f       	add	r25, r25
     904:	88 0b       	sbc	r24, r24
     906:	99 0b       	sbc	r25, r25
     908:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__floatsisf>
     90c:	22 eb       	ldi	r18, 0xB2	; 178
     90e:	3d e9       	ldi	r19, 0x9D	; 157
     910:	4f ea       	ldi	r20, 0xAF	; 175
     912:	5e e3       	ldi	r21, 0x3E	; 62
     914:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     918:	6b 01       	movw	r12, r22
     91a:	7c 01       	movw	r14, r24
     91c:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:547
outvoltage = oppv;
}

void ampo() {
float ampov;
for(int i=0; i<10; i++) {
     91e:	c1 f6       	brne	.-80     	; 0x8d0 <ampo()+0x10>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:552
  if((0.343 * analogRead(current)) > ampov){
    ampov = 0.343 * analogRead(current);
    }
  }
currentload = ampov;
     920:	c7 01       	movw	r24, r14
     922:	b6 01       	movw	r22, r12
     924:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__fixsfsi>
     928:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <currentload+0x1>
     92c:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <currentload>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:553
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	08 95       	ret

0000093e <OVo()>:
OVo():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:535
involtage = inpv;
}



void OVo() {
     93e:	cf 92       	push	r12
     940:	df 92       	push	r13
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	ca e0       	ldi	r28, 0x0A	; 10
     94c:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:538
float oppv;
for(int i=0; i<10; i++) {
  if((0.343 * analogRead(outVolt)) > oppv){
     94e:	82 e1       	ldi	r24, 0x12	; 18
     950:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
     954:	bc 01       	movw	r22, r24
     956:	99 0f       	add	r25, r25
     958:	88 0b       	sbc	r24, r24
     95a:	99 0b       	sbc	r25, r25
     95c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__floatsisf>
     960:	22 eb       	ldi	r18, 0xB2	; 178
     962:	3d e9       	ldi	r19, 0x9D	; 157
     964:	4f ea       	ldi	r20, 0xAF	; 175
     966:	5e e3       	ldi	r21, 0x3E	; 62
     968:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     96c:	a7 01       	movw	r20, r14
     96e:	96 01       	movw	r18, r12
     970:	0e 94 14 10 	call	0x2028	; 0x2028 <__gesf2>
     974:	18 16       	cp	r1, r24
     976:	8c f4       	brge	.+34     	; 0x99a <OVo()+0x5c>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:539
    oppv = 0.343 * analogRead(outVolt);
     978:	82 e1       	ldi	r24, 0x12	; 18
     97a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
     97e:	bc 01       	movw	r22, r24
     980:	99 0f       	add	r25, r25
     982:	88 0b       	sbc	r24, r24
     984:	99 0b       	sbc	r25, r25
     986:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__floatsisf>
     98a:	22 eb       	ldi	r18, 0xB2	; 178
     98c:	3d e9       	ldi	r19, 0x9D	; 157
     98e:	4f ea       	ldi	r20, 0xAF	; 175
     990:	5e e3       	ldi	r21, 0x3E	; 62
     992:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     996:	6b 01       	movw	r12, r22
     998:	7c 01       	movw	r14, r24
     99a:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:537



void OVo() {
float oppv;
for(int i=0; i<10; i++) {
     99c:	c1 f6       	brne	.-80     	; 0x94e <OVo()+0x10>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:542
  if((0.343 * analogRead(outVolt)) > oppv){
    oppv = 0.343 * analogRead(outVolt);
    }
  }
outvoltage = oppv;
     99e:	c7 01       	movw	r24, r14
     9a0:	b6 01       	movw	r22, r12
     9a2:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__fixsfsi>
     9a6:	70 93 f7 01 	sts	0x01F7, r23	; 0x8001f7 <outvoltage+0x1>
     9aa:	60 93 f6 01 	sts	0x01F6, r22	; 0x8001f6 <outvoltage>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:543
}
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	cf 90       	pop	r12
     9ba:	08 95       	ret

000009bc <IVo()>:
IVo():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:523
  IVo();
  OVo();
  ampo();
}

void IVo() {
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	ca e0       	ldi	r28, 0x0A	; 10
     9ca:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:526
float inpv;
for(int i=0; i<10; i++) {
  if((0.343 * analogRead(inVolt)) > inpv){
     9cc:	81 e1       	ldi	r24, 0x11	; 17
     9ce:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
     9d2:	bc 01       	movw	r22, r24
     9d4:	99 0f       	add	r25, r25
     9d6:	88 0b       	sbc	r24, r24
     9d8:	99 0b       	sbc	r25, r25
     9da:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__floatsisf>
     9de:	22 eb       	ldi	r18, 0xB2	; 178
     9e0:	3d e9       	ldi	r19, 0x9D	; 157
     9e2:	4f ea       	ldi	r20, 0xAF	; 175
     9e4:	5e e3       	ldi	r21, 0x3E	; 62
     9e6:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     9ea:	a7 01       	movw	r20, r14
     9ec:	96 01       	movw	r18, r12
     9ee:	0e 94 14 10 	call	0x2028	; 0x2028 <__gesf2>
     9f2:	18 16       	cp	r1, r24
     9f4:	8c f4       	brge	.+34     	; 0xa18 <IVo()+0x5c>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:527
    inpv = 0.343 * analogRead(inVolt);
     9f6:	81 e1       	ldi	r24, 0x11	; 17
     9f8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
     9fc:	bc 01       	movw	r22, r24
     9fe:	99 0f       	add	r25, r25
     a00:	88 0b       	sbc	r24, r24
     a02:	99 0b       	sbc	r25, r25
     a04:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__floatsisf>
     a08:	22 eb       	ldi	r18, 0xB2	; 178
     a0a:	3d e9       	ldi	r19, 0x9D	; 157
     a0c:	4f ea       	ldi	r20, 0xAF	; 175
     a0e:	5e e3       	ldi	r21, 0x3E	; 62
     a10:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     a14:	6b 01       	movw	r12, r22
     a16:	7c 01       	movw	r14, r24
     a18:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:525
  ampo();
}

void IVo() {
float inpv;
for(int i=0; i<10; i++) {
     a1a:	c1 f6       	brne	.-80     	; 0x9cc <IVo()+0x10>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:530
  if((0.343 * analogRead(inVolt)) > inpv){
    inpv = 0.343 * analogRead(inVolt);
    }
  }
involtage = inpv;
     a1c:	c7 01       	movw	r24, r14
     a1e:	b6 01       	movw	r22, r12
     a20:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__fixsfsi>
     a24:	70 93 73 01 	sts	0x0173, r23	; 0x800173 <involtage+0x1>
     a28:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <involtage>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:531
}
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	cf 90       	pop	r12
     a38:	08 95       	ret

00000a3a <diffcheck()>:
diffcheck():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:295
}


//Check Voltage Difference from Set Voltage
bool diffcheck() { //(returns true if difference is more than set difference and runs motor)
  int dif = SETV - outvoltage;
     a3a:	20 91 f4 01 	lds	r18, 0x01F4	; 0x8001f4 <SETV>
     a3e:	30 91 f5 01 	lds	r19, 0x01F5	; 0x8001f5 <SETV+0x1>
     a42:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <outvoltage>
     a46:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <outvoltage+0x1>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:299
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     a4a:	28 1b       	sub	r18, r24
     a4c:	39 0b       	sbc	r19, r25
     a4e:	37 ff       	sbrs	r19, 7
     a50:	03 c0       	rjmp	.+6      	; 0xa58 <diffcheck()+0x1e>
     a52:	31 95       	neg	r19
     a54:	21 95       	neg	r18
     a56:	31 09       	sbc	r19, r1
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	40 91 7c 01 	lds	r20, 0x017C	; 0x80017c <DIFF>
     a5e:	50 91 7d 01 	lds	r21, 0x017D	; 0x80017d <DIFF+0x1>
     a62:	42 17       	cp	r20, r18
     a64:	53 07       	cpc	r21, r19
     a66:	0c f0       	brlt	.+2      	; 0xa6a <diffcheck()+0x30>
     a68:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:304
    return true;
  } else {
    return false;
  }
}
     a6a:	08 95       	ret

00000a6c <currentok()>:
currentok():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:285
  }
}

//Check If Current Load is lower than max current Set by Parameters
bool currentok() {
  if(currentload < OVL){
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	40 91 70 01 	lds	r20, 0x0170	; 0x800170 <currentload>
     a72:	50 91 71 01 	lds	r21, 0x0171	; 0x800171 <currentload+0x1>
     a76:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <OVL>
     a7a:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <OVL+0x1>
     a7e:	42 17       	cp	r20, r18
     a80:	53 07       	cpc	r21, r19
     a82:	0c f0       	brlt	.+2      	; 0xa86 <currentok()+0x1a>
     a84:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:290
    return true;
  } else {
    return false;
  }
}
     a86:	08 95       	ret

00000a88 <outputVok()>:
outputVok():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:276
    return false;
  }
}
//Check If output voltage is within Low & High voltage Set by Parameters
bool outputVok() {
  if(outvoltage > OLV && outvoltage < OHV){
     a88:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <outvoltage>
     a8c:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <outvoltage+0x1>
     a90:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <OLV>
     a94:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <OLV+0x1>
     a98:	82 17       	cp	r24, r18
     a9a:	93 07       	cpc	r25, r19
     a9c:	44 f4       	brge	.+16     	; 0xaae <outputVok()+0x26>
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	40 91 86 01 	lds	r20, 0x0186	; 0x800186 <OHV>
     aa4:	50 91 87 01 	lds	r21, 0x0187	; 0x800187 <OHV+0x1>
     aa8:	24 17       	cp	r18, r20
     aaa:	35 07       	cpc	r19, r21
     aac:	0c f0       	brlt	.+2      	; 0xab0 <outputVok()+0x28>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:279
    return true;
  } else {
    return false;
     aae:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:281
  }
}
     ab0:	08 95       	ret

00000ab2 <inputVok()>:
inputVok():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:268
}


//Check If input voltage is within Low & High voltage Set by Parameters
bool inputVok() {
  if(involtage > ILV && involtage < IHV){
     ab2:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <involtage>
     ab6:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <involtage+0x1>
     aba:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <ILV>
     abe:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <ILV+0x1>
     ac2:	82 17       	cp	r24, r18
     ac4:	93 07       	cpc	r25, r19
     ac6:	44 f4       	brge	.+16     	; 0xad8 <inputVok()+0x26>
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	40 91 8a 01 	lds	r20, 0x018A	; 0x80018a <IHV>
     ace:	50 91 8b 01 	lds	r21, 0x018B	; 0x80018b <IHV+0x1>
     ad2:	24 17       	cp	r18, r20
     ad4:	35 07       	cpc	r19, r21
     ad6:	0c f0       	brlt	.+2      	; 0xada <inputVok()+0x28>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:271
    return true;
  } else {
    return false;
     ad8:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:273
  }
}
     ada:	08 95       	ret

00000adc <checksystem()>:
checksystem():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:342
}

//Check if Input,Output Voltage and current is within the set range

bool checksystem() {
  if(inputVok()) {
     adc:	0e 94 59 05 	call	0xab2	; 0xab2 <inputVok()>
     ae0:	88 23       	and	r24, r24
     ae2:	29 f0       	breq	.+10     	; 0xaee <checksystem()+0x12>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:343
    if(outputVok()) {
     ae4:	0e 94 44 05 	call	0xa88	; 0xa88 <outputVok()>
     ae8:	81 11       	cpse	r24, r1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:344
      if(currentok()){
     aea:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <currentok()>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:349
            return true;
      } else { return false; }
    } else { return false; }
  } else { return false; }
}
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	08 95       	ret

00000af2 <pulseIn.constprop.13>:
pulseIn():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:33
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	48 2f       	mov	r20, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:38
{
  // cache the port and bit of the pin in order to speed up the
  // pulse width measuring loop and achieve finer resolution.  calling
  // digitalRead() instead yields much coarser resolution.
  uint8_t bit = digitalPinToBitMask(pin);
     af8:	e4 e4       	ldi	r30, 0x44	; 68
     afa:	f1 e0       	ldi	r31, 0x01	; 1
     afc:	64 91       	lpm	r22, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:39
  uint8_t port = digitalPinToPort(pin);
     afe:	ed e2       	ldi	r30, 0x2D	; 45
     b00:	f1 e0       	ldi	r31, 0x01	; 1
     b02:	e4 91       	lpm	r30, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:40
  uint8_t stateMask = (state ? bit : 0);
     b04:	81 11       	cpse	r24, r1
     b06:	46 2f       	mov	r20, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:46

  // convert the timeout from microseconds to a number of times through
  // the initial loop; it takes approximately 16 clock cycles per iteration
  unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

  unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	ee 0f       	add	r30, r30
     b0c:	ff 1f       	adc	r31, r31
     b0e:	ed 5e       	subi	r30, 0xED	; 237
     b10:	fe 4f       	sbci	r31, 0xFE	; 254
     b12:	85 91       	lpm	r24, Z+
     b14:	94 91       	lpm	r25, Z
     b16:	0e e1       	ldi	r16, 0x1E	; 30
     b18:	10 e0       	ldi	r17, 0x00	; 0
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	0e 94 98 08 	call	0x1130	; 0x1130 <countPulseASM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:49

  // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
  if (width)
     b22:	61 15       	cp	r22, r1
     b24:	71 05       	cpc	r23, r1
     b26:	81 05       	cpc	r24, r1
     b28:	91 05       	cpc	r25, r1
     b2a:	91 f0       	breq	.+36     	; 0xb50 <pulseIn.constprop.13+0x5e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:50
    return clockCyclesToMicroseconds(width * 16 + 16);
     b2c:	6f 5f       	subi	r22, 0xFF	; 255
     b2e:	7f 4f       	sbci	r23, 0xFF	; 255
     b30:	8f 4f       	sbci	r24, 0xFF	; 255
     b32:	9f 4f       	sbci	r25, 0xFF	; 255
     b34:	24 e0       	ldi	r18, 0x04	; 4
     b36:	66 0f       	add	r22, r22
     b38:	77 1f       	adc	r23, r23
     b3a:	88 1f       	adc	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	2a 95       	dec	r18
     b40:	d1 f7       	brne	.-12     	; 0xb36 <pulseIn.constprop.13+0x44>
     b42:	33 e0       	ldi	r19, 0x03	; 3
     b44:	96 95       	lsr	r25
     b46:	87 95       	ror	r24
     b48:	77 95       	ror	r23
     b4a:	67 95       	ror	r22
     b4c:	3a 95       	dec	r19
     b4e:	d1 f7       	brne	.-12     	; 0xb44 <pulseIn.constprop.13+0x52>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:53
  else
    return 0;
}
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	08 95       	ret

00000b56 <displayVar(int, int) [clone .constprop.11]>:
displayVar():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:801

void done() {display("donE", 0);}

//Display INT Variable

void displayVar(int var, int deci) {
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <displayVar(int, int) [clone .constprop.11]+0xa>
     b60:	00 d0       	rcall	.+0      	; 0xb62 <displayVar(int, int) [clone .constprop.11]+0xc>
     b62:	1f 92       	push	r1
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:803
  char buffer[5];
  sprintf(buffer, "%4d", var);
     b68:	9f 93       	push	r25
     b6a:	8f 93       	push	r24
     b6c:	86 e0       	ldi	r24, 0x06	; 6
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	9f 93       	push	r25
     b72:	8f 93       	push	r24
     b74:	8e 01       	movw	r16, r28
     b76:	0f 5f       	subi	r16, 0xFF	; 255
     b78:	1f 4f       	sbci	r17, 0xFF	; 255
     b7a:	1f 93       	push	r17
     b7c:	0f 93       	push	r16
     b7e:	0e 94 20 12 	call	0x2440	; 0x2440 <sprintf>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:804
  display1.DisplayString(buffer, deci);
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	c8 01       	movw	r24, r16
     b86:	0e 94 76 01 	call	0x2ec	; 0x2ec <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]>
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:805
}
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <menuIHV() [clone .part.8]>:
_Z7menuIHVv.part.8():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:566

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
     baa:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <enc>
     bae:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <enc+0x1>
     bb2:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <displayVar(int, int) [clone .constprop.11]>

00000bb6 <String::reserve(unsigned int)>:
reserve():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:146
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	ec 01       	movw	r28, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
     bc0:	88 81       	ld	r24, Y
     bc2:	99 81       	ldd	r25, Y+1	; 0x01
     bc4:	00 97       	sbiw	r24, 0x00	; 0
     bc6:	59 f0       	breq	.+22     	; 0xbde <String::reserve(unsigned int)+0x28>
     bc8:	2a 81       	ldd	r18, Y+2	; 0x02
     bca:	3b 81       	ldd	r19, Y+3	; 0x03
     bcc:	26 17       	cp	r18, r22
     bce:	37 07       	cpc	r19, r23
     bd0:	30 f0       	brcs	.+12     	; 0xbde <String::reserve(unsigned int)+0x28>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	08 95       	ret
     bde:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     be0:	6f 5f       	subi	r22, 0xFF	; 255
     be2:	7f 4f       	sbci	r23, 0xFF	; 255
     be4:	0e 94 44 11 	call	0x2288	; 0x2288 <realloc>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	59 f0       	breq	.+22     	; 0xc02 <String::reserve(unsigned int)+0x4c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
     bec:	99 83       	std	Y+1, r25	; 0x01
     bee:	88 83       	st	Y, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
     bf0:	1b 83       	std	Y+3, r17	; 0x03
     bf2:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     bf4:	2c 81       	ldd	r18, Y+4	; 0x04
     bf6:	3d 81       	ldd	r19, Y+5	; 0x05
     bf8:	23 2b       	or	r18, r19
     bfa:	59 f7       	brne	.-42     	; 0xbd2 <String::reserve(unsigned int)+0x1c>
     bfc:	fc 01       	movw	r30, r24
     bfe:	10 82       	st	Z, r1
     c00:	e8 cf       	rjmp	.-48     	; 0xbd2 <String::reserve(unsigned int)+0x1c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:152
    return 1;
  }
  return 0;
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	e7 cf       	rjmp	.-50     	; 0xbd4 <String::reserve(unsigned int)+0x1e>

00000c06 <String::invalidate()>:
invalidate():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	ec 01       	movw	r28, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
     c0c:	88 81       	ld	r24, Y
     c0e:	99 81       	ldd	r25, Y+1	; 0x01
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	11 f0       	breq	.+4      	; 0xc18 <String::invalidate()+0x12>
     c14:	0e 94 bb 10 	call	0x2176	; 0x2176 <free>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
     c18:	19 82       	std	Y+1, r1	; 0x01
     c1a:	18 82       	st	Y, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
     c1c:	1d 82       	std	Y+5, r1	; 0x05
     c1e:	1c 82       	std	Y+4, r1	; 0x04
     c20:	1b 82       	std	Y+3, r1	; 0x03
     c22:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:143
}
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	08 95       	ret

00000c2a <String::copy(char const*, unsigned int)>:
copy():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	ec 01       	movw	r28, r24
     c38:	7b 01       	movw	r14, r22
     c3a:	8a 01       	movw	r16, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
  if (!reserve(length)) {
     c3c:	ba 01       	movw	r22, r20
     c3e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <String::reserve(unsigned int)>
     c42:	81 11       	cpse	r24, r1
     c44:	0b c0       	rjmp	.+22     	; 0xc5c <String::copy(char const*, unsigned int)+0x32>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
     c46:	ce 01       	movw	r24, r28
     c48:	0e 94 03 06 	call	0xc06	; 0xc06 <String::invalidate()>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:179
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
     c4c:	ce 01       	movw	r24, r28
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     c5c:	1d 83       	std	Y+5, r17	; 0x05
     c5e:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
     c60:	b7 01       	movw	r22, r14
     c62:	88 81       	ld	r24, Y
     c64:	99 81       	ldd	r25, Y+1	; 0x01
     c66:	0e 94 0a 12 	call	0x2414	; 0x2414 <strcpy>
     c6a:	f0 cf       	rjmp	.-32     	; 0xc4c <String::copy(char const*, unsigned int)+0x22>

00000c6c <String::String(char const*)>:
_ZN6String4initEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     c6c:	fc 01       	movw	r30, r24
     c6e:	11 82       	std	Z+1, r1	; 0x01
     c70:	10 82       	st	Z, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
     c72:	13 82       	std	Z+3, r1	; 0x03
     c74:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
     c76:	15 82       	std	Z+5, r1	; 0x05
     c78:	14 82       	std	Z+4, r1	; 0x04
__base_ctor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
     c7a:	fb 01       	movw	r30, r22
     c7c:	01 90       	ld	r0, Z+
     c7e:	00 20       	and	r0, r0
     c80:	e9 f7       	brne	.-6      	; 0xc7c <String::String(char const*)+0x10>
     c82:	31 97       	sbiw	r30, 0x01	; 1
     c84:	af 01       	movw	r20, r30
     c86:	46 1b       	sub	r20, r22
     c88:	57 0b       	sbc	r21, r23
     c8a:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <String::copy(char const*, unsigned int)>

00000c8e <String::~String()>:
__base_dtor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
     c8e:	fc 01       	movw	r30, r24
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <free>

00000c98 <display(String, int) [clone .constprop.6]>:
display():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:855
  }
}

//Display String Variable

void display(String str, int deci) {
     c98:	af 92       	push	r10
     c9a:	bf 92       	push	r11
     c9c:	cf 92       	push	r12
     c9e:	df 92       	push	r13
     ca0:	ef 92       	push	r14
     ca2:	ff 92       	push	r15
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	28 97       	sbiw	r28, 0x08	; 8
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	8c 01       	movw	r16, r24
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:866

  int str_len = str.length() + 1;
  char data[str_len];
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
}
     cbe:	cd b6       	in	r12, 0x3d	; 61
     cc0:	de b6       	in	r13, 0x3e	; 62
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:857

//Display String Variable

void display(String str, int deci) {
  int strl = str.length();
  if(strl < 4) {
     cc2:	fc 01       	movw	r30, r24
     cc4:	84 81       	ldd	r24, Z+4	; 0x04
     cc6:	95 81       	ldd	r25, Z+5	; 0x05
     cc8:	04 97       	sbiw	r24, 0x04	; 4
     cca:	0c f0       	brlt	.+2      	; 0xcce <display(String, int) [clone .constprop.6]+0x36>
     ccc:	4a c0       	rjmp	.+148    	; 0xd62 <display(String, int) [clone .constprop.6]+0xca>
_ZN6String4initEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     cce:	1a 82       	std	Y+2, r1	; 0x02
     cd0:	19 82       	std	Y+1, r1	; 0x01
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
     cd2:	1c 82       	std	Y+4, r1	; 0x04
     cd4:	1b 82       	std	Y+3, r1	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
     cd6:	1e 82       	std	Y+6, r1	; 0x06
     cd8:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:63

String::String(char c)
{
  init();
  char buf[2];
  buf[0] = c;
     cda:	80 e1       	ldi	r24, 0x10	; 16
     cdc:	8f 83       	std	Y+7, r24	; 0x07
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:64
  buf[1] = 0;
     cde:	18 86       	std	Y+8, r1	; 0x08
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
     ce0:	be 01       	movw	r22, r28
     ce2:	69 5f       	subi	r22, 0xF9	; 249
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	fb 01       	movw	r30, r22
     ce8:	01 90       	ld	r0, Z+
     cea:	00 20       	and	r0, r0
     cec:	e9 f7       	brne	.-6      	; 0xce8 <display(String, int) [clone .constprop.6]+0x50>
     cee:	31 97       	sbiw	r30, 0x01	; 1
     cf0:	af 01       	movw	r20, r30
     cf2:	46 1b       	sub	r20, r22
     cf4:	57 0b       	sbc	r21, r23
     cf6:	ce 01       	movw	r24, r28
     cf8:	01 96       	adiw	r24, 0x01	; 1
     cfa:	0e 94 15 06 	call	0xc2a	; 0xc2a <String::copy(char const*, unsigned int)>
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     cfe:	f8 01       	movw	r30, r16
     d00:	a0 80       	ld	r10, Z
     d02:	b1 80       	ldd	r11, Z+1	; 0x01
concat():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
     d04:	a1 14       	cp	r10, r1
     d06:	b1 04       	cpc	r11, r1
     d08:	09 f4       	brne	.+2      	; 0xd0c <display(String, int) [clone .constprop.6]+0x74>
     d0a:	5d c0       	rjmp	.+186    	; 0xdc6 <display(String, int) [clone .constprop.6]+0x12e>
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     d0c:	e4 80       	ldd	r14, Z+4	; 0x04
     d0e:	f5 80       	ldd	r15, Z+5	; 0x05
concat():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
     d10:	e1 14       	cp	r14, r1
     d12:	f1 04       	cpc	r15, r1
     d14:	b9 f0       	breq	.+46     	; 0xd44 <display(String, int) [clone .constprop.6]+0xac>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
     d16:	8d 81       	ldd	r24, Y+5	; 0x05
     d18:	9e 81       	ldd	r25, Y+6	; 0x06
     d1a:	e8 0e       	add	r14, r24
     d1c:	f9 1e       	adc	r15, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
     d1e:	b7 01       	movw	r22, r14
     d20:	ce 01       	movw	r24, r28
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	0e 94 db 05 	call	0xbb6	; 0xbb6 <String::reserve(unsigned int)>
     d28:	88 23       	and	r24, r24
     d2a:	09 f4       	brne	.+2      	; 0xd2e <display(String, int) [clone .constprop.6]+0x96>
     d2c:	4c c0       	rjmp	.+152    	; 0xdc6 <display(String, int) [clone .constprop.6]+0x12e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:269
  strcpy(buffer + len, cstr);
     d2e:	29 81       	ldd	r18, Y+1	; 0x01
     d30:	3a 81       	ldd	r19, Y+2	; 0x02
     d32:	8d 81       	ldd	r24, Y+5	; 0x05
     d34:	9e 81       	ldd	r25, Y+6	; 0x06
     d36:	b5 01       	movw	r22, r10
     d38:	82 0f       	add	r24, r18
     d3a:	93 1f       	adc	r25, r19
     d3c:	0e 94 0a 12 	call	0x2414	; 0x2414 <strcpy>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:270
  len = newlen;
     d40:	fe 82       	std	Y+6, r15	; 0x06
     d42:	ed 82       	std	Y+5, r14	; 0x05
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:218

String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
     d44:	69 81       	ldd	r22, Y+1	; 0x01
     d46:	7a 81       	ldd	r23, Y+2	; 0x02
     d48:	61 15       	cp	r22, r1
     d4a:	71 05       	cpc	r23, r1
     d4c:	09 f4       	brne	.+2      	; 0xd50 <display(String, int) [clone .constprop.6]+0xb8>
     d4e:	40 c0       	rjmp	.+128    	; 0xdd0 <display(String, int) [clone .constprop.6]+0x138>
     d50:	4d 81       	ldd	r20, Y+5	; 0x05
     d52:	5e 81       	ldd	r21, Y+6	; 0x06
     d54:	c8 01       	movw	r24, r16
     d56:	0e 94 15 06 	call	0xc2a	; 0xc2a <String::copy(char const*, unsigned int)>
_ZN15StringSumHelperD2Ev():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     d5a:	ce 01       	movw	r24, r28
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	0e 94 47 06 	call	0xc8e	; 0xc8e <String::~String()>
     d62:	f8 01       	movw	r30, r16
     d64:	e4 80       	ldd	r14, Z+4	; 0x04
     d66:	f5 80       	ldd	r15, Z+5	; 0x05
display():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:862
    //char16 = no display on screen
    str = char(16) + str;
  }

  int str_len = str.length() + 1;
     d68:	c7 01       	movw	r24, r14
     d6a:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:863
  char data[str_len];
     d6c:	2d b7       	in	r18, 0x3d	; 61
     d6e:	3e b7       	in	r19, 0x3e	; 62
     d70:	28 1b       	sub	r18, r24
     d72:	39 0b       	sbc	r19, r25
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	3e bf       	out	0x3e, r19	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	2d bf       	out	0x3d, r18	; 61
     d7e:	ed b7       	in	r30, 0x3d	; 61
     d80:	fe b7       	in	r31, 0x3e	; 62
     d82:	31 96       	adiw	r30, 0x01	; 1
     d84:	5f 01       	movw	r10, r30
getBytes():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:539
  return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
  if (!bufsize || !buf) return;
     d86:	89 2b       	or	r24, r25
     d88:	21 f0       	breq	.+8      	; 0xd92 <display(String, int) [clone .constprop.6]+0xfa>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:540
  if (index >= len) {
     d8a:	e1 14       	cp	r14, r1
     d8c:	f1 04       	cpc	r15, r1
     d8e:	21 f5       	brne	.+72     	; 0xdd8 <display(String, int) [clone .constprop.6]+0x140>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:547
    return;
  }
  unsigned int n = bufsize - 1;
  if (n > len - index) n = len - index;
  strncpy((char *)buf, buffer + index, n);
  buf[n] = 0;
     d90:	10 82       	st	Z, r1
display():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:865
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	c5 01       	movw	r24, r10
     d96:	0e 94 76 01 	call	0x2ec	; 0x2ec <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:866
}
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de be       	out	0x3e, r13	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd be       	out	0x3d, r12	; 61
     da4:	28 96       	adiw	r28, 0x08	; 8
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	ff 90       	pop	r15
     dba:	ef 90       	pop	r14
     dbc:	df 90       	pop	r13
     dbe:	cf 90       	pop	r12
     dc0:	bf 90       	pop	r11
     dc2:	af 90       	pop	r10
     dc4:	08 95       	ret
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     dc6:	ce 01       	movw	r24, r28
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	0e 94 03 06 	call	0xc06	; 0xc06 <String::invalidate()>
     dce:	ba cf       	rjmp	.-140    	; 0xd44 <display(String, int) [clone .constprop.6]+0xac>
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:219
String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
  else invalidate();
     dd0:	c8 01       	movw	r24, r16
     dd2:	0e 94 03 06 	call	0xc06	; 0xc06 <String::invalidate()>
     dd6:	c1 cf       	rjmp	.-126    	; 0xd5a <display(String, int) [clone .constprop.6]+0xc2>
getBytes():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:546
    buf[0] = 0;
    return;
  }
  unsigned int n = bufsize - 1;
  if (n > len - index) n = len - index;
  strncpy((char *)buf, buffer + index, n);
     dd8:	f8 01       	movw	r30, r16
     dda:	60 81       	ld	r22, Z
     ddc:	71 81       	ldd	r23, Z+1	; 0x01
     dde:	a7 01       	movw	r20, r14
     de0:	c5 01       	movw	r24, r10
     de2:	0e 94 11 12 	call	0x2422	; 0x2422 <strncpy>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:547
  buf[n] = 0;
     de6:	f5 01       	movw	r30, r10
     de8:	ee 0d       	add	r30, r14
     dea:	ff 1d       	adc	r31, r15
     dec:	d1 cf       	rjmp	.-94     	; 0xd90 <display(String, int) [clone .constprop.6]+0xf8>

00000dee <updateScreenData(bool) [clone .part.7]>:
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:370
  }
}

//Update Run Mode Screen

void updateScreenData(bool status) {
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	00 d0       	rcall	.+0      	; 0xdfa <updateScreenData(bool) [clone .part.7]+0xc>
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <updateScreenData(bool) [clone .part.7]+0xe>
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <updateScreenData(bool) [clone .part.7]+0x10>
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	f8 2e       	mov	r15, r24
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:373
  //uncomment !mode and comment !read(setupPin) if setupPin is not being used
  if(!mode/*!read(setupPin)*/){
    if(!resetrefresh){
     e04:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <resetrefresh>
     e08:	81 11       	cpse	r24, r1
     e0a:	07 c0       	rjmp	.+14     	; 0xe1a <updateScreenData(bool) [clone .part.7]+0x2c>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:374
      refresh.reset();
     e0c:	81 e9       	ldi	r24, 0x91	; 145
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:375
      resetrefresh = true;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <resetrefresh>
     e1a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <alarmOnce>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:377
    }
    if(!status && !alarmOnce){
     e1e:	f1 10       	cpse	r15, r1
     e20:	03 c1       	rjmp	.+518    	; 0x1028 <updateScreenData(bool) [clone .part.7]+0x23a>
     e22:	81 11       	cpse	r24, r1
     e24:	03 c0       	rjmp	.+6      	; 0xe2c <updateScreenData(bool) [clone .part.7]+0x3e>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:378
      alarmOnce = true;
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <alarmOnce>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:385
    }
    if(status && alarmOnce){
      alarmOnce = false;
      menu == 0;
    }
    if(refresh.triggered()){
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	81 e9       	ldi	r24, 0x91	; 145
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	0e 94 ee 03 	call	0x7dc	; 0x7dc <BlockNot::triggered(bool)>
     e36:	88 23       	and	r24, r24
     e38:	d9 f0       	breq	.+54     	; 0xe70 <updateScreenData(bool) [clone .part.7]+0x82>
     e3a:	00 91 74 01 	lds	r16, 0x0174	; 0x800174 <menu>
     e3e:	10 91 75 01 	lds	r17, 0x0175	; 0x800175 <menu+0x1>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:387

      OVo();
     e42:	0e 94 9f 04 	call	0x93e	; 0x93e <OVo()>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:388
      IVo();
     e46:	0e 94 de 04 	call	0x9bc	; 0x9bc <IVo()>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:389
      ampo();
     e4a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ampo()>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:392


      switch (menu)
     e4e:	02 30       	cpi	r16, 0x02	; 2
     e50:	11 05       	cpc	r17, r1
     e52:	09 f4       	brne	.+2      	; 0xe56 <updateScreenData(bool) [clone .part.7]+0x68>
     e54:	5b c0       	rjmp	.+182    	; 0xf0c <updateScreenData(bool) [clone .part.7]+0x11e>
     e56:	24 f5       	brge	.+72     	; 0xea0 <updateScreenData(bool) [clone .part.7]+0xb2>
     e58:	01 2b       	or	r16, r17
     e5a:	09 f4       	brne	.+2      	; 0xe5e <updateScreenData(bool) [clone .part.7]+0x70>
     e5c:	54 c0       	rjmp	.+168    	; 0xf06 <updateScreenData(bool) [clone .part.7]+0x118>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:409
          ampo();
          break;
        default:
          break;
      }
      menu++;
     e5e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <menu>
     e62:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <menu+0x1>
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <menu+0x1>
     e6c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <menu>
     e70:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <menu>
     e74:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <menu+0x1>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:414
    }

    //Show Error if Available
    
    if(!status && menu == -1){
     e78:	ff 20       	and	r15, r15
     e7a:	09 f4       	brne	.+2      	; 0xe7e <updateScreenData(bool) [clone .part.7]+0x90>
     e7c:	4d c0       	rjmp	.+154    	; 0xf18 <updateScreenData(bool) [clone .part.7]+0x12a>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:430
          display("ErOL", 0);
        }
      }
    }

    switch (menu)
     e7e:	e9 30       	cpi	r30, 0x09	; 9
     e80:	f1 05       	cpc	r31, r1
     e82:	08 f0       	brcs	.+2      	; 0xe86 <updateScreenData(bool) [clone .part.7]+0x98>
     e84:	8e c0       	rjmp	.+284    	; 0xfa2 <updateScreenData(bool) [clone .part.7]+0x1b4>
     e86:	e9 5b       	subi	r30, 0xB9	; 185
     e88:	f8 4f       	sbci	r31, 0xF8	; 248
     e8a:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__tablejump2__>
     e8e:	dd 07       	cpc	r29, r29
     e90:	e0 07       	cpc	r30, r16
     e92:	e7 07       	cpc	r30, r23
     e94:	ea 07       	cpc	r30, r26
     e96:	ef 07       	cpc	r30, r31
     e98:	f2 07       	cpc	r31, r18
     e9a:	f7 07       	cpc	r31, r23
     e9c:	fa 07       	cpc	r31, r26
     e9e:	06 08       	sbc	r0, r6
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:392
      OVo();
      IVo();
      ampo();


      switch (menu)
     ea0:	04 30       	cpi	r16, 0x04	; 4
     ea2:	11 05       	cpc	r17, r1
     ea4:	b1 f1       	breq	.+108    	; 0xf12 <updateScreenData(bool) [clone .part.7]+0x124>
     ea6:	06 30       	cpi	r16, 0x06	; 6
     ea8:	11 05       	cpc	r17, r1
     eaa:	c9 f6       	brne	.-78     	; 0xe5e <updateScreenData(bool) [clone .part.7]+0x70>
checkhz():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:259
//Checks the wavelenght of the Sine wave to calculate the frequency
//ontime is the time that sinewave stays Positive or above the 0v Threshold
//offtime is the time that sinewave stays negative or below the 0v Threshold
void checkhz() {
  //calculates the pulse width in milliseconds //timesout after 60ms to avoid blocking other code if no input is detected!
  ontime = pulseIn(hz, HIGH, 60);
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	0e 94 79 05 	call	0xaf2	; 0xaf2 <pulseIn.constprop.13>
     eb2:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <__data_end>
     eb6:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <__data_end+0x1>
     eba:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end+0x2>
     ebe:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x3>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:260
  offtime = pulseIn(hz, LOW, 60);
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	0e 94 79 05 	call	0xaf2	; 0xaf2 <pulseIn.constprop.13>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:262
  //Calculates the Frequency by dividing the ontime and offtime with 1 sec time (or 1000000 ms)
  freq = 1000000.0 / (ontime + offtime);//(ontime + offtime);
     ec8:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <__data_end>
     ecc:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <__data_end+0x1>
     ed0:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <__data_end+0x2>
     ed4:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <__data_end+0x3>
     ed8:	60 0f       	add	r22, r16
     eda:	71 1f       	adc	r23, r17
     edc:	82 1f       	adc	r24, r18
     ede:	93 1f       	adc	r25, r19
     ee0:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__floatsisf>
     ee4:	9b 01       	movw	r18, r22
     ee6:	ac 01       	movw	r20, r24
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	74 e2       	ldi	r23, 0x24	; 36
     eec:	84 e7       	ldi	r24, 0x74	; 116
     eee:	99 e4       	ldi	r25, 0x49	; 73
     ef0:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__divsf3>
     ef4:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <freq>
     ef8:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <freq+0x1>
     efc:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <freq+0x2>
     f00:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <freq+0x3>
     f04:	ac cf       	rjmp	.-168    	; 0xe5e <updateScreenData(bool) [clone .part.7]+0x70>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:398
      {
        case 6:
          checkhz();
          break;
        case 0:
          IVo();
     f06:	0e 94 de 04 	call	0x9bc	; 0x9bc <IVo()>
     f0a:	a9 cf       	rjmp	.-174    	; 0xe5e <updateScreenData(bool) [clone .part.7]+0x70>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:401
          break;
        case 2:
          OVo();
     f0c:	0e 94 9f 04 	call	0x93e	; 0x93e <OVo()>
     f10:	a6 cf       	rjmp	.-180    	; 0xe5e <updateScreenData(bool) [clone .part.7]+0x70>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:404
          break;
        case 4:
          ampo();
     f12:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ampo()>
     f16:	a3 cf       	rjmp	.-186    	; 0xe5e <updateScreenData(bool) [clone .part.7]+0x70>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:414
      menu++;
    }

    //Show Error if Available
    
    if(!status && menu == -1){
     f18:	ef 3f       	cpi	r30, 0xFF	; 255
     f1a:	fe 07       	cpc	r31, r30
     f1c:	09 f0       	breq	.+2      	; 0xf20 <updateScreenData(bool) [clone .part.7]+0x132>
     f1e:	af cf       	rjmp	.-162    	; 0xe7e <updateScreenData(bool) [clone .part.7]+0x90>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:415
      if(!inputVok() && !outputVok() && !currentok()){
     f20:	0e 94 59 05 	call	0xab2	; 0xab2 <inputVok()>
     f24:	18 2f       	mov	r17, r24
     f26:	0e 94 44 05 	call	0xa88	; 0xa88 <outputVok()>
     f2a:	11 11       	cpse	r17, r1
     f2c:	16 c0       	rjmp	.+44     	; 0xf5a <updateScreenData(bool) [clone .part.7]+0x16c>
     f2e:	81 11       	cpse	r24, r1
     f30:	06 c0       	rjmp	.+12     	; 0xf3e <updateScreenData(bool) [clone .part.7]+0x150>
     f32:	0e 94 36 05 	call	0xa6c	; 0xa6c <currentok()>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:416
        display("ErAL", 0);
     f36:	6a e0       	ldi	r22, 0x0A	; 10
     f38:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:415
    }

    //Show Error if Available
    
    if(!status && menu == -1){
      if(!inputVok() && !outputVok() && !currentok()){
     f3a:	88 23       	and	r24, r24
     f3c:	31 f1       	breq	.+76     	; 0xf8a <updateScreenData(bool) [clone .part.7]+0x19c>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:419
        display("ErAL", 0);
      } else {
        if(!inputVok()){
          display("ErIn", 0);
     f3e:	6f e0       	ldi	r22, 0x0F	; 15
     f40:	71 e0       	ldi	r23, 0x01	; 1
     f42:	ce 01       	movw	r24, r28
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	0e 94 36 06 	call	0xc6c	; 0xc6c <String::String(char const*)>
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	0e 94 4c 06 	call	0xc98	; 0xc98 <display(String, int) [clone .constprop.6]>
     f52:	ce 01       	movw	r24, r28
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	0e 94 47 06 	call	0xc8e	; 0xc8e <String::~String()>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:421
        }
        if(!outputVok()){
     f5a:	0e 94 44 05 	call	0xa88	; 0xa88 <outputVok()>
     f5e:	81 11       	cpse	r24, r1
     f60:	0e c0       	rjmp	.+28     	; 0xf7e <updateScreenData(bool) [clone .part.7]+0x190>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:422
          display("ErOt", 0);
     f62:	64 e1       	ldi	r22, 0x14	; 20
     f64:	71 e0       	ldi	r23, 0x01	; 1
     f66:	ce 01       	movw	r24, r28
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	0e 94 36 06 	call	0xc6c	; 0xc6c <String::String(char const*)>
     f6e:	ce 01       	movw	r24, r28
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	0e 94 4c 06 	call	0xc98	; 0xc98 <display(String, int) [clone .constprop.6]>
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	0e 94 47 06 	call	0xc8e	; 0xc8e <String::~String()>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:424
        }
        if(!currentok()){
     f7e:	0e 94 36 05 	call	0xa6c	; 0xa6c <currentok()>
     f82:	81 11       	cpse	r24, r1
     f84:	0e c0       	rjmp	.+28     	; 0xfa2 <updateScreenData(bool) [clone .part.7]+0x1b4>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:425
          display("ErOL", 0);
     f86:	69 e1       	ldi	r22, 0x19	; 25
     f88:	71 e0       	ldi	r23, 0x01	; 1
     f8a:	ce 01       	movw	r24, r28
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	0e 94 36 06 	call	0xc6c	; 0xc6c <String::String(char const*)>
     f92:	ce 01       	movw	r24, r28
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	0e 94 4c 06 	call	0xc98	; 0xc98 <display(String, int) [clone .constprop.6]>
     f9a:	ce 01       	movw	r24, r28
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	0e 94 47 06 	call	0xc8e	; 0xc8e <String::~String()>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:497
      } else {
        menu = -1;
      }
    }*/
  }
}
     fa2:	26 96       	adiw	r28, 0x06	; 6
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	08 95       	ret
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:433
    }

    switch (menu)
    {
    case 0:
      display("InPu", 0);
     fba:	6e e1       	ldi	r22, 0x1E	; 30
     fbc:	71 e0       	ldi	r23, 0x01	; 1
     fbe:	e5 cf       	rjmp	.-54     	; 0xf8a <updateScreenData(bool) [clone .part.7]+0x19c>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:436
      break;
    case 1:
      displayVar(involtage, 0);
     fc0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <involtage>
     fc4:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <involtage+0x1>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:454
      break;
    case 6:
      display("FrEq", 0);
      break;
    case 7:
      displayVar((int)freq, 0);
     fc8:	0e 94 ab 05 	call	0xb56	; 0xb56 <displayVar(int, int) [clone .constprop.11]>
     fcc:	ea cf       	rjmp	.-44     	; 0xfa2 <updateScreenData(bool) [clone .part.7]+0x1b4>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:439
      break;
    case 1:
      displayVar(involtage, 0);
      break;
    case 2:
      display("Outu", 0);
     fce:	63 e2       	ldi	r22, 0x23	; 35
     fd0:	71 e0       	ldi	r23, 0x01	; 1
     fd2:	db cf       	rjmp	.-74     	; 0xf8a <updateScreenData(bool) [clone .part.7]+0x19c>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:442
      break;
    case 3:
      displayVar(outvoltage, 0);
     fd4:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <outvoltage>
     fd8:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <outvoltage+0x1>
     fdc:	f5 cf       	rjmp	.-22     	; 0xfc8 <updateScreenData(bool) [clone .part.7]+0x1da>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:445
      break;
    case 4:
      display("LoAd", 0);
     fde:	68 e2       	ldi	r22, 0x28	; 40
     fe0:	71 e0       	ldi	r23, 0x01	; 1
     fe2:	d3 cf       	rjmp	.-90     	; 0xf8a <updateScreenData(bool) [clone .part.7]+0x19c>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:448
      break;
    case 5:
      displayVar(currentload, 0);
     fe4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <currentload>
     fe8:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <currentload+0x1>
     fec:	ed cf       	rjmp	.-38     	; 0xfc8 <updateScreenData(bool) [clone .part.7]+0x1da>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:451
      break;
    case 6:
      display("FrEq", 0);
     fee:	6d e2       	ldi	r22, 0x2D	; 45
     ff0:	71 e0       	ldi	r23, 0x01	; 1
     ff2:	cb cf       	rjmp	.-106    	; 0xf8a <updateScreenData(bool) [clone .part.7]+0x19c>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:454
      break;
    case 7:
      displayVar((int)freq, 0);
     ff4:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <freq>
     ff8:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <freq+0x1>
     ffc:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <freq+0x2>
    1000:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <freq+0x3>
    1004:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__fixsfsi>
    1008:	cb 01       	movw	r24, r22
    100a:	de cf       	rjmp	.-68     	; 0xfc8 <updateScreenData(bool) [clone .part.7]+0x1da>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:457
      break;
    case 8:
      if(status){
    100c:	ff 20       	and	r15, r15
    100e:	29 f0       	breq	.+10     	; 0x101a <updateScreenData(bool) [clone .part.7]+0x22c>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:458
        menu = 0;
    1010:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <menu+0x1>
    1014:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <menu>
    1018:	c4 cf       	rjmp	.-120    	; 0xfa2 <updateScreenData(bool) [clone .part.7]+0x1b4>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:460
      } else {
        menu = -1;
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	9f ef       	ldi	r25, 0xFF	; 255
    101e:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <menu+0x1>
    1022:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <menu>
    1026:	bd cf       	rjmp	.-134    	; 0xfa2 <updateScreenData(bool) [clone .part.7]+0x1b4>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:381
    }
    if(!status && !alarmOnce){
      alarmOnce = true;
      menu == -1;
    }
    if(status && alarmOnce){
    1028:	88 23       	and	r24, r24
    102a:	09 f4       	brne	.+2      	; 0x102e <updateScreenData(bool) [clone .part.7]+0x240>
    102c:	ff ce       	rjmp	.-514    	; 0xe2c <updateScreenData(bool) [clone .part.7]+0x3e>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:382
      alarmOnce = false;
    102e:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <alarmOnce>
    1032:	fc ce       	rjmp	.-520    	; 0xe2c <updateScreenData(bool) [clone .part.7]+0x3e>

00001034 <done()>:
done():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:797
  default:
    break;
  }
}

void done() {display("donE", 0);}
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	00 d0       	rcall	.+0      	; 0x103a <done()+0x6>
    103a:	00 d0       	rcall	.+0      	; 0x103c <done()+0x8>
    103c:	00 d0       	rcall	.+0      	; 0x103e <done()+0xa>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	62 e3       	ldi	r22, 0x32	; 50
    1044:	71 e0       	ldi	r23, 0x01	; 1
    1046:	ce 01       	movw	r24, r28
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	0e 94 36 06 	call	0xc6c	; 0xc6c <String::String(char const*)>
    104e:	ce 01       	movw	r24, r28
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	0e 94 4c 06 	call	0xc98	; 0xc98 <display(String, int) [clone .constprop.6]>
    1056:	ce 01       	movw	r24, r28
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	0e 94 47 06 	call	0xc8e	; 0xc8e <String::~String()>
    105e:	26 96       	adiw	r28, 0x06	; 6
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>:
_ZN11EEPROMClass6updateEih.isra.2():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	ec 01       	movw	r28, r24
    1078:	16 2f       	mov	r17, r22
operator*():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    107a:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <eeprom_read_byte>
update():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    107e:	18 17       	cp	r17, r24
    1080:	39 f0       	breq	.+14     	; 0x1090 <EEPROMClass::update(int, unsigned char) [clone .isra.2]+0x20>
_ZN5EERefaSEh():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1082:	61 2f       	mov	r22, r17
    1084:	ce 01       	movw	r24, r28
_ZN11EEPROMClass6updateEih.isra.2():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
_ZN5EERefaSEh():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    108c:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <eeprom_write_byte>
_ZN11EEPROMClass6updateEih.isra.2():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	08 95       	ret

00001098 <EEPROMClass::read(int) [clone .isra.1]>:
operator*():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1098:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <eeprom_read_byte>

0000109c <__vector_16>:
__vector_16():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	8f 93       	push	r24
    10ac:	9f 93       	push	r25
    10ae:	af 93       	push	r26
    10b0:	bf 93       	push	r27
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    10b2:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <timer0_millis>
    10b6:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <timer0_millis+0x1>
    10ba:	a0 91 6f 02 	lds	r26, 0x026F	; 0x80026f <timer0_millis+0x2>
    10be:	b0 91 70 02 	lds	r27, 0x0270	; 0x800270 <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    10c2:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <timer0_fract>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    10c6:	26 e0       	ldi	r18, 0x06	; 6
    10c8:	23 0f       	add	r18, r19
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    10ca:	2d 37       	cpi	r18, 0x7D	; 125
    10cc:	68 f1       	brcs	.+90     	; 0x1128 <__vector_16+0x8c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    10ce:	29 e8       	ldi	r18, 0x89	; 137
    10d0:	23 0f       	add	r18, r19
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    10d2:	03 96       	adiw	r24, 0x03	; 3
    10d4:	a1 1d       	adc	r26, r1
    10d6:	b1 1d       	adc	r27, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    10d8:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <timer0_fract>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    10dc:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <timer0_millis>
    10e0:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <timer0_millis+0x1>
    10e4:	a0 93 6f 02 	sts	0x026F, r26	; 0x80026f <timer0_millis+0x2>
    10e8:	b0 93 70 02 	sts	0x0270, r27	; 0x800270 <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    10ec:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <timer0_overflow_count>
    10f0:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <timer0_overflow_count+0x1>
    10f4:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <timer0_overflow_count+0x2>
    10f8:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <timer0_overflow_count+0x3>
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	a1 1d       	adc	r26, r1
    1100:	b1 1d       	adc	r27, r1
    1102:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <timer0_overflow_count>
    1106:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <timer0_overflow_count+0x1>
    110a:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <timer0_overflow_count+0x2>
    110e:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <timer0_overflow_count+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    1112:	bf 91       	pop	r27
    1114:	af 91       	pop	r26
    1116:	9f 91       	pop	r25
    1118:	8f 91       	pop	r24
    111a:	3f 91       	pop	r19
    111c:	2f 91       	pop	r18
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	0f 90       	pop	r0
    1124:	1f 90       	pop	r1
    1126:	18 95       	reti
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    1128:	02 96       	adiw	r24, 0x02	; 2
    112a:	a1 1d       	adc	r26, r1
    112c:	b1 1d       	adc	r27, r1
    112e:	d4 cf       	rjmp	.-88     	; 0x10d8 <__vector_16+0x3c>

00001130 <countPulseASM>:
countPulseASM():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:62

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
    1130:	cf 92       	push	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:63
    push r13   ;   ;  131 pushqi1/1 [length = 1]
    1132:	df 92       	push	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:64
    push r14   ;   ;  132 pushqi1/1 [length = 1]
    1134:	ef 92       	push	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:65
    push r15   ;   ;  133 pushqi1/1 [length = 1]
    1136:	ff 92       	push	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:66
    push r16   ;   ;  134 pushqi1/1 [length = 1]
    1138:	0f 93       	push	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:67
    push r17   ;   ;  135 pushqi1/1 [length = 1]
    113a:	1f 93       	push	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:72
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
    113c:	e8 2f       	mov	r30, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:73
    mov r31,r25  ;  port, port
    113e:	f9 2f       	mov	r31, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:79
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
    1140:	05 c0       	rjmp	.+10     	; 0x114c <countPulseASM+0x1c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:83
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
    1142:	01 50       	subi	r16, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:84
    sbc r17, r1   ;  maxloops
    1144:	11 09       	sbc	r17, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:85
    sbc r18, r1   ;  maxloops
    1146:	21 09       	sbc	r18, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:86
    sbc r19, r1   ;  maxloops
    1148:	31 09       	sbc	r19, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:87
    breq .L13  ; ,   ;  19  branch  [length = 1]
    114a:	61 f1       	breq	.+88     	; 0x11a4 <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:91
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
    114c:	90 81       	ld	r25, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:92
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
    114e:	96 23       	and	r25, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:93
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
    1150:	94 17       	cp	r25, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:94
    breq .L4   ; ,   ;  26  branch  [length = 1]
    1152:	b9 f3       	breq	.-18     	; 0x1142 <countPulseASM+0x12>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:95
    rjmp .L6   ;   ;  184 jump  [length = 1]
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <countPulseASM+0x30>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:104
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
    1156:	01 50       	subi	r16, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:105
    sbc r17, r1   ;  maxloops
    1158:	11 09       	sbc	r17, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:106
    sbc r18, r1   ;  maxloops
    115a:	21 09       	sbc	r18, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:107
    sbc r19, r1   ;  maxloops
    115c:	31 09       	sbc	r19, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:108
    breq .L13  ; ,   ;  33  branch  [length = 1]
    115e:	11 f1       	breq	.+68     	; 0x11a4 <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:112
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
    1160:	90 81       	ld	r25, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:113
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
    1162:	96 23       	and	r25, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:114
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
    1164:	94 13       	cpse	r25, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:115
    rjmp .L7   ;
    1166:	f7 cf       	rjmp	.-18     	; 0x1156 <countPulseASM+0x26>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:116
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
    1168:	c1 2c       	mov	r12, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:117
    mov r13, r1   ;  width
    116a:	d1 2c       	mov	r13, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:118
    mov r14, r1   ;  width
    116c:	e1 2c       	mov	r14, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:119
    mov r15, r1   ;  width
    116e:	f1 2c       	mov	r15, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:120
    rjmp .L9   ;   ;  186 jump  [length = 1]
    1170:	0a c0       	rjmp	.+20     	; 0x1186 <countPulseASM+0x56>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:129
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
    1172:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:130
    sub r12,r24  ;  width,
    1174:	c8 1a       	sub	r12, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:131
    sbc r13,r24  ;  width,
    1176:	d8 0a       	sbc	r13, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:132
    sbc r14,r24  ;  width,
    1178:	e8 0a       	sbc	r14, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:133
    sbc r15,r24  ;  width,
    117a:	f8 0a       	sbc	r15, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:134
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
    117c:	0c 15       	cp	r16, r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:135
    cpc r17,r13  ;  maxloops, width
    117e:	1d 05       	cpc	r17, r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:136
    cpc r18,r14  ;  maxloops, width
    1180:	2e 05       	cpc	r18, r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:137
    cpc r19,r15  ;  maxloops, width
    1182:	3f 05       	cpc	r19, r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:138
    breq .L13  ; ,   ;  52  branch  [length = 1]
    1184:	79 f0       	breq	.+30     	; 0x11a4 <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:142
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
    1186:	80 81       	ld	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:143
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
    1188:	86 23       	and	r24, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:144
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
    118a:	84 17       	cp	r24, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:145
    breq .L10  ; ,   ;  64  branch  [length = 1]
    118c:	91 f3       	breq	.-28     	; 0x1172 <countPulseASM+0x42>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:151
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
    118e:	6c 2d       	mov	r22, r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:152
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
    1190:	7d 2d       	mov	r23, r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:153
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
    1192:	8e 2d       	mov	r24, r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:154
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
    1194:	9f 2d       	mov	r25, r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:157
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
    1196:	1f 91       	pop	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:158
    pop r16  ;   ;  172 popqi [length = 1]
    1198:	0f 91       	pop	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:159
    pop r15  ;   ;  173 popqi [length = 1]
    119a:	ff 90       	pop	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:160
    pop r14  ;   ;  174 popqi [length = 1]
    119c:	ef 90       	pop	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:161
    pop r13  ;   ;  175 popqi [length = 1]
    119e:	df 90       	pop	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:162
    pop r12  ;   ;  176 popqi [length = 1]
    11a0:	cf 90       	pop	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:163
    ret  ;  177 return_from_epilogue  [length = 1]
    11a2:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:166
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
    11a4:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:167
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
    11a6:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:168
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
    11a8:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:169
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
    11aa:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:172
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
    11ac:	1f 91       	pop	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:173
    pop r16  ;   ;  139 popqi [length = 1]
    11ae:	0f 91       	pop	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:174
    pop r15  ;   ;  140 popqi [length = 1]
    11b0:	ff 90       	pop	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:175
    pop r14  ;   ;  141 popqi [length = 1]
    11b2:	ef 90       	pop	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:176
    pop r13  ;   ;  142 popqi [length = 1]
    11b4:	df 90       	pop	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:177
    pop r12  ;   ;  143 popqi [length = 1]
    11b6:	cf 90       	pop	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:178
    ret  ;  144 return_from_epilogue  [length = 1]
    11b8:	08 95       	ret

000011ba <BlockNot::addToTimerList()>:
addToTimerList():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:640
void resetAllTimers(BlockNot *timer) {
        resetAllTimers(timer->BlockNot::getStartTime());
}

void BlockNot::addToTimerList() {
        if (firstTimer == nullptr) {
    11ba:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <BlockNot::firstTimer>
    11be:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <BlockNot::firstTimer+0x1>
    11c2:	23 2b       	or	r18, r19
    11c4:	61 f4       	brne	.+24     	; 0x11de <BlockNot::addToTimerList()+0x24>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:641
            firstTimer = currentTimer = this;
    11c6:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <BlockNot::currentTimer+0x1>
    11ca:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <BlockNot::currentTimer>
    11ce:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <BlockNot::firstTimer+0x1>
    11d2:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <BlockNot::firstTimer>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:646
        } else {
            currentTimer->nextTimer = this;
            currentTimer = this;
        }
        this->nextTimer = nullptr;
    11d6:	fc 01       	movw	r30, r24
    11d8:	10 a2       	std	Z+32, r1	; 0x20
    11da:	17 8e       	std	Z+31, r1	; 0x1f
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:647
}
    11dc:	08 95       	ret
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:643

void BlockNot::addToTimerList() {
        if (firstTimer == nullptr) {
            firstTimer = currentTimer = this;
        } else {
            currentTimer->nextTimer = this;
    11de:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <BlockNot::currentTimer>
    11e2:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <BlockNot::currentTimer+0x1>
    11e6:	90 a3       	std	Z+32, r25	; 0x20
    11e8:	87 8f       	std	Z+31, r24	; 0x1f
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:644
            currentTimer = this;
    11ea:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <BlockNot::currentTimer+0x1>
    11ee:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <BlockNot::currentTimer>
    11f2:	f1 cf       	rjmp	.-30     	; 0x11d6 <BlockNot::addToTimerList()+0x1c>

000011f4 <main>:
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <main+0x6>
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <main+0x8>
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <main+0xa>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
init():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1202:	78 94       	sei
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1204:	84 b5       	in	r24, 0x24	; 36
    1206:	83 60       	ori	r24, 0x03	; 3
    1208:	84 bd       	out	0x24, r24	; 36
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    120a:	85 b5       	in	r24, 0x25	; 37
    120c:	83 60       	ori	r24, 0x03	; 3
    120e:	85 bd       	out	0x25, r24	; 37
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1210:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    1214:	81 60       	ori	r24, 0x01	; 1
    1216:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    121a:	22 e0       	ldi	r18, 0x02	; 2
    121c:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1220:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1224:	81 60       	ori	r24, 0x01	; 1
    1226:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    122a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    122e:	81 60       	ori	r24, 0x01	; 1
    1230:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    1234:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    1238:	84 60       	ori	r24, 0x04	; 4
    123a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    123e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1242:	81 60       	ori	r24, 0x01	; 1
    1244:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    1248:	86 e8       	ldi	r24, 0x86	; 134
    124a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    124e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
Begin():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:78
	byte segA, byte segB, byte segC, byte segD, byte segE, byte segF, byte segG,
	byte segDP,
	byte segCol, byte segApos)
{
  //Bring all the variables in from the caller
  numberOfDigits = numOfDigits;
    1252:	34 e0       	ldi	r19, 0x04	; 4
    1254:	30 93 37 02 	sts	0x0237, r19	; 0x800237 <display1+0x15>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:79
  digit1 = dig1;
    1258:	b9 e0       	ldi	r27, 0x09	; 9
    125a:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <display1+0x5>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:80
  digit2 = dig2;
    125e:	30 93 28 02 	sts	0x0228, r19	; 0x800228 <display1+0x6>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:81
  digit3 = dig3;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <display1+0x7>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:82
  digit4 = dig4;
    1268:	20 93 2a 02 	sts	0x022A, r18	; 0x80022a <display1+0x8>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:83
  digitApostrophe = digitApos;
    126c:	9f ef       	ldi	r25, 0xFF	; 255
    126e:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <display1+0x9>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:84
  digitColon = digitCol;
    1272:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <display1+0xa>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:85
  segmentA = segA;
    1276:	a6 e0       	ldi	r26, 0x06	; 6
    1278:	a0 93 2f 02 	sts	0x022F, r26	; 0x80022f <display1+0xd>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:86
  segmentB = segB;
    127c:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <display1+0xe>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:87
  segmentC = segC;
    1280:	f4 e1       	ldi	r31, 0x14	; 20
    1282:	f0 93 31 02 	sts	0x0231, r31	; 0x800231 <display1+0xf>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:88
  segmentD = segD;
    1286:	e7 e0       	ldi	r30, 0x07	; 7
    1288:	e0 93 32 02 	sts	0x0232, r30	; 0x800232 <display1+0x10>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:89
  segmentE = segE;
    128c:	78 e0       	ldi	r23, 0x08	; 8
    128e:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <display1+0x11>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:90
  segmentF = segF;
    1292:	65 e1       	ldi	r22, 0x15	; 21
    1294:	60 93 34 02 	sts	0x0234, r22	; 0x800234 <display1+0x12>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:91
  segmentG = segG;
    1298:	53 e0       	ldi	r21, 0x03	; 3
    129a:	50 93 35 02 	sts	0x0235, r21	; 0x800235 <display1+0x13>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:92
  segmentDP = segDP;
    129e:	45 e0       	ldi	r20, 0x05	; 5
    12a0:	40 93 36 02 	sts	0x0236, r20	; 0x800236 <display1+0x14>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:93
  segmentApostrophe = segApos;
    12a4:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <display1+0xb>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:94
  segmentColon = segCol;
    12a8:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <display1+0xc>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:98

  //Assign input values to variables
  //mode is what the digit pins must be set at for it to be turned on. 0 for common cathode, 1 for common anode
  mode = mode_in;
    12ac:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <display1>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:101
  if(mode == COMMON_ANODE)
  {
    DigitOn = HIGH;
    12b0:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <display1+0x1>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:102
    DigitOff = LOW;
    12b4:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <display1+0x2>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:103
    SegOn = LOW;
    12b8:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <display1+0x3>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:104
    SegOff = HIGH;
    12bc:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <display1+0x4>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:114
    DigitOff = HIGH;
    SegOn = HIGH;
    SegOff = LOW;
  }

  DigitPins[0] = digit1;
    12c0:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <display1+0x18>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:115
  DigitPins[1] = digit2;
    12c4:	30 93 3b 02 	sts	0x023B, r19	; 0x80023b <display1+0x19>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:116
  DigitPins[2] = digit3;
    12c8:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <display1+0x1a>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:117
  DigitPins[3] = digit4;
    12cc:	20 93 3d 02 	sts	0x023D, r18	; 0x80023d <display1+0x1b>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:118
  SegmentPins[0] = segmentA;
    12d0:	a0 93 3e 02 	sts	0x023E, r26	; 0x80023e <display1+0x1c>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:119
  SegmentPins[1] = segmentB;
    12d4:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <display1+0x1d>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:120
  SegmentPins[2] = segmentC;
    12d8:	f0 93 40 02 	sts	0x0240, r31	; 0x800240 <display1+0x1e>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:121
  SegmentPins[3] = segmentD;
    12dc:	e0 93 41 02 	sts	0x0241, r30	; 0x800241 <display1+0x1f>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:122
  SegmentPins[4] = segmentE;
    12e0:	70 93 42 02 	sts	0x0242, r23	; 0x800242 <display1+0x20>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:123
  SegmentPins[5] = segmentF;
    12e4:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <display1+0x21>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:124
  SegmentPins[6] = segmentG;
    12e8:	50 93 44 02 	sts	0x0244, r21	; 0x800244 <display1+0x22>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:125
  SegmentPins[7] = segmentDP;
    12ec:	40 93 45 02 	sts	0x0245, r20	; 0x800245 <display1+0x23>
main():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:129

  //Turn everything Off before setting pin as output
  //Set all digit pins off. Low for common anode, high for common cathode
  for (byte digit = 0 ; digit < numberOfDigits ; digit++)
    12f0:	10 e0       	ldi	r17, 0x00	; 0
Begin():
    12f2:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <display1+0x15>
    12f6:	18 17       	cp	r17, r24
    12f8:	98 f4       	brcc	.+38     	; 0x1320 <main+0x12c>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:131
  {
    digitalWrite(DigitPins[digit], DigitOff);
    12fa:	81 2f       	mov	r24, r17
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9c 01       	movw	r18, r24
    1300:	2e 5d       	subi	r18, 0xDE	; 222
    1302:	3d 4f       	sbci	r19, 0xFD	; 253
    1304:	79 01       	movw	r14, r18
    1306:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <display1+0x2>
    130a:	f9 01       	movw	r30, r18
    130c:	80 8d       	ldd	r24, Z+24	; 0x18
    130e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:132
    pinMode(DigitPins[digit], OUTPUT);
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	f7 01       	movw	r30, r14
    1316:	80 8d       	ldd	r24, Z+24	; 0x18
    1318:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:129
  SegmentPins[6] = segmentG;
  SegmentPins[7] = segmentDP;

  //Turn everything Off before setting pin as output
  //Set all digit pins off. Low for common anode, high for common cathode
  for (byte digit = 0 ; digit < numberOfDigits ; digit++)
    131c:	1f 5f       	subi	r17, 0xFF	; 255
    131e:	e9 cf       	rjmp	.-46     	; 0x12f2 <main+0xfe>
    1320:	02 e2       	ldi	r16, 0x22	; 34
    1322:	12 e0       	ldi	r17, 0x02	; 2
    1324:	aa e2       	ldi	r26, 0x2A	; 42
    1326:	ea 2e       	mov	r14, r26
    1328:	a2 e0       	ldi	r26, 0x02	; 2
    132a:	fa 2e       	mov	r15, r26
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:137
    pinMode(DigitPins[digit], OUTPUT);
  }
  //Set all segment pins off. High for common anode, low for common cathode
  for (byte seg = 0 ; seg < 8 ; seg++)
  {
    digitalWrite(SegmentPins[seg], SegOff);
    132c:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <display1+0x4>
    1330:	f8 01       	movw	r30, r16
    1332:	84 8d       	ldd	r24, Z+28	; 0x1c
    1334:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:138
    pinMode(SegmentPins[seg], OUTPUT);
    1338:	61 e0       	ldi	r22, 0x01	; 1
    133a:	f8 01       	movw	r30, r16
    133c:	84 8d       	ldd	r24, Z+28	; 0x1c
    133e:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
    1342:	0f 5f       	subi	r16, 0xFF	; 255
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:135
  {
    digitalWrite(DigitPins[digit], DigitOff);
    pinMode(DigitPins[digit], OUTPUT);
  }
  //Set all segment pins off. High for common anode, low for common cathode
  for (byte seg = 0 ; seg < 8 ; seg++)
    1346:	e0 16       	cp	r14, r16
    1348:	f1 06       	cpc	r15, r17
    134a:	81 f7       	brne	.-32     	; 0x132c <main+0x138>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:141
  {
    digitalWrite(SegmentPins[seg], SegOff);
    pinMode(SegmentPins[seg], OUTPUT);
  }

  if (digitColon != 255)
    134c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <display1+0xa>
    1350:	8f 3f       	cpi	r24, 0xFF	; 255
    1352:	a1 f0       	breq	.+40     	; 0x137c <main+0x188>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:143
  {
	digitalWrite(digitColon, DigitOff);
    1354:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <display1+0x2>
    1358:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:144
	pinMode(digitColon, OUTPUT);
    135c:	61 e0       	ldi	r22, 0x01	; 1
    135e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <display1+0xa>
    1362:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:145
	digitalWrite(segmentColon, SegOff);
    1366:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <display1+0x4>
    136a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <display1+0xc>
    136e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:146
	pinMode(segmentColon, OUTPUT);
    1372:	61 e0       	ldi	r22, 0x01	; 1
    1374:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <display1+0xc>
    1378:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:148
  }
  if (digitApostrophe != 255)
    137c:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <display1+0x9>
    1380:	8f 3f       	cpi	r24, 0xFF	; 255
    1382:	a1 f0       	breq	.+40     	; 0x13ac <main+0x1b8>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:150
  {
	digitalWrite(digitApostrophe, DigitOff);
    1384:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <display1+0x2>
    1388:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:151
	pinMode(digitApostrophe, OUTPUT);
    138c:	61 e0       	ldi	r22, 0x01	; 1
    138e:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <display1+0x9>
    1392:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:152
	digitalWrite(segmentApostrophe, SegOff);
    1396:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <display1+0x4>
    139a:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <display1+0xb>
    139e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:153
	pinMode(segmentApostrophe, OUTPUT);
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <display1+0xb>
    13a8:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
SetBrightness():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:179
//We need to error check and map the incoming value
void SevSeg::SetBrightness(byte percentBright)
{
	//Error check and scale brightnessLevel
	if(percentBright > 100) percentBright = 100;
	brightnessDelay = map(percentBright, 0, 100, 0, FRAMEPERIOD); //map brightnessDelay to 0 to the max which is framePeriod
    13ac:	80 ed       	ldi	r24, 0xD0	; 208
    13ae:	97 e0       	ldi	r25, 0x07	; 7
    13b0:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <display1+0x17>
    13b4:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <display1+0x16>
setup():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:154
void setup() {
//Setup Display Data
setupDisplay();
//Setup Inputs 
//setIN(); is a custom Function Defined at the bottom of the Program!
setIN(ok);
    13b8:	8d e0       	ldi	r24, 0x0D	; 13
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 5d 04 	call	0x8ba	; 0x8ba <setIN(int)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:155
setIN(plus);
    13c0:	8f e0       	ldi	r24, 0x0F	; 15
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <setIN(int)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:156
setIN(minus);
    13c8:	8e e0       	ldi	r24, 0x0E	; 14
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 5d 04 	call	0x8ba	; 0x8ba <setIN(int)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:157
setIN(inVolt);
    13d0:	81 e1       	ldi	r24, 0x11	; 17
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <setIN(int)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:158
setIN(outVolt);
    13d8:	82 e1       	ldi	r24, 0x12	; 18
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 5d 04 	call	0x8ba	; 0x8ba <setIN(int)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:159
setIN(current);
    13e0:	83 e1       	ldi	r24, 0x13	; 19
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <setIN(int)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:160
setIN(hz);
    13e8:	80 e1       	ldi	r24, 0x10	; 16
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 5d 04 	call	0x8ba	; 0x8ba <setIN(int)>
setOUT():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:840
}

//Setup Outputs

void setOUT(int PIN) {
  pinMode(PIN, OUTPUT);
    13f0:	61 e0       	ldi	r22, 0x01	; 1
    13f2:	8c e0       	ldi	r24, 0x0C	; 12
    13f4:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
    13f8:	61 e0       	ldi	r22, 0x01	; 1
    13fa:	8b e0       	ldi	r24, 0x0B	; 11
    13fc:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
    1400:	61 e0       	ldi	r22, 0x01	; 1
    1402:	8a e0       	ldi	r24, 0x0A	; 10
    1404:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
setup():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:181
//uncomment when programming Arduino/MCU
/**/

//using the EEPROM.h Librabry Included by the Arduino IDE & Arduino Core

IHV = 2 * EEPROM.read(0);
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	0e 94 4c 08 	call	0x1098	; 0x1098 <EEPROMClass::read(int) [clone .isra.1]>
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <IHV+0x1>
    141a:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <IHV>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:182
ILV = 2 * EEPROM.read(1);
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 4c 08 	call	0x1098	; 0x1098 <EEPROMClass::read(int) [clone .isra.1]>
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <ILV+0x1>
    1430:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <ILV>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:183
OHV = 2 * EEPROM.read(2);
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0e 94 4c 08 	call	0x1098	; 0x1098 <EEPROMClass::read(int) [clone .isra.1]>
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <OHV+0x1>
    1446:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <OHV>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:184
OLV = 2 * EEPROM.read(3);
    144a:	83 e0       	ldi	r24, 0x03	; 3
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 4c 08 	call	0x1098	; 0x1098 <EEPROMClass::read(int) [clone .isra.1]>
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <OLV+0x1>
    145c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <OLV>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:185
SETV = 2 * EEPROM.read(4);
    1460:	84 e0       	ldi	r24, 0x04	; 4
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 4c 08 	call	0x1098	; 0x1098 <EEPROMClass::read(int) [clone .isra.1]>
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <SETV+0x1>
    1472:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SETV>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:186
OVL = EEPROM.read(5);
    1476:	85 e0       	ldi	r24, 0x05	; 5
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 4c 08 	call	0x1098	; 0x1098 <EEPROMClass::read(int) [clone .isra.1]>
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <OVL+0x1>
    1484:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <OVL>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:187
TON = EEPROM.read(6);
    1488:	86 e0       	ldi	r24, 0x06	; 6
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 4c 08 	call	0x1098	; 0x1098 <EEPROMClass::read(int) [clone .isra.1]>
    1490:	08 2f       	mov	r16, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <TON+0x1>
    1498:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <TON>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:188
TOFF = EEPROM.read(7);
    149c:	87 e0       	ldi	r24, 0x07	; 7
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 4c 08 	call	0x1098	; 0x1098 <EEPROMClass::read(int) [clone .isra.1]>
    14a4:	18 2f       	mov	r17, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <TOFF+0x1>
    14ac:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <TOFF>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:189
DIFF = EEPROM.read(8);
    14b0:	88 e0       	ldi	r24, 0x08	; 8
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 4c 08 	call	0x1098	; 0x1098 <EEPROMClass::read(int) [clone .isra.1]>
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <DIFF+0x1>
    14be:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <DIFF>
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
            break;
        case MILLISECONDS:
            duration.millis = time;
            break;
        case SECONDS:
            duration.seconds = time;
    14c2:	60 2f       	mov	r22, r16
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__floatunsisf>
    14ce:	60 93 e8 01 	sts	0x01E8, r22	; 0x8001e8 <on+0x15>
    14d2:	70 93 e9 01 	sts	0x01E9, r23	; 0x8001e9 <on+0x16>
    14d6:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <on+0x17>
    14da:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <on+0x18>
setDuration():
    14de:	83 ed       	ldi	r24, 0xD3	; 211
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
initDuration():
    14e6:	61 2f       	mov	r22, r17
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__floatunsisf>
    14f2:	60 93 c7 01 	sts	0x01C7, r22	; 0x8001c7 <off+0x15>
    14f6:	70 93 c8 01 	sts	0x01C8, r23	; 0x8001c8 <off+0x16>
    14fa:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <off+0x17>
    14fe:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <off+0x18>
setDuration():
    1502:	82 eb       	ldi	r24, 0xB2	; 178
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	0e 94 5d 03 	call	0x6ba	; 0x6ba <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
setup():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:213

//Setup Variable Timers after the variable is read from the Memory!
on.setDuration(TON, SECONDS);
off.setDuration(TOFF, SECONDS);
//Reset the Timers after time update.
on.reset();
    150a:	83 ed       	ldi	r24, 0xD3	; 211
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:214
off.reset();
    1512:	82 eb       	ldi	r24, 0xB2	; 178
    1514:	91 e0       	ldi	r25, 0x01	; 1
    1516:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.18]>
checkok():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:706
}

//Check OK Button Pressed

void checkok() {
  if(read(ok) && okold == !read(ok)){
    151a:	ff 24       	eor	r15, r15
    151c:	f3 94       	inc	r15
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    151e:	00 e0       	ldi	r16, 0x00	; 0
    1520:	10 e0       	ldi	r17, 0x00	; 0
checkok():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:706
    1522:	ee 24       	eor	r14, r14
    1524:	e3 94       	inc	r14
    1526:	8d e0       	ldi	r24, 0x0D	; 13
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    152e:	88 23       	and	r24, r24
    1530:	09 f4       	brne	.+2      	; 0x1534 <main+0x340>
    1532:	98 c0       	rjmp	.+304    	; 0x1664 <main+0x470>
    1534:	8d e0       	ldi	r24, 0x0D	; 13
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    153c:	8f 25       	eor	r24, r15
    153e:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <okold>
    1542:	89 13       	cpse	r24, r25
    1544:	8f c0       	rjmp	.+286    	; 0x1664 <main+0x470>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:707
  okold = read(ok);
    1546:	8d e0       	ldi	r24, 0x0D	; 13
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    154e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <okold>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:708
  encMenu++;
    1552:	c0 90 19 02 	lds	r12, 0x0219	; 0x800219 <encMenu>
    1556:	d0 90 1a 02 	lds	r13, 0x021A	; 0x80021a <encMenu+0x1>
    155a:	c6 01       	movw	r24, r12
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <encMenu+0x1>
    1562:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <encMenu>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:709
  refresh.reset();
    1566:	81 e9       	ldi	r24, 0x91	; 145
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.18]>
encUpdate():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:736

//Update Parameters on Menu Change

void encUpdate() {
  
  switch (encMenu)
    156e:	fa e0       	ldi	r31, 0x0A	; 10
    1570:	cf 16       	cp	r12, r31
    1572:	d1 04       	cpc	r13, r1
    1574:	c8 f4       	brcc	.+50     	; 0x15a8 <main+0x3b4>
    1576:	f6 01       	movw	r30, r12
    1578:	e0 54       	subi	r30, 0x40	; 64
    157a:	f5 4f       	sbci	r31, 0xF5	; 245
    157c:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__tablejump2__>
    1580:	ca 0a       	sbc	r12, r26
    1582:	b6 0b       	sbc	r27, r22
    1584:	c3 0b       	sbc	r28, r19
    1586:	d0 0b       	sbc	r29, r16
    1588:	dd 0b       	sbc	r29, r29
    158a:	ea 0b       	sbc	r30, r26
    158c:	f7 0b       	sbc	r31, r23
    158e:	04 0c       	add	r0, r4
    1590:	2b 0c       	add	r2, r11
    1592:	50 0c       	add	r5, r0
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:741
  {
  case 0:
    break;
  case 1:
    enc = IHV;
    1594:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <IHV>
    1598:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <IHV+0x1>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:746
    done();
    break;
  case 2:
    IHV = enc;
    enc = ILV;
    159c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <enc+0x1>
    15a0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <enc>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:790
    off.reset();
    done();
    break;
  case 10:
    DIFF = enc;
    done();
    15a4:	0e 94 1a 08 	call	0x1034	; 0x1034 <done()>
eepromUpdate():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:721
}

//Save Parameters to MCU EEPROM Memory (only if changed)

void eepromUpdate() {
  EEPROM.update(0, IHV/2);
    15a8:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <IHV>
    15ac:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <IHV+0x1>
    15b0:	77 ff       	sbrs	r23, 7
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <main+0x3c4>
    15b4:	6f 5f       	subi	r22, 0xFF	; 255
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255
    15b8:	75 95       	asr	r23
    15ba:	67 95       	ror	r22
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	0e 94 38 08 	call	0x1070	; 0x1070 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:722
  EEPROM.update(1, ILV/2);
    15c4:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <ILV>
    15c8:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <ILV+0x1>
    15cc:	77 ff       	sbrs	r23, 7
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <main+0x3e0>
    15d0:	6f 5f       	subi	r22, 0xFF	; 255
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	75 95       	asr	r23
    15d6:	67 95       	ror	r22
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 38 08 	call	0x1070	; 0x1070 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:723
  EEPROM.update(2, OHV/2);
    15e0:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <OHV>
    15e4:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <OHV+0x1>
    15e8:	77 ff       	sbrs	r23, 7
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <main+0x3fc>
    15ec:	6f 5f       	subi	r22, 0xFF	; 255
    15ee:	7f 4f       	sbci	r23, 0xFF	; 255
    15f0:	75 95       	asr	r23
    15f2:	67 95       	ror	r22
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 38 08 	call	0x1070	; 0x1070 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:724
  EEPROM.update(3, OLV/2);
    15fc:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <OLV>
    1600:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <OLV+0x1>
    1604:	77 ff       	sbrs	r23, 7
    1606:	02 c0       	rjmp	.+4      	; 0x160c <main+0x418>
    1608:	6f 5f       	subi	r22, 0xFF	; 255
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	75 95       	asr	r23
    160e:	67 95       	ror	r22
    1610:	83 e0       	ldi	r24, 0x03	; 3
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	0e 94 38 08 	call	0x1070	; 0x1070 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:725
  EEPROM.update(4, SETV/2);
    1618:	60 91 f4 01 	lds	r22, 0x01F4	; 0x8001f4 <SETV>
    161c:	70 91 f5 01 	lds	r23, 0x01F5	; 0x8001f5 <SETV+0x1>
    1620:	77 ff       	sbrs	r23, 7
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <main+0x434>
    1624:	6f 5f       	subi	r22, 0xFF	; 255
    1626:	7f 4f       	sbci	r23, 0xFF	; 255
    1628:	75 95       	asr	r23
    162a:	67 95       	ror	r22
    162c:	84 e0       	ldi	r24, 0x04	; 4
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 38 08 	call	0x1070	; 0x1070 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:726
  EEPROM.update(5, OVL);
    1634:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <OVL>
    1638:	85 e0       	ldi	r24, 0x05	; 5
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 38 08 	call	0x1070	; 0x1070 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:727
  EEPROM.update(6, TON);
    1640:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <TON>
    1644:	86 e0       	ldi	r24, 0x06	; 6
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 38 08 	call	0x1070	; 0x1070 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:728
  EEPROM.update(7, TOFF);
    164c:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <TOFF>
    1650:	87 e0       	ldi	r24, 0x07	; 7
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 38 08 	call	0x1070	; 0x1070 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:729
  EEPROM.update(8, DIFF);
    1658:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <DIFF>
    165c:	88 e0       	ldi	r24, 0x08	; 8
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 38 08 	call	0x1070	; 0x1070 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
checkok():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:713
  encMenu++;
  refresh.reset();
  encUpdate();
  eepromUpdate();
  }
  if(read(ok) == false){
    1664:	8d e0       	ldi	r24, 0x0D	; 13
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    166c:	81 11       	cpse	r24, r1
    166e:	06 c0       	rjmp	.+12     	; 0x167c <main+0x488>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:714
  okold = read(ok);
    1670:	8d e0       	ldi	r24, 0x0D	; 13
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    1678:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <okold>
checkplus():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:810
}

//Check Plus Button Pressed

void checkplus() {
  if(read(plus) && plusold == !read(plus)){
    167c:	8f e0       	ldi	r24, 0x0F	; 15
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    1684:	88 23       	and	r24, r24
    1686:	c1 f0       	breq	.+48     	; 0x16b8 <main+0x4c4>
    1688:	8f e0       	ldi	r24, 0x0F	; 15
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    1690:	8f 25       	eor	r24, r15
    1692:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <plusold>
    1696:	89 13       	cpse	r24, r25
    1698:	0f c0       	rjmp	.+30     	; 0x16b8 <main+0x4c4>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:811
  plusold = read(plus);
    169a:	8f e0       	ldi	r24, 0x0F	; 15
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    16a2:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <plusold>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:812
  enc++;
    16a6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <enc>
    16aa:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <enc+0x1>
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <enc+0x1>
    16b4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <enc>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:814
  }
  if(read(plus) == false){
    16b8:	8f e0       	ldi	r24, 0x0F	; 15
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    16c0:	81 11       	cpse	r24, r1
    16c2:	06 c0       	rjmp	.+12     	; 0x16d0 <main+0x4dc>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:815
  plusold = read(plus);
    16c4:	8f e0       	ldi	r24, 0x0F	; 15
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    16cc:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <plusold>
checkminus():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:822
}

//Check Minus Button Pressed

void checkminus() {
  if(read(minus) && minusold == !read(minus)){
    16d0:	8e e0       	ldi	r24, 0x0E	; 14
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    16d8:	88 23       	and	r24, r24
    16da:	c1 f0       	breq	.+48     	; 0x170c <main+0x518>
    16dc:	8e e0       	ldi	r24, 0x0E	; 14
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    16e4:	8f 25       	eor	r24, r15
    16e6:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <minusold>
    16ea:	89 13       	cpse	r24, r25
    16ec:	0f c0       	rjmp	.+30     	; 0x170c <main+0x518>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:823
  minusold = read(minus);
    16ee:	8e e0       	ldi	r24, 0x0E	; 14
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    16f6:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <minusold>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:824
  enc--;
    16fa:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <enc>
    16fe:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <enc+0x1>
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <enc+0x1>
    1708:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <enc>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:826
  }
  if(read(minus) == false){
    170c:	8e e0       	ldi	r24, 0x0E	; 14
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    1714:	81 11       	cpse	r24, r1
    1716:	06 c0       	rjmp	.+12     	; 0x1724 <main+0x530>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:827
  minusold = read(minus);
    1718:	8e e0       	ldi	r24, 0x0E	; 14
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    1720:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <minusold>
loop():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:236
  }
*/
///////////////////////////////////////////////////////
  //Switch to Parameter Edit/Run Mode
  /* Uncomment this for not using setup Pin*/
  if(mode){
    1724:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <mode>
    1728:	88 23       	and	r24, r24
    172a:	09 f4       	brne	.+2      	; 0x172e <main+0x53a>
    172c:	8b c1       	rjmp	.+790    	; 0x1a44 <main+0x850>
runSetup():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:659
}

//Change Screens/Menus on pessing OK/Menu

void runSetup() {
  digitalWrite(motor0Fwd, LOW);
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	8c e0       	ldi	r24, 0x0C	; 12
    1732:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:660
  digitalWrite(motor0Rev, LOW);
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	8b e0       	ldi	r24, 0x0B	; 11
    173a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:662
  
  switch (encMenu)
    173e:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <encMenu>
    1742:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <encMenu+0x1>
    1746:	eb 30       	cpi	r30, 0x0B	; 11
    1748:	f1 05       	cpc	r31, r1
    174a:	08 f0       	brcs	.+2      	; 0x174e <main+0x55a>
    174c:	76 c1       	rjmp	.+748    	; 0x1a3a <main+0x846>
    174e:	e5 55       	subi	r30, 0x55	; 85
    1750:	f4 4f       	sbci	r31, 0xF4	; 244
    1752:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__tablejump2__>
    1756:	59 0c       	add	r5, r9
    1758:	68 0c       	add	r6, r8
    175a:	b2 0c       	add	r11, r2
    175c:	bf 0c       	add	r11, r15
    175e:	cc 0c       	add	r12, r12
    1760:	d9 0c       	add	r13, r9
    1762:	e6 0c       	add	r14, r6
    1764:	f3 0c       	add	r15, r3
    1766:	00 0d       	add	r16, r0
    1768:	0d 0d       	add	r16, r13
    176a:	1a 0d       	add	r17, r10
encUpdate():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:745
  case 1:
    enc = IHV;
    done();
    break;
  case 2:
    IHV = enc;
    176c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <enc>
    1770:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <enc+0x1>
    1774:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <IHV+0x1>
    1778:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <IHV>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:746
    enc = ILV;
    177c:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <ILV>
    1780:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <ILV+0x1>
    1784:	0b cf       	rjmp	.-490    	; 0x159c <main+0x3a8>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:750
    done();
    break;
  case 3:
    ILV = enc;
    1786:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <enc>
    178a:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <enc+0x1>
    178e:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <ILV+0x1>
    1792:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <ILV>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:751
    enc = OHV;
    1796:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <OHV>
    179a:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <OHV+0x1>
    179e:	fe ce       	rjmp	.-516    	; 0x159c <main+0x3a8>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:755
    done();
    break;
  case 4:
    OHV = enc;
    17a0:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <enc>
    17a4:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <enc+0x1>
    17a8:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <OHV+0x1>
    17ac:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <OHV>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:756
    enc = OLV;
    17b0:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <OLV>
    17b4:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <OLV+0x1>
    17b8:	f1 ce       	rjmp	.-542    	; 0x159c <main+0x3a8>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:760
    done();
    break;
  case 5:
    OLV = enc;
    17ba:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <enc>
    17be:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <enc+0x1>
    17c2:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <OLV+0x1>
    17c6:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <OLV>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:761
    enc = SETV;
    17ca:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <SETV>
    17ce:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <SETV+0x1>
    17d2:	e4 ce       	rjmp	.-568    	; 0x159c <main+0x3a8>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:765
    done();
    break;
  case 6:
    SETV = enc;
    17d4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <enc>
    17d8:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <enc+0x1>
    17dc:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <SETV+0x1>
    17e0:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SETV>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:766
    enc = OVL;
    17e4:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <OVL>
    17e8:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <OVL+0x1>
    17ec:	d7 ce       	rjmp	.-594    	; 0x159c <main+0x3a8>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:770
    done();
    break;
  case 7:
    OVL = enc;
    17ee:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <enc>
    17f2:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <enc+0x1>
    17f6:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <OVL+0x1>
    17fa:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <OVL>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:771
    enc = TON;
    17fe:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <TON>
    1802:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <TON+0x1>
    1806:	ca ce       	rjmp	.-620    	; 0x159c <main+0x3a8>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:775
    done();
    break;
  case 8:
    TON = enc;
    1808:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <enc>
    180c:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <enc+0x1>
    1810:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <TON+0x1>
    1814:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <TON>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:776
    enc = TOFF;
    1818:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <TOFF>
    181c:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <TOFF+0x1>
    1820:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <enc+0x1>
    1824:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <enc>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:777
    on.setDuration(TON, SECONDS);
    1828:	07 2e       	mov	r0, r23
    182a:	00 0c       	add	r0, r0
    182c:	88 0b       	sbc	r24, r24
    182e:	99 0b       	sbc	r25, r25
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
    1830:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__floatunsisf>
    1834:	60 93 e8 01 	sts	0x01E8, r22	; 0x8001e8 <on+0x15>
    1838:	70 93 e9 01 	sts	0x01E9, r23	; 0x8001e9 <on+0x16>
    183c:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <on+0x17>
    1840:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <on+0x18>
setDuration():
    1844:	83 ed       	ldi	r24, 0xD3	; 211
    1846:	91 e0       	ldi	r25, 0x01	; 1
    1848:	0e 94 5d 03 	call	0x6ba	; 0x6ba <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
encUpdate():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:778
    on.reset();
    184c:	83 ed       	ldi	r24, 0xD3	; 211
    184e:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:785
    break;
  case 9:
    TOFF = enc;
    enc = DIFF;
    off.setDuration(TOFF, SECONDS);
    off.reset();
    1850:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.18]>
    1854:	a7 ce       	rjmp	.-690    	; 0x15a4 <main+0x3b0>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:782
    on.setDuration(TON, SECONDS);
    on.reset();
    done();
    break;
  case 9:
    TOFF = enc;
    1856:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <enc>
    185a:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <enc+0x1>
    185e:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <TOFF+0x1>
    1862:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <TOFF>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:783
    enc = DIFF;
    1866:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <DIFF>
    186a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <DIFF+0x1>
    186e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <enc+0x1>
    1872:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <enc>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:784
    off.setDuration(TOFF, SECONDS);
    1876:	07 2e       	mov	r0, r23
    1878:	00 0c       	add	r0, r0
    187a:	88 0b       	sbc	r24, r24
    187c:	99 0b       	sbc	r25, r25
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
    187e:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__floatunsisf>
    1882:	60 93 c7 01 	sts	0x01C7, r22	; 0x8001c7 <off+0x15>
    1886:	70 93 c8 01 	sts	0x01C8, r23	; 0x8001c8 <off+0x16>
    188a:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <off+0x17>
    188e:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <off+0x18>
setDuration():
    1892:	82 eb       	ldi	r24, 0xB2	; 178
    1894:	91 e0       	ldi	r25, 0x01	; 1
    1896:	0e 94 5d 03 	call	0x6ba	; 0x6ba <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
encUpdate():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:785
    off.reset();
    189a:	82 eb       	ldi	r24, 0xB2	; 178
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	d8 cf       	rjmp	.-80     	; 0x1850 <main+0x65c>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:789
    done();
    break;
  case 10:
    DIFF = enc;
    18a0:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <enc>
    18a4:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <enc+0x1>
    18a8:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <DIFF+0x1>
    18ac:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <DIFF>
    18b0:	79 ce       	rjmp	.-782    	; 0x15a4 <main+0x3b0>
home():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:559

////////////////////////////////////////////////////////////
//Setp display on Setup Mode

void home() {
  display("SETP", 0);
    18b2:	67 e3       	ldi	r22, 0x37	; 55
    18b4:	71 e0       	ldi	r23, 0x01	; 1
menuEND():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:653
    display("dIFF", 0);
  }
}

void menuEND() {
  display("End", 0);
    18b6:	ce 01       	movw	r24, r28
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	0e 94 36 06 	call	0xc6c	; 0xc6c <String::String(char const*)>
    18be:	ce 01       	movw	r24, r28
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	0e 94 4c 06 	call	0xc98	; 0xc98 <display(String, int) [clone .constprop.6]>
    18c6:	ce 01       	movw	r24, r28
    18c8:	01 96       	adiw	r24, 0x01	; 1
    18ca:	0e 94 47 06 	call	0xc8e	; 0xc8e <String::~String()>
    18ce:	0b c0       	rjmp	.+22     	; 0x18e6 <main+0x6f2>
menuIHV():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:565
}

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	81 e9       	ldi	r24, 0x91	; 145
    18d4:	91 e0       	ldi	r25, 0x01	; 1
    18d6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:568
    displayVar(enc, 0);
  } else {
    display("IHu", 0);
    18da:	6c e3       	ldi	r22, 0x3C	; 60
    18dc:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:565
}

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    18de:	88 23       	and	r24, r24
    18e0:	51 f3       	breq	.-44     	; 0x18b6 <main+0x6c2>
    18e2:	0e 94 d5 05 	call	0xbaa	; 0xbaa <menuIHV() [clone .part.8]>
loop():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:241
  if(mode){
    runSetup();
  } else {
    runNormal();
  }
  if(read(ok) && read(plus) && read(minus) && switched == false){
    18e6:	8d e0       	ldi	r24, 0x0D	; 13
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    18ee:	88 23       	and	r24, r24
    18f0:	d9 f0       	breq	.+54     	; 0x1928 <main+0x734>
    18f2:	8f e0       	ldi	r24, 0x0F	; 15
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    18fa:	88 23       	and	r24, r24
    18fc:	a9 f0       	breq	.+42     	; 0x1928 <main+0x734>
    18fe:	8e e0       	ldi	r24, 0x0E	; 14
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    1906:	88 23       	and	r24, r24
    1908:	79 f0       	breq	.+30     	; 0x1928 <main+0x734>
    190a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <switched>
    190e:	81 11       	cpse	r24, r1
    1910:	0b c0       	rjmp	.+22     	; 0x1928 <main+0x734>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:242
    mode = !mode;
    1912:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <mode>
    1916:	8f 25       	eor	r24, r15
    1918:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <mode>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:243
    switched = true;
    191c:	e0 92 1b 02 	sts	0x021B, r14	; 0x80021b <switched>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:244
    encMenu = 0;
    1920:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <encMenu+0x1>
    1924:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <encMenu>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:246
  }
  if(!read(ok) && !read(plus) && !read(minus) && switched == true){
    1928:	8d e0       	ldi	r24, 0x0D	; 13
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    1930:	81 11       	cpse	r24, r1
    1932:	11 c0       	rjmp	.+34     	; 0x1956 <main+0x762>
    1934:	8f e0       	ldi	r24, 0x0F	; 15
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    193c:	81 11       	cpse	r24, r1
    193e:	0b c0       	rjmp	.+22     	; 0x1956 <main+0x762>
    1940:	8e e0       	ldi	r24, 0x0E	; 14
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 39 04 	call	0x872	; 0x872 <read(int)>
    1948:	81 11       	cpse	r24, r1
    194a:	05 c0       	rjmp	.+10     	; 0x1956 <main+0x762>
    194c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <switched>
    1950:	81 11       	cpse	r24, r1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:247
    switched = false;
    1952:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <switched>
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    1956:	01 15       	cp	r16, r1
    1958:	11 05       	cpc	r17, r1
    195a:	09 f4       	brne	.+2      	; 0x195e <main+0x76a>
    195c:	e4 cd       	rjmp	.-1080   	; 0x1526 <main+0x332>
    195e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1962:	e1 cd       	rjmp	.-1086   	; 0x1526 <main+0x332>
menuILV():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:575
}

//Setup Input low Voltage

void menuILV() {
  if(refresh.triggered(false)){
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	81 e9       	ldi	r24, 0x91	; 145
    1968:	91 e0       	ldi	r25, 0x01	; 1
    196a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:578
    displayVar(enc, 0);
  } else {
    display("ILu", 0);
    196e:	60 e4       	ldi	r22, 0x40	; 64
    1970:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:575
}

//Setup Input low Voltage

void menuILV() {
  if(refresh.triggered(false)){
    1972:	88 23       	and	r24, r24
    1974:	09 f4       	brne	.+2      	; 0x1978 <main+0x784>
    1976:	9f cf       	rjmp	.-194    	; 0x18b6 <main+0x6c2>
    1978:	0e 94 d5 05 	call	0xbaa	; 0xbaa <menuIHV() [clone .part.8]>
    197c:	b4 cf       	rjmp	.-152    	; 0x18e6 <main+0x6f2>
menuOHV():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:585
}

//Setup Output High Voltage

void menuOHV() {
  if(refresh.triggered(false)){
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	81 e9       	ldi	r24, 0x91	; 145
    1982:	91 e0       	ldi	r25, 0x01	; 1
    1984:	0e 94 ee 03 	call	0x7dc	; 0x7dc <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:588
    displayVar(enc, 0);
  } else {
    display("OHu", 0);
    1988:	64 e4       	ldi	r22, 0x44	; 68
    198a:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:585
}

//Setup Output High Voltage

void menuOHV() {
  if(refresh.triggered(false)){
    198c:	88 23       	and	r24, r24
    198e:	09 f4       	brne	.+2      	; 0x1992 <main+0x79e>
    1990:	92 cf       	rjmp	.-220    	; 0x18b6 <main+0x6c2>
    1992:	0e 94 d5 05 	call	0xbaa	; 0xbaa <menuIHV() [clone .part.8]>
    1996:	a7 cf       	rjmp	.-178    	; 0x18e6 <main+0x6f2>
menuOLV():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:595
}

//Setup Output Low Voltage

void menuOLV() {
  if(refresh.triggered(false)){
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	81 e9       	ldi	r24, 0x91	; 145
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:598
    displayVar(enc, 0);
  } else {
    display("OLu", 0);
    19a2:	68 e4       	ldi	r22, 0x48	; 72
    19a4:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:595
}

//Setup Output Low Voltage

void menuOLV() {
  if(refresh.triggered(false)){
    19a6:	88 23       	and	r24, r24
    19a8:	09 f4       	brne	.+2      	; 0x19ac <main+0x7b8>
    19aa:	85 cf       	rjmp	.-246    	; 0x18b6 <main+0x6c2>
    19ac:	0e 94 d5 05 	call	0xbaa	; 0xbaa <menuIHV() [clone .part.8]>
    19b0:	9a cf       	rjmp	.-204    	; 0x18e6 <main+0x6f2>
menuSETV():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:605
}

//Setup Set Voltage

void menuSETV() {
  if(refresh.triggered(false)){
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	81 e9       	ldi	r24, 0x91	; 145
    19b6:	91 e0       	ldi	r25, 0x01	; 1
    19b8:	0e 94 ee 03 	call	0x7dc	; 0x7dc <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:608
    displayVar(enc, 0);
  } else {
    display("SETu", 0);
    19bc:	6c e4       	ldi	r22, 0x4C	; 76
    19be:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:605
}

//Setup Set Voltage

void menuSETV() {
  if(refresh.triggered(false)){
    19c0:	88 23       	and	r24, r24
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <main+0x7d2>
    19c4:	78 cf       	rjmp	.-272    	; 0x18b6 <main+0x6c2>
    19c6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <menuIHV() [clone .part.8]>
    19ca:	8d cf       	rjmp	.-230    	; 0x18e6 <main+0x6f2>
menuOVL():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:615
}

//Setup Overload

void menuOVL() {
  if(refresh.triggered(false)){
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	81 e9       	ldi	r24, 0x91	; 145
    19d0:	91 e0       	ldi	r25, 0x01	; 1
    19d2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:618
    displayVar(enc, 0);
  } else {
    display("OuL", 0);
    19d6:	61 e5       	ldi	r22, 0x51	; 81
    19d8:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:615
}

//Setup Overload

void menuOVL() {
  if(refresh.triggered(false)){
    19da:	88 23       	and	r24, r24
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <main+0x7ec>
    19de:	6b cf       	rjmp	.-298    	; 0x18b6 <main+0x6c2>
    19e0:	0e 94 d5 05 	call	0xbaa	; 0xbaa <menuIHV() [clone .part.8]>
    19e4:	80 cf       	rjmp	.-256    	; 0x18e6 <main+0x6f2>
menuTON():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:625
}

//Setup Waiting time for Output Relay to turn on

void menuTON() {
  if(refresh.triggered(false)){
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	81 e9       	ldi	r24, 0x91	; 145
    19ea:	91 e0       	ldi	r25, 0x01	; 1
    19ec:	0e 94 ee 03 	call	0x7dc	; 0x7dc <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:628
    displayVar(enc, 0);
  } else {
    display("tOn", 0);
    19f0:	65 e5       	ldi	r22, 0x55	; 85
    19f2:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:625
}

//Setup Waiting time for Output Relay to turn on

void menuTON() {
  if(refresh.triggered(false)){
    19f4:	88 23       	and	r24, r24
    19f6:	09 f4       	brne	.+2      	; 0x19fa <main+0x806>
    19f8:	5e cf       	rjmp	.-324    	; 0x18b6 <main+0x6c2>
    19fa:	0e 94 d5 05 	call	0xbaa	; 0xbaa <menuIHV() [clone .part.8]>
    19fe:	73 cf       	rjmp	.-282    	; 0x18e6 <main+0x6f2>
menuTOFF():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:635
}

//Setup Waiting time for Output Relay to turn off

void menuTOFF() {
  if(refresh.triggered(false)){
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	81 e9       	ldi	r24, 0x91	; 145
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	0e 94 ee 03 	call	0x7dc	; 0x7dc <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:638
    displayVar(enc, 0);
  } else {
    display("tOFF", 0);
    1a0a:	69 e5       	ldi	r22, 0x59	; 89
    1a0c:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:635
}

//Setup Waiting time for Output Relay to turn off

void menuTOFF() {
  if(refresh.triggered(false)){
    1a0e:	88 23       	and	r24, r24
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <main+0x820>
    1a12:	51 cf       	rjmp	.-350    	; 0x18b6 <main+0x6c2>
    1a14:	0e 94 d5 05 	call	0xbaa	; 0xbaa <menuIHV() [clone .part.8]>
    1a18:	66 cf       	rjmp	.-308    	; 0x18e6 <main+0x6f2>
menuDIFF():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:645
}

//setup voltage difference from set voltage to move motor

void menuDIFF() {
  if(refresh.triggered(false)){
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	81 e9       	ldi	r24, 0x91	; 145
    1a1e:	91 e0       	ldi	r25, 0x01	; 1
    1a20:	0e 94 ee 03 	call	0x7dc	; 0x7dc <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:648
    displayVar(enc, 0);
  } else {
    display("dIFF", 0);
    1a24:	6e e5       	ldi	r22, 0x5E	; 94
    1a26:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:645
}

//setup voltage difference from set voltage to move motor

void menuDIFF() {
  if(refresh.triggered(false)){
    1a28:	88 23       	and	r24, r24
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <main+0x83a>
    1a2c:	44 cf       	rjmp	.-376    	; 0x18b6 <main+0x6c2>
    1a2e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <menuIHV() [clone .part.8]>
    1a32:	59 cf       	rjmp	.-334    	; 0x18e6 <main+0x6f2>
menuEND():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:653
    display("dIFF", 0);
  }
}

void menuEND() {
  display("End", 0);
    1a34:	63 e6       	ldi	r22, 0x63	; 99
    1a36:	71 e0       	ldi	r23, 0x01	; 1
    1a38:	3e cf       	rjmp	.-388    	; 0x18b6 <main+0x6c2>
runSetup():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:698
    break;
  case 10:
    menuEND();
    break;
  default:
    encMenu = 0;
    1a3a:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <encMenu+0x1>
    1a3e:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <encMenu>
    1a42:	51 cf       	rjmp	.-350    	; 0x18e6 <main+0x6f2>
runNormal():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:309
}

//Run Mode

void runNormal() {
  if(checkin.triggered()){
    1a44:	61 e0       	ldi	r22, 0x01	; 1
    1a46:	88 ef       	ldi	r24, 0xF8	; 248
    1a48:	91 e0       	ldi	r25, 0x01	; 1
    1a4a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <BlockNot::triggered(bool)>
    1a4e:	88 23       	and	r24, r24
    1a50:	31 f0       	breq	.+12     	; 0x1a5e <main+0x86a>
checkinputs():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:518
/////////////////////////////////////////////////////////////////


//update inputs once based on highest voltage...
void checkinputs() {
  IVo();
    1a52:	0e 94 de 04 	call	0x9bc	; 0x9bc <IVo()>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:519
  OVo();
    1a56:	0e 94 9f 04 	call	0x93e	; 0x93e <OVo()>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:520
  ampo();
    1a5a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ampo()>
runNormal():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:318
    //ampo();                   //
    ////////////////////////////// No Longer Used...!
    checkinputs();
  }
  //digitalWrite(motor0Rev, HIGH);
  if(outvoltage < SETV && diffcheck() && inputVok() && currentok()){
    1a5e:	a0 90 f6 01 	lds	r10, 0x01F6	; 0x8001f6 <outvoltage>
    1a62:	b0 90 f7 01 	lds	r11, 0x01F7	; 0x8001f7 <outvoltage+0x1>
    1a66:	c0 90 f4 01 	lds	r12, 0x01F4	; 0x8001f4 <SETV>
    1a6a:	d0 90 f5 01 	lds	r13, 0x01F5	; 0x8001f5 <SETV+0x1>
    1a6e:	ac 14       	cp	r10, r12
    1a70:	bd 04       	cpc	r11, r13
    1a72:	94 f4       	brge	.+36     	; 0x1a98 <main+0x8a4>
    1a74:	0e 94 1d 05 	call	0xa3a	; 0xa3a <diffcheck()>
    1a78:	88 23       	and	r24, r24
    1a7a:	71 f0       	breq	.+28     	; 0x1a98 <main+0x8a4>
    1a7c:	0e 94 59 05 	call	0xab2	; 0xab2 <inputVok()>
    1a80:	88 23       	and	r24, r24
    1a82:	51 f0       	breq	.+20     	; 0x1a98 <main+0x8a4>
    1a84:	0e 94 36 05 	call	0xa6c	; 0xa6c <currentok()>
    1a88:	88 23       	and	r24, r24
    1a8a:	31 f0       	breq	.+12     	; 0x1a98 <main+0x8a4>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:319
    digitalWrite(motor0Fwd, HIGH);
    1a8c:	61 e0       	ldi	r22, 0x01	; 1
    1a8e:	8c e0       	ldi	r24, 0x0C	; 12
    1a90:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:326
    digitalWrite(motor0Fwd, LOW);
  }
  if(outvoltage > SETV && diffcheck() && inputVok() && currentok()){
    digitalWrite(motor0Rev, HIGH);
  } else {
    digitalWrite(motor0Rev, LOW);
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	14 c0       	rjmp	.+40     	; 0x1ac0 <main+0x8cc>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:321
  }
  //digitalWrite(motor0Rev, HIGH);
  if(outvoltage < SETV && diffcheck() && inputVok() && currentok()){
    digitalWrite(motor0Fwd, HIGH);
  } else {
    digitalWrite(motor0Fwd, LOW);
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	8c e0       	ldi	r24, 0x0C	; 12
    1a9c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:323
  }
  if(outvoltage > SETV && diffcheck() && inputVok() && currentok()){
    1aa0:	ca 14       	cp	r12, r10
    1aa2:	db 04       	cpc	r13, r11
    1aa4:	bc f7       	brge	.-18     	; 0x1a94 <main+0x8a0>
    1aa6:	0e 94 1d 05 	call	0xa3a	; 0xa3a <diffcheck()>
    1aaa:	88 23       	and	r24, r24
    1aac:	99 f3       	breq	.-26     	; 0x1a94 <main+0x8a0>
    1aae:	0e 94 59 05 	call	0xab2	; 0xab2 <inputVok()>
    1ab2:	88 23       	and	r24, r24
    1ab4:	79 f3       	breq	.-34     	; 0x1a94 <main+0x8a0>
    1ab6:	0e 94 36 05 	call	0xa6c	; 0xa6c <currentok()>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:324
    digitalWrite(motor0Rev, HIGH);
    1aba:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:323
  if(outvoltage < SETV && diffcheck() && inputVok() && currentok()){
    digitalWrite(motor0Fwd, HIGH);
  } else {
    digitalWrite(motor0Fwd, LOW);
  }
  if(outvoltage > SETV && diffcheck() && inputVok() && currentok()){
    1abc:	88 23       	and	r24, r24
    1abe:	51 f3       	breq	.-44     	; 0x1a94 <main+0x8a0>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:324
    digitalWrite(motor0Rev, HIGH);
    1ac0:	8b e0       	ldi	r24, 0x0B	; 11
    1ac2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:329
  } else {
    digitalWrite(motor0Rev, LOW);
  }

  if(checksystem()){
    1ac6:	0e 94 6e 05 	call	0xadc	; 0xadc <checksystem()>
    1aca:	88 23       	and	r24, r24
    1acc:	c1 f0       	breq	.+48     	; 0x1afe <main+0x90a>
updateScreenData():
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	0e 94 f7 06 	call	0xdee	; 0xdee <updateScreenData(bool) [clone .part.7]>
updatePower():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:354
}

//Control Output Supply Relay

void updatePower() {
  if(checksystem()){
    1ad4:	0e 94 6e 05 	call	0xadc	; 0xadc <checksystem()>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:355
    if(on.triggered(false)){  
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:354
}

//Control Output Supply Relay

void updatePower() {
  if(checksystem()){
    1ada:	88 23       	and	r24, r24
    1adc:	91 f0       	breq	.+36     	; 0x1b02 <main+0x90e>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:355
    if(on.triggered(false)){  
    1ade:	83 ed       	ldi	r24, 0xD3	; 211
    1ae0:	91 e0       	ldi	r25, 0x01	; 1
    1ae2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <BlockNot::triggered(bool)>
    1ae6:	88 23       	and	r24, r24
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <main+0x8f8>
    1aea:	fd ce       	rjmp	.-518    	; 0x18e6 <main+0x6f2>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:356
      digitalWrite(power, HIGH);
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	8a e0       	ldi	r24, 0x0A	; 10
    1af0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:357
      off.reset();
    1af4:	82 eb       	ldi	r24, 0xB2	; 178
    1af6:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:363
    }
  }
  else {
    if(off.triggered(false)) {
      digitalWrite(power, LOW);
      on.reset();
    1af8:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.18]>
    1afc:	f4 ce       	rjmp	.-536    	; 0x18e6 <main+0x6f2>
updateScreenData():
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	e7 cf       	rjmp	.-50     	; 0x1ad0 <main+0x8dc>
updatePower():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:361
      digitalWrite(power, HIGH);
      off.reset();
    }
  }
  else {
    if(off.triggered(false)) {
    1b02:	82 eb       	ldi	r24, 0xB2	; 178
    1b04:	91 e0       	ldi	r25, 0x01	; 1
    1b06:	0e 94 ee 03 	call	0x7dc	; 0x7dc <BlockNot::triggered(bool)>
    1b0a:	88 23       	and	r24, r24
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <main+0x91c>
    1b0e:	eb ce       	rjmp	.-554    	; 0x18e6 <main+0x6f2>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:362
      digitalWrite(power, LOW);
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	8a e0       	ldi	r24, 0x0A	; 10
    1b14:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:363
      on.reset();
    1b18:	83 ed       	ldi	r24, 0xD3	; 211
    1b1a:	91 e0       	ldi	r25, 0x01	; 1
    1b1c:	ed cf       	rjmp	.-38     	; 0x1af8 <main+0x904>

00001b1e <_GLOBAL__sub_I_display1>:
_GLOBAL__sub_I_display1():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:893
  int numberOfDigits = 4; 

  display1.Begin(displayType, numberOfDigits, digit1, digit2, digit3, digit4, segA, segB, segC, segD, segE, segF, segG, segDP);
  
  display1.SetBrightness(100); 
}
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
__base_ctor ():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/SevSeg.cpp:67
#include "SevSeg.h"

SevSeg::SevSeg()
{
  //Initial values
  DecAposColon = 0; //This variable tracks the decimal place, apostrophe, and colon (if the display has support)
    1b22:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <display1+0x48>
__static_initialization_and_destruction_0():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:94
#define power PIN_PB2

//Intialize the SevenSegament Display
SevSeg display1;
//Timer that updates Main screen every Second.
BlockNot refresh(1, SECONDS);
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	81 e9       	ldi	r24, 0x91	; 145
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	0e 94 5f 03 	call	0x6be	; 0x6be <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]>
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:34
BlockNot::BlockNot() {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    if (global == GLOBAL_RESET) addToTimerList();
}

BlockNot::BlockNot(unsigned long time) {
    1b36:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <checkin+0x4>
    1b3a:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <checkin+0x5>
    1b3e:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <checkin+0x6>
    1b42:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <checkin+0x7>
    1b46:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <checkin+0x8>
    1b4a:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <checkin+0x9>
    1b4e:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <checkin+0xa>
    1b52:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <checkin+0xb>
    1b56:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <checkin+0xc>
    1b5a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <checkin+0xd>
    1b5e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <checkin+0xe>
    1b62:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <checkin+0xf>
    1b66:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <checkin+0x11>
    1b6a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <checkin+0x10>
    1b6e:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <checkin+0x12>
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <checkin+0x14>
    1b7a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <checkin+0x13>
    1b7e:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <checkin+0x1e>
    1b82:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <checkin+0x1d>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:35
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    1b86:	c0 91 6b 02 	lds	r28, 0x026B	; 0x80026b <BlockNot::global>
    1b8a:	d0 91 6c 02 	lds	r29, 0x026C	; 0x80026c <BlockNot::global+0x1>
    1b8e:	c1 30       	cpi	r28, 0x01	; 1
    1b90:	d1 05       	cpc	r29, r1
    1b92:	11 f0       	breq	.+4      	; 0x1b98 <_GLOBAL__sub_I_display1+0x7a>
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <BlockNot::global+0x1>
    1b9c:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <BlockNot::global>
_ZN8BlockNot5cTime7milli_taSEd():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:197

        class milli_t {
            double seconds;
        public:
            milli_t &operator=(double ms) {
                seconds = ms * .001;
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	a0 e8       	ldi	r26, 0x80	; 128
    1ba6:	be e3       	ldi	r27, 0x3E	; 62
    1ba8:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <checkin+0x15>
    1bac:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <checkin+0x16>
    1bb0:	a0 93 0f 02 	sts	0x020F, r26	; 0x80020f <checkin+0x17>
    1bb4:	b0 93 10 02 	sts	0x0210, r27	; 0x800210 <checkin+0x18>
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:37
    initDuration(time);
    reset();
    1bb8:	88 ef       	ldi	r24, 0xF8	; 248
    1bba:	91 e0       	ldi	r25, 0x01	; 1
    1bbc:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:38
    if (global == GLOBAL_RESET) addToTimerList();
    1bc0:	21 97       	sbiw	r28, 0x01	; 1
    1bc2:	21 f0       	breq	.+8      	; 0x1bcc <_GLOBAL__sub_I_display1+0xae>
    1bc4:	88 ef       	ldi	r24, 0xF8	; 248
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	0e 94 dd 08 	call	0x11ba	; 0x11ba <BlockNot::addToTimerList()>
__static_initialization_and_destruction_0():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:146
/**/
bool mode = false;
bool switched = false;
/**/

BlockNot on(TON, SECONDS);
    1bcc:	40 91 80 01 	lds	r20, 0x0180	; 0x800180 <TON>
    1bd0:	50 91 81 01 	lds	r21, 0x0181	; 0x800181 <TON+0x1>
    1bd4:	05 2e       	mov	r0, r21
    1bd6:	00 0c       	add	r0, r0
    1bd8:	66 0b       	sbc	r22, r22
    1bda:	77 0b       	sbc	r23, r23
    1bdc:	83 ed       	ldi	r24, 0xD3	; 211
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	0e 94 5f 03 	call	0x6be	; 0x6be <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]>
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:147
BlockNot off(TOFF, SECONDS);
    1be4:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <TOFF>
    1be8:	50 91 7f 01 	lds	r21, 0x017F	; 0x80017f <TOFF+0x1>
    1bec:	05 2e       	mov	r0, r21
    1bee:	00 0c       	add	r0, r0
    1bf0:	66 0b       	sbc	r22, r22
    1bf2:	77 0b       	sbc	r23, r23
    1bf4:	82 eb       	ldi	r24, 0xB2	; 178
    1bf6:	91 e0       	ldi	r25, 0x01	; 1
_GLOBAL__sub_I_display1():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:893
  int numberOfDigits = 4; 

  display1.Begin(displayType, numberOfDigits, digit1, digit2, digit3, digit4, segA, segB, segC, segD, segE, segF, segG, segDP);
  
  display1.SetBrightness(100); 
}
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
__static_initialization_and_destruction_0():
C:\Users\Admin\Desktop\servo100.003\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:147
bool mode = false;
bool switched = false;
/**/

BlockNot on(TON, SECONDS);
BlockNot off(TOFF, SECONDS);
    1bfc:	0c 94 5f 03 	jmp	0x6be	; 0x6be <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]>

00001c00 <__floatunsisf>:
__floatunsisf():
    1c00:	e8 94       	clt
    1c02:	09 c0       	rjmp	.+18     	; 0x1c16 <__floatsisf+0x12>

00001c04 <__floatsisf>:
    1c04:	97 fb       	bst	r25, 7
    1c06:	3e f4       	brtc	.+14     	; 0x1c16 <__floatsisf+0x12>
    1c08:	90 95       	com	r25
    1c0a:	80 95       	com	r24
    1c0c:	70 95       	com	r23
    1c0e:	61 95       	neg	r22
    1c10:	7f 4f       	sbci	r23, 0xFF	; 255
    1c12:	8f 4f       	sbci	r24, 0xFF	; 255
    1c14:	9f 4f       	sbci	r25, 0xFF	; 255
    1c16:	99 23       	and	r25, r25
    1c18:	a9 f0       	breq	.+42     	; 0x1c44 <__floatsisf+0x40>
    1c1a:	f9 2f       	mov	r31, r25
    1c1c:	96 e9       	ldi	r25, 0x96	; 150
    1c1e:	bb 27       	eor	r27, r27
    1c20:	93 95       	inc	r25
    1c22:	f6 95       	lsr	r31
    1c24:	87 95       	ror	r24
    1c26:	77 95       	ror	r23
    1c28:	67 95       	ror	r22
    1c2a:	b7 95       	ror	r27
    1c2c:	f1 11       	cpse	r31, r1
    1c2e:	f8 cf       	rjmp	.-16     	; 0x1c20 <__floatsisf+0x1c>
    1c30:	fa f4       	brpl	.+62     	; 0x1c70 <__floatsisf+0x6c>
    1c32:	bb 0f       	add	r27, r27
    1c34:	11 f4       	brne	.+4      	; 0x1c3a <__floatsisf+0x36>
    1c36:	60 ff       	sbrs	r22, 0
    1c38:	1b c0       	rjmp	.+54     	; 0x1c70 <__floatsisf+0x6c>
    1c3a:	6f 5f       	subi	r22, 0xFF	; 255
    1c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c40:	9f 4f       	sbci	r25, 0xFF	; 255
    1c42:	16 c0       	rjmp	.+44     	; 0x1c70 <__floatsisf+0x6c>
    1c44:	88 23       	and	r24, r24
    1c46:	11 f0       	breq	.+4      	; 0x1c4c <__floatsisf+0x48>
    1c48:	96 e9       	ldi	r25, 0x96	; 150
    1c4a:	11 c0       	rjmp	.+34     	; 0x1c6e <__floatsisf+0x6a>
    1c4c:	77 23       	and	r23, r23
    1c4e:	21 f0       	breq	.+8      	; 0x1c58 <__floatsisf+0x54>
    1c50:	9e e8       	ldi	r25, 0x8E	; 142
    1c52:	87 2f       	mov	r24, r23
    1c54:	76 2f       	mov	r23, r22
    1c56:	05 c0       	rjmp	.+10     	; 0x1c62 <__floatsisf+0x5e>
    1c58:	66 23       	and	r22, r22
    1c5a:	71 f0       	breq	.+28     	; 0x1c78 <__floatsisf+0x74>
    1c5c:	96 e8       	ldi	r25, 0x86	; 134
    1c5e:	86 2f       	mov	r24, r22
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	60 e0       	ldi	r22, 0x00	; 0
    1c64:	2a f0       	brmi	.+10     	; 0x1c70 <__floatsisf+0x6c>
    1c66:	9a 95       	dec	r25
    1c68:	66 0f       	add	r22, r22
    1c6a:	77 1f       	adc	r23, r23
    1c6c:	88 1f       	adc	r24, r24
    1c6e:	da f7       	brpl	.-10     	; 0x1c66 <__floatsisf+0x62>
    1c70:	88 0f       	add	r24, r24
    1c72:	96 95       	lsr	r25
    1c74:	87 95       	ror	r24
    1c76:	97 f9       	bld	r25, 7
    1c78:	08 95       	ret

00001c7a <__fp_cmp>:
__fp_cmp():
    1c7a:	99 0f       	add	r25, r25
    1c7c:	00 08       	sbc	r0, r0
    1c7e:	55 0f       	add	r21, r21
    1c80:	aa 0b       	sbc	r26, r26
    1c82:	e0 e8       	ldi	r30, 0x80	; 128
    1c84:	fe ef       	ldi	r31, 0xFE	; 254
    1c86:	16 16       	cp	r1, r22
    1c88:	17 06       	cpc	r1, r23
    1c8a:	e8 07       	cpc	r30, r24
    1c8c:	f9 07       	cpc	r31, r25
    1c8e:	c0 f0       	brcs	.+48     	; 0x1cc0 <__fp_cmp+0x46>
    1c90:	12 16       	cp	r1, r18
    1c92:	13 06       	cpc	r1, r19
    1c94:	e4 07       	cpc	r30, r20
    1c96:	f5 07       	cpc	r31, r21
    1c98:	98 f0       	brcs	.+38     	; 0x1cc0 <__fp_cmp+0x46>
    1c9a:	62 1b       	sub	r22, r18
    1c9c:	73 0b       	sbc	r23, r19
    1c9e:	84 0b       	sbc	r24, r20
    1ca0:	95 0b       	sbc	r25, r21
    1ca2:	39 f4       	brne	.+14     	; 0x1cb2 <__fp_cmp+0x38>
    1ca4:	0a 26       	eor	r0, r26
    1ca6:	61 f0       	breq	.+24     	; 0x1cc0 <__fp_cmp+0x46>
    1ca8:	23 2b       	or	r18, r19
    1caa:	24 2b       	or	r18, r20
    1cac:	25 2b       	or	r18, r21
    1cae:	21 f4       	brne	.+8      	; 0x1cb8 <__fp_cmp+0x3e>
    1cb0:	08 95       	ret
    1cb2:	0a 26       	eor	r0, r26
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <__fp_cmp+0x3e>
    1cb6:	a1 40       	sbci	r26, 0x01	; 1
    1cb8:	a6 95       	lsr	r26
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	81 1d       	adc	r24, r1
    1cbe:	81 1d       	adc	r24, r1
    1cc0:	08 95       	ret

00001cc2 <__mulsf3>:
__mulsf3():
    1cc2:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3x>
    1cc6:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_round>
    1cca:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fp_pscA>
    1cce:	38 f0       	brcs	.+14     	; 0x1cde <__mulsf3+0x1c>
    1cd0:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__fp_pscB>
    1cd4:	20 f0       	brcs	.+8      	; 0x1cde <__mulsf3+0x1c>
    1cd6:	95 23       	and	r25, r21
    1cd8:	11 f0       	breq	.+4      	; 0x1cde <__mulsf3+0x1c>
    1cda:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__fp_inf>
    1cde:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__fp_nan>
    1ce2:	11 24       	eor	r1, r1
    1ce4:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__fp_szero>

00001ce8 <__mulsf3x>:
__mulsf3x():
    1ce8:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__fp_split3>
    1cec:	70 f3       	brcs	.-36     	; 0x1cca <__mulsf3+0x8>

00001cee <__mulsf3_pse>:
    1cee:	95 9f       	mul	r25, r21
    1cf0:	c1 f3       	breq	.-16     	; 0x1ce2 <__mulsf3+0x20>
    1cf2:	95 0f       	add	r25, r21
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	55 1f       	adc	r21, r21
    1cf8:	62 9f       	mul	r22, r18
    1cfa:	f0 01       	movw	r30, r0
    1cfc:	72 9f       	mul	r23, r18
    1cfe:	bb 27       	eor	r27, r27
    1d00:	f0 0d       	add	r31, r0
    1d02:	b1 1d       	adc	r27, r1
    1d04:	63 9f       	mul	r22, r19
    1d06:	aa 27       	eor	r26, r26
    1d08:	f0 0d       	add	r31, r0
    1d0a:	b1 1d       	adc	r27, r1
    1d0c:	aa 1f       	adc	r26, r26
    1d0e:	64 9f       	mul	r22, r20
    1d10:	66 27       	eor	r22, r22
    1d12:	b0 0d       	add	r27, r0
    1d14:	a1 1d       	adc	r26, r1
    1d16:	66 1f       	adc	r22, r22
    1d18:	82 9f       	mul	r24, r18
    1d1a:	22 27       	eor	r18, r18
    1d1c:	b0 0d       	add	r27, r0
    1d1e:	a1 1d       	adc	r26, r1
    1d20:	62 1f       	adc	r22, r18
    1d22:	73 9f       	mul	r23, r19
    1d24:	b0 0d       	add	r27, r0
    1d26:	a1 1d       	adc	r26, r1
    1d28:	62 1f       	adc	r22, r18
    1d2a:	83 9f       	mul	r24, r19
    1d2c:	a0 0d       	add	r26, r0
    1d2e:	61 1d       	adc	r22, r1
    1d30:	22 1f       	adc	r18, r18
    1d32:	74 9f       	mul	r23, r20
    1d34:	33 27       	eor	r19, r19
    1d36:	a0 0d       	add	r26, r0
    1d38:	61 1d       	adc	r22, r1
    1d3a:	23 1f       	adc	r18, r19
    1d3c:	84 9f       	mul	r24, r20
    1d3e:	60 0d       	add	r22, r0
    1d40:	21 1d       	adc	r18, r1
    1d42:	82 2f       	mov	r24, r18
    1d44:	76 2f       	mov	r23, r22
    1d46:	6a 2f       	mov	r22, r26
    1d48:	11 24       	eor	r1, r1
    1d4a:	9f 57       	subi	r25, 0x7F	; 127
    1d4c:	50 40       	sbci	r21, 0x00	; 0
    1d4e:	9a f0       	brmi	.+38     	; 0x1d76 <__mulsf3_pse+0x88>
    1d50:	f1 f0       	breq	.+60     	; 0x1d8e <__mulsf3_pse+0xa0>
    1d52:	88 23       	and	r24, r24
    1d54:	4a f0       	brmi	.+18     	; 0x1d68 <__mulsf3_pse+0x7a>
    1d56:	ee 0f       	add	r30, r30
    1d58:	ff 1f       	adc	r31, r31
    1d5a:	bb 1f       	adc	r27, r27
    1d5c:	66 1f       	adc	r22, r22
    1d5e:	77 1f       	adc	r23, r23
    1d60:	88 1f       	adc	r24, r24
    1d62:	91 50       	subi	r25, 0x01	; 1
    1d64:	50 40       	sbci	r21, 0x00	; 0
    1d66:	a9 f7       	brne	.-22     	; 0x1d52 <__mulsf3_pse+0x64>
    1d68:	9e 3f       	cpi	r25, 0xFE	; 254
    1d6a:	51 05       	cpc	r21, r1
    1d6c:	80 f0       	brcs	.+32     	; 0x1d8e <__mulsf3_pse+0xa0>
    1d6e:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__fp_inf>
    1d72:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__fp_szero>
    1d76:	5f 3f       	cpi	r21, 0xFF	; 255
    1d78:	e4 f3       	brlt	.-8      	; 0x1d72 <__mulsf3_pse+0x84>
    1d7a:	98 3e       	cpi	r25, 0xE8	; 232
    1d7c:	d4 f3       	brlt	.-12     	; 0x1d72 <__mulsf3_pse+0x84>
    1d7e:	86 95       	lsr	r24
    1d80:	77 95       	ror	r23
    1d82:	67 95       	ror	r22
    1d84:	b7 95       	ror	r27
    1d86:	f7 95       	ror	r31
    1d88:	e7 95       	ror	r30
    1d8a:	9f 5f       	subi	r25, 0xFF	; 255
    1d8c:	c1 f7       	brne	.-16     	; 0x1d7e <__mulsf3_pse+0x90>
    1d8e:	fe 2b       	or	r31, r30
    1d90:	88 0f       	add	r24, r24
    1d92:	91 1d       	adc	r25, r1
    1d94:	96 95       	lsr	r25
    1d96:	87 95       	ror	r24
    1d98:	97 f9       	bld	r25, 7
    1d9a:	08 95       	ret

00001d9c <__fp_inf>:
    1d9c:	97 f9       	bld	r25, 7
    1d9e:	9f 67       	ori	r25, 0x7F	; 127
    1da0:	80 e8       	ldi	r24, 0x80	; 128
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	60 e0       	ldi	r22, 0x00	; 0
    1da6:	08 95       	ret

00001da8 <__fp_nan>:
    1da8:	9f ef       	ldi	r25, 0xFF	; 255
    1daa:	80 ec       	ldi	r24, 0xC0	; 192
    1dac:	08 95       	ret

00001dae <__fp_pscA>:
    1dae:	00 24       	eor	r0, r0
    1db0:	0a 94       	dec	r0
    1db2:	16 16       	cp	r1, r22
    1db4:	17 06       	cpc	r1, r23
    1db6:	18 06       	cpc	r1, r24
    1db8:	09 06       	cpc	r0, r25
__fp_pscA():
    1dba:	08 95       	ret

00001dbc <__fp_pscB>:
__fp_pscB():
    1dbc:	00 24       	eor	r0, r0
    1dbe:	0a 94       	dec	r0
    1dc0:	12 16       	cp	r1, r18
    1dc2:	13 06       	cpc	r1, r19
    1dc4:	14 06       	cpc	r1, r20
    1dc6:	05 06       	cpc	r0, r21
    1dc8:	08 95       	ret

00001dca <__fp_round>:
__fp_round():
    1dca:	09 2e       	mov	r0, r25
    1dcc:	03 94       	inc	r0
    1dce:	00 0c       	add	r0, r0
    1dd0:	11 f4       	brne	.+4      	; 0x1dd6 <__fp_round+0xc>
    1dd2:	88 23       	and	r24, r24
    1dd4:	52 f0       	brmi	.+20     	; 0x1dea <__fp_round+0x20>
    1dd6:	bb 0f       	add	r27, r27
    1dd8:	40 f4       	brcc	.+16     	; 0x1dea <__fp_round+0x20>
    1dda:	bf 2b       	or	r27, r31
    1ddc:	11 f4       	brne	.+4      	; 0x1de2 <__fp_round+0x18>
    1dde:	60 ff       	sbrs	r22, 0
    1de0:	04 c0       	rjmp	.+8      	; 0x1dea <__fp_round+0x20>
    1de2:	6f 5f       	subi	r22, 0xFF	; 255
    1de4:	7f 4f       	sbci	r23, 0xFF	; 255
    1de6:	8f 4f       	sbci	r24, 0xFF	; 255
    1de8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dea:	08 95       	ret

00001dec <__fp_split3>:
__fp_split3():
    1dec:	57 fd       	sbrc	r21, 7
    1dee:	90 58       	subi	r25, 0x80	; 128
    1df0:	44 0f       	add	r20, r20
    1df2:	55 1f       	adc	r21, r21
    1df4:	59 f0       	breq	.+22     	; 0x1e0c <__fp_splitA+0x10>
    1df6:	5f 3f       	cpi	r21, 0xFF	; 255
    1df8:	71 f0       	breq	.+28     	; 0x1e16 <__fp_splitA+0x1a>
    1dfa:	47 95       	ror	r20

00001dfc <__fp_splitA>:
    1dfc:	88 0f       	add	r24, r24
    1dfe:	97 fb       	bst	r25, 7
    1e00:	99 1f       	adc	r25, r25
    1e02:	61 f0       	breq	.+24     	; 0x1e1c <__fp_splitA+0x20>
    1e04:	9f 3f       	cpi	r25, 0xFF	; 255
    1e06:	79 f0       	breq	.+30     	; 0x1e26 <__fp_splitA+0x2a>
    1e08:	87 95       	ror	r24
    1e0a:	08 95       	ret
    1e0c:	12 16       	cp	r1, r18
    1e0e:	13 06       	cpc	r1, r19
    1e10:	14 06       	cpc	r1, r20
    1e12:	55 1f       	adc	r21, r21
    1e14:	f2 cf       	rjmp	.-28     	; 0x1dfa <__fp_split3+0xe>
    1e16:	46 95       	lsr	r20
    1e18:	f1 df       	rcall	.-30     	; 0x1dfc <__fp_splitA>
    1e1a:	08 c0       	rjmp	.+16     	; 0x1e2c <__fp_splitA+0x30>
    1e1c:	16 16       	cp	r1, r22
    1e1e:	17 06       	cpc	r1, r23
    1e20:	18 06       	cpc	r1, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	f1 cf       	rjmp	.-30     	; 0x1e08 <__fp_splitA+0xc>
    1e26:	86 95       	lsr	r24
    1e28:	71 05       	cpc	r23, r1
    1e2a:	61 05       	cpc	r22, r1
    1e2c:	08 94       	sec
    1e2e:	08 95       	ret

00001e30 <__fp_zero>:
__fp_zero():
    1e30:	e8 94       	clt

00001e32 <__fp_szero>:
    1e32:	bb 27       	eor	r27, r27
    1e34:	66 27       	eor	r22, r22
    1e36:	77 27       	eor	r23, r23
    1e38:	cb 01       	movw	r24, r22
    1e3a:	97 f9       	bld	r25, 7
    1e3c:	08 95       	ret

00001e3e <eeprom_read_byte>:
eeprom_read_byte():
    1e3e:	f9 99       	sbic	0x1f, 1	; 31
    1e40:	fe cf       	rjmp	.-4      	; 0x1e3e <eeprom_read_byte>
    1e42:	92 bd       	out	0x22, r25	; 34
    1e44:	81 bd       	out	0x21, r24	; 33
    1e46:	f8 9a       	sbi	0x1f, 0	; 31
    1e48:	99 27       	eor	r25, r25
    1e4a:	80 b5       	in	r24, 0x20	; 32
    1e4c:	08 95       	ret

00001e4e <eeprom_write_byte>:
eeprom_write_byte():
    1e4e:	26 2f       	mov	r18, r22

00001e50 <eeprom_write_r18>:
    1e50:	f9 99       	sbic	0x1f, 1	; 31
    1e52:	fe cf       	rjmp	.-4      	; 0x1e50 <eeprom_write_r18>
    1e54:	1f ba       	out	0x1f, r1	; 31
    1e56:	92 bd       	out	0x22, r25	; 34
    1e58:	81 bd       	out	0x21, r24	; 33
    1e5a:	20 bd       	out	0x20, r18	; 32
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	fa 9a       	sbi	0x1f, 2	; 31
    1e62:	f9 9a       	sbi	0x1f, 1	; 31
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	08 95       	ret

00001e6a <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    1e6a:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    1e6c:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    1e6e:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    1e70:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    1e72:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    1e74:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    1e76:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    1e78:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    1e7a:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    1e7c:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    1e7e:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    1e80:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    1e82:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    1e84:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    1e86:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    1e88:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    1e8a:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1e8c:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    1e8e:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    1e90:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    1e92:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    1e94:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    1e96:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    1e98:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    1e9a:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    1e9c:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    1e9e:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    1ea0:	09 94       	ijmp

00001ea2 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    1ea2:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    1ea4:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    1ea6:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    1ea8:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    1eaa:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    1eac:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    1eae:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    1eb0:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    1eb2:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    1eb4:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    1eb6:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    1eb8:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    1eba:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    1ebc:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    1ebe:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    1ec0:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    1ec2:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    1ec4:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    1ec6:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    1ec8:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    1eca:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    1ecc:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    1ece:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    1ed0:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    1ed2:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    1ed4:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    1ed6:	08 95       	ret

00001ed8 <__divsf3>:
__divsf3():
    1ed8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__divsf3x>
    1edc:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_round>
    1ee0:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__fp_pscB>
    1ee4:	58 f0       	brcs	.+22     	; 0x1efc <__divsf3+0x24>
    1ee6:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fp_pscA>
    1eea:	40 f0       	brcs	.+16     	; 0x1efc <__divsf3+0x24>
    1eec:	29 f4       	brne	.+10     	; 0x1ef8 <__divsf3+0x20>
    1eee:	5f 3f       	cpi	r21, 0xFF	; 255
    1ef0:	29 f0       	breq	.+10     	; 0x1efc <__divsf3+0x24>
    1ef2:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__fp_inf>
    1ef6:	51 11       	cpse	r21, r1
    1ef8:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__fp_szero>
    1efc:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__fp_nan>

00001f00 <__divsf3x>:
__divsf3x():
    1f00:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__fp_split3>
    1f04:	68 f3       	brcs	.-38     	; 0x1ee0 <__divsf3+0x8>

00001f06 <__divsf3_pse>:
    1f06:	99 23       	and	r25, r25
    1f08:	b1 f3       	breq	.-20     	; 0x1ef6 <__divsf3+0x1e>
    1f0a:	55 23       	and	r21, r21
    1f0c:	91 f3       	breq	.-28     	; 0x1ef2 <__divsf3+0x1a>
    1f0e:	95 1b       	sub	r25, r21
    1f10:	55 0b       	sbc	r21, r21
    1f12:	bb 27       	eor	r27, r27
    1f14:	aa 27       	eor	r26, r26
    1f16:	62 17       	cp	r22, r18
    1f18:	73 07       	cpc	r23, r19
    1f1a:	84 07       	cpc	r24, r20
    1f1c:	38 f0       	brcs	.+14     	; 0x1f2c <__divsf3_pse+0x26>
    1f1e:	9f 5f       	subi	r25, 0xFF	; 255
    1f20:	5f 4f       	sbci	r21, 0xFF	; 255
    1f22:	22 0f       	add	r18, r18
    1f24:	33 1f       	adc	r19, r19
    1f26:	44 1f       	adc	r20, r20
    1f28:	aa 1f       	adc	r26, r26
    1f2a:	a9 f3       	breq	.-22     	; 0x1f16 <__divsf3_pse+0x10>
    1f2c:	35 d0       	rcall	.+106    	; 0x1f98 <__divsf3_pse+0x92>
    1f2e:	0e 2e       	mov	r0, r30
    1f30:	3a f0       	brmi	.+14     	; 0x1f40 <__divsf3_pse+0x3a>
    1f32:	e0 e8       	ldi	r30, 0x80	; 128
    1f34:	32 d0       	rcall	.+100    	; 0x1f9a <__divsf3_pse+0x94>
    1f36:	91 50       	subi	r25, 0x01	; 1
    1f38:	50 40       	sbci	r21, 0x00	; 0
    1f3a:	e6 95       	lsr	r30
    1f3c:	00 1c       	adc	r0, r0
    1f3e:	ca f7       	brpl	.-14     	; 0x1f32 <__divsf3_pse+0x2c>
    1f40:	2b d0       	rcall	.+86     	; 0x1f98 <__divsf3_pse+0x92>
    1f42:	fe 2f       	mov	r31, r30
    1f44:	29 d0       	rcall	.+82     	; 0x1f98 <__divsf3_pse+0x92>
    1f46:	66 0f       	add	r22, r22
    1f48:	77 1f       	adc	r23, r23
    1f4a:	88 1f       	adc	r24, r24
    1f4c:	bb 1f       	adc	r27, r27
    1f4e:	26 17       	cp	r18, r22
    1f50:	37 07       	cpc	r19, r23
    1f52:	48 07       	cpc	r20, r24
    1f54:	ab 07       	cpc	r26, r27
    1f56:	b0 e8       	ldi	r27, 0x80	; 128
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <__divsf3_pse+0x56>
    1f5a:	bb 0b       	sbc	r27, r27
    1f5c:	80 2d       	mov	r24, r0
    1f5e:	bf 01       	movw	r22, r30
    1f60:	ff 27       	eor	r31, r31
    1f62:	93 58       	subi	r25, 0x83	; 131
    1f64:	5f 4f       	sbci	r21, 0xFF	; 255
    1f66:	3a f0       	brmi	.+14     	; 0x1f76 <__divsf3_pse+0x70>
    1f68:	9e 3f       	cpi	r25, 0xFE	; 254
    1f6a:	51 05       	cpc	r21, r1
    1f6c:	78 f0       	brcs	.+30     	; 0x1f8c <__divsf3_pse+0x86>
    1f6e:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__fp_inf>
    1f72:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__fp_szero>
    1f76:	5f 3f       	cpi	r21, 0xFF	; 255
    1f78:	e4 f3       	brlt	.-8      	; 0x1f72 <__divsf3_pse+0x6c>
    1f7a:	98 3e       	cpi	r25, 0xE8	; 232
    1f7c:	d4 f3       	brlt	.-12     	; 0x1f72 <__divsf3_pse+0x6c>
    1f7e:	86 95       	lsr	r24
    1f80:	77 95       	ror	r23
    1f82:	67 95       	ror	r22
    1f84:	b7 95       	ror	r27
    1f86:	f7 95       	ror	r31
    1f88:	9f 5f       	subi	r25, 0xFF	; 255
    1f8a:	c9 f7       	brne	.-14     	; 0x1f7e <__divsf3_pse+0x78>
    1f8c:	88 0f       	add	r24, r24
    1f8e:	91 1d       	adc	r25, r1
    1f90:	96 95       	lsr	r25
    1f92:	87 95       	ror	r24
    1f94:	97 f9       	bld	r25, 7
    1f96:	08 95       	ret
    1f98:	e1 e0       	ldi	r30, 0x01	; 1
    1f9a:	66 0f       	add	r22, r22
    1f9c:	77 1f       	adc	r23, r23
    1f9e:	88 1f       	adc	r24, r24
    1fa0:	bb 1f       	adc	r27, r27
    1fa2:	62 17       	cp	r22, r18
    1fa4:	73 07       	cpc	r23, r19
    1fa6:	84 07       	cpc	r24, r20
    1fa8:	ba 07       	cpc	r27, r26
    1faa:	20 f0       	brcs	.+8      	; 0x1fb4 <__divsf3_pse+0xae>
    1fac:	62 1b       	sub	r22, r18
    1fae:	73 0b       	sbc	r23, r19
    1fb0:	84 0b       	sbc	r24, r20
    1fb2:	ba 0b       	sbc	r27, r26
    1fb4:	ee 1f       	adc	r30, r30
    1fb6:	88 f7       	brcc	.-30     	; 0x1f9a <__divsf3_pse+0x94>
    1fb8:	e0 95       	com	r30
    1fba:	08 95       	ret

00001fbc <__fixsfsi>:
    1fbc:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__fixunssfsi>
    1fc0:	68 94       	set
    1fc2:	b1 11       	cpse	r27, r1
    1fc4:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__fp_szero>
    1fc8:	08 95       	ret

00001fca <__fixunssfsi>:
    1fca:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__fp_splitA>
    1fce:	88 f0       	brcs	.+34     	; 0x1ff2 <__fixunssfsi+0x28>
    1fd0:	9f 57       	subi	r25, 0x7F	; 127
    1fd2:	98 f0       	brcs	.+38     	; 0x1ffa <__fixunssfsi+0x30>
    1fd4:	b9 2f       	mov	r27, r25
    1fd6:	99 27       	eor	r25, r25
    1fd8:	b7 51       	subi	r27, 0x17	; 23
    1fda:	b0 f0       	brcs	.+44     	; 0x2008 <__fixunssfsi+0x3e>
__fixunssfsi():
    1fdc:	e1 f0       	breq	.+56     	; 0x2016 <__fixunssfsi+0x4c>
    1fde:	66 0f       	add	r22, r22
    1fe0:	77 1f       	adc	r23, r23
    1fe2:	88 1f       	adc	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	1a f0       	brmi	.+6      	; 0x1fee <__fixunssfsi+0x24>
    1fe8:	ba 95       	dec	r27
    1fea:	c9 f7       	brne	.-14     	; 0x1fde <__fixunssfsi+0x14>
    1fec:	14 c0       	rjmp	.+40     	; 0x2016 <__fixunssfsi+0x4c>
    1fee:	b1 30       	cpi	r27, 0x01	; 1
    1ff0:	91 f0       	breq	.+36     	; 0x2016 <__fixunssfsi+0x4c>
    1ff2:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__fp_zero>
    1ff6:	b1 e0       	ldi	r27, 0x01	; 1
    1ff8:	08 95       	ret
    1ffa:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__fp_zero>
    1ffe:	67 2f       	mov	r22, r23
    2000:	78 2f       	mov	r23, r24
    2002:	88 27       	eor	r24, r24
    2004:	b8 5f       	subi	r27, 0xF8	; 248
    2006:	39 f0       	breq	.+14     	; 0x2016 <__fixunssfsi+0x4c>
    2008:	b9 3f       	cpi	r27, 0xF9	; 249
    200a:	cc f3       	brlt	.-14     	; 0x1ffe <__fixunssfsi+0x34>
    200c:	86 95       	lsr	r24
    200e:	77 95       	ror	r23
    2010:	67 95       	ror	r22
    2012:	b3 95       	inc	r27
    2014:	d9 f7       	brne	.-10     	; 0x200c <__fixunssfsi+0x42>
    2016:	3e f4       	brtc	.+14     	; 0x2026 <__fixunssfsi+0x5c>
    2018:	90 95       	com	r25
    201a:	80 95       	com	r24
    201c:	70 95       	com	r23
    201e:	61 95       	neg	r22
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	8f 4f       	sbci	r24, 0xFF	; 255
    2024:	9f 4f       	sbci	r25, 0xFF	; 255
    2026:	08 95       	ret

00002028 <__gesf2>:
__gesf2():
    2028:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__fp_cmp>
    202c:	08 f4       	brcc	.+2      	; 0x2030 <__gesf2+0x8>
    202e:	8f ef       	ldi	r24, 0xFF	; 255
    2030:	08 95       	ret

00002032 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    2032:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    2034:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    2036:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    2038:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    203a:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    203c:	09 94       	ijmp

0000203e <malloc>:
malloc():
    203e:	0f 93       	push	r16
    2040:	1f 93       	push	r17
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	82 30       	cpi	r24, 0x02	; 2
    2048:	91 05       	cpc	r25, r1
    204a:	10 f4       	brcc	.+4      	; 0x2050 <malloc+0x12>
    204c:	82 e0       	ldi	r24, 0x02	; 2
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <__flp>
    2054:	f0 91 74 02 	lds	r31, 0x0274	; 0x800274 <__flp+0x1>
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	a0 e0       	ldi	r26, 0x00	; 0
    2060:	30 97       	sbiw	r30, 0x00	; 0
    2062:	99 f4       	brne	.+38     	; 0x208a <malloc+0x4c>
    2064:	21 15       	cp	r18, r1
    2066:	31 05       	cpc	r19, r1
    2068:	09 f4       	brne	.+2      	; 0x206c <malloc+0x2e>
    206a:	4a c0       	rjmp	.+148    	; 0x2100 <malloc+0xc2>
    206c:	28 1b       	sub	r18, r24
    206e:	39 0b       	sbc	r19, r25
    2070:	24 30       	cpi	r18, 0x04	; 4
    2072:	31 05       	cpc	r19, r1
    2074:	d8 f5       	brcc	.+118    	; 0x20ec <malloc+0xae>
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	9b 81       	ldd	r25, Y+3	; 0x03
    207a:	61 15       	cp	r22, r1
    207c:	71 05       	cpc	r23, r1
    207e:	89 f1       	breq	.+98     	; 0x20e2 <malloc+0xa4>
    2080:	fb 01       	movw	r30, r22
    2082:	93 83       	std	Z+3, r25	; 0x03
    2084:	82 83       	std	Z+2, r24	; 0x02
    2086:	fe 01       	movw	r30, r28
    2088:	11 c0       	rjmp	.+34     	; 0x20ac <malloc+0x6e>
    208a:	40 81       	ld	r20, Z
    208c:	51 81       	ldd	r21, Z+1	; 0x01
    208e:	02 81       	ldd	r16, Z+2	; 0x02
    2090:	13 81       	ldd	r17, Z+3	; 0x03
    2092:	48 17       	cp	r20, r24
    2094:	59 07       	cpc	r21, r25
    2096:	e0 f0       	brcs	.+56     	; 0x20d0 <malloc+0x92>
    2098:	48 17       	cp	r20, r24
    209a:	59 07       	cpc	r21, r25
    209c:	99 f4       	brne	.+38     	; 0x20c4 <malloc+0x86>
    209e:	10 97       	sbiw	r26, 0x00	; 0
    20a0:	61 f0       	breq	.+24     	; 0x20ba <malloc+0x7c>
    20a2:	12 96       	adiw	r26, 0x02	; 2
    20a4:	0c 93       	st	X, r16
    20a6:	12 97       	sbiw	r26, 0x02	; 2
    20a8:	13 96       	adiw	r26, 0x03	; 3
    20aa:	1c 93       	st	X, r17
    20ac:	32 96       	adiw	r30, 0x02	; 2
    20ae:	cf 01       	movw	r24, r30
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	08 95       	ret
    20ba:	00 93 73 02 	sts	0x0273, r16	; 0x800273 <__flp>
    20be:	10 93 74 02 	sts	0x0274, r17	; 0x800274 <__flp+0x1>
    20c2:	f4 cf       	rjmp	.-24     	; 0x20ac <malloc+0x6e>
    20c4:	21 15       	cp	r18, r1
    20c6:	31 05       	cpc	r19, r1
    20c8:	51 f0       	breq	.+20     	; 0x20de <malloc+0xa0>
    20ca:	42 17       	cp	r20, r18
    20cc:	53 07       	cpc	r21, r19
    20ce:	38 f0       	brcs	.+14     	; 0x20de <malloc+0xa0>
    20d0:	a9 01       	movw	r20, r18
    20d2:	db 01       	movw	r26, r22
    20d4:	9a 01       	movw	r18, r20
    20d6:	bd 01       	movw	r22, r26
    20d8:	df 01       	movw	r26, r30
    20da:	f8 01       	movw	r30, r16
    20dc:	c1 cf       	rjmp	.-126    	; 0x2060 <malloc+0x22>
    20de:	ef 01       	movw	r28, r30
    20e0:	f9 cf       	rjmp	.-14     	; 0x20d4 <malloc+0x96>
    20e2:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <__flp+0x1>
    20e6:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <__flp>
    20ea:	cd cf       	rjmp	.-102    	; 0x2086 <malloc+0x48>
    20ec:	fe 01       	movw	r30, r28
    20ee:	e2 0f       	add	r30, r18
    20f0:	f3 1f       	adc	r31, r19
    20f2:	81 93       	st	Z+, r24
    20f4:	91 93       	st	Z+, r25
    20f6:	22 50       	subi	r18, 0x02	; 2
    20f8:	31 09       	sbc	r19, r1
    20fa:	39 83       	std	Y+1, r19	; 0x01
    20fc:	28 83       	st	Y, r18
    20fe:	d7 cf       	rjmp	.-82     	; 0x20ae <malloc+0x70>
    2100:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <__brkval>
    2104:	30 91 72 02 	lds	r19, 0x0272	; 0x800272 <__brkval+0x1>
    2108:	23 2b       	or	r18, r19
    210a:	41 f4       	brne	.+16     	; 0x211c <malloc+0xde>
    210c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2110:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2114:	30 93 72 02 	sts	0x0272, r19	; 0x800272 <__brkval+0x1>
    2118:	20 93 71 02 	sts	0x0271, r18	; 0x800271 <__brkval>
    211c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2120:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2124:	21 15       	cp	r18, r1
    2126:	31 05       	cpc	r19, r1
    2128:	41 f4       	brne	.+16     	; 0x213a <malloc+0xfc>
    212a:	2d b7       	in	r18, 0x3d	; 61
    212c:	3e b7       	in	r19, 0x3e	; 62
    212e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2132:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2136:	24 1b       	sub	r18, r20
    2138:	35 0b       	sbc	r19, r21
    213a:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <__brkval>
    213e:	f0 91 72 02 	lds	r31, 0x0272	; 0x800272 <__brkval+0x1>
    2142:	e2 17       	cp	r30, r18
    2144:	f3 07       	cpc	r31, r19
    2146:	a0 f4       	brcc	.+40     	; 0x2170 <malloc+0x132>
    2148:	2e 1b       	sub	r18, r30
    214a:	3f 0b       	sbc	r19, r31
    214c:	28 17       	cp	r18, r24
    214e:	39 07       	cpc	r19, r25
    2150:	78 f0       	brcs	.+30     	; 0x2170 <malloc+0x132>
    2152:	ac 01       	movw	r20, r24
    2154:	4e 5f       	subi	r20, 0xFE	; 254
    2156:	5f 4f       	sbci	r21, 0xFF	; 255
    2158:	24 17       	cp	r18, r20
    215a:	35 07       	cpc	r19, r21
    215c:	48 f0       	brcs	.+18     	; 0x2170 <malloc+0x132>
    215e:	4e 0f       	add	r20, r30
    2160:	5f 1f       	adc	r21, r31
    2162:	50 93 72 02 	sts	0x0272, r21	; 0x800272 <__brkval+0x1>
    2166:	40 93 71 02 	sts	0x0271, r20	; 0x800271 <__brkval>
    216a:	81 93       	st	Z+, r24
    216c:	91 93       	st	Z+, r25
    216e:	9f cf       	rjmp	.-194    	; 0x20ae <malloc+0x70>
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	e0 e0       	ldi	r30, 0x00	; 0
    2174:	9c cf       	rjmp	.-200    	; 0x20ae <malloc+0x70>

00002176 <free>:
free():
    2176:	cf 93       	push	r28
    2178:	df 93       	push	r29
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	e9 f0       	breq	.+58     	; 0x21b8 <free+0x42>
    217e:	fc 01       	movw	r30, r24
    2180:	32 97       	sbiw	r30, 0x02	; 2
    2182:	13 82       	std	Z+3, r1	; 0x03
    2184:	12 82       	std	Z+2, r1	; 0x02
    2186:	a0 91 73 02 	lds	r26, 0x0273	; 0x800273 <__flp>
    218a:	b0 91 74 02 	lds	r27, 0x0274	; 0x800274 <__flp+0x1>
    218e:	ed 01       	movw	r28, r26
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	10 97       	sbiw	r26, 0x00	; 0
    2196:	a1 f4       	brne	.+40     	; 0x21c0 <free+0x4a>
    2198:	20 81       	ld	r18, Z
    219a:	31 81       	ldd	r19, Z+1	; 0x01
    219c:	82 0f       	add	r24, r18
    219e:	93 1f       	adc	r25, r19
    21a0:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <__brkval>
    21a4:	30 91 72 02 	lds	r19, 0x0272	; 0x800272 <__brkval+0x1>
    21a8:	28 17       	cp	r18, r24
    21aa:	39 07       	cpc	r19, r25
    21ac:	09 f0       	breq	.+2      	; 0x21b0 <free+0x3a>
    21ae:	61 c0       	rjmp	.+194    	; 0x2272 <free+0xfc>
    21b0:	f0 93 72 02 	sts	0x0272, r31	; 0x800272 <__brkval+0x1>
    21b4:	e0 93 71 02 	sts	0x0271, r30	; 0x800271 <__brkval>
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	08 95       	ret
    21be:	ea 01       	movw	r28, r20
    21c0:	ce 17       	cp	r28, r30
    21c2:	df 07       	cpc	r29, r31
    21c4:	e8 f5       	brcc	.+122    	; 0x2240 <free+0xca>
    21c6:	4a 81       	ldd	r20, Y+2	; 0x02
    21c8:	5b 81       	ldd	r21, Y+3	; 0x03
    21ca:	9e 01       	movw	r18, r28
    21cc:	41 15       	cp	r20, r1
    21ce:	51 05       	cpc	r21, r1
    21d0:	b1 f7       	brne	.-20     	; 0x21be <free+0x48>
    21d2:	e9 01       	movw	r28, r18
    21d4:	fb 83       	std	Y+3, r31	; 0x03
    21d6:	ea 83       	std	Y+2, r30	; 0x02
    21d8:	49 91       	ld	r20, Y+
    21da:	59 91       	ld	r21, Y+
    21dc:	c4 0f       	add	r28, r20
    21de:	d5 1f       	adc	r29, r21
    21e0:	ec 17       	cp	r30, r28
    21e2:	fd 07       	cpc	r31, r29
    21e4:	61 f4       	brne	.+24     	; 0x21fe <free+0x88>
    21e6:	80 81       	ld	r24, Z
    21e8:	91 81       	ldd	r25, Z+1	; 0x01
    21ea:	02 96       	adiw	r24, 0x02	; 2
    21ec:	84 0f       	add	r24, r20
    21ee:	95 1f       	adc	r25, r21
    21f0:	e9 01       	movw	r28, r18
    21f2:	99 83       	std	Y+1, r25	; 0x01
    21f4:	88 83       	st	Y, r24
    21f6:	82 81       	ldd	r24, Z+2	; 0x02
    21f8:	93 81       	ldd	r25, Z+3	; 0x03
    21fa:	9b 83       	std	Y+3, r25	; 0x03
    21fc:	8a 83       	std	Y+2, r24	; 0x02
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	e0 e0       	ldi	r30, 0x00	; 0
    2202:	12 96       	adiw	r26, 0x02	; 2
    2204:	8d 91       	ld	r24, X+
    2206:	9c 91       	ld	r25, X
    2208:	13 97       	sbiw	r26, 0x03	; 3
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	b9 f5       	brne	.+110    	; 0x227c <free+0x106>
    220e:	2d 91       	ld	r18, X+
    2210:	3c 91       	ld	r19, X
    2212:	11 97       	sbiw	r26, 0x01	; 1
    2214:	cd 01       	movw	r24, r26
    2216:	02 96       	adiw	r24, 0x02	; 2
    2218:	82 0f       	add	r24, r18
    221a:	93 1f       	adc	r25, r19
    221c:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <__brkval>
    2220:	30 91 72 02 	lds	r19, 0x0272	; 0x800272 <__brkval+0x1>
    2224:	28 17       	cp	r18, r24
    2226:	39 07       	cpc	r19, r25
    2228:	39 f6       	brne	.-114    	; 0x21b8 <free+0x42>
    222a:	30 97       	sbiw	r30, 0x00	; 0
    222c:	51 f5       	brne	.+84     	; 0x2282 <free+0x10c>
    222e:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <__flp+0x1>
    2232:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <__flp>
    2236:	b0 93 72 02 	sts	0x0272, r27	; 0x800272 <__brkval+0x1>
    223a:	a0 93 71 02 	sts	0x0271, r26	; 0x800271 <__brkval>
    223e:	bc cf       	rjmp	.-136    	; 0x21b8 <free+0x42>
    2240:	d3 83       	std	Z+3, r29	; 0x03
    2242:	c2 83       	std	Z+2, r28	; 0x02
    2244:	40 81       	ld	r20, Z
    2246:	51 81       	ldd	r21, Z+1	; 0x01
    2248:	84 0f       	add	r24, r20
    224a:	95 1f       	adc	r25, r21
    224c:	c8 17       	cp	r28, r24
    224e:	d9 07       	cpc	r29, r25
    2250:	61 f4       	brne	.+24     	; 0x226a <free+0xf4>
    2252:	4e 5f       	subi	r20, 0xFE	; 254
    2254:	5f 4f       	sbci	r21, 0xFF	; 255
    2256:	88 81       	ld	r24, Y
    2258:	99 81       	ldd	r25, Y+1	; 0x01
    225a:	48 0f       	add	r20, r24
    225c:	59 1f       	adc	r21, r25
    225e:	51 83       	std	Z+1, r21	; 0x01
    2260:	40 83       	st	Z, r20
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	9b 81       	ldd	r25, Y+3	; 0x03
    2266:	93 83       	std	Z+3, r25	; 0x03
    2268:	82 83       	std	Z+2, r24	; 0x02
    226a:	21 15       	cp	r18, r1
    226c:	31 05       	cpc	r19, r1
    226e:	09 f0       	breq	.+2      	; 0x2272 <free+0xfc>
    2270:	b0 cf       	rjmp	.-160    	; 0x21d2 <free+0x5c>
    2272:	f0 93 74 02 	sts	0x0274, r31	; 0x800274 <__flp+0x1>
    2276:	e0 93 73 02 	sts	0x0273, r30	; 0x800273 <__flp>
    227a:	9e cf       	rjmp	.-196    	; 0x21b8 <free+0x42>
    227c:	fd 01       	movw	r30, r26
    227e:	dc 01       	movw	r26, r24
    2280:	c0 cf       	rjmp	.-128    	; 0x2202 <free+0x8c>
    2282:	13 82       	std	Z+3, r1	; 0x03
    2284:	12 82       	std	Z+2, r1	; 0x02
    2286:	d7 cf       	rjmp	.-82     	; 0x2236 <free+0xc0>

00002288 <realloc>:
realloc():
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	a0 e0       	ldi	r26, 0x00	; 0
    228c:	ea e4       	ldi	r30, 0x4A	; 74
    228e:	f1 e1       	ldi	r31, 0x11	; 17
    2290:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__prologue_saves__+0x4>
    2294:	8c 01       	movw	r16, r24
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	51 f4       	brne	.+20     	; 0x22ae <realloc+0x26>
    229a:	cb 01       	movw	r24, r22
    229c:	0e 94 1f 10 	call	0x203e	; 0x203e <malloc>
    22a0:	8c 01       	movw	r16, r24
    22a2:	c8 01       	movw	r24, r16
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    22a8:	e0 e1       	ldi	r30, 0x10	; 16
    22aa:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__epilogue_restores__+0x4>
    22ae:	fc 01       	movw	r30, r24
    22b0:	e6 0f       	add	r30, r22
    22b2:	f7 1f       	adc	r31, r23
    22b4:	9c 01       	movw	r18, r24
    22b6:	22 50       	subi	r18, 0x02	; 2
    22b8:	31 09       	sbc	r19, r1
    22ba:	e2 17       	cp	r30, r18
    22bc:	f3 07       	cpc	r31, r19
    22be:	08 f4       	brcc	.+2      	; 0x22c2 <realloc+0x3a>
    22c0:	9d c0       	rjmp	.+314    	; 0x23fc <realloc+0x174>
    22c2:	d9 01       	movw	r26, r18
    22c4:	cd 91       	ld	r28, X+
    22c6:	dc 91       	ld	r29, X
    22c8:	11 97       	sbiw	r26, 0x01	; 1
    22ca:	c6 17       	cp	r28, r22
    22cc:	d7 07       	cpc	r29, r23
    22ce:	98 f0       	brcs	.+38     	; 0x22f6 <realloc+0x6e>
    22d0:	c5 30       	cpi	r28, 0x05	; 5
    22d2:	d1 05       	cpc	r29, r1
    22d4:	30 f3       	brcs	.-52     	; 0x22a2 <realloc+0x1a>
    22d6:	ce 01       	movw	r24, r28
    22d8:	04 97       	sbiw	r24, 0x04	; 4
    22da:	86 17       	cp	r24, r22
    22dc:	97 07       	cpc	r25, r23
    22de:	08 f3       	brcs	.-62     	; 0x22a2 <realloc+0x1a>
    22e0:	c6 1b       	sub	r28, r22
    22e2:	d7 0b       	sbc	r29, r23
    22e4:	22 97       	sbiw	r28, 0x02	; 2
    22e6:	c1 93       	st	Z+, r28
    22e8:	d1 93       	st	Z+, r29
    22ea:	6d 93       	st	X+, r22
    22ec:	7c 93       	st	X, r23
    22ee:	cf 01       	movw	r24, r30
    22f0:	0e 94 bb 10 	call	0x2176	; 0x2176 <free>
    22f4:	d6 cf       	rjmp	.-84     	; 0x22a2 <realloc+0x1a>
    22f6:	5b 01       	movw	r10, r22
    22f8:	ac 1a       	sub	r10, r28
    22fa:	bd 0a       	sbc	r11, r29
    22fc:	4c 01       	movw	r8, r24
    22fe:	8c 0e       	add	r8, r28
    2300:	9d 1e       	adc	r9, r29
    2302:	a0 91 73 02 	lds	r26, 0x0273	; 0x800273 <__flp>
    2306:	b0 91 74 02 	lds	r27, 0x0274	; 0x800274 <__flp+0x1>
    230a:	51 2c       	mov	r5, r1
    230c:	41 2c       	mov	r4, r1
    230e:	f1 2c       	mov	r15, r1
    2310:	e1 2c       	mov	r14, r1
    2312:	10 97       	sbiw	r26, 0x00	; 0
    2314:	31 f5       	brne	.+76     	; 0x2362 <realloc+0xda>
    2316:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <__brkval>
    231a:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <__brkval+0x1>
    231e:	88 15       	cp	r24, r8
    2320:	99 05       	cpc	r25, r9
    2322:	09 f0       	breq	.+2      	; 0x2326 <realloc+0x9e>
    2324:	5c c0       	rjmp	.+184    	; 0x23de <realloc+0x156>
    2326:	46 16       	cp	r4, r22
    2328:	57 06       	cpc	r5, r23
    232a:	08 f0       	brcs	.+2      	; 0x232e <realloc+0xa6>
    232c:	58 c0       	rjmp	.+176    	; 0x23de <realloc+0x156>
    232e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2332:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	41 f4       	brne	.+16     	; 0x234a <realloc+0xc2>
    233a:	8d b7       	in	r24, 0x3d	; 61
    233c:	9e b7       	in	r25, 0x3e	; 62
    233e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2342:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2346:	84 1b       	sub	r24, r20
    2348:	95 0b       	sbc	r25, r21
    234a:	e8 17       	cp	r30, r24
    234c:	f9 07       	cpc	r31, r25
    234e:	08 f0       	brcs	.+2      	; 0x2352 <realloc+0xca>
    2350:	55 c0       	rjmp	.+170    	; 0x23fc <realloc+0x174>
    2352:	f0 93 72 02 	sts	0x0272, r31	; 0x800272 <__brkval+0x1>
    2356:	e0 93 71 02 	sts	0x0271, r30	; 0x800271 <__brkval>
    235a:	f9 01       	movw	r30, r18
    235c:	71 83       	std	Z+1, r23	; 0x01
    235e:	60 83       	st	Z, r22
    2360:	a0 cf       	rjmp	.-192    	; 0x22a2 <realloc+0x1a>
    2362:	8d 91       	ld	r24, X+
    2364:	9c 91       	ld	r25, X
    2366:	11 97       	sbiw	r26, 0x01	; 1
    2368:	12 96       	adiw	r26, 0x02	; 2
    236a:	6c 90       	ld	r6, X
    236c:	12 97       	sbiw	r26, 0x02	; 2
    236e:	13 96       	adiw	r26, 0x03	; 3
    2370:	7c 90       	ld	r7, X
    2372:	13 97       	sbiw	r26, 0x03	; 3
    2374:	a8 15       	cp	r26, r8
    2376:	b9 05       	cpc	r27, r9
    2378:	59 f5       	brne	.+86     	; 0x23d0 <realloc+0x148>
    237a:	6c 01       	movw	r12, r24
    237c:	42 e0       	ldi	r20, 0x02	; 2
    237e:	c4 0e       	add	r12, r20
    2380:	d1 1c       	adc	r13, r1
    2382:	ca 14       	cp	r12, r10
    2384:	db 04       	cpc	r13, r11
    2386:	20 f1       	brcs	.+72     	; 0x23d0 <realloc+0x148>
    2388:	ac 01       	movw	r20, r24
    238a:	4a 19       	sub	r20, r10
    238c:	5b 09       	sbc	r21, r11
    238e:	da 01       	movw	r26, r20
    2390:	12 96       	adiw	r26, 0x02	; 2
    2392:	15 97       	sbiw	r26, 0x05	; 5
    2394:	80 f0       	brcs	.+32     	; 0x23b6 <realloc+0x12e>
    2396:	62 82       	std	Z+2, r6	; 0x02
    2398:	73 82       	std	Z+3, r7	; 0x03
    239a:	51 83       	std	Z+1, r21	; 0x01
    239c:	40 83       	st	Z, r20
    239e:	d9 01       	movw	r26, r18
    23a0:	6d 93       	st	X+, r22
    23a2:	7c 93       	st	X, r23
    23a4:	e1 14       	cp	r14, r1
    23a6:	f1 04       	cpc	r15, r1
    23a8:	71 f0       	breq	.+28     	; 0x23c6 <realloc+0x13e>
    23aa:	d7 01       	movw	r26, r14
    23ac:	13 96       	adiw	r26, 0x03	; 3
    23ae:	fc 93       	st	X, r31
    23b0:	ee 93       	st	-X, r30
    23b2:	12 97       	sbiw	r26, 0x02	; 2
    23b4:	76 cf       	rjmp	.-276    	; 0x22a2 <realloc+0x1a>
    23b6:	22 96       	adiw	r28, 0x02	; 2
    23b8:	8c 0f       	add	r24, r28
    23ba:	9d 1f       	adc	r25, r29
    23bc:	f9 01       	movw	r30, r18
    23be:	91 83       	std	Z+1, r25	; 0x01
    23c0:	80 83       	st	Z, r24
    23c2:	f3 01       	movw	r30, r6
    23c4:	ef cf       	rjmp	.-34     	; 0x23a4 <realloc+0x11c>
    23c6:	f0 93 74 02 	sts	0x0274, r31	; 0x800274 <__flp+0x1>
    23ca:	e0 93 73 02 	sts	0x0273, r30	; 0x800273 <__flp>
    23ce:	69 cf       	rjmp	.-302    	; 0x22a2 <realloc+0x1a>
    23d0:	48 16       	cp	r4, r24
    23d2:	59 06       	cpc	r5, r25
    23d4:	08 f4       	brcc	.+2      	; 0x23d8 <realloc+0x150>
    23d6:	2c 01       	movw	r4, r24
    23d8:	7d 01       	movw	r14, r26
    23da:	d3 01       	movw	r26, r6
    23dc:	9a cf       	rjmp	.-204    	; 0x2312 <realloc+0x8a>
    23de:	cb 01       	movw	r24, r22
    23e0:	0e 94 1f 10 	call	0x203e	; 0x203e <malloc>
    23e4:	7c 01       	movw	r14, r24
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	49 f0       	breq	.+18     	; 0x23fc <realloc+0x174>
    23ea:	ae 01       	movw	r20, r28
    23ec:	b8 01       	movw	r22, r16
    23ee:	0e 94 01 12 	call	0x2402	; 0x2402 <memcpy>
    23f2:	c8 01       	movw	r24, r16
    23f4:	0e 94 bb 10 	call	0x2176	; 0x2176 <free>
    23f8:	87 01       	movw	r16, r14
    23fa:	53 cf       	rjmp	.-346    	; 0x22a2 <realloc+0x1a>
    23fc:	10 e0       	ldi	r17, 0x00	; 0
    23fe:	00 e0       	ldi	r16, 0x00	; 0
    2400:	50 cf       	rjmp	.-352    	; 0x22a2 <realloc+0x1a>

00002402 <memcpy>:
memcpy():
    2402:	fb 01       	movw	r30, r22
    2404:	dc 01       	movw	r26, r24
    2406:	02 c0       	rjmp	.+4      	; 0x240c <memcpy+0xa>
    2408:	01 90       	ld	r0, Z+
    240a:	0d 92       	st	X+, r0
    240c:	41 50       	subi	r20, 0x01	; 1
    240e:	50 40       	sbci	r21, 0x00	; 0
    2410:	d8 f7       	brcc	.-10     	; 0x2408 <memcpy+0x6>
    2412:	08 95       	ret

00002414 <strcpy>:
strcpy():
    2414:	fb 01       	movw	r30, r22
    2416:	dc 01       	movw	r26, r24
    2418:	01 90       	ld	r0, Z+
    241a:	0d 92       	st	X+, r0
    241c:	00 20       	and	r0, r0
    241e:	e1 f7       	brne	.-8      	; 0x2418 <strcpy+0x4>
    2420:	08 95       	ret

00002422 <strncpy>:
strncpy():
    2422:	fb 01       	movw	r30, r22
    2424:	dc 01       	movw	r26, r24
    2426:	41 50       	subi	r20, 0x01	; 1
    2428:	50 40       	sbci	r21, 0x00	; 0
    242a:	48 f0       	brcs	.+18     	; 0x243e <strncpy+0x1c>
    242c:	01 90       	ld	r0, Z+
    242e:	0d 92       	st	X+, r0
    2430:	00 20       	and	r0, r0
    2432:	c9 f7       	brne	.-14     	; 0x2426 <strncpy+0x4>
    2434:	01 c0       	rjmp	.+2      	; 0x2438 <strncpy+0x16>
    2436:	1d 92       	st	X+, r1
    2438:	41 50       	subi	r20, 0x01	; 1
    243a:	50 40       	sbci	r21, 0x00	; 0
    243c:	e0 f7       	brcc	.-8      	; 0x2436 <strncpy+0x14>
    243e:	08 95       	ret

00002440 <sprintf>:
sprintf():
    2440:	ae e0       	ldi	r26, 0x0E	; 14
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e6 e2       	ldi	r30, 0x26	; 38
    2446:	f2 e1       	ldi	r31, 0x12	; 18
    2448:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__prologue_saves__+0x1c>
    244c:	0d 89       	ldd	r16, Y+21	; 0x15
    244e:	1e 89       	ldd	r17, Y+22	; 0x16
    2450:	86 e0       	ldi	r24, 0x06	; 6
    2452:	8c 83       	std	Y+4, r24	; 0x04
    2454:	1a 83       	std	Y+2, r17	; 0x02
    2456:	09 83       	std	Y+1, r16	; 0x01
    2458:	8f ef       	ldi	r24, 0xFF	; 255
    245a:	9f e7       	ldi	r25, 0x7F	; 127
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	8d 83       	std	Y+5, r24	; 0x05
    2460:	ae 01       	movw	r20, r28
    2462:	47 5e       	subi	r20, 0xE7	; 231
    2464:	5f 4f       	sbci	r21, 0xFF	; 255
    2466:	6f 89       	ldd	r22, Y+23	; 0x17
    2468:	78 8d       	ldd	r23, Y+24	; 0x18
    246a:	ce 01       	movw	r24, r28
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	0e 94 43 12 	call	0x2486	; 0x2486 <vfprintf>
    2472:	2f 81       	ldd	r18, Y+7	; 0x07
    2474:	38 85       	ldd	r19, Y+8	; 0x08
    2476:	02 0f       	add	r16, r18
    2478:	13 1f       	adc	r17, r19
    247a:	f8 01       	movw	r30, r16
    247c:	10 82       	st	Z, r1
    247e:	2e 96       	adiw	r28, 0x0e	; 14
    2480:	e4 e0       	ldi	r30, 0x04	; 4
    2482:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__epilogue_restores__+0x1c>

00002486 <vfprintf>:
vfprintf():
    2486:	ab e0       	ldi	r26, 0x0B	; 11
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	e9 e4       	ldi	r30, 0x49	; 73
    248c:	f2 e1       	ldi	r31, 0x12	; 18
    248e:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__prologue_saves__>
    2492:	7c 01       	movw	r14, r24
    2494:	3b 01       	movw	r6, r22
    2496:	8a 01       	movw	r16, r20
    2498:	fc 01       	movw	r30, r24
    249a:	17 82       	std	Z+7, r1	; 0x07
    249c:	16 82       	std	Z+6, r1	; 0x06
    249e:	83 81       	ldd	r24, Z+3	; 0x03
    24a0:	81 ff       	sbrs	r24, 1
    24a2:	c8 c1       	rjmp	.+912    	; 0x2834 <vfprintf+0x3ae>
    24a4:	ce 01       	movw	r24, r28
    24a6:	01 96       	adiw	r24, 0x01	; 1
    24a8:	5c 01       	movw	r10, r24
    24aa:	f7 01       	movw	r30, r14
    24ac:	93 81       	ldd	r25, Z+3	; 0x03
    24ae:	f3 01       	movw	r30, r6
    24b0:	93 fd       	sbrc	r25, 3
    24b2:	85 91       	lpm	r24, Z+
    24b4:	93 ff       	sbrs	r25, 3
    24b6:	81 91       	ld	r24, Z+
    24b8:	3f 01       	movw	r6, r30
    24ba:	88 23       	and	r24, r24
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <vfprintf+0x3a>
    24be:	53 c1       	rjmp	.+678    	; 0x2766 <vfprintf+0x2e0>
    24c0:	85 32       	cpi	r24, 0x25	; 37
    24c2:	39 f4       	brne	.+14     	; 0x24d2 <vfprintf+0x4c>
    24c4:	93 fd       	sbrc	r25, 3
    24c6:	85 91       	lpm	r24, Z+
    24c8:	93 ff       	sbrs	r25, 3
    24ca:	81 91       	ld	r24, Z+
    24cc:	3f 01       	movw	r6, r30
    24ce:	85 32       	cpi	r24, 0x25	; 37
    24d0:	29 f4       	brne	.+10     	; 0x24dc <vfprintf+0x56>
    24d2:	b7 01       	movw	r22, r14
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0e 94 33 14 	call	0x2866	; 0x2866 <fputc>
    24da:	e7 cf       	rjmp	.-50     	; 0x24aa <vfprintf+0x24>
    24dc:	91 2c       	mov	r9, r1
    24de:	21 2c       	mov	r2, r1
    24e0:	31 2c       	mov	r3, r1
    24e2:	ff e1       	ldi	r31, 0x1F	; 31
    24e4:	f3 15       	cp	r31, r3
    24e6:	38 f0       	brcs	.+14     	; 0x24f6 <vfprintf+0x70>
    24e8:	8b 32       	cpi	r24, 0x2B	; 43
    24ea:	11 f1       	breq	.+68     	; 0x2530 <vfprintf+0xaa>
    24ec:	90 f4       	brcc	.+36     	; 0x2512 <vfprintf+0x8c>
    24ee:	80 32       	cpi	r24, 0x20	; 32
    24f0:	09 f1       	breq	.+66     	; 0x2534 <vfprintf+0xae>
    24f2:	83 32       	cpi	r24, 0x23	; 35
    24f4:	29 f1       	breq	.+74     	; 0x2540 <vfprintf+0xba>
    24f6:	37 fc       	sbrc	r3, 7
    24f8:	3c c0       	rjmp	.+120    	; 0x2572 <vfprintf+0xec>
    24fa:	20 ed       	ldi	r18, 0xD0	; 208
    24fc:	28 0f       	add	r18, r24
    24fe:	2a 30       	cpi	r18, 0x0A	; 10
    2500:	50 f5       	brcc	.+84     	; 0x2556 <vfprintf+0xd0>
    2502:	36 fe       	sbrs	r3, 6
    2504:	20 c0       	rjmp	.+64     	; 0x2546 <vfprintf+0xc0>
    2506:	8a e0       	ldi	r24, 0x0A	; 10
    2508:	98 9e       	mul	r9, r24
    250a:	20 0d       	add	r18, r0
    250c:	11 24       	eor	r1, r1
    250e:	92 2e       	mov	r9, r18
    2510:	06 c0       	rjmp	.+12     	; 0x251e <vfprintf+0x98>
    2512:	8d 32       	cpi	r24, 0x2D	; 45
    2514:	91 f0       	breq	.+36     	; 0x253a <vfprintf+0xb4>
    2516:	80 33       	cpi	r24, 0x30	; 48
    2518:	71 f7       	brne	.-36     	; 0x24f6 <vfprintf+0x70>
    251a:	68 94       	set
    251c:	30 f8       	bld	r3, 0
    251e:	f3 01       	movw	r30, r6
    2520:	93 fd       	sbrc	r25, 3
    2522:	85 91       	lpm	r24, Z+
    2524:	93 ff       	sbrs	r25, 3
    2526:	81 91       	ld	r24, Z+
    2528:	3f 01       	movw	r6, r30
    252a:	81 11       	cpse	r24, r1
    252c:	da cf       	rjmp	.-76     	; 0x24e2 <vfprintf+0x5c>
    252e:	21 c0       	rjmp	.+66     	; 0x2572 <vfprintf+0xec>
    2530:	68 94       	set
    2532:	31 f8       	bld	r3, 1
    2534:	68 94       	set
    2536:	32 f8       	bld	r3, 2
    2538:	f2 cf       	rjmp	.-28     	; 0x251e <vfprintf+0x98>
    253a:	68 94       	set
    253c:	33 f8       	bld	r3, 3
    253e:	ef cf       	rjmp	.-34     	; 0x251e <vfprintf+0x98>
    2540:	68 94       	set
    2542:	34 f8       	bld	r3, 4
    2544:	ec cf       	rjmp	.-40     	; 0x251e <vfprintf+0x98>
    2546:	ea e0       	ldi	r30, 0x0A	; 10
    2548:	2e 9e       	mul	r2, r30
    254a:	20 0d       	add	r18, r0
    254c:	11 24       	eor	r1, r1
    254e:	22 2e       	mov	r2, r18
    2550:	68 94       	set
    2552:	35 f8       	bld	r3, 5
    2554:	e4 cf       	rjmp	.-56     	; 0x251e <vfprintf+0x98>
    2556:	8e 32       	cpi	r24, 0x2E	; 46
    2558:	29 f4       	brne	.+10     	; 0x2564 <vfprintf+0xde>
    255a:	36 fc       	sbrc	r3, 6
    255c:	04 c1       	rjmp	.+520    	; 0x2766 <vfprintf+0x2e0>
    255e:	68 94       	set
    2560:	36 f8       	bld	r3, 6
    2562:	dd cf       	rjmp	.-70     	; 0x251e <vfprintf+0x98>
    2564:	8c 36       	cpi	r24, 0x6C	; 108
    2566:	19 f4       	brne	.+6      	; 0x256e <vfprintf+0xe8>
    2568:	68 94       	set
    256a:	37 f8       	bld	r3, 7
    256c:	d8 cf       	rjmp	.-80     	; 0x251e <vfprintf+0x98>
    256e:	88 36       	cpi	r24, 0x68	; 104
    2570:	b1 f2       	breq	.-84     	; 0x251e <vfprintf+0x98>
    2572:	98 2f       	mov	r25, r24
    2574:	9f 7d       	andi	r25, 0xDF	; 223
    2576:	95 54       	subi	r25, 0x45	; 69
    2578:	93 30       	cpi	r25, 0x03	; 3
    257a:	e0 f0       	brcs	.+56     	; 0x25b4 <vfprintf+0x12e>
    257c:	83 36       	cpi	r24, 0x63	; 99
    257e:	a1 f1       	breq	.+104    	; 0x25e8 <vfprintf+0x162>
    2580:	83 37       	cpi	r24, 0x73	; 115
    2582:	c1 f1       	breq	.+112    	; 0x25f4 <vfprintf+0x16e>
    2584:	83 35       	cpi	r24, 0x53	; 83
    2586:	09 f0       	breq	.+2      	; 0x258a <vfprintf+0x104>
    2588:	63 c0       	rjmp	.+198    	; 0x2650 <vfprintf+0x1ca>
    258a:	28 01       	movw	r4, r16
    258c:	f2 e0       	ldi	r31, 0x02	; 2
    258e:	4f 0e       	add	r4, r31
    2590:	51 1c       	adc	r5, r1
    2592:	f8 01       	movw	r30, r16
    2594:	c0 80       	ld	r12, Z
    2596:	d1 80       	ldd	r13, Z+1	; 0x01
    2598:	69 2d       	mov	r22, r9
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	36 fc       	sbrc	r3, 6
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <vfprintf+0x11e>
    25a0:	6f ef       	ldi	r22, 0xFF	; 255
    25a2:	7f ef       	ldi	r23, 0xFF	; 255
    25a4:	c6 01       	movw	r24, r12
    25a6:	0e 94 1d 14 	call	0x283a	; 0x283a <strnlen_P>
    25aa:	4c 01       	movw	r8, r24
    25ac:	68 94       	set
    25ae:	37 f8       	bld	r3, 7
    25b0:	82 01       	movw	r16, r4
    25b2:	0a c0       	rjmp	.+20     	; 0x25c8 <vfprintf+0x142>
    25b4:	0c 5f       	subi	r16, 0xFC	; 252
    25b6:	1f 4f       	sbci	r17, 0xFF	; 255
    25b8:	ff e3       	ldi	r31, 0x3F	; 63
    25ba:	f9 83       	std	Y+1, r31	; 0x01
    25bc:	88 24       	eor	r8, r8
    25be:	83 94       	inc	r8
    25c0:	91 2c       	mov	r9, r1
    25c2:	65 01       	movw	r12, r10
    25c4:	e8 94       	clt
    25c6:	37 f8       	bld	r3, 7
    25c8:	33 fe       	sbrs	r3, 3
    25ca:	2d c0       	rjmp	.+90     	; 0x2626 <vfprintf+0x1a0>
    25cc:	52 2c       	mov	r5, r2
    25ce:	81 14       	cp	r8, r1
    25d0:	91 04       	cpc	r9, r1
    25d2:	71 f5       	brne	.+92     	; 0x2630 <vfprintf+0x1aa>
    25d4:	55 20       	and	r5, r5
    25d6:	09 f4       	brne	.+2      	; 0x25da <vfprintf+0x154>
    25d8:	68 cf       	rjmp	.-304    	; 0x24aa <vfprintf+0x24>
    25da:	b7 01       	movw	r22, r14
    25dc:	80 e2       	ldi	r24, 0x20	; 32
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	0e 94 33 14 	call	0x2866	; 0x2866 <fputc>
    25e4:	5a 94       	dec	r5
    25e6:	f6 cf       	rjmp	.-20     	; 0x25d4 <vfprintf+0x14e>
    25e8:	f8 01       	movw	r30, r16
    25ea:	80 81       	ld	r24, Z
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	0e 5f       	subi	r16, 0xFE	; 254
    25f0:	1f 4f       	sbci	r17, 0xFF	; 255
    25f2:	e4 cf       	rjmp	.-56     	; 0x25bc <vfprintf+0x136>
    25f4:	28 01       	movw	r4, r16
    25f6:	f2 e0       	ldi	r31, 0x02	; 2
    25f8:	4f 0e       	add	r4, r31
    25fa:	51 1c       	adc	r5, r1
    25fc:	f8 01       	movw	r30, r16
    25fe:	c0 80       	ld	r12, Z
    2600:	d1 80       	ldd	r13, Z+1	; 0x01
    2602:	69 2d       	mov	r22, r9
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	36 fc       	sbrc	r3, 6
    2608:	02 c0       	rjmp	.+4      	; 0x260e <vfprintf+0x188>
    260a:	6f ef       	ldi	r22, 0xFF	; 255
    260c:	7f ef       	ldi	r23, 0xFF	; 255
    260e:	c6 01       	movw	r24, r12
    2610:	0e 94 28 14 	call	0x2850	; 0x2850 <strnlen>
    2614:	4c 01       	movw	r8, r24
    2616:	82 01       	movw	r16, r4
    2618:	d5 cf       	rjmp	.-86     	; 0x25c4 <vfprintf+0x13e>
    261a:	b7 01       	movw	r22, r14
    261c:	80 e2       	ldi	r24, 0x20	; 32
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	0e 94 33 14 	call	0x2866	; 0x2866 <fputc>
    2624:	2a 94       	dec	r2
    2626:	28 14       	cp	r2, r8
    2628:	19 04       	cpc	r1, r9
    262a:	09 f0       	breq	.+2      	; 0x262e <vfprintf+0x1a8>
    262c:	b0 f7       	brcc	.-20     	; 0x261a <vfprintf+0x194>
    262e:	ce cf       	rjmp	.-100    	; 0x25cc <vfprintf+0x146>
    2630:	f6 01       	movw	r30, r12
    2632:	37 fc       	sbrc	r3, 7
    2634:	85 91       	lpm	r24, Z+
    2636:	37 fe       	sbrs	r3, 7
    2638:	81 91       	ld	r24, Z+
    263a:	6f 01       	movw	r12, r30
    263c:	b7 01       	movw	r22, r14
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	0e 94 33 14 	call	0x2866	; 0x2866 <fputc>
    2644:	51 10       	cpse	r5, r1
    2646:	5a 94       	dec	r5
    2648:	f1 e0       	ldi	r31, 0x01	; 1
    264a:	8f 1a       	sub	r8, r31
    264c:	91 08       	sbc	r9, r1
    264e:	bf cf       	rjmp	.-130    	; 0x25ce <vfprintf+0x148>
    2650:	84 36       	cpi	r24, 0x64	; 100
    2652:	19 f0       	breq	.+6      	; 0x265a <vfprintf+0x1d4>
    2654:	89 36       	cpi	r24, 0x69	; 105
    2656:	09 f0       	breq	.+2      	; 0x265a <vfprintf+0x1d4>
    2658:	77 c0       	rjmp	.+238    	; 0x2748 <vfprintf+0x2c2>
    265a:	f8 01       	movw	r30, r16
    265c:	37 fe       	sbrs	r3, 7
    265e:	6b c0       	rjmp	.+214    	; 0x2736 <vfprintf+0x2b0>
    2660:	60 81       	ld	r22, Z
    2662:	71 81       	ldd	r23, Z+1	; 0x01
    2664:	82 81       	ldd	r24, Z+2	; 0x02
    2666:	93 81       	ldd	r25, Z+3	; 0x03
    2668:	0c 5f       	subi	r16, 0xFC	; 252
    266a:	1f 4f       	sbci	r17, 0xFF	; 255
    266c:	f3 2d       	mov	r31, r3
    266e:	ff 76       	andi	r31, 0x6F	; 111
    2670:	3f 2e       	mov	r3, r31
    2672:	97 ff       	sbrs	r25, 7
    2674:	09 c0       	rjmp	.+18     	; 0x2688 <vfprintf+0x202>
    2676:	90 95       	com	r25
    2678:	80 95       	com	r24
    267a:	70 95       	com	r23
    267c:	61 95       	neg	r22
    267e:	7f 4f       	sbci	r23, 0xFF	; 255
    2680:	8f 4f       	sbci	r24, 0xFF	; 255
    2682:	9f 4f       	sbci	r25, 0xFF	; 255
    2684:	68 94       	set
    2686:	37 f8       	bld	r3, 7
    2688:	2a e0       	ldi	r18, 0x0A	; 10
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	a5 01       	movw	r20, r10
    268e:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__ultoa_invert>
    2692:	c8 2e       	mov	r12, r24
    2694:	ca 18       	sub	r12, r10
    2696:	8c 2c       	mov	r8, r12
    2698:	43 2c       	mov	r4, r3
    269a:	36 fe       	sbrs	r3, 6
    269c:	0c c0       	rjmp	.+24     	; 0x26b6 <vfprintf+0x230>
    269e:	e8 94       	clt
    26a0:	40 f8       	bld	r4, 0
    26a2:	c9 14       	cp	r12, r9
    26a4:	40 f4       	brcc	.+16     	; 0x26b6 <vfprintf+0x230>
    26a6:	34 fe       	sbrs	r3, 4
    26a8:	05 c0       	rjmp	.+10     	; 0x26b4 <vfprintf+0x22e>
    26aa:	32 fc       	sbrc	r3, 2
    26ac:	03 c0       	rjmp	.+6      	; 0x26b4 <vfprintf+0x22e>
    26ae:	f3 2d       	mov	r31, r3
    26b0:	fe 7e       	andi	r31, 0xEE	; 238
    26b2:	4f 2e       	mov	r4, r31
    26b4:	89 2c       	mov	r8, r9
    26b6:	44 fe       	sbrs	r4, 4
    26b8:	95 c0       	rjmp	.+298    	; 0x27e4 <vfprintf+0x35e>
    26ba:	fe 01       	movw	r30, r28
    26bc:	ec 0d       	add	r30, r12
    26be:	f1 1d       	adc	r31, r1
    26c0:	80 81       	ld	r24, Z
    26c2:	80 33       	cpi	r24, 0x30	; 48
    26c4:	09 f0       	breq	.+2      	; 0x26c8 <vfprintf+0x242>
    26c6:	87 c0       	rjmp	.+270    	; 0x27d6 <vfprintf+0x350>
    26c8:	24 2d       	mov	r18, r4
    26ca:	29 7e       	andi	r18, 0xE9	; 233
    26cc:	42 2e       	mov	r4, r18
    26ce:	84 2d       	mov	r24, r4
    26d0:	88 70       	andi	r24, 0x08	; 8
    26d2:	58 2e       	mov	r5, r24
    26d4:	43 fc       	sbrc	r4, 3
    26d6:	95 c0       	rjmp	.+298    	; 0x2802 <vfprintf+0x37c>
    26d8:	40 fe       	sbrs	r4, 0
    26da:	8f c0       	rjmp	.+286    	; 0x27fa <vfprintf+0x374>
    26dc:	9c 2c       	mov	r9, r12
    26de:	82 14       	cp	r8, r2
    26e0:	18 f4       	brcc	.+6      	; 0x26e8 <vfprintf+0x262>
    26e2:	2c 0c       	add	r2, r12
    26e4:	92 2c       	mov	r9, r2
    26e6:	98 18       	sub	r9, r8
    26e8:	44 fe       	sbrs	r4, 4
    26ea:	91 c0       	rjmp	.+290    	; 0x280e <vfprintf+0x388>
    26ec:	b7 01       	movw	r22, r14
    26ee:	80 e3       	ldi	r24, 0x30	; 48
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	0e 94 33 14 	call	0x2866	; 0x2866 <fputc>
    26f6:	42 fe       	sbrs	r4, 2
    26f8:	09 c0       	rjmp	.+18     	; 0x270c <vfprintf+0x286>
    26fa:	88 e7       	ldi	r24, 0x78	; 120
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	41 fe       	sbrs	r4, 1
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <vfprintf+0x280>
    2702:	88 e5       	ldi	r24, 0x58	; 88
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	b7 01       	movw	r22, r14
    2708:	0e 94 33 14 	call	0x2866	; 0x2866 <fputc>
    270c:	c9 14       	cp	r12, r9
    270e:	08 f4       	brcc	.+2      	; 0x2712 <vfprintf+0x28c>
    2710:	8a c0       	rjmp	.+276    	; 0x2826 <vfprintf+0x3a0>
    2712:	ca 94       	dec	r12
    2714:	d1 2c       	mov	r13, r1
    2716:	9f ef       	ldi	r25, 0xFF	; 255
    2718:	c9 1a       	sub	r12, r25
    271a:	d9 0a       	sbc	r13, r25
    271c:	ca 0c       	add	r12, r10
    271e:	db 1c       	adc	r13, r11
    2720:	f6 01       	movw	r30, r12
    2722:	82 91       	ld	r24, -Z
    2724:	6f 01       	movw	r12, r30
    2726:	b7 01       	movw	r22, r14
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 33 14 	call	0x2866	; 0x2866 <fputc>
    272e:	ac 14       	cp	r10, r12
    2730:	bd 04       	cpc	r11, r13
    2732:	b1 f7       	brne	.-20     	; 0x2720 <vfprintf+0x29a>
    2734:	4f cf       	rjmp	.-354    	; 0x25d4 <vfprintf+0x14e>
    2736:	60 81       	ld	r22, Z
    2738:	71 81       	ldd	r23, Z+1	; 0x01
    273a:	07 2e       	mov	r0, r23
    273c:	00 0c       	add	r0, r0
    273e:	88 0b       	sbc	r24, r24
    2740:	99 0b       	sbc	r25, r25
    2742:	0e 5f       	subi	r16, 0xFE	; 254
    2744:	1f 4f       	sbci	r17, 0xFF	; 255
    2746:	92 cf       	rjmp	.-220    	; 0x266c <vfprintf+0x1e6>
    2748:	d3 2c       	mov	r13, r3
    274a:	e8 94       	clt
    274c:	d4 f8       	bld	r13, 4
    274e:	2a e0       	ldi	r18, 0x0A	; 10
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	85 37       	cpi	r24, 0x75	; 117
    2754:	39 f1       	breq	.+78     	; 0x27a4 <vfprintf+0x31e>
    2756:	23 2d       	mov	r18, r3
    2758:	29 7f       	andi	r18, 0xF9	; 249
    275a:	d2 2e       	mov	r13, r18
    275c:	8f 36       	cpi	r24, 0x6F	; 111
    275e:	01 f1       	breq	.+64     	; 0x27a0 <vfprintf+0x31a>
    2760:	48 f4       	brcc	.+18     	; 0x2774 <vfprintf+0x2ee>
    2762:	88 35       	cpi	r24, 0x58	; 88
    2764:	a9 f0       	breq	.+42     	; 0x2790 <vfprintf+0x30a>
    2766:	f7 01       	movw	r30, r14
    2768:	86 81       	ldd	r24, Z+6	; 0x06
    276a:	97 81       	ldd	r25, Z+7	; 0x07
    276c:	2b 96       	adiw	r28, 0x0b	; 11
    276e:	e2 e1       	ldi	r30, 0x12	; 18
    2770:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__epilogue_restores__>
    2774:	80 37       	cpi	r24, 0x70	; 112
    2776:	49 f0       	breq	.+18     	; 0x278a <vfprintf+0x304>
    2778:	88 37       	cpi	r24, 0x78	; 120
    277a:	a9 f7       	brne	.-22     	; 0x2766 <vfprintf+0x2e0>
    277c:	d4 fe       	sbrs	r13, 4
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <vfprintf+0x2fe>
    2780:	68 94       	set
    2782:	d2 f8       	bld	r13, 2
    2784:	20 e1       	ldi	r18, 0x10	; 16
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	0d c0       	rjmp	.+26     	; 0x27a4 <vfprintf+0x31e>
    278a:	68 94       	set
    278c:	d4 f8       	bld	r13, 4
    278e:	f6 cf       	rjmp	.-20     	; 0x277c <vfprintf+0x2f6>
    2790:	34 fe       	sbrs	r3, 4
    2792:	03 c0       	rjmp	.+6      	; 0x279a <vfprintf+0x314>
    2794:	82 2f       	mov	r24, r18
    2796:	86 60       	ori	r24, 0x06	; 6
    2798:	d8 2e       	mov	r13, r24
    279a:	20 e1       	ldi	r18, 0x10	; 16
    279c:	32 e0       	ldi	r19, 0x02	; 2
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <vfprintf+0x31e>
    27a0:	28 e0       	ldi	r18, 0x08	; 8
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	f8 01       	movw	r30, r16
    27a6:	d7 fe       	sbrs	r13, 7
    27a8:	0f c0       	rjmp	.+30     	; 0x27c8 <vfprintf+0x342>
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	0c 5f       	subi	r16, 0xFC	; 252
    27b4:	1f 4f       	sbci	r17, 0xFF	; 255
    27b6:	a5 01       	movw	r20, r10
    27b8:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__ultoa_invert>
    27bc:	c8 2e       	mov	r12, r24
    27be:	ca 18       	sub	r12, r10
    27c0:	3d 2c       	mov	r3, r13
    27c2:	e8 94       	clt
    27c4:	37 f8       	bld	r3, 7
    27c6:	67 cf       	rjmp	.-306    	; 0x2696 <vfprintf+0x210>
    27c8:	60 81       	ld	r22, Z
    27ca:	71 81       	ldd	r23, Z+1	; 0x01
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	0e 5f       	subi	r16, 0xFE	; 254
    27d2:	1f 4f       	sbci	r17, 0xFF	; 255
    27d4:	f0 cf       	rjmp	.-32     	; 0x27b6 <vfprintf+0x330>
    27d6:	42 fc       	sbrc	r4, 2
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <vfprintf+0x358>
    27da:	83 94       	inc	r8
    27dc:	78 cf       	rjmp	.-272    	; 0x26ce <vfprintf+0x248>
    27de:	83 94       	inc	r8
    27e0:	83 94       	inc	r8
    27e2:	75 cf       	rjmp	.-278    	; 0x26ce <vfprintf+0x248>
    27e4:	84 2d       	mov	r24, r4
    27e6:	86 78       	andi	r24, 0x86	; 134
    27e8:	09 f4       	brne	.+2      	; 0x27ec <vfprintf+0x366>
    27ea:	71 cf       	rjmp	.-286    	; 0x26ce <vfprintf+0x248>
    27ec:	f6 cf       	rjmp	.-20     	; 0x27da <vfprintf+0x354>
    27ee:	b7 01       	movw	r22, r14
    27f0:	80 e2       	ldi	r24, 0x20	; 32
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 33 14 	call	0x2866	; 0x2866 <fputc>
    27f8:	83 94       	inc	r8
    27fa:	82 14       	cp	r8, r2
    27fc:	c0 f3       	brcs	.-16     	; 0x27ee <vfprintf+0x368>
    27fe:	51 2c       	mov	r5, r1
    2800:	73 cf       	rjmp	.-282    	; 0x26e8 <vfprintf+0x262>
    2802:	52 2c       	mov	r5, r2
    2804:	58 18       	sub	r5, r8
    2806:	82 14       	cp	r8, r2
    2808:	08 f4       	brcc	.+2      	; 0x280c <vfprintf+0x386>
    280a:	6e cf       	rjmp	.-292    	; 0x26e8 <vfprintf+0x262>
    280c:	f8 cf       	rjmp	.-16     	; 0x27fe <vfprintf+0x378>
    280e:	84 2d       	mov	r24, r4
    2810:	86 78       	andi	r24, 0x86	; 134
    2812:	09 f4       	brne	.+2      	; 0x2816 <vfprintf+0x390>
    2814:	7b cf       	rjmp	.-266    	; 0x270c <vfprintf+0x286>
    2816:	8b e2       	ldi	r24, 0x2B	; 43
    2818:	41 fe       	sbrs	r4, 1
    281a:	80 e2       	ldi	r24, 0x20	; 32
    281c:	47 fc       	sbrc	r4, 7
    281e:	8d e2       	ldi	r24, 0x2D	; 45
    2820:	b7 01       	movw	r22, r14
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	71 cf       	rjmp	.-286    	; 0x2708 <vfprintf+0x282>
    2826:	b7 01       	movw	r22, r14
    2828:	80 e3       	ldi	r24, 0x30	; 48
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	0e 94 33 14 	call	0x2866	; 0x2866 <fputc>
    2830:	9a 94       	dec	r9
    2832:	6c cf       	rjmp	.-296    	; 0x270c <vfprintf+0x286>
    2834:	8f ef       	ldi	r24, 0xFF	; 255
    2836:	9f ef       	ldi	r25, 0xFF	; 255
    2838:	99 cf       	rjmp	.-206    	; 0x276c <vfprintf+0x2e6>

0000283a <strnlen_P>:
strnlen_P():
    283a:	fc 01       	movw	r30, r24
    283c:	05 90       	lpm	r0, Z+
    283e:	61 50       	subi	r22, 0x01	; 1
    2840:	70 40       	sbci	r23, 0x00	; 0
    2842:	01 10       	cpse	r0, r1
    2844:	d8 f7       	brcc	.-10     	; 0x283c <strnlen_P+0x2>
    2846:	80 95       	com	r24
    2848:	90 95       	com	r25
    284a:	8e 0f       	add	r24, r30
    284c:	9f 1f       	adc	r25, r31
    284e:	08 95       	ret

00002850 <strnlen>:
strnlen():
    2850:	fc 01       	movw	r30, r24
    2852:	61 50       	subi	r22, 0x01	; 1
    2854:	70 40       	sbci	r23, 0x00	; 0
    2856:	01 90       	ld	r0, Z+
    2858:	01 10       	cpse	r0, r1
    285a:	d8 f7       	brcc	.-10     	; 0x2852 <strnlen+0x2>
    285c:	80 95       	com	r24
    285e:	90 95       	com	r25
    2860:	8e 0f       	add	r24, r30
    2862:	9f 1f       	adc	r25, r31
    2864:	08 95       	ret

00002866 <fputc>:
fputc():
    2866:	0f 93       	push	r16
    2868:	1f 93       	push	r17
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	18 2f       	mov	r17, r24
    2870:	09 2f       	mov	r16, r25
    2872:	eb 01       	movw	r28, r22
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	81 fd       	sbrc	r24, 1
    2878:	09 c0       	rjmp	.+18     	; 0x288c <fputc+0x26>
    287a:	1f ef       	ldi	r17, 0xFF	; 255
    287c:	0f ef       	ldi	r16, 0xFF	; 255
    287e:	81 2f       	mov	r24, r17
    2880:	90 2f       	mov	r25, r16
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	1f 91       	pop	r17
    2888:	0f 91       	pop	r16
    288a:	08 95       	ret
    288c:	82 ff       	sbrs	r24, 2
    288e:	14 c0       	rjmp	.+40     	; 0x28b8 <fputc+0x52>
    2890:	2e 81       	ldd	r18, Y+6	; 0x06
    2892:	3f 81       	ldd	r19, Y+7	; 0x07
    2894:	8c 81       	ldd	r24, Y+4	; 0x04
    2896:	9d 81       	ldd	r25, Y+5	; 0x05
    2898:	28 17       	cp	r18, r24
    289a:	39 07       	cpc	r19, r25
    289c:	3c f4       	brge	.+14     	; 0x28ac <fputc+0x46>
    289e:	e8 81       	ld	r30, Y
    28a0:	f9 81       	ldd	r31, Y+1	; 0x01
    28a2:	cf 01       	movw	r24, r30
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	99 83       	std	Y+1, r25	; 0x01
    28a8:	88 83       	st	Y, r24
    28aa:	10 83       	st	Z, r17
    28ac:	8e 81       	ldd	r24, Y+6	; 0x06
    28ae:	9f 81       	ldd	r25, Y+7	; 0x07
    28b0:	01 96       	adiw	r24, 0x01	; 1
    28b2:	9f 83       	std	Y+7, r25	; 0x07
    28b4:	8e 83       	std	Y+6, r24	; 0x06
    28b6:	e3 cf       	rjmp	.-58     	; 0x287e <fputc+0x18>
    28b8:	e8 85       	ldd	r30, Y+8	; 0x08
    28ba:	f9 85       	ldd	r31, Y+9	; 0x09
    28bc:	81 2f       	mov	r24, r17
    28be:	09 95       	icall
    28c0:	89 2b       	or	r24, r25
    28c2:	a1 f3       	breq	.-24     	; 0x28ac <fputc+0x46>
    28c4:	da cf       	rjmp	.-76     	; 0x287a <fputc+0x14>

000028c6 <__ultoa_invert>:
__ultoa_invert():
    28c6:	fa 01       	movw	r30, r20
    28c8:	aa 27       	eor	r26, r26
    28ca:	28 30       	cpi	r18, 0x08	; 8
    28cc:	51 f1       	breq	.+84     	; 0x2922 <__ultoa_invert+0x5c>
    28ce:	20 31       	cpi	r18, 0x10	; 16
    28d0:	81 f1       	breq	.+96     	; 0x2932 <__ultoa_invert+0x6c>
    28d2:	e8 94       	clt
    28d4:	6f 93       	push	r22
    28d6:	6e 7f       	andi	r22, 0xFE	; 254
    28d8:	6e 5f       	subi	r22, 0xFE	; 254
    28da:	7f 4f       	sbci	r23, 0xFF	; 255
    28dc:	8f 4f       	sbci	r24, 0xFF	; 255
    28de:	9f 4f       	sbci	r25, 0xFF	; 255
    28e0:	af 4f       	sbci	r26, 0xFF	; 255
    28e2:	b1 e0       	ldi	r27, 0x01	; 1
    28e4:	3e d0       	rcall	.+124    	; 0x2962 <__ultoa_invert+0x9c>
    28e6:	b4 e0       	ldi	r27, 0x04	; 4
    28e8:	3c d0       	rcall	.+120    	; 0x2962 <__ultoa_invert+0x9c>
    28ea:	67 0f       	add	r22, r23
    28ec:	78 1f       	adc	r23, r24
    28ee:	89 1f       	adc	r24, r25
    28f0:	9a 1f       	adc	r25, r26
    28f2:	a1 1d       	adc	r26, r1
    28f4:	68 0f       	add	r22, r24
    28f6:	79 1f       	adc	r23, r25
    28f8:	8a 1f       	adc	r24, r26
    28fa:	91 1d       	adc	r25, r1
    28fc:	a1 1d       	adc	r26, r1
    28fe:	6a 0f       	add	r22, r26
    2900:	71 1d       	adc	r23, r1
    2902:	81 1d       	adc	r24, r1
    2904:	91 1d       	adc	r25, r1
    2906:	a1 1d       	adc	r26, r1
    2908:	20 d0       	rcall	.+64     	; 0x294a <__ultoa_invert+0x84>
    290a:	09 f4       	brne	.+2      	; 0x290e <__ultoa_invert+0x48>
    290c:	68 94       	set
    290e:	3f 91       	pop	r19
    2910:	2a e0       	ldi	r18, 0x0A	; 10
    2912:	26 9f       	mul	r18, r22
    2914:	11 24       	eor	r1, r1
    2916:	30 19       	sub	r19, r0
    2918:	30 5d       	subi	r19, 0xD0	; 208
    291a:	31 93       	st	Z+, r19
    291c:	de f6       	brtc	.-74     	; 0x28d4 <__ultoa_invert+0xe>
    291e:	cf 01       	movw	r24, r30
    2920:	08 95       	ret
    2922:	46 2f       	mov	r20, r22
    2924:	47 70       	andi	r20, 0x07	; 7
    2926:	40 5d       	subi	r20, 0xD0	; 208
    2928:	41 93       	st	Z+, r20
    292a:	b3 e0       	ldi	r27, 0x03	; 3
    292c:	0f d0       	rcall	.+30     	; 0x294c <__ultoa_invert+0x86>
    292e:	c9 f7       	brne	.-14     	; 0x2922 <__ultoa_invert+0x5c>
    2930:	f6 cf       	rjmp	.-20     	; 0x291e <__ultoa_invert+0x58>
    2932:	46 2f       	mov	r20, r22
    2934:	4f 70       	andi	r20, 0x0F	; 15
    2936:	40 5d       	subi	r20, 0xD0	; 208
    2938:	4a 33       	cpi	r20, 0x3A	; 58
    293a:	18 f0       	brcs	.+6      	; 0x2942 <__ultoa_invert+0x7c>
    293c:	49 5d       	subi	r20, 0xD9	; 217
    293e:	31 fd       	sbrc	r19, 1
    2940:	40 52       	subi	r20, 0x20	; 32
    2942:	41 93       	st	Z+, r20
    2944:	02 d0       	rcall	.+4      	; 0x294a <__ultoa_invert+0x84>
    2946:	a9 f7       	brne	.-22     	; 0x2932 <__ultoa_invert+0x6c>
    2948:	ea cf       	rjmp	.-44     	; 0x291e <__ultoa_invert+0x58>
    294a:	b4 e0       	ldi	r27, 0x04	; 4
    294c:	a6 95       	lsr	r26
    294e:	97 95       	ror	r25
    2950:	87 95       	ror	r24
    2952:	77 95       	ror	r23
    2954:	67 95       	ror	r22
    2956:	ba 95       	dec	r27
    2958:	c9 f7       	brne	.-14     	; 0x294c <__ultoa_invert+0x86>
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	61 05       	cpc	r22, r1
    295e:	71 05       	cpc	r23, r1
    2960:	08 95       	ret
    2962:	9b 01       	movw	r18, r22
    2964:	ac 01       	movw	r20, r24
    2966:	0a 2e       	mov	r0, r26
    2968:	06 94       	lsr	r0
    296a:	57 95       	ror	r21
    296c:	47 95       	ror	r20
    296e:	37 95       	ror	r19
    2970:	27 95       	ror	r18
    2972:	ba 95       	dec	r27
    2974:	c9 f7       	brne	.-14     	; 0x2968 <__ultoa_invert+0xa2>
    2976:	62 0f       	add	r22, r18
    2978:	73 1f       	adc	r23, r19
    297a:	84 1f       	adc	r24, r20
    297c:	95 1f       	adc	r25, r21
    297e:	a0 1d       	adc	r26, r0
    2980:	08 95       	ret

00002982 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2982:	f8 94       	cli

00002984 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2984:	ff cf       	rjmp	.-2      	; 0x2984 <__stop_program>
