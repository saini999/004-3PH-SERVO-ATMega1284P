
C:\Users\Admin\AppData\Local\Temp\arduino-sketch-F080B17A2320CF8E17961042ADCE1DFB/004-3PH-SERVO-ATMega1284P.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__vector_18>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      68:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      6c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      70:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      74:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      78:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      7c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      80:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      84:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      88:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	21 00       	.word	0x0021	; ????
      90:	24 00       	.word	0x0024	; ????
      92:	27 00       	.word	0x0027	; ????
      94:	2a 00       	.word	0x002a	; ????

00000096 <port_to_output_PGM>:
      96:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

000000a0 <digital_pin_to_timer_PGM>:
      a0:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

000000c0 <characterArray>:
      c0:	7e 30 6d 79 33 5b 5f 70 7f 7b 77 1f 4e 3d 4f 47     ~0my3[_p.{w.N=OG
	...
      e0:	00 00 22 00 00 00 00 20 4e 78 00 00 04 01 00 00     ..".... Nx......
      f0:	7e 30 6d 79 33 5b 5f 70 7f 7b 00 00 00 00 00 00     ~0my3[_p.{......
     100:	00 77 1f 4e 3d 4f 47 5e 37 30 38 00 0e 00 15 7e     .w.N=OG^708....~
     110:	67 73 05 5b 0f 3e 00 00 00 3b 00 4e 00 78 00 08     gs.[.>...;.N.x..
     120:	02 77 1f 0d 3d 6f 47 5e 17 10 38 00 30 00 15 1d     .w..=oG^..8.0...
     130:	67 73 05 5b 0f 1c 00 00 00 00 00 00 00 00 00 00     gs.[............

00000140 <port_to_input_PGM>:
     140:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

0000014a <digital_pin_to_port_PGM>:
     14a:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     15a:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

0000016a <digital_pin_to_bit_mask_PGM>:
     16a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     17a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

0000018a <__ctors_start>:
__ctors_start():
     18a:	e5 10       	cpse	r14, r5

0000018c <__ctors_end>:
__dtors_end():
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	d0 e4       	ldi	r29, 0x40	; 64
     194:	de bf       	out	0x3e, r29	; 62
     196:	cd bf       	out	0x3d, r28	; 61

00000198 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     198:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     19a:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     19c:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     19e:	ee e7       	ldi	r30, 0x7E	; 126
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     1a0:	f0 e3       	ldi	r31, 0x30	; 48
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     1a2:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     1a4:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     1a8:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     1aa:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     1ac:	ac 3a       	cpi	r26, 0xAC	; 172
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     1ae:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0x10>

000001b2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1b2:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1b4:	ac ea       	ldi	r26, 0xAC	; 172
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1bc:	a2 3c       	cpi	r26, 0xC2	; 194
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1be:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>

000001c2 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     1c2:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     1c4:	c6 ec       	ldi	r28, 0xC6	; 198
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     1c6:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     1ca:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     1cc:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1ce:	0e 94 38 13 	call	0x2670	; 0x2670 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1d2:	c5 3c       	cpi	r28, 0xC5	; 197
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1d4:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1d6:	c9 f7       	brne	.-14     	; 0x1ca <__do_global_ctors+0x8>
     1d8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <main>
     1dc:	0c 94 3d 18 	jmp	0x307a	; 0x307a <_exit>

000001e0 <__bad_interrupt>:
__vector_22():
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <turnOffPWM>:
turnOffPWM():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     1e4:	82 50       	subi	r24, 0x02	; 2
     1e6:	8a 30       	cpi	r24, 0x0A	; 10
     1e8:	88 f5       	brcc	.+98     	; 0x24c <turnOffPWM+0x68>
     1ea:	e8 2f       	mov	r30, r24
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	e5 50       	subi	r30, 0x05	; 5
     1f0:	ff 4f       	sbci	r31, 0xFF	; 255
     1f2:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__tablejump2__>
     1f6:	23 01       	movw	r4, r6
     1f8:	27 01       	movw	r4, r14
     1fa:	05 01       	movw	r0, r10
     1fc:	0b 01       	movw	r0, r22
     1fe:	26 01       	movw	r4, r12
     200:	26 01       	movw	r4, r12
     202:	0f 01       	movw	r0, r30
     204:	15 01       	movw	r2, r10
     206:	19 01       	movw	r2, r18
     208:	1f 01       	movw	r2, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     20a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     20e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     210:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     214:	08 95       	ret
     216:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     21a:	8f 7d       	andi	r24, 0xDF	; 223
     21c:	f9 cf       	rjmp	.-14     	; 0x210 <turnOffPWM+0x2c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     21e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     222:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     224:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     228:	08 95       	ret
     22a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     22e:	8f 7d       	andi	r24, 0xDF	; 223
     230:	f9 cf       	rjmp	.-14     	; 0x224 <turnOffPWM+0x40>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     232:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     236:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     238:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     23c:	08 95       	ret
     23e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     242:	8f 7d       	andi	r24, 0xDF	; 223
     244:	f9 cf       	rjmp	.-14     	; 0x238 <turnOffPWM+0x54>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     246:	84 b5       	in	r24, 0x24	; 36
     248:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     24a:	84 bd       	out	0x24, r24	; 36
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     24c:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     24e:	84 b5       	in	r24, 0x24	; 36
     250:	8f 7d       	andi	r24, 0xDF	; 223
     252:	fb cf       	rjmp	.-10     	; 0x24a <turnOffPWM+0x66>

00000254 <digitalWrite>:
digitalWrite():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     25a:	28 2f       	mov	r18, r24
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	e0 56       	subi	r30, 0x60	; 96
     262:	ff 4f       	sbci	r31, 0xFF	; 255
     264:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     266:	f9 01       	movw	r30, r18
     268:	e6 59       	subi	r30, 0x96	; 150
     26a:	fe 4f       	sbci	r31, 0xFE	; 254
     26c:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     26e:	f9 01       	movw	r30, r18
     270:	e6 5b       	subi	r30, 0xB6	; 182
     272:	fe 4f       	sbci	r31, 0xFE	; 254
     274:	c4 91       	lpm	r28, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     276:	cc 23       	and	r28, r28
     278:	a9 f0       	breq	.+42     	; 0x2a4 <digitalWrite+0x50>
     27a:	16 2f       	mov	r17, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     27c:	81 11       	cpse	r24, r1
     27e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <turnOffPWM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     282:	ec 2f       	mov	r30, r28
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	ee 0f       	add	r30, r30
     288:	ff 1f       	adc	r31, r31
     28a:	ea 56       	subi	r30, 0x6A	; 106
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	a5 91       	lpm	r26, Z+
     290:	b4 91       	lpm	r27, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     292:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     294:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     296:	ec 91       	ld	r30, X
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     298:	11 11       	cpse	r17, r1
     29a:	08 c0       	rjmp	.+16     	; 0x2ac <digitalWrite+0x58>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     29c:	d0 95       	com	r29
     29e:	de 23       	and	r29, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     2a0:	dc 93       	st	X, r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     2a2:	8f bf       	out	0x3f, r24	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     2ac:	de 2b       	or	r29, r30
     2ae:	f8 cf       	rjmp	.-16     	; 0x2a0 <digitalWrite+0x4c>

000002b0 <pinMode>:
pinMode():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	fc 01       	movw	r30, r24
     2b8:	e6 59       	subi	r30, 0x96	; 150
     2ba:	fe 4f       	sbci	r31, 0xFE	; 254
     2bc:	24 91       	lpm	r18, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     2be:	86 5b       	subi	r24, 0xB6	; 182
     2c0:	9e 4f       	sbci	r25, 0xFE	; 254
     2c2:	fc 01       	movw	r30, r24
     2c4:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     2c6:	88 23       	and	r24, r24
     2c8:	d1 f0       	breq	.+52     	; 0x2fe <pinMode+0x4e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	88 0f       	add	r24, r24
     2ce:	99 1f       	adc	r25, r25
     2d0:	fc 01       	movw	r30, r24
     2d2:	e4 57       	subi	r30, 0x74	; 116
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	a5 91       	lpm	r26, Z+
     2d8:	b4 91       	lpm	r27, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     2da:	fc 01       	movw	r30, r24
     2dc:	ea 56       	subi	r30, 0x6A	; 106
     2de:	ff 4f       	sbci	r31, 0xFF	; 255
     2e0:	c5 91       	lpm	r28, Z+
     2e2:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     2e4:	61 11       	cpse	r22, r1
     2e6:	0e c0       	rjmp	.+28     	; 0x304 <pinMode+0x54>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     2e8:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     2ea:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     2ec:	8c 91       	ld	r24, X
     2ee:	e2 2f       	mov	r30, r18
     2f0:	e0 95       	com	r30
     2f2:	8e 23       	and	r24, r30
     2f4:	8c 93       	st	X, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     2f6:	28 81       	ld	r18, Y
     2f8:	e2 23       	and	r30, r18
     2fa:	e8 83       	st	Y, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     2fc:	9f bf       	out	0x3f, r25	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     304:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     306:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     308:	ec 91       	ld	r30, X
     30a:	e2 2b       	or	r30, r18
     30c:	ec 93       	st	X, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     30e:	8f bf       	out	0x3f, r24	; 63
     310:	f6 cf       	rjmp	.-20     	; 0x2fe <pinMode+0x4e>

00000312 <analogRead>:
analogRead():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
     312:	88 51       	subi	r24, 0x18	; 24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     314:	80 64       	ori	r24, 0x40	; 64
     316:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     31a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     31e:	80 64       	ori	r24, 0x40	; 64
     320:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
     324:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     328:	86 fd       	sbrc	r24, 6
     32a:	fc cf       	rjmp	.-8      	; 0x324 <analogRead+0x12>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
     32c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
     330:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
     334:	08 95       	ret

00000336 <delayMicroseconds>:
delayMicroseconds():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
     336:	00 00       	nop
     338:	00 00       	nop
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:767
    "nop" "\n\t"
    "nop"); //just waiting 2 cycles

  // for a 1 and 2 microsecond delay, simply return.  the overhead
  // of the function call takes 16 (18) cycles, which is 2us
  if (us <= 2) return; // = 3 cycles, (4 when true)
     33a:	83 30       	cpi	r24, 0x03	; 3
     33c:	91 05       	cpc	r25, r1
     33e:	28 f0       	brcs	.+10     	; 0x34a <delayMicroseconds+0x14>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:772

  // the following loop takes 1/2 of a microsecond (4 cycles)
  // per iteration, so execute it twice for each microsecond of
  // delay requested.
  us <<= 1; //x2 us, = 2 cycles
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:777

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
     344:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <delayMicroseconds+0x10>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     34a:	08 95       	ret

0000034c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]>:
DisplayString():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:189
/*******************************************************************************************/
//Given a string such as "-A32", we display -A32
//Each digit is displayed for ~2000us, and cycles through the 4 digits
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
     34c:	6f 92       	push	r6
     34e:	7f 92       	push	r7
     350:	9f 92       	push	r9
     352:	bf 92       	push	r11
     354:	cf 92       	push	r12
     356:	df 92       	push	r13
     358:	ef 92       	push	r14
     35a:	ff 92       	push	r15
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	7c 01       	movw	r14, r24
     364:	96 2e       	mov	r9, r22
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:192
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     366:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:238
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
		}
		//Service the decimal point, apostrophe and colon
		if ((DecAposColon & (1<<(digit-1))) && (digit < 5)) //Test DecAposColon to see if we need to turn on a decimal point
     368:	c6 2e       	mov	r12, r22
     36a:	d1 2c       	mov	r13, r1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:273
			  digitalWrite(digit4, DigitOff);
			  break;
			//This only currently works for 4 digits
		}
		// The display is on for microSeconds(brightnessLevel + 1), now turn off for the remainder of the framePeriod
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     36c:	81 ed       	ldi	r24, 0xD1	; 209
     36e:	68 2e       	mov	r6, r24
     370:	87 e0       	ldi	r24, 0x07	; 7
     372:	78 2e       	mov	r7, r24
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:192
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     374:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <display1+0x15>
     378:	81 17       	cp	r24, r17
     37a:	08 f4       	brcc	.+2      	; 0x37e <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x32>
     37c:	0d c1       	rjmp	.+538    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
	{
		switch(digit)
     37e:	c1 2f       	mov	r28, r17
     380:	d0 e0       	ldi	r29, 0x00	; 0
     382:	12 30       	cpi	r17, 0x02	; 2
     384:	09 f4       	brne	.+2      	; 0x388 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x3c>
     386:	55 c0       	rjmp	.+170    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     388:	08 f0       	brcs	.+2      	; 0x38c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x40>
     38a:	47 c0       	rjmp	.+142    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:197
		{
			case 1:
				digitalWrite(digit1, DigitOn);
     38c:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <display1+0x1>
     390:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <display1+0x5>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     394:	11 30       	cpi	r17, 0x01	; 1
     396:	09 f4       	brne	.+2      	; 0x39a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x4e>
     398:	49 c0       	rjmp	.+146    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:215

		//Here we access the array of segments
		//This could be cleaned up a bit but it works
		//displayCharacter(toDisplay[digit-1]); //Now display this digit
		// displayArray (defined in SevSeg.h) decides which segments are turned on for each number or symbol
		unsigned char characterToDisplay = toDisplay[digit-1];
     39a:	f7 01       	movw	r30, r14
     39c:	ec 0f       	add	r30, r28
     39e:	fd 1f       	adc	r31, r29
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	b0 80       	ld	r11, Z
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:216
		if (characterToDisplay & 0x80)	// bit 7 enables bit-per-segment control
     3a4:	b7 fe       	sbrs	r11, 7
     3a6:	4f c0       	rjmp	.+158    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:218
		{	// Each bit of characterToDisplay turns on a single segment (from A-to-G)
			if (characterToDisplay & 0x01) digitalWrite(segmentA, SegOn);
     3a8:	b0 fe       	sbrs	r11, 0
     3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x6c>
     3ac:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     3b0:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <display1+0xd>
     3b4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:219
			if (characterToDisplay & 0x02) digitalWrite(segmentB, SegOn);
     3b8:	b1 fe       	sbrs	r11, 1
     3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x7c>
     3bc:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     3c0:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <display1+0xe>
     3c4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:220
			if (characterToDisplay & 0x04) digitalWrite(segmentC, SegOn);
     3c8:	b2 fe       	sbrs	r11, 2
     3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x8c>
     3cc:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     3d0:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <display1+0xf>
     3d4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:221
			if (characterToDisplay & 0x08) digitalWrite(segmentD, SegOn);
     3d8:	b3 fe       	sbrs	r11, 3
     3da:	06 c0       	rjmp	.+12     	; 0x3e8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x9c>
     3dc:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     3e0:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <display1+0x10>
     3e4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:222
			if (characterToDisplay & 0x10) digitalWrite(segmentE, SegOn);
     3e8:	b4 fe       	sbrs	r11, 4
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0xac>
     3ec:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     3f0:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <display1+0x11>
     3f4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:223
			if (characterToDisplay & 0x20) digitalWrite(segmentF, SegOn);
     3f8:	b5 fe       	sbrs	r11, 5
     3fa:	06 c0       	rjmp	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3fc:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     400:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <display1+0x12>
     404:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:224
			if (characterToDisplay & 0x40) digitalWrite(segmentG, SegOn);
     408:	b6 fe       	sbrs	r11, 6
     40a:	54 c0       	rjmp	.+168    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:235
			if (chr & (1<<5)) digitalWrite(segmentB, SegOn);
			if (chr & (1<<4)) digitalWrite(segmentC, SegOn);
			if (chr & (1<<3)) digitalWrite(segmentD, SegOn);
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
     40c:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     410:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <display1+0x13>
     414:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
     418:	4d c0       	rjmp	.+154    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     41a:	13 30       	cpi	r17, 0x03	; 3
     41c:	79 f0       	breq	.+30     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:206
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
				break;
			case 4:
				digitalWrite(digit4, DigitOn);
     41e:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <display1+0x1>
     422:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <display1+0x8>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     426:	14 30       	cpi	r17, 0x04	; 4
     428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	b7 cf       	rjmp	.-146    	; 0x39a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x4e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:206
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
				break;
			case 4:
				digitalWrite(digit4, DigitOn);
     42c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
     430:	b4 cf       	rjmp	.-152    	; 0x39a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x4e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:200
		{
			case 1:
				digitalWrite(digit1, DigitOn);
				break;
			case 2:
				digitalWrite(digit2, DigitOn);
     432:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <display1+0x1>
     436:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <display1+0x6>
     43a:	f8 cf       	rjmp	.-16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:203
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
     43c:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <display1+0x1>
     440:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <display1+0x7>
     444:	f3 cf       	rjmp	.-26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:228
			if (characterToDisplay & 0x20) digitalWrite(segmentF, SegOn);
			if (characterToDisplay & 0x40) digitalWrite(segmentG, SegOn);
		}
		else
		{
			const uint8_t chr = pgm_read_byte(&characterArray[characterToDisplay]);
     446:	eb 2d       	mov	r30, r11
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	e0 54       	subi	r30, 0x40	; 64
     44c:	ff 4f       	sbci	r31, 0xFF	; 255
     44e:	b4 90       	lpm	r11, Z
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:229
			if (chr & (1<<6)) digitalWrite(segmentA, SegOn);
     450:	b6 fe       	sbrs	r11, 6
     452:	06 c0       	rjmp	.+12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     454:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     458:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <display1+0xd>
     45c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:230
			if (chr & (1<<5)) digitalWrite(segmentB, SegOn);
     460:	b5 fe       	sbrs	r11, 5
     462:	06 c0       	rjmp	.+12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     464:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     468:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <display1+0xe>
     46c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:231
			if (chr & (1<<4)) digitalWrite(segmentC, SegOn);
     470:	b4 fe       	sbrs	r11, 4
     472:	06 c0       	rjmp	.+12     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     474:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     478:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <display1+0xf>
     47c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:232
			if (chr & (1<<3)) digitalWrite(segmentD, SegOn);
     480:	b3 fe       	sbrs	r11, 3
     482:	06 c0       	rjmp	.+12     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     484:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     488:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <display1+0x10>
     48c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:233
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
     490:	b2 fe       	sbrs	r11, 2
     492:	06 c0       	rjmp	.+12     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     494:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     498:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <display1+0x11>
     49c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:234
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
     4a0:	b1 fe       	sbrs	r11, 1
     4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4a4:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     4a8:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <display1+0x12>
     4ac:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:235
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
     4b0:	b0 fc       	sbrc	r11, 0
     4b2:	ac cf       	rjmp	.-168    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:238
		}
		//Service the decimal point, apostrophe and colon
		if ((DecAposColon & (1<<(digit-1))) && (digit < 5)) //Test DecAposColon to see if we need to turn on a decimal point
     4b4:	21 97       	sbiw	r28, 0x01	; 1
     4b6:	c6 01       	movw	r24, r12
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4ba:	95 95       	asr	r25
     4bc:	87 95       	ror	r24
     4be:	ca 95       	dec	r28
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4c2:	80 ff       	sbrs	r24, 0
     4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4c6:	15 30       	cpi	r17, 0x05	; 5
     4c8:	30 f4       	brcc	.+12     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:239
			digitalWrite(segmentDP, SegOn);
     4ca:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     4ce:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <display1+0x14>
     4d2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:241

		delayMicroseconds(brightnessDelay + 1); //Display this digit for a fraction of a second (between 1us and 5000us, 500-2000 is pretty good)
     4d6:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <display1+0x16>
     4da:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <display1+0x17>
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	0e 94 9b 01 	call	0x336	; 0x336 <delayMicroseconds>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:246
		//The + 1 is a bit of a hack but it removes the possible zero display (0 causes display to become bright and flickery)
		//If you set this too long, the display will start to flicker. Set it to 25000 for some fun.

		//Turn off all segments
		digitalWrite(segmentA, SegOff);
     4e4:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <display1+0x4>
     4e8:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <display1+0xd>
     4ec:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:247
		digitalWrite(segmentB, SegOff);
     4f0:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <display1+0x4>
     4f4:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <display1+0xe>
     4f8:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:248
		digitalWrite(segmentC, SegOff);
     4fc:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <display1+0x4>
     500:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <display1+0xf>
     504:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:249
		digitalWrite(segmentD, SegOff);
     508:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <display1+0x4>
     50c:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <display1+0x10>
     510:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:250
		digitalWrite(segmentE, SegOff);
     514:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <display1+0x4>
     518:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <display1+0x11>
     51c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:251
		digitalWrite(segmentF, SegOff);
     520:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <display1+0x4>
     524:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <display1+0x12>
     528:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:252
		digitalWrite(segmentG, SegOff);
     52c:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <display1+0x4>
     530:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <display1+0x13>
     534:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:253
		digitalWrite(segmentDP, SegOff);
     538:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <display1+0x4>
     53c:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <display1+0x14>
     540:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256

		//Turn off this digit
		switch(digit)
     544:	12 30       	cpi	r17, 0x02	; 2
     546:	f1 f0       	breq	.+60     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     548:	90 f4       	brcc	.+36     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:259
		{
			case 1:
			  digitalWrite(digit1, DigitOff);
     54a:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <display1+0x2>
     54e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <display1+0x5>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     552:	11 30       	cpi	r17, 0x01	; 1
     554:	a1 f0       	breq	.+40     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:273
			  digitalWrite(digit4, DigitOff);
			  break;
			//This only currently works for 4 digits
		}
		// The display is on for microSeconds(brightnessLevel + 1), now turn off for the remainder of the framePeriod
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     556:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <display1+0x16>
     55a:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <display1+0x17>
     55e:	93 01       	movw	r18, r6
     560:	28 1b       	sub	r18, r24
     562:	39 0b       	sbc	r19, r25
     564:	c9 01       	movw	r24, r18
     566:	0e 94 9b 01 	call	0x336	; 0x336 <delayMicroseconds>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:192
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     56a:	1f 5f       	subi	r17, 0xFF	; 255
     56c:	03 cf       	rjmp	.-506    	; 0x374 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x28>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     56e:	13 30       	cpi	r17, 0x03	; 3
     570:	71 f0       	breq	.+28     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:268
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
			  break;
			case 4:
			  digitalWrite(digit4, DigitOff);
     572:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <display1+0x2>
     576:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <display1+0x8>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     57a:	14 30       	cpi	r17, 0x04	; 4
     57c:	61 f7       	brne	.-40     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:268
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
			  break;
			case 4:
			  digitalWrite(digit4, DigitOff);
     57e:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
     582:	e9 cf       	rjmp	.-46     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:262
		{
			case 1:
			  digitalWrite(digit1, DigitOff);
			  break;
			case 2:
			  digitalWrite(digit2, DigitOff);
     584:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <display1+0x2>
     588:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <display1+0x6>
     58c:	f8 cf       	rjmp	.-16     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:265
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
     58e:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <display1+0x2>
     592:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <display1+0x7>
     596:	f3 cf       	rjmp	.-26     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:279
	}

	//After we've gone through the digits, we control the colon and apostrophe (if the display supports it)

	//Turn on the colon and/or apostrophe
	if ((digitColon != 255) || (digitApostrophe != 255))
     598:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <display1+0xa>
     59c:	8f 3f       	cpi	r24, 0xFF	; 255
     59e:	29 f4       	brne	.+10     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5a0:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <display1+0x9>
     5a4:	9f 3f       	cpi	r25, 0xFF	; 255
     5a6:	09 f4       	brne	.+2      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5a8:	4e c0       	rjmp	.+156    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:281
	{
		if (DecAposColon & (1<<4)) //Test to see if we need to turn on the Colon
     5aa:	94 fe       	sbrs	r9, 4
     5ac:	0a c0       	rjmp	.+20     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:283
		{
			digitalWrite(digitColon, DigitOn);
     5ae:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <display1+0x1>
     5b2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:284
			digitalWrite(segmentColon, SegOn);
     5b6:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     5ba:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <display1+0xc>
     5be:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:286
		}
		if (DecAposColon & (1<<5)) //Test DecAposColon to see if we need to turn on Apostrophe
     5c2:	95 fe       	sbrs	r9, 5
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:288
		{
			digitalWrite(digitApostrophe, DigitOn);
     5c6:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <display1+0x1>
     5ca:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <display1+0x9>
     5ce:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:289
			digitalWrite(segmentApostrophe, SegOn);
     5d2:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <display1+0x3>
     5d6:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <display1+0xb>
     5da:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:291
		}
		delayMicroseconds(brightnessDelay + 1); //Display this digit for a fraction of a second (between 1us and 5000us, 500-2000 is pretty good)
     5de:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <display1+0x16>
     5e2:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <display1+0x17>
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	0e 94 9b 01 	call	0x336	; 0x336 <delayMicroseconds>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:294

		//Turn off the colon and/or apostrophe
		digitalWrite(digitColon, DigitOff);
     5ec:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <display1+0x2>
     5f0:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <display1+0xa>
     5f4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:295
		digitalWrite(segmentColon, SegOff);
     5f8:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <display1+0x4>
     5fc:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <display1+0xc>
     600:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:296
		digitalWrite(digitApostrophe, DigitOff);
     604:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <display1+0x2>
     608:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <display1+0x9>
     60c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:297
		digitalWrite(segmentApostrophe, SegOff);
     610:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <display1+0x4>
     614:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <display1+0xb>
     618:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:298
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     61c:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <display1+0x16>
     620:	30 91 86 02 	lds	r19, 0x0286	; 0x800286 <display1+0x17>
     624:	81 ed       	ldi	r24, 0xD1	; 209
     626:	97 e0       	ldi	r25, 0x07	; 7
     628:	82 1b       	sub	r24, r18
     62a:	93 0b       	sbc	r25, r19
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:301
	}

}
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	bf 90       	pop	r11
     63c:	9f 90       	pop	r9
     63e:	7f 90       	pop	r7
     640:	6f 90       	pop	r6
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:298
		//Turn off the colon and/or apostrophe
		digitalWrite(digitColon, DigitOff);
		digitalWrite(segmentColon, SegOff);
		digitalWrite(digitApostrophe, DigitOff);
		digitalWrite(segmentApostrophe, SegOff);
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     642:	0c 94 9b 01 	jmp	0x336	; 0x336 <delayMicroseconds>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:301
	}

}
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	bf 90       	pop	r11
     656:	9f 90       	pop	r9
     658:	7f 90       	pop	r7
     65a:	6f 90       	pop	r6
     65c:	08 95       	ret

0000065e <micros>:
micros():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     65e:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     660:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     662:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <timer0_overflow_count>
     666:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <timer0_overflow_count+0x1>
     66a:	a0 91 6d 02 	lds	r26, 0x026D	; 0x80026d <timer0_overflow_count+0x2>
     66e:	b0 91 6e 02 	lds	r27, 0x026E	; 0x80026e <timer0_overflow_count+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     672:	26 b5       	in	r18, 0x26	; 38
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     674:	a8 9b       	sbis	0x15, 0	; 21
     676:	05 c0       	rjmp	.+10     	; 0x682 <micros+0x24>
     678:	2f 3f       	cpi	r18, 0xFF	; 255
     67a:	19 f0       	breq	.+6      	; 0x682 <micros+0x24>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	a1 1d       	adc	r26, r1
     680:	b1 1d       	adc	r27, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     682:	3f bf       	out	0x3f, r19	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     684:	ba 2f       	mov	r27, r26
     686:	a9 2f       	mov	r26, r25
     688:	98 2f       	mov	r25, r24
     68a:	88 27       	eor	r24, r24
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	62 0f       	add	r22, r18
     692:	71 1d       	adc	r23, r1
     694:	81 1d       	adc	r24, r1
     696:	91 1d       	adc	r25, r1
     698:	43 e0       	ldi	r20, 0x03	; 3
     69a:	66 0f       	add	r22, r22
     69c:	77 1f       	adc	r23, r23
     69e:	88 1f       	adc	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	4a 95       	dec	r20
     6a4:	d1 f7       	brne	.-12     	; 0x69a <micros+0x3c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     6a6:	08 95       	ret

000006a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>:
reset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:444
    return result;
}

void BlockNot::switchTo(Unit units) { baseUnits = units; }

void BlockNot::reset(const unsigned long newStartTime) {
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	ec 01       	movw	r28, r24
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:447
   unsigned long finalStartTime = newStartTime;
    if(newStartTime == 0) {
        switch(baseUnits) {
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	81 30       	cpi	r24, 0x01	; 1
     6b8:	91 05       	cpc	r25, r1
     6ba:	d9 f0       	breq	.+54     	; 0x6f2 <BlockNot::reset(unsigned long) [clone .constprop.18]+0x4a>
     6bc:	30 f0       	brcs	.+12     	; 0x6ca <BlockNot::reset(unsigned long) [clone .constprop.18]+0x22>
     6be:	02 97       	sbiw	r24, 0x02	; 2
     6c0:	c1 f0       	breq	.+48     	; 0x6f2 <BlockNot::reset(unsigned long) [clone .constprop.18]+0x4a>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:445
}

void BlockNot::switchTo(Unit units) { baseUnits = units; }

void BlockNot::reset(const unsigned long newStartTime) {
   unsigned long finalStartTime = newStartTime;
     6c2:	00 e0       	ldi	r16, 0x00	; 0
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	98 01       	movw	r18, r16
     6c8:	0a c0       	rjmp	.+20     	; 0x6de <BlockNot::reset(unsigned long) [clone .constprop.18]+0x36>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:449
    if(newStartTime == 0) {
        switch(baseUnits) {
            case MICROSECONDS:
                finalStartTime = micros() + microsOffset;
     6ca:	0e 94 2f 03 	call	0x65e	; 0x65e <micros>
     6ce:	08 85       	ldd	r16, Y+8	; 0x08
     6d0:	19 85       	ldd	r17, Y+9	; 0x09
     6d2:	2a 85       	ldd	r18, Y+10	; 0x0a
     6d4:	3b 85       	ldd	r19, Y+11	; 0x0b
     6d6:	06 0f       	add	r16, r22
     6d8:	17 1f       	adc	r17, r23
     6da:	28 1f       	adc	r18, r24
     6dc:	39 1f       	adc	r19, r25
resetTimer():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:509
            break;
    }
}

void BlockNot::resetTimer(const unsigned long newStartTime) {
    startTime = newStartTime;
     6de:	08 83       	st	Y, r16
     6e0:	19 83       	std	Y+1, r17	; 0x01
     6e2:	2a 83       	std	Y+2, r18	; 0x02
     6e4:	3b 83       	std	Y+3, r19	; 0x03
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:510
    onceTriggered = false;
     6e6:	1a 8a       	std	Y+18, r1	; 0x12
reset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:460
                finalStartTime = millis() + millisOffset;
                break;
        }
    }
    resetTimer(finalStartTime);
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	08 95       	ret
millis():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     6f2:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     6f4:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     6f6:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <timer0_millis>
     6fa:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <timer0_millis+0x1>
     6fe:	a0 91 bc 02 	lds	r26, 0x02BC	; 0x8002bc <timer0_millis+0x2>
     702:	b0 91 bd 02 	lds	r27, 0x02BD	; 0x8002bd <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     706:	2f bf       	out	0x3f, r18	; 63
reset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:455
                break;
            case MILLISECONDS:
                finalStartTime = millis() + millisOffset;
                break;
            case SECONDS:
                finalStartTime = millis() + millisOffset;
     708:	0c 81       	ldd	r16, Y+4	; 0x04
     70a:	1d 81       	ldd	r17, Y+5	; 0x05
     70c:	2e 81       	ldd	r18, Y+6	; 0x06
     70e:	3f 81       	ldd	r19, Y+7	; 0x07
     710:	08 0f       	add	r16, r24
     712:	19 1f       	adc	r17, r25
     714:	2a 1f       	adc	r18, r26
     716:	3b 1f       	adc	r19, r27
     718:	e2 cf       	rjmp	.-60     	; 0x6de <BlockNot::reset(unsigned long) [clone .constprop.18]+0x36>

0000071a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>:
_ZN8BlockNot11setDurationEm4Unitb.part.3():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:189
    if (resetOption) reset();
}

void BlockNot::setDuration(const unsigned long time, Unit inUnits, bool resetOption) {
    initDuration(time, inUnits);
    if (resetOption) reset();
     71a:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>

0000071e <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]>:
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:50
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
}

BlockNot::BlockNot(unsigned long time, Unit units) {
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	ec 01       	movw	r28, r24
     728:	1c 82       	std	Y+4, r1	; 0x04
     72a:	1d 82       	std	Y+5, r1	; 0x05
     72c:	1e 82       	std	Y+6, r1	; 0x06
     72e:	1f 82       	std	Y+7, r1	; 0x07
     730:	18 86       	std	Y+8, r1	; 0x08
     732:	19 86       	std	Y+9, r1	; 0x09
     734:	1a 86       	std	Y+10, r1	; 0x0a
     736:	1b 86       	std	Y+11, r1	; 0x0b
     738:	1c 86       	std	Y+12, r1	; 0x0c
     73a:	1d 86       	std	Y+13, r1	; 0x0d
     73c:	1e 86       	std	Y+14, r1	; 0x0e
     73e:	1f 86       	std	Y+15, r1	; 0x0f
     740:	19 8a       	std	Y+17, r1	; 0x11
     742:	18 8a       	std	Y+16, r1	; 0x10
     744:	1a 8a       	std	Y+18, r1	; 0x12
     746:	1e 8e       	std	Y+30, r1	; 0x1e
     748:	1d 8e       	std	Y+29, r1	; 0x1d
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:51
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
     74a:	00 91 b8 02 	lds	r16, 0x02B8	; 0x8002b8 <BlockNot::global>
     74e:	10 91 b9 02 	lds	r17, 0x02B9	; 0x8002b9 <BlockNot::global+0x1>
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	01 30       	cpi	r16, 0x01	; 1
     758:	11 05       	cpc	r17, r1
     75a:	11 f0       	breq	.+4      	; 0x760 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]+0x42>
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <BlockNot::global+0x1>
     764:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <BlockNot::global>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:52
    baseUnits = units;
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	9c 8b       	std	Y+20, r25	; 0x14
     76e:	8b 8b       	std	Y+19, r24	; 0x13
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:489
            break;
        case MILLISECONDS:
            duration.millis = time;
            break;
        case SECONDS:
            duration.seconds = time;
     770:	cb 01       	movw	r24, r22
     772:	ba 01       	movw	r22, r20
     774:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatunsisf>
     778:	6d 8b       	std	Y+21, r22	; 0x15
     77a:	7e 8b       	std	Y+22, r23	; 0x16
     77c:	8f 8b       	std	Y+23, r24	; 0x17
     77e:	98 8f       	std	Y+24, r25	; 0x18
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:54

BlockNot::BlockNot(unsigned long time, Unit units) {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    baseUnits = units;
    initDuration(time);
    reset();
     780:	ce 01       	movw	r24, r28
     782:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:55
    if (global == GLOBAL_RESET) addToTimerList();
     786:	01 30       	cpi	r16, 0x01	; 1
     788:	11 05       	cpc	r17, r1
     78a:	39 f0       	breq	.+14     	; 0x79a <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]+0x7c>
     78c:	ce 01       	movw	r24, r28
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:56
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:55
BlockNot::BlockNot(unsigned long time, Unit units) {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    baseUnits = units;
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
     796:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <BlockNot::addToTimerList()>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:56
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <BlockNot::timeSinceReset()>:
timeSinceReset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:513
void BlockNot::resetTimer(const unsigned long newStartTime) {
    startTime = newStartTime;
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	ec 01       	movw	r28, r24
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:515
    unsigned long result = 0L;
    unsigned long millisBase = millisOffset + millis();
     7b6:	6c 81       	ldd	r22, Y+4	; 0x04
     7b8:	7d 81       	ldd	r23, Y+5	; 0x05
     7ba:	8e 81       	ldd	r24, Y+6	; 0x06
     7bc:	9f 81       	ldd	r25, Y+7	; 0x07
millis():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     7be:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     7c0:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     7c2:	c0 90 ba 02 	lds	r12, 0x02BA	; 0x8002ba <timer0_millis>
     7c6:	d0 90 bb 02 	lds	r13, 0x02BB	; 0x8002bb <timer0_millis+0x1>
     7ca:	e0 90 bc 02 	lds	r14, 0x02BC	; 0x8002bc <timer0_millis+0x2>
     7ce:	f0 90 bd 02 	lds	r15, 0x02BD	; 0x8002bd <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     7d2:	2f bf       	out	0x3f, r18	; 63
timeSinceReset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:516
    switch (baseUnits) {
     7d4:	2b 89       	ldd	r18, Y+19	; 0x13
     7d6:	3c 89       	ldd	r19, Y+20	; 0x14
     7d8:	21 15       	cp	r18, r1
     7da:	31 05       	cpc	r19, r1
     7dc:	39 f0       	breq	.+14     	; 0x7ec <BlockNot::timeSinceReset()+0x48>
     7de:	23 30       	cpi	r18, 0x03	; 3
     7e0:	31 05       	cpc	r19, r1
     7e2:	f8 f0       	brcs	.+62     	; 0x822 <BlockNot::timeSinceReset()+0x7e>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:514
    startTime = newStartTime;
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
    unsigned long result = 0L;
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	cb 01       	movw	r24, r22
     7ea:	12 c0       	rjmp	.+36     	; 0x810 <BlockNot::timeSinceReset()+0x6c>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:518
    unsigned long millisBase = millisOffset + millis();
    switch (baseUnits) {
        case MICROSECONDS:
            result = microsOffset + micros() - startTime;
     7ec:	c8 84       	ldd	r12, Y+8	; 0x08
     7ee:	d9 84       	ldd	r13, Y+9	; 0x09
     7f0:	ea 84       	ldd	r14, Y+10	; 0x0a
     7f2:	fb 84       	ldd	r15, Y+11	; 0x0b
     7f4:	0e 94 2f 03 	call	0x65e	; 0x65e <micros>
     7f8:	08 81       	ld	r16, Y
     7fa:	19 81       	ldd	r17, Y+1	; 0x01
     7fc:	2a 81       	ldd	r18, Y+2	; 0x02
     7fe:	3b 81       	ldd	r19, Y+3	; 0x03
     800:	c0 1a       	sub	r12, r16
     802:	d1 0a       	sbc	r13, r17
     804:	e2 0a       	sbc	r14, r18
     806:	f3 0a       	sbc	r15, r19
     808:	6c 0d       	add	r22, r12
     80a:	7d 1d       	adc	r23, r13
     80c:	8e 1d       	adc	r24, r14
     80e:	9f 1d       	adc	r25, r15
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:528
        case SECONDS:
            result = millisBase - startTime;
            break;
    }
    return result;
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	df 90       	pop	r13
     81e:	cf 90       	pop	r12
     820:	08 95       	ret
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:515
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
    unsigned long result = 0L;
    unsigned long millisBase = millisOffset + millis();
     822:	6c 0d       	add	r22, r12
     824:	7d 1d       	adc	r23, r13
     826:	8e 1d       	adc	r24, r14
     828:	9f 1d       	adc	r25, r15
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:524
            break;
        case MILLISECONDS:
            result = millisBase - startTime;
            break;
        case SECONDS:
            result = millisBase - startTime;
     82a:	c8 80       	ld	r12, Y
     82c:	d9 80       	ldd	r13, Y+1	; 0x01
     82e:	ea 80       	ldd	r14, Y+2	; 0x02
     830:	fb 80       	ldd	r15, Y+3	; 0x03
     832:	6c 19       	sub	r22, r12
     834:	7d 09       	sbc	r23, r13
     836:	8e 09       	sbc	r24, r14
     838:	9f 09       	sbc	r25, r15
     83a:	ea cf       	rjmp	.-44     	; 0x810 <BlockNot::timeSinceReset()+0x6c>

0000083c <BlockNot::triggered(bool)>:
triggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:236
            break;
    }
    if (resetOption) reset();
}

bool BlockNot::triggered(bool resetOption) {
     83c:	cf 92       	push	r12
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
     84e:	06 2f       	mov	r16, r22
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:532
    return result;
}

bool BlockNot::hasTriggered() {
    bool triggered;
    switch(baseUnits) {
     850:	8b 89       	ldd	r24, Y+19	; 0x13
     852:	9c 89       	ldd	r25, Y+20	; 0x14
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	91 05       	cpc	r25, r1
     858:	91 f1       	breq	.+100    	; 0x8be <BlockNot::triggered(bool)+0x82>
     85a:	c0 f0       	brcs	.+48     	; 0x88c <BlockNot::triggered(bool)+0x50>
     85c:	02 97       	sbiw	r24, 0x02	; 2
     85e:	79 f1       	breq	.+94     	; 0x8be <BlockNot::triggered(bool)+0x82>
triggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:238
    if (resetOption) reset();
}

bool BlockNot::triggered(bool resetOption) {
    bool triggered = hasTriggered();
    if (resetOption && triggered) {
     860:	00 23       	and	r16, r16
     862:	29 f0       	breq	.+10     	; 0x86e <BlockNot::triggered(bool)+0x32>
     864:	11 23       	and	r17, r17
     866:	19 f0       	breq	.+6      	; 0x86e <BlockNot::triggered(bool)+0x32>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:239
        reset();
     868:	ce 01       	movw	r24, r28
     86a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:241
    }
    if (timerState == RUNNING) return triggered;
     86e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     870:	9e 8d       	ldd	r25, Y+30	; 0x1e
     872:	89 2b       	or	r24, r25
     874:	09 f0       	breq	.+2      	; 0x878 <BlockNot::triggered(bool)+0x3c>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:242
    else return false;
     876:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:243
}
     878:	81 2f       	mov	r24, r17
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	08 95       	ret
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:534

bool BlockNot::hasTriggered() {
    bool triggered;
    switch(baseUnits) {
        case MICROSECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.micros;
     88c:	ce 01       	movw	r24, r28
     88e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <BlockNot::timeSinceReset()>
     892:	6b 01       	movw	r12, r22
     894:	7c 01       	movw	r14, r24
_ZNK8BlockNot5cTime7micro_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:213
            micro_t &operator=(double us) {
                seconds = us * .000001;
                return *this;
            }
            operator double() const {
                return seconds * 1000000.0;
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	34 e2       	ldi	r19, 0x24	; 36
     89a:	44 e7       	ldi	r20, 0x74	; 116
     89c:	59 e4       	ldi	r21, 0x49	; 73
_ZNK8BlockNot5cTime7milli_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:201
            milli_t &operator=(double ms) {
                seconds = ms * .001;
                return *this;
            }
            operator double() const {
                return seconds * 1000.0;
     89e:	6d 89       	ldd	r22, Y+21	; 0x15
     8a0:	7e 89       	ldd	r23, Y+22	; 0x16
     8a2:	8f 89       	ldd	r24, Y+23	; 0x17
     8a4:	98 8d       	ldd	r25, Y+24	; 0x18
     8a6:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:540
            break;
        case MILLISECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.millis;
            break;
        case SECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.millis;
     8aa:	0e 94 04 13 	call	0x2608	; 0x2608 <__fixunssfsi>
     8ae:	11 e0       	ldi	r17, 0x01	; 1
     8b0:	c6 16       	cp	r12, r22
     8b2:	d7 06       	cpc	r13, r23
     8b4:	e8 06       	cpc	r14, r24
     8b6:	f9 06       	cpc	r15, r25
     8b8:	98 f6       	brcc	.-90     	; 0x860 <BlockNot::triggered(bool)+0x24>
     8ba:	10 e0       	ldi	r17, 0x00	; 0
     8bc:	d1 cf       	rjmp	.-94     	; 0x860 <BlockNot::triggered(bool)+0x24>
     8be:	ce 01       	movw	r24, r28
     8c0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <BlockNot::timeSinceReset()>
     8c4:	6b 01       	movw	r12, r22
     8c6:	7c 01       	movw	r14, r24
_ZNK8BlockNot5cTime7milli_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:201
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	4a e7       	ldi	r20, 0x7A	; 122
     8ce:	54 e4       	ldi	r21, 0x44	; 68
     8d0:	e6 cf       	rjmp	.-52     	; 0x89e <BlockNot::triggered(bool)+0x62>

000008d2 <read(int)>:
read():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1053
  pinMode(PIN, OUTPUT);
}

//Read Input

bool read(int PIN) {
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	9c 01       	movw	r18, r24
digitalRead():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
     8d8:	fc 01       	movw	r30, r24
     8da:	e0 56       	subi	r30, 0x60	; 96
     8dc:	ff 4f       	sbci	r31, 0xFF	; 255
     8de:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     8e0:	f9 01       	movw	r30, r18
     8e2:	e6 59       	subi	r30, 0x96	; 150
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     8e8:	f9 01       	movw	r30, r18
     8ea:	e6 5b       	subi	r30, 0xB6	; 182
     8ec:	fe 4f       	sbci	r31, 0xFE	; 254
     8ee:	c4 91       	lpm	r28, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     8f0:	cc 23       	and	r28, r28
     8f2:	79 f0       	breq	.+30     	; 0x912 <read(int)+0x40>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     8f4:	81 11       	cpse	r24, r1
     8f6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <turnOffPWM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     8fa:	ec 2f       	mov	r30, r28
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	ee 0f       	add	r30, r30
     900:	ff 1f       	adc	r31, r31
     902:	e0 5c       	subi	r30, 0xC0	; 192
     904:	fe 4f       	sbci	r31, 0xFE	; 254
     906:	a5 91       	lpm	r26, Z+
     908:	b4 91       	lpm	r27, Z
     90a:	ec 91       	ld	r30, X
     90c:	ed 23       	and	r30, r29
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	09 f4       	brne	.+2      	; 0x914 <read(int)+0x42>
read():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1057
  if(digitalRead(PIN)) {
    return true;
  } else {
    return false;
     912:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1059
  }
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <setOUT(int)>:
setOUT():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1048
}

//Setup Outputs

void setOUT(int PIN) {
  pinMode(PIN, OUTPUT);
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <pinMode>

00000920 <setIN(int)>:
setIN():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1042
}

// Setup Inputs

void setIN(int PIN) {
  pinMode(PIN, INPUT);
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <pinMode>

00000926 <ampo()>:
ampo():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:736
    boutvoltage = 0.64 * analogRead(BOTPIN);
    }
  }
}

void ampo() {
     926:	cf 92       	push	r12
     928:	df 92       	push	r13
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	ca e0       	ldi	r28, 0x0A	; 10
     934:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:739
float ampov;
for(int i=0; i<10; i++) {
  if((0.1 * analogRead(current)) > ampov){
     936:	8e e1       	ldi	r24, 0x1E	; 30
     938:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     93c:	bc 01       	movw	r22, r24
     93e:	99 0f       	add	r25, r25
     940:	88 0b       	sbc	r24, r24
     942:	99 0b       	sbc	r25, r25
     944:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     948:	2d ec       	ldi	r18, 0xCD	; 205
     94a:	3c ec       	ldi	r19, 0xCC	; 204
     94c:	4c ec       	ldi	r20, 0xCC	; 204
     94e:	5d e3       	ldi	r21, 0x3D	; 61
     950:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
     954:	a7 01       	movw	r20, r14
     956:	96 01       	movw	r18, r12
     958:	0e 94 33 13 	call	0x2666	; 0x2666 <__gesf2>
     95c:	18 16       	cp	r1, r24
     95e:	8c f4       	brge	.+34     	; 0x982 <ampo()+0x5c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:740
    ampov = 0.1 * analogRead(current);
     960:	8e e1       	ldi	r24, 0x1E	; 30
     962:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     966:	bc 01       	movw	r22, r24
     968:	99 0f       	add	r25, r25
     96a:	88 0b       	sbc	r24, r24
     96c:	99 0b       	sbc	r25, r25
     96e:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     972:	2d ec       	ldi	r18, 0xCD	; 205
     974:	3c ec       	ldi	r19, 0xCC	; 204
     976:	4c ec       	ldi	r20, 0xCC	; 204
     978:	5d e3       	ldi	r21, 0x3D	; 61
     97a:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
     97e:	6b 01       	movw	r12, r22
     980:	7c 01       	movw	r14, r24
     982:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:738
  }
}

void ampo() {
float ampov;
for(int i=0; i<10; i++) {
     984:	c1 f6       	brne	.-80     	; 0x936 <ampo()+0x10>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:743
  if((0.1 * analogRead(current)) > ampov){
    ampov = 0.1 * analogRead(current);
    }
  }
currentload = ampov;
     986:	c7 01       	movw	r24, r14
     988:	b6 01       	movw	r22, r12
     98a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixsfsi>
     98e:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <currentload+0x1>
     992:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <currentload>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:744
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	08 95       	ret

000009a4 <OVo()>:
OVo():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:722
  }
}



void OVo() {
     9a4:	cf 92       	push	r12
     9a6:	df 92       	push	r13
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ca e0       	ldi	r28, 0x0A	; 10
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:724
for(int i=0; i<10; i++) {
  if((0.64 * analogRead(ROTPIN)) > routvoltage){
     9b4:	8b e1       	ldi	r24, 0x1B	; 27
     9b6:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     9ba:	bc 01       	movw	r22, r24
     9bc:	99 0f       	add	r25, r25
     9be:	88 0b       	sbc	r24, r24
     9c0:	99 0b       	sbc	r25, r25
     9c2:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     9c6:	2a e0       	ldi	r18, 0x0A	; 10
     9c8:	37 ed       	ldi	r19, 0xD7	; 215
     9ca:	43 e2       	ldi	r20, 0x23	; 35
     9cc:	5f e3       	ldi	r21, 0x3F	; 63
     9ce:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
     9d2:	6b 01       	movw	r12, r22
     9d4:	7c 01       	movw	r14, r24
     9d6:	60 91 43 02 	lds	r22, 0x0243	; 0x800243 <routvoltage>
     9da:	70 91 44 02 	lds	r23, 0x0244	; 0x800244 <routvoltage+0x1>
     9de:	07 2e       	mov	r0, r23
     9e0:	00 0c       	add	r0, r0
     9e2:	88 0b       	sbc	r24, r24
     9e4:	99 0b       	sbc	r25, r25
     9e6:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	c7 01       	movw	r24, r14
     9f0:	b6 01       	movw	r22, r12
     9f2:	0e 94 33 13 	call	0x2666	; 0x2666 <__gesf2>
     9f6:	18 16       	cp	r1, r24
     9f8:	ac f4       	brge	.+42     	; 0xa24 <OVo()+0x80>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:725
    routvoltage = 0.64 * analogRead(ROTPIN);
     9fa:	8b e1       	ldi	r24, 0x1B	; 27
     9fc:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     a00:	bc 01       	movw	r22, r24
     a02:	99 0f       	add	r25, r25
     a04:	88 0b       	sbc	r24, r24
     a06:	99 0b       	sbc	r25, r25
     a08:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     a0c:	2a e0       	ldi	r18, 0x0A	; 10
     a0e:	37 ed       	ldi	r19, 0xD7	; 215
     a10:	43 e2       	ldi	r20, 0x23	; 35
     a12:	5f e3       	ldi	r21, 0x3F	; 63
     a14:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
     a18:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixsfsi>
     a1c:	70 93 44 02 	sts	0x0244, r23	; 0x800244 <routvoltage+0x1>
     a20:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <routvoltage>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:727
    }
  if((0.64 * analogRead(YOTPIN)) > youtvoltage){
     a24:	8c e1       	ldi	r24, 0x1C	; 28
     a26:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     a2a:	bc 01       	movw	r22, r24
     a2c:	99 0f       	add	r25, r25
     a2e:	88 0b       	sbc	r24, r24
     a30:	99 0b       	sbc	r25, r25
     a32:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     a36:	2a e0       	ldi	r18, 0x0A	; 10
     a38:	37 ed       	ldi	r19, 0xD7	; 215
     a3a:	43 e2       	ldi	r20, 0x23	; 35
     a3c:	5f e3       	ldi	r21, 0x3F	; 63
     a3e:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
     a42:	6b 01       	movw	r12, r22
     a44:	7c 01       	movw	r14, r24
     a46:	60 91 3f 02 	lds	r22, 0x023F	; 0x80023f <youtvoltage>
     a4a:	70 91 40 02 	lds	r23, 0x0240	; 0x800240 <youtvoltage+0x1>
     a4e:	07 2e       	mov	r0, r23
     a50:	00 0c       	add	r0, r0
     a52:	88 0b       	sbc	r24, r24
     a54:	99 0b       	sbc	r25, r25
     a56:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     a5a:	9b 01       	movw	r18, r22
     a5c:	ac 01       	movw	r20, r24
     a5e:	c7 01       	movw	r24, r14
     a60:	b6 01       	movw	r22, r12
     a62:	0e 94 33 13 	call	0x2666	; 0x2666 <__gesf2>
     a66:	18 16       	cp	r1, r24
     a68:	ac f4       	brge	.+42     	; 0xa94 <OVo()+0xf0>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:728
    youtvoltage = 0.64 * analogRead(YOTPIN);
     a6a:	8c e1       	ldi	r24, 0x1C	; 28
     a6c:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     a70:	bc 01       	movw	r22, r24
     a72:	99 0f       	add	r25, r25
     a74:	88 0b       	sbc	r24, r24
     a76:	99 0b       	sbc	r25, r25
     a78:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     a7c:	2a e0       	ldi	r18, 0x0A	; 10
     a7e:	37 ed       	ldi	r19, 0xD7	; 215
     a80:	43 e2       	ldi	r20, 0x23	; 35
     a82:	5f e3       	ldi	r21, 0x3F	; 63
     a84:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
     a88:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixsfsi>
     a8c:	70 93 40 02 	sts	0x0240, r23	; 0x800240 <youtvoltage+0x1>
     a90:	60 93 3f 02 	sts	0x023F, r22	; 0x80023f <youtvoltage>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:730
    }
  if((0.64 * analogRead(BOTPIN)) > boutvoltage){
     a94:	8d e1       	ldi	r24, 0x1D	; 29
     a96:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     a9a:	bc 01       	movw	r22, r24
     a9c:	99 0f       	add	r25, r25
     a9e:	88 0b       	sbc	r24, r24
     aa0:	99 0b       	sbc	r25, r25
     aa2:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     aa6:	2a e0       	ldi	r18, 0x0A	; 10
     aa8:	37 ed       	ldi	r19, 0xD7	; 215
     aaa:	43 e2       	ldi	r20, 0x23	; 35
     aac:	5f e3       	ldi	r21, 0x3F	; 63
     aae:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
     ab2:	6b 01       	movw	r12, r22
     ab4:	7c 01       	movw	r14, r24
     ab6:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <boutvoltage>
     aba:	70 91 3e 02 	lds	r23, 0x023E	; 0x80023e <boutvoltage+0x1>
     abe:	07 2e       	mov	r0, r23
     ac0:	00 0c       	add	r0, r0
     ac2:	88 0b       	sbc	r24, r24
     ac4:	99 0b       	sbc	r25, r25
     ac6:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     aca:	9b 01       	movw	r18, r22
     acc:	ac 01       	movw	r20, r24
     ace:	c7 01       	movw	r24, r14
     ad0:	b6 01       	movw	r22, r12
     ad2:	0e 94 33 13 	call	0x2666	; 0x2666 <__gesf2>
     ad6:	18 16       	cp	r1, r24
     ad8:	ac f4       	brge	.+42     	; 0xb04 <OVo()+0x160>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:731
    boutvoltage = 0.64 * analogRead(BOTPIN);
     ada:	8d e1       	ldi	r24, 0x1D	; 29
     adc:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     ae0:	bc 01       	movw	r22, r24
     ae2:	99 0f       	add	r25, r25
     ae4:	88 0b       	sbc	r24, r24
     ae6:	99 0b       	sbc	r25, r25
     ae8:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     aec:	2a e0       	ldi	r18, 0x0A	; 10
     aee:	37 ed       	ldi	r19, 0xD7	; 215
     af0:	43 e2       	ldi	r20, 0x23	; 35
     af2:	5f e3       	ldi	r21, 0x3F	; 63
     af4:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
     af8:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixsfsi>
     afc:	70 93 3e 02 	sts	0x023E, r23	; 0x80023e <boutvoltage+0x1>
     b00:	60 93 3d 02 	sts	0x023D, r22	; 0x80023d <boutvoltage>
     b04:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:723
}



void OVo() {
for(int i=0; i<10; i++) {
     b06:	09 f0       	breq	.+2      	; 0xb0a <OVo()+0x166>
     b08:	55 cf       	rjmp	.-342    	; 0x9b4 <OVo()+0x10>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:734
    }
  if((0.64 * analogRead(BOTPIN)) > boutvoltage){
    boutvoltage = 0.64 * analogRead(BOTPIN);
    }
  }
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	ff 90       	pop	r15
     b10:	ef 90       	pop	r14
     b12:	df 90       	pop	r13
     b14:	cf 90       	pop	r12
     b16:	08 95       	ret

00000b18 <IVo()>:
IVo():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:706
  IVo();
  OVo();
  ampo();
}

void IVo() {
     b18:	cf 92       	push	r12
     b1a:	df 92       	push	r13
     b1c:	ef 92       	push	r14
     b1e:	ff 92       	push	r15
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	ca e0       	ldi	r28, 0x0A	; 10
     b26:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:708
for(int i=0; i<10; i++) {
  if((0.64 * analogRead(RINPIN)) > rinvoltage){
     b28:	88 e1       	ldi	r24, 0x18	; 24
     b2a:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     b2e:	bc 01       	movw	r22, r24
     b30:	99 0f       	add	r25, r25
     b32:	88 0b       	sbc	r24, r24
     b34:	99 0b       	sbc	r25, r25
     b36:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     b3a:	2a e0       	ldi	r18, 0x0A	; 10
     b3c:	37 ed       	ldi	r19, 0xD7	; 215
     b3e:	43 e2       	ldi	r20, 0x23	; 35
     b40:	5f e3       	ldi	r21, 0x3F	; 63
     b42:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
     b46:	6b 01       	movw	r12, r22
     b48:	7c 01       	movw	r14, r24
     b4a:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <rinvoltage>
     b4e:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <rinvoltage+0x1>
     b52:	07 2e       	mov	r0, r23
     b54:	00 0c       	add	r0, r0
     b56:	88 0b       	sbc	r24, r24
     b58:	99 0b       	sbc	r25, r25
     b5a:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     b5e:	9b 01       	movw	r18, r22
     b60:	ac 01       	movw	r20, r24
     b62:	c7 01       	movw	r24, r14
     b64:	b6 01       	movw	r22, r12
     b66:	0e 94 33 13 	call	0x2666	; 0x2666 <__gesf2>
     b6a:	18 16       	cp	r1, r24
     b6c:	ac f4       	brge	.+42     	; 0xb98 <IVo()+0x80>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:709
    rinvoltage = 0.64 * analogRead(RINPIN);
     b6e:	88 e1       	ldi	r24, 0x18	; 24
     b70:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     b74:	bc 01       	movw	r22, r24
     b76:	99 0f       	add	r25, r25
     b78:	88 0b       	sbc	r24, r24
     b7a:	99 0b       	sbc	r25, r25
     b7c:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     b80:	2a e0       	ldi	r18, 0x0A	; 10
     b82:	37 ed       	ldi	r19, 0xD7	; 215
     b84:	43 e2       	ldi	r20, 0x23	; 35
     b86:	5f e3       	ldi	r21, 0x3F	; 63
     b88:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
     b8c:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixsfsi>
     b90:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <rinvoltage+0x1>
     b94:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <rinvoltage>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:711
    }
  if((0.64 * analogRead(YINPIN)) > yinvoltage){
     b98:	89 e1       	ldi	r24, 0x19	; 25
     b9a:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     b9e:	bc 01       	movw	r22, r24
     ba0:	99 0f       	add	r25, r25
     ba2:	88 0b       	sbc	r24, r24
     ba4:	99 0b       	sbc	r25, r25
     ba6:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     baa:	2a e0       	ldi	r18, 0x0A	; 10
     bac:	37 ed       	ldi	r19, 0xD7	; 215
     bae:	43 e2       	ldi	r20, 0x23	; 35
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
     bb6:	6b 01       	movw	r12, r22
     bb8:	7c 01       	movw	r14, r24
     bba:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <yinvoltage>
     bbe:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <yinvoltage+0x1>
     bc2:	07 2e       	mov	r0, r23
     bc4:	00 0c       	add	r0, r0
     bc6:	88 0b       	sbc	r24, r24
     bc8:	99 0b       	sbc	r25, r25
     bca:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     bce:	9b 01       	movw	r18, r22
     bd0:	ac 01       	movw	r20, r24
     bd2:	c7 01       	movw	r24, r14
     bd4:	b6 01       	movw	r22, r12
     bd6:	0e 94 33 13 	call	0x2666	; 0x2666 <__gesf2>
     bda:	18 16       	cp	r1, r24
     bdc:	ac f4       	brge	.+42     	; 0xc08 <IVo()+0xf0>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:712
    yinvoltage = 0.64 * analogRead(YINPIN);
     bde:	89 e1       	ldi	r24, 0x19	; 25
     be0:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     be4:	bc 01       	movw	r22, r24
     be6:	99 0f       	add	r25, r25
     be8:	88 0b       	sbc	r24, r24
     bea:	99 0b       	sbc	r25, r25
     bec:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     bf0:	2a e0       	ldi	r18, 0x0A	; 10
     bf2:	37 ed       	ldi	r19, 0xD7	; 215
     bf4:	43 e2       	ldi	r20, 0x23	; 35
     bf6:	5f e3       	ldi	r21, 0x3F	; 63
     bf8:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
     bfc:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixsfsi>
     c00:	70 93 b9 01 	sts	0x01B9, r23	; 0x8001b9 <yinvoltage+0x1>
     c04:	60 93 b8 01 	sts	0x01B8, r22	; 0x8001b8 <yinvoltage>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:714
    }
  if((0.64 * analogRead(BINPIN)) > binvoltage){
     c08:	8a e1       	ldi	r24, 0x1A	; 26
     c0a:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     c0e:	bc 01       	movw	r22, r24
     c10:	99 0f       	add	r25, r25
     c12:	88 0b       	sbc	r24, r24
     c14:	99 0b       	sbc	r25, r25
     c16:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     c1a:	2a e0       	ldi	r18, 0x0A	; 10
     c1c:	37 ed       	ldi	r19, 0xD7	; 215
     c1e:	43 e2       	ldi	r20, 0x23	; 35
     c20:	5f e3       	ldi	r21, 0x3F	; 63
     c22:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
     c26:	6b 01       	movw	r12, r22
     c28:	7c 01       	movw	r14, r24
     c2a:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <binvoltage>
     c2e:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <binvoltage+0x1>
     c32:	07 2e       	mov	r0, r23
     c34:	00 0c       	add	r0, r0
     c36:	88 0b       	sbc	r24, r24
     c38:	99 0b       	sbc	r25, r25
     c3a:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     c3e:	9b 01       	movw	r18, r22
     c40:	ac 01       	movw	r20, r24
     c42:	c7 01       	movw	r24, r14
     c44:	b6 01       	movw	r22, r12
     c46:	0e 94 33 13 	call	0x2666	; 0x2666 <__gesf2>
     c4a:	18 16       	cp	r1, r24
     c4c:	ac f4       	brge	.+42     	; 0xc78 <IVo()+0x160>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:715
    binvoltage = 0.64 * analogRead(BINPIN);
     c4e:	8a e1       	ldi	r24, 0x1A	; 26
     c50:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     c54:	bc 01       	movw	r22, r24
     c56:	99 0f       	add	r25, r25
     c58:	88 0b       	sbc	r24, r24
     c5a:	99 0b       	sbc	r25, r25
     c5c:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
     c60:	2a e0       	ldi	r18, 0x0A	; 10
     c62:	37 ed       	ldi	r19, 0xD7	; 215
     c64:	43 e2       	ldi	r20, 0x23	; 35
     c66:	5f e3       	ldi	r21, 0x3F	; 63
     c68:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsf3>
     c6c:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixsfsi>
     c70:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <binvoltage+0x1>
     c74:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <binvoltage>
     c78:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:707
  OVo();
  ampo();
}

void IVo() {
for(int i=0; i<10; i++) {
     c7a:	09 f0       	breq	.+2      	; 0xc7e <IVo()+0x166>
     c7c:	55 cf       	rjmp	.-342    	; 0xb28 <IVo()+0x10>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:718
    }
  if((0.64 * analogRead(BINPIN)) > binvoltage){
    binvoltage = 0.64 * analogRead(BINPIN);
    }
  }
}
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	df 90       	pop	r13
     c88:	cf 90       	pop	r12
     c8a:	08 95       	ret

00000c8c <bdiffcheck()>:
bdiffcheck():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:365
    return false;
  }
}

bool bdiffcheck() { //(returns true if difference is more than set difference and runs motor)
  int dif = SETV - boutvoltage;
     c8c:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <SETV>
     c90:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <SETV+0x1>
     c94:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <boutvoltage>
     c98:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <boutvoltage+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:369
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     c9c:	28 1b       	sub	r18, r24
     c9e:	39 0b       	sbc	r19, r25
     ca0:	37 ff       	sbrs	r19, 7
     ca2:	03 c0       	rjmp	.+6      	; 0xcaa <bdiffcheck()+0x1e>
     ca4:	31 95       	neg	r19
     ca6:	21 95       	neg	r18
     ca8:	31 09       	sbc	r19, r1
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	40 91 c2 01 	lds	r20, 0x01C2	; 0x8001c2 <DIFF>
     cb0:	50 91 c3 01 	lds	r21, 0x01C3	; 0x8001c3 <DIFF+0x1>
     cb4:	42 17       	cp	r20, r18
     cb6:	53 07       	cpc	r21, r19
     cb8:	0c f0       	brlt	.+2      	; 0xcbc <bdiffcheck()+0x30>
     cba:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:374
    return true;
  } else {
    return false;
  }
}
     cbc:	08 95       	ret

00000cbe <ydiffcheck()>:
ydiffcheck():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:353
    return false;
  }
}

bool ydiffcheck() { //(returns true if difference is more than set difference and runs motor)
  int dif = SETV - youtvoltage;
     cbe:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <SETV>
     cc2:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <SETV+0x1>
     cc6:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <youtvoltage>
     cca:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <youtvoltage+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:357
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     cce:	28 1b       	sub	r18, r24
     cd0:	39 0b       	sbc	r19, r25
     cd2:	37 ff       	sbrs	r19, 7
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <ydiffcheck()+0x1e>
     cd6:	31 95       	neg	r19
     cd8:	21 95       	neg	r18
     cda:	31 09       	sbc	r19, r1
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	40 91 c2 01 	lds	r20, 0x01C2	; 0x8001c2 <DIFF>
     ce2:	50 91 c3 01 	lds	r21, 0x01C3	; 0x8001c3 <DIFF+0x1>
     ce6:	42 17       	cp	r20, r18
     ce8:	53 07       	cpc	r21, r19
     cea:	0c f0       	brlt	.+2      	; 0xcee <ydiffcheck()+0x30>
     cec:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:362
    return true;
  } else {
    return false;
  }
}
     cee:	08 95       	ret

00000cf0 <rdiffcheck()>:
rdiffcheck():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:341
}


//Check Voltage Difference from Set Voltage
bool rdiffcheck() { //(returns true if difference is more than set difference and runs motor)
  int dif = SETV - routvoltage;
     cf0:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <SETV>
     cf4:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <SETV+0x1>
     cf8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <routvoltage>
     cfc:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <routvoltage+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:345
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     d00:	28 1b       	sub	r18, r24
     d02:	39 0b       	sbc	r19, r25
     d04:	37 ff       	sbrs	r19, 7
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <rdiffcheck()+0x1e>
     d08:	31 95       	neg	r19
     d0a:	21 95       	neg	r18
     d0c:	31 09       	sbc	r19, r1
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	40 91 c2 01 	lds	r20, 0x01C2	; 0x8001c2 <DIFF>
     d14:	50 91 c3 01 	lds	r21, 0x01C3	; 0x8001c3 <DIFF+0x1>
     d18:	42 17       	cp	r20, r18
     d1a:	53 07       	cpc	r21, r19
     d1c:	0c f0       	brlt	.+2      	; 0xd20 <rdiffcheck()+0x30>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:350
    return true;
  } else {
    return false;
  }
}
     d20:	08 95       	ret

00000d22 <currentok()>:
currentok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:331
  }
}

//Check If Current Load is lower than max current Set by Parameters
bool currentok() {
  if(currentload < OVL){
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	40 91 b4 01 	lds	r20, 0x01B4	; 0x8001b4 <currentload>
     d28:	50 91 b5 01 	lds	r21, 0x01B5	; 0x8001b5 <currentload+0x1>
     d2c:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <OVL>
     d30:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <OVL+0x1>
     d34:	42 17       	cp	r20, r18
     d36:	53 07       	cpc	r21, r19
     d38:	0c f0       	brlt	.+2      	; 0xd3c <currentok()+0x1a>
     d3a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:336
    return true;
  } else {
    return false;
  }
}
     d3c:	08 95       	ret

00000d3e <outputVok()>:
outputVok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:322
    return false;
  }
}
//Check If output voltage is within Low & High voltage Set by Parameters
bool outputVok() {
  if(routvoltage > OLV && routvoltage < OHV && youtvoltage > OLV && youtvoltage < OHV && boutvoltage > OLV && boutvoltage < OHV){
     d3e:	40 91 43 02 	lds	r20, 0x0243	; 0x800243 <routvoltage>
     d42:	50 91 44 02 	lds	r21, 0x0244	; 0x800244 <routvoltage+0x1>
     d46:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <OLV>
     d4a:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <OLV+0x1>
     d4e:	84 17       	cp	r24, r20
     d50:	95 07       	cpc	r25, r21
     d52:	e4 f4       	brge	.+56     	; 0xd8c <outputVok()+0x4e>
     d54:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <OHV>
     d58:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <OHV+0x1>
     d5c:	42 17       	cp	r20, r18
     d5e:	53 07       	cpc	r21, r19
     d60:	ac f4       	brge	.+42     	; 0xd8c <outputVok()+0x4e>
     d62:	40 91 3f 02 	lds	r20, 0x023F	; 0x80023f <youtvoltage>
     d66:	50 91 40 02 	lds	r21, 0x0240	; 0x800240 <youtvoltage+0x1>
     d6a:	84 17       	cp	r24, r20
     d6c:	95 07       	cpc	r25, r21
     d6e:	74 f4       	brge	.+28     	; 0xd8c <outputVok()+0x4e>
     d70:	42 17       	cp	r20, r18
     d72:	53 07       	cpc	r21, r19
     d74:	5c f4       	brge	.+22     	; 0xd8c <outputVok()+0x4e>
     d76:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <boutvoltage>
     d7a:	50 91 3e 02 	lds	r21, 0x023E	; 0x80023e <boutvoltage+0x1>
     d7e:	84 17       	cp	r24, r20
     d80:	95 07       	cpc	r25, r21
     d82:	24 f4       	brge	.+8      	; 0xd8c <outputVok()+0x4e>
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	42 17       	cp	r20, r18
     d88:	53 07       	cpc	r21, r19
     d8a:	0c f0       	brlt	.+2      	; 0xd8e <outputVok()+0x50>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:325
    return true;
  } else {
    return false;
     d8c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:327
  }
}
     d8e:	08 95       	ret

00000d90 <inputVok()>:
inputVok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:314
}


//Check If input voltage is within Low & High voltage Set by Parameters
bool inputVok() {
  if(rinvoltage > ILV && rinvoltage < IHV && yinvoltage > ILV && yinvoltage < IHV && binvoltage > ILV && binvoltage < IHV){
     d90:	40 91 ba 01 	lds	r20, 0x01BA	; 0x8001ba <rinvoltage>
     d94:	50 91 bb 01 	lds	r21, 0x01BB	; 0x8001bb <rinvoltage+0x1>
     d98:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <ILV>
     d9c:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <ILV+0x1>
     da0:	84 17       	cp	r24, r20
     da2:	95 07       	cpc	r25, r21
     da4:	e4 f4       	brge	.+56     	; 0xdde <inputVok()+0x4e>
     da6:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <IHV>
     daa:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <IHV+0x1>
     dae:	42 17       	cp	r20, r18
     db0:	53 07       	cpc	r21, r19
     db2:	ac f4       	brge	.+42     	; 0xdde <inputVok()+0x4e>
     db4:	40 91 b8 01 	lds	r20, 0x01B8	; 0x8001b8 <yinvoltage>
     db8:	50 91 b9 01 	lds	r21, 0x01B9	; 0x8001b9 <yinvoltage+0x1>
     dbc:	84 17       	cp	r24, r20
     dbe:	95 07       	cpc	r25, r21
     dc0:	74 f4       	brge	.+28     	; 0xdde <inputVok()+0x4e>
     dc2:	42 17       	cp	r20, r18
     dc4:	53 07       	cpc	r21, r19
     dc6:	5c f4       	brge	.+22     	; 0xdde <inputVok()+0x4e>
     dc8:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <binvoltage>
     dcc:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <binvoltage+0x1>
     dd0:	84 17       	cp	r24, r20
     dd2:	95 07       	cpc	r25, r21
     dd4:	24 f4       	brge	.+8      	; 0xdde <inputVok()+0x4e>
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	42 17       	cp	r20, r18
     dda:	53 07       	cpc	r21, r19
     ddc:	0c f0       	brlt	.+2      	; 0xde0 <inputVok()+0x50>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:317
    return true;
  } else {
    return false;
     dde:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:319
  }
}
     de0:	08 95       	ret

00000de2 <checksystem()>:
checksystem():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:438
}

//Check if Input,Output Voltage and current is within the set range

bool checksystem() {
  if(inputVok()) {
     de2:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
     de6:	88 23       	and	r24, r24
     de8:	29 f0       	breq	.+10     	; 0xdf4 <checksystem()+0x12>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:439
    if(outputVok()) {
     dea:	0e 94 9f 06 	call	0xd3e	; 0xd3e <outputVok()>
     dee:	81 11       	cpse	r24, r1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:440
      if(currentok()){
     df0:	0c 94 91 06 	jmp	0xd22	; 0xd22 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:445
            return true;
      } else { return false; }
    } else { return false; }
  } else { return false; }
}
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	08 95       	ret

00000df8 <pulseIn.constprop.13>:
pulseIn():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:33
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	48 2f       	mov	r20, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:38
{
  // cache the port and bit of the pin in order to speed up the
  // pulse width measuring loop and achieve finer resolution.  calling
  // digitalRead() instead yields much coarser resolution.
  uint8_t bit = digitalPinToBitMask(pin);
     dfe:	e5 e8       	ldi	r30, 0x85	; 133
     e00:	f1 e0       	ldi	r31, 0x01	; 1
     e02:	64 91       	lpm	r22, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:39
  uint8_t port = digitalPinToPort(pin);
     e04:	e5 e6       	ldi	r30, 0x65	; 101
     e06:	f1 e0       	ldi	r31, 0x01	; 1
     e08:	e4 91       	lpm	r30, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:40
  uint8_t stateMask = (state ? bit : 0);
     e0a:	81 11       	cpse	r24, r1
     e0c:	46 2f       	mov	r20, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:46

  // convert the timeout from microseconds to a number of times through
  // the initial loop; it takes approximately 16 clock cycles per iteration
  unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

  unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	ee 0f       	add	r30, r30
     e12:	ff 1f       	adc	r31, r31
     e14:	e0 5c       	subi	r30, 0xC0	; 192
     e16:	fe 4f       	sbci	r31, 0xFE	; 254
     e18:	85 91       	lpm	r24, Z+
     e1a:	94 91       	lpm	r25, Z
     e1c:	0e e1       	ldi	r16, 0x1E	; 30
     e1e:	10 e0       	ldi	r17, 0x00	; 0
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	0e 94 29 0b 	call	0x1652	; 0x1652 <countPulseASM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:49

  // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
  if (width)
     e28:	61 15       	cp	r22, r1
     e2a:	71 05       	cpc	r23, r1
     e2c:	81 05       	cpc	r24, r1
     e2e:	91 05       	cpc	r25, r1
     e30:	91 f0       	breq	.+36     	; 0xe56 <pulseIn.constprop.13+0x5e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:50
    return clockCyclesToMicroseconds(width * 16 + 16);
     e32:	6f 5f       	subi	r22, 0xFF	; 255
     e34:	7f 4f       	sbci	r23, 0xFF	; 255
     e36:	8f 4f       	sbci	r24, 0xFF	; 255
     e38:	9f 4f       	sbci	r25, 0xFF	; 255
     e3a:	24 e0       	ldi	r18, 0x04	; 4
     e3c:	66 0f       	add	r22, r22
     e3e:	77 1f       	adc	r23, r23
     e40:	88 1f       	adc	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	2a 95       	dec	r18
     e46:	d1 f7       	brne	.-12     	; 0xe3c <pulseIn.constprop.13+0x44>
     e48:	33 e0       	ldi	r19, 0x03	; 3
     e4a:	96 95       	lsr	r25
     e4c:	87 95       	ror	r24
     e4e:	77 95       	ror	r23
     e50:	67 95       	ror	r22
     e52:	3a 95       	dec	r19
     e54:	d1 f7       	brne	.-12     	; 0xe4a <pulseIn.constprop.13+0x52>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:53
  else
    return 0;
}
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	08 95       	ret

00000e5c <displayVar(int, int) [clone .constprop.11]>:
displayVar():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1003

void done() {display("donE", 0);}

//Display INT Variable

void displayVar(int var, int deci) {
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	00 d0       	rcall	.+0      	; 0xe66 <displayVar(int, int) [clone .constprop.11]+0xa>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <displayVar(int, int) [clone .constprop.11]+0xc>
     e68:	1f 92       	push	r1
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1005
  char buffer[5];
  sprintf(buffer, "%4d", var);
     e6e:	9f 93       	push	r25
     e70:	8f 93       	push	r24
     e72:	84 e1       	ldi	r24, 0x14	; 20
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	9f 93       	push	r25
     e78:	8f 93       	push	r24
     e7a:	8e 01       	movw	r16, r28
     e7c:	0f 5f       	subi	r16, 0xFF	; 255
     e7e:	1f 4f       	sbci	r17, 0xFF	; 255
     e80:	1f 93       	push	r17
     e82:	0f 93       	push	r16
     e84:	0e 94 66 15 	call	0x2acc	; 0x2acc <sprintf>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1006
  display1.DisplayString(buffer, deci);
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	c8 01       	movw	r24, r16
     e8c:	0e 94 a6 01 	call	0x34c	; 0x34c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]>
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1007
}
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	08 95       	ret

00000eb0 <menuIHV() [clone .part.8]>:
_Z7menuIHVv.part.8():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:757

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
     eb0:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
     eb4:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
     eb8:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <displayVar(int, int) [clone .constprop.11]>

00000ebc <String::reserve(unsigned int)>:
reserve():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:146
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	ec 01       	movw	r28, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
     ec6:	88 81       	ld	r24, Y
     ec8:	99 81       	ldd	r25, Y+1	; 0x01
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	59 f0       	breq	.+22     	; 0xee4 <String::reserve(unsigned int)+0x28>
     ece:	2a 81       	ldd	r18, Y+2	; 0x02
     ed0:	3b 81       	ldd	r19, Y+3	; 0x03
     ed2:	26 17       	cp	r18, r22
     ed4:	37 07       	cpc	r19, r23
     ed6:	30 f0       	brcs	.+12     	; 0xee4 <String::reserve(unsigned int)+0x28>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	08 95       	ret
     ee4:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     ee6:	6f 5f       	subi	r22, 0xFF	; 255
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	0e 94 66 14 	call	0x28cc	; 0x28cc <realloc>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	59 f0       	breq	.+22     	; 0xf08 <String::reserve(unsigned int)+0x4c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
     ef2:	99 83       	std	Y+1, r25	; 0x01
     ef4:	88 83       	st	Y, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
     ef6:	1b 83       	std	Y+3, r17	; 0x03
     ef8:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     efa:	2c 81       	ldd	r18, Y+4	; 0x04
     efc:	3d 81       	ldd	r19, Y+5	; 0x05
     efe:	23 2b       	or	r18, r19
     f00:	59 f7       	brne	.-42     	; 0xed8 <String::reserve(unsigned int)+0x1c>
     f02:	fc 01       	movw	r30, r24
     f04:	10 82       	st	Z, r1
     f06:	e8 cf       	rjmp	.-48     	; 0xed8 <String::reserve(unsigned int)+0x1c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:152
    return 1;
  }
  return 0;
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	e7 cf       	rjmp	.-50     	; 0xeda <String::reserve(unsigned int)+0x1e>

00000f0c <String::invalidate()>:
invalidate():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	ec 01       	movw	r28, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
     f12:	88 81       	ld	r24, Y
     f14:	99 81       	ldd	r25, Y+1	; 0x01
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	11 f0       	breq	.+4      	; 0xf1e <String::invalidate()+0x12>
     f1a:	0e 94 dd 13 	call	0x27ba	; 0x27ba <free>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
     f1e:	19 82       	std	Y+1, r1	; 0x01
     f20:	18 82       	st	Y, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
     f22:	1d 82       	std	Y+5, r1	; 0x05
     f24:	1c 82       	std	Y+4, r1	; 0x04
     f26:	1b 82       	std	Y+3, r1	; 0x03
     f28:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:143
}
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <String::copy(char const*, unsigned int)>:
copy():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	ec 01       	movw	r28, r24
     f3e:	7b 01       	movw	r14, r22
     f40:	8a 01       	movw	r16, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
  if (!reserve(length)) {
     f42:	ba 01       	movw	r22, r20
     f44:	0e 94 5e 07 	call	0xebc	; 0xebc <String::reserve(unsigned int)>
     f48:	81 11       	cpse	r24, r1
     f4a:	0b c0       	rjmp	.+22     	; 0xf62 <String::copy(char const*, unsigned int)+0x32>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
     f4c:	ce 01       	movw	r24, r28
     f4e:	0e 94 86 07 	call	0xf0c	; 0xf0c <String::invalidate()>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:179
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
     f52:	ce 01       	movw	r24, r28
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	ff 90       	pop	r15
     f5e:	ef 90       	pop	r14
     f60:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     f62:	1d 83       	std	Y+5, r17	; 0x05
     f64:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
     f66:	b7 01       	movw	r22, r14
     f68:	88 81       	ld	r24, Y
     f6a:	99 81       	ldd	r25, Y+1	; 0x01
     f6c:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <strcpy>
     f70:	f0 cf       	rjmp	.-32     	; 0xf52 <String::copy(char const*, unsigned int)+0x22>

00000f72 <String::String(char const*)>:
_ZN6String4initEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     f72:	fc 01       	movw	r30, r24
     f74:	11 82       	std	Z+1, r1	; 0x01
     f76:	10 82       	st	Z, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
     f78:	13 82       	std	Z+3, r1	; 0x03
     f7a:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
     f7c:	15 82       	std	Z+5, r1	; 0x05
     f7e:	14 82       	std	Z+4, r1	; 0x04
__base_ctor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
     f80:	fb 01       	movw	r30, r22
     f82:	01 90       	ld	r0, Z+
     f84:	00 20       	and	r0, r0
     f86:	e9 f7       	brne	.-6      	; 0xf82 <String::String(char const*)+0x10>
     f88:	31 97       	sbiw	r30, 0x01	; 1
     f8a:	af 01       	movw	r20, r30
     f8c:	46 1b       	sub	r20, r22
     f8e:	57 0b       	sbc	r21, r23
     f90:	0c 94 98 07 	jmp	0xf30	; 0xf30 <String::copy(char const*, unsigned int)>

00000f94 <String::~String()>:
__base_dtor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
     f94:	fc 01       	movw	r30, r24
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <free>

00000f9e <display(String, int) [clone .constprop.6]>:
display():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1063
  }
}

//Display String Variable

void display(String str, int deci) {
     f9e:	af 92       	push	r10
     fa0:	bf 92       	push	r11
     fa2:	cf 92       	push	r12
     fa4:	df 92       	push	r13
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	28 97       	sbiw	r28, 0x08	; 8
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	8c 01       	movw	r16, r24
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1074

  int str_len = str.length() + 1;
  char data[str_len];
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
}
     fc4:	cd b6       	in	r12, 0x3d	; 61
     fc6:	de b6       	in	r13, 0x3e	; 62
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1065

//Display String Variable

void display(String str, int deci) {
  int strl = str.length();
  if(strl < 4) {
     fc8:	fc 01       	movw	r30, r24
     fca:	84 81       	ldd	r24, Z+4	; 0x04
     fcc:	95 81       	ldd	r25, Z+5	; 0x05
     fce:	04 97       	sbiw	r24, 0x04	; 4
     fd0:	0c f0       	brlt	.+2      	; 0xfd4 <display(String, int) [clone .constprop.6]+0x36>
     fd2:	4a c0       	rjmp	.+148    	; 0x1068 <display(String, int) [clone .constprop.6]+0xca>
_ZN6String4initEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     fd4:	1a 82       	std	Y+2, r1	; 0x02
     fd6:	19 82       	std	Y+1, r1	; 0x01
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
     fd8:	1c 82       	std	Y+4, r1	; 0x04
     fda:	1b 82       	std	Y+3, r1	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
     fdc:	1e 82       	std	Y+6, r1	; 0x06
     fde:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:63

String::String(char c)
{
  init();
  char buf[2];
  buf[0] = c;
     fe0:	80 e1       	ldi	r24, 0x10	; 16
     fe2:	8f 83       	std	Y+7, r24	; 0x07
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:64
  buf[1] = 0;
     fe4:	18 86       	std	Y+8, r1	; 0x08
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
     fe6:	be 01       	movw	r22, r28
     fe8:	69 5f       	subi	r22, 0xF9	; 249
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	fb 01       	movw	r30, r22
     fee:	01 90       	ld	r0, Z+
     ff0:	00 20       	and	r0, r0
     ff2:	e9 f7       	brne	.-6      	; 0xfee <display(String, int) [clone .constprop.6]+0x50>
     ff4:	31 97       	sbiw	r30, 0x01	; 1
     ff6:	af 01       	movw	r20, r30
     ff8:	46 1b       	sub	r20, r22
     ffa:	57 0b       	sbc	r21, r23
     ffc:	ce 01       	movw	r24, r28
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	0e 94 98 07 	call	0xf30	; 0xf30 <String::copy(char const*, unsigned int)>
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1004:	f8 01       	movw	r30, r16
    1006:	a0 80       	ld	r10, Z
    1008:	b1 80       	ldd	r11, Z+1	; 0x01
concat():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
    100a:	a1 14       	cp	r10, r1
    100c:	b1 04       	cpc	r11, r1
    100e:	09 f4       	brne	.+2      	; 0x1012 <display(String, int) [clone .constprop.6]+0x74>
    1010:	5d c0       	rjmp	.+186    	; 0x10cc <display(String, int) [clone .constprop.6]+0x12e>
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1012:	e4 80       	ldd	r14, Z+4	; 0x04
    1014:	f5 80       	ldd	r15, Z+5	; 0x05
concat():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
    1016:	e1 14       	cp	r14, r1
    1018:	f1 04       	cpc	r15, r1
    101a:	b9 f0       	breq	.+46     	; 0x104a <display(String, int) [clone .constprop.6]+0xac>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    101c:	8d 81       	ldd	r24, Y+5	; 0x05
    101e:	9e 81       	ldd	r25, Y+6	; 0x06
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    1024:	b7 01       	movw	r22, r14
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	0e 94 5e 07 	call	0xebc	; 0xebc <String::reserve(unsigned int)>
    102e:	88 23       	and	r24, r24
    1030:	09 f4       	brne	.+2      	; 0x1034 <display(String, int) [clone .constprop.6]+0x96>
    1032:	4c c0       	rjmp	.+152    	; 0x10cc <display(String, int) [clone .constprop.6]+0x12e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:269
  strcpy(buffer + len, cstr);
    1034:	29 81       	ldd	r18, Y+1	; 0x01
    1036:	3a 81       	ldd	r19, Y+2	; 0x02
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	b5 01       	movw	r22, r10
    103e:	82 0f       	add	r24, r18
    1040:	93 1f       	adc	r25, r19
    1042:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <strcpy>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:270
  len = newlen;
    1046:	fe 82       	std	Y+6, r15	; 0x06
    1048:	ed 82       	std	Y+5, r14	; 0x05
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:218

String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
    104a:	69 81       	ldd	r22, Y+1	; 0x01
    104c:	7a 81       	ldd	r23, Y+2	; 0x02
    104e:	61 15       	cp	r22, r1
    1050:	71 05       	cpc	r23, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <display(String, int) [clone .constprop.6]+0xb8>
    1054:	40 c0       	rjmp	.+128    	; 0x10d6 <display(String, int) [clone .constprop.6]+0x138>
    1056:	4d 81       	ldd	r20, Y+5	; 0x05
    1058:	5e 81       	ldd	r21, Y+6	; 0x06
    105a:	c8 01       	movw	r24, r16
    105c:	0e 94 98 07 	call	0xf30	; 0xf30 <String::copy(char const*, unsigned int)>
_ZN15StringSumHelperD2Ev():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
    1060:	ce 01       	movw	r24, r28
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
    1068:	f8 01       	movw	r30, r16
    106a:	e4 80       	ldd	r14, Z+4	; 0x04
    106c:	f5 80       	ldd	r15, Z+5	; 0x05
display():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1070
    //char16 = no display on screen
    str = char(16) + str;
  }

  int str_len = str.length() + 1;
    106e:	c7 01       	movw	r24, r14
    1070:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1071
  char data[str_len];
    1072:	2d b7       	in	r18, 0x3d	; 61
    1074:	3e b7       	in	r19, 0x3e	; 62
    1076:	28 1b       	sub	r18, r24
    1078:	39 0b       	sbc	r19, r25
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	3e bf       	out	0x3e, r19	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	2d bf       	out	0x3d, r18	; 61
    1084:	ed b7       	in	r30, 0x3d	; 61
    1086:	fe b7       	in	r31, 0x3e	; 62
    1088:	31 96       	adiw	r30, 0x01	; 1
    108a:	5f 01       	movw	r10, r30
getBytes():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:539
  return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
  if (!bufsize || !buf) return;
    108c:	89 2b       	or	r24, r25
    108e:	21 f0       	breq	.+8      	; 0x1098 <display(String, int) [clone .constprop.6]+0xfa>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:540
  if (index >= len) {
    1090:	e1 14       	cp	r14, r1
    1092:	f1 04       	cpc	r15, r1
    1094:	21 f5       	brne	.+72     	; 0x10de <display(String, int) [clone .constprop.6]+0x140>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:547
    return;
  }
  unsigned int n = bufsize - 1;
  if (n > len - index) n = len - index;
  strncpy((char *)buf, buffer + index, n);
  buf[n] = 0;
    1096:	10 82       	st	Z, r1
display():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1073
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	c5 01       	movw	r24, r10
    109c:	0e 94 a6 01 	call	0x34c	; 0x34c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1074
}
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de be       	out	0x3e, r13	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd be       	out	0x3d, r12	; 61
    10aa:	28 96       	adiw	r28, 0x08	; 8
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	df 90       	pop	r13
    10c4:	cf 90       	pop	r12
    10c6:	bf 90       	pop	r11
    10c8:	af 90       	pop	r10
    10ca:	08 95       	ret
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    10cc:	ce 01       	movw	r24, r28
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	0e 94 86 07 	call	0xf0c	; 0xf0c <String::invalidate()>
    10d4:	ba cf       	rjmp	.-140    	; 0x104a <display(String, int) [clone .constprop.6]+0xac>
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:219
String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
  else invalidate();
    10d6:	c8 01       	movw	r24, r16
    10d8:	0e 94 86 07 	call	0xf0c	; 0xf0c <String::invalidate()>
    10dc:	c1 cf       	rjmp	.-126    	; 0x1060 <display(String, int) [clone .constprop.6]+0xc2>
getBytes():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:546
    buf[0] = 0;
    return;
  }
  unsigned int n = bufsize - 1;
  if (n > len - index) n = len - index;
  strncpy((char *)buf, buffer + index, n);
    10de:	f8 01       	movw	r30, r16
    10e0:	60 81       	ld	r22, Z
    10e2:	71 81       	ldd	r23, Z+1	; 0x01
    10e4:	a7 01       	movw	r20, r14
    10e6:	c5 01       	movw	r24, r10
    10e8:	0e 94 57 15 	call	0x2aae	; 0x2aae <strncpy>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:547
  buf[n] = 0;
    10ec:	f5 01       	movw	r30, r10
    10ee:	ee 0d       	add	r30, r14
    10f0:	ff 1d       	adc	r31, r15
    10f2:	d1 cf       	rjmp	.-94     	; 0x1096 <display(String, int) [clone .constprop.6]+0xf8>

000010f4 <updateScreenData(bool) [clone .part.7]>:
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:515
    return false;
  }
}


void updateScreenData(bool status) {
    10f4:	ff 92       	push	r15
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <updateScreenData(bool) [clone .part.7]+0xc>
    1100:	00 d0       	rcall	.+0      	; 0x1102 <updateScreenData(bool) [clone .part.7]+0xe>
    1102:	00 d0       	rcall	.+0      	; 0x1104 <updateScreenData(bool) [clone .part.7]+0x10>
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	f8 2e       	mov	r15, r24
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:518
  //uncomment !mode and comment !read(setupPin) if setupPin is not being used
  if(!mode/*!read(setupPin)*/){
    if(!resetrefresh){
    110a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <resetrefresh>
    110e:	81 11       	cpse	r24, r1
    1110:	07 c0       	rjmp	.+14     	; 0x1120 <updateScreenData(bool) [clone .part.7]+0x2c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:519
      refresh.reset();
    1112:	8a ed       	ldi	r24, 0xDA	; 218
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:520
      resetrefresh = true;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <resetrefresh>
    1120:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <alarmOnce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:522
    }
    if(!status && !alarmOnce){
    1124:	f1 10       	cpse	r15, r1
    1126:	99 c1       	rjmp	.+818    	; 0x145a <updateScreenData(bool) [clone .part.7]+0x366>
    1128:	81 11       	cpse	r24, r1
    112a:	03 c0       	rjmp	.+6      	; 0x1132 <updateScreenData(bool) [clone .part.7]+0x3e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:523
      alarmOnce = true;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <alarmOnce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:530
    }
    if(status && alarmOnce){
      alarmOnce = false;
      menu == 0;
    }
    if(refresh.triggered()){
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	8a ed       	ldi	r24, 0xDA	; 218
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
    113c:	88 23       	and	r24, r24
    113e:	01 f1       	breq	.+64     	; 0x1180 <updateScreenData(bool) [clone .part.7]+0x8c>
    1140:	00 91 d5 01 	lds	r16, 0x01D5	; 0x8001d5 <menu>
    1144:	10 91 d6 01 	lds	r17, 0x01D6	; 0x8001d6 <menu+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:532

      OVo();
    1148:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <OVo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:533
      IVo();
    114c:	0e 94 8c 05 	call	0xb18	; 0xb18 <IVo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:534
      ampo();
    1150:	0e 94 93 04 	call	0x926	; 0x926 <ampo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:537


      switch (menu)
    1154:	02 30       	cpi	r16, 0x02	; 2
    1156:	11 05       	cpc	r17, r1
    1158:	09 f4       	brne	.+2      	; 0x115c <updateScreenData(bool) [clone .part.7]+0x68>
    115a:	6a c0       	rjmp	.+212    	; 0x1230 <updateScreenData(bool) [clone .part.7]+0x13c>
    115c:	0c f0       	brlt	.+2      	; 0x1160 <updateScreenData(bool) [clone .part.7]+0x6c>
    115e:	31 c0       	rjmp	.+98     	; 0x11c2 <updateScreenData(bool) [clone .part.7]+0xce>
    1160:	01 2b       	or	r16, r17
    1162:	09 f4       	brne	.+2      	; 0x1166 <updateScreenData(bool) [clone .part.7]+0x72>
    1164:	62 c0       	rjmp	.+196    	; 0x122a <updateScreenData(bool) [clone .part.7]+0x136>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:554
          ampo();
          break;
        default:
          break;
      }
      if(!tmrstp){
    1166:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <tmrstp>
    116a:	81 11       	cpse	r24, r1
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <updateScreenData(bool) [clone .part.7]+0x8c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:555
        menu++;
    116e:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <menu>
    1172:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <menu+0x1>
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <menu+0x1>
    117c:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <menu>
    1180:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <menu>
    1184:	f0 91 d6 01 	lds	r31, 0x01D6	; 0x8001d6 <menu+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:561
      }
    }

    //Show Error if Available
    
    if(!status && menu == -1){
    1188:	ff 20       	and	r15, r15
    118a:	09 f4       	brne	.+2      	; 0x118e <updateScreenData(bool) [clone .part.7]+0x9a>
    118c:	57 c0       	rjmp	.+174    	; 0x123c <updateScreenData(bool) [clone .part.7]+0x148>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:587
          display("ALOL", 0);
        }
      }
    }

    switch (menu)
    118e:	e2 31       	cpi	r30, 0x12	; 18
    1190:	f1 05       	cpc	r31, r1
    1192:	08 f0       	brcs	.+2      	; 0x1196 <updateScreenData(bool) [clone .part.7]+0xa2>
    1194:	ef c0       	rjmp	.+478    	; 0x1374 <updateScreenData(bool) [clone .part.7]+0x280>
    1196:	e1 53       	subi	r30, 0x31	; 49
    1198:	f7 4f       	sbci	r31, 0xF7	; 247
    119a:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__tablejump2__>
    119e:	c6 09       	sbc	r28, r6
    11a0:	d5 09       	sbc	r29, r5
    11a2:	d8 09       	sbc	r29, r8
    11a4:	df 09       	sbc	r29, r15
    11a6:	e2 09       	sbc	r30, r2
    11a8:	e7 09       	sbc	r30, r7
    11aa:	ea 09       	sbc	r30, r10
    11ac:	ef 09       	sbc	r30, r15
    11ae:	f2 09       	sbc	r31, r2
    11b0:	f7 09       	sbc	r31, r7
    11b2:	fa 09       	sbc	r31, r10
    11b4:	ff 09       	sbc	r31, r15
    11b6:	02 0a       	sbc	r0, r18
    11b8:	07 0a       	sbc	r0, r23
    11ba:	0a 0a       	sbc	r0, r26
    11bc:	0f 0a       	sbc	r0, r31
    11be:	12 0a       	sbc	r1, r18
    11c0:	1f 0a       	sbc	r1, r31
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:537
      OVo();
      IVo();
      ampo();


      switch (menu)
    11c2:	04 30       	cpi	r16, 0x04	; 4
    11c4:	11 05       	cpc	r17, r1
    11c6:	b9 f1       	breq	.+110    	; 0x1236 <updateScreenData(bool) [clone .part.7]+0x142>
    11c8:	06 30       	cpi	r16, 0x06	; 6
    11ca:	11 05       	cpc	r17, r1
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <updateScreenData(bool) [clone .part.7]+0xdc>
    11ce:	cb cf       	rjmp	.-106    	; 0x1166 <updateScreenData(bool) [clone .part.7]+0x72>
checkhz():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:305
//Checks the wavelenght of the Sine wave to calculate the frequency
//ontime is the time that sinewave stays Positive or above the 0v Threshold
//offtime is the time that sinewave stays negative or below the 0v Threshold
void checkhz() {
  //calculates the pulse width in milliseconds //timesout after 60ms to avoid blocking other code if no input is detected!
  ontime = pulseIn(hz, HIGH, 60);
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <pulseIn.constprop.13>
    11d6:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <__data_end>
    11da:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <__data_end+0x1>
    11de:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__data_end+0x2>
    11e2:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <__data_end+0x3>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:306
  offtime = pulseIn(hz, LOW, 60);
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <pulseIn.constprop.13>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:308
  //Calculates the Frequency by dividing the ontime and offtime with 1 sec time (or 1000000 ms)
  freq = 1000000.0 / (ontime + offtime);//(ontime + offtime);
    11ec:	00 91 ac 01 	lds	r16, 0x01AC	; 0x8001ac <__data_end>
    11f0:	10 91 ad 01 	lds	r17, 0x01AD	; 0x8001ad <__data_end+0x1>
    11f4:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <__data_end+0x2>
    11f8:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <__data_end+0x3>
    11fc:	60 0f       	add	r22, r16
    11fe:	71 1f       	adc	r23, r17
    1200:	82 1f       	adc	r24, r18
    1202:	93 1f       	adc	r25, r19
    1204:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatsisf>
    1208:	9b 01       	movw	r18, r22
    120a:	ac 01       	movw	r20, r24
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	74 e2       	ldi	r23, 0x24	; 36
    1210:	84 e7       	ldi	r24, 0x74	; 116
    1212:	99 e4       	ldi	r25, 0x49	; 73
    1214:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1218:	60 93 b0 01 	sts	0x01B0, r22	; 0x8001b0 <freq>
    121c:	70 93 b1 01 	sts	0x01B1, r23	; 0x8001b1 <freq+0x1>
    1220:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <freq+0x2>
    1224:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <freq+0x3>
    1228:	9e cf       	rjmp	.-196    	; 0x1166 <updateScreenData(bool) [clone .part.7]+0x72>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:543
      {
        case 6:
          checkhz();
          break;
        case 0:
          IVo();
    122a:	0e 94 8c 05 	call	0xb18	; 0xb18 <IVo()>
    122e:	9b cf       	rjmp	.-202    	; 0x1166 <updateScreenData(bool) [clone .part.7]+0x72>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:546
          break;
        case 2:
          OVo();
    1230:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <OVo()>
    1234:	98 cf       	rjmp	.-208    	; 0x1166 <updateScreenData(bool) [clone .part.7]+0x72>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:549
          break;
        case 4:
          ampo();
    1236:	0e 94 93 04 	call	0x926	; 0x926 <ampo()>
    123a:	95 cf       	rjmp	.-214    	; 0x1166 <updateScreenData(bool) [clone .part.7]+0x72>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:561
      }
    }

    //Show Error if Available
    
    if(!status && menu == -1){
    123c:	ef 3f       	cpi	r30, 0xFF	; 255
    123e:	fe 07       	cpc	r31, r30
    1240:	09 f0       	breq	.+2      	; 0x1244 <updateScreenData(bool) [clone .part.7]+0x150>
    1242:	a5 cf       	rjmp	.-182    	; 0x118e <updateScreenData(bool) [clone .part.7]+0x9a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:562
      if(!inputVok() && !outputVok() && !currentok()){
    1244:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
    1248:	18 2f       	mov	r17, r24
    124a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <outputVok()>
    124e:	11 11       	cpse	r17, r1
    1250:	48 c0       	rjmp	.+144    	; 0x12e2 <updateScreenData(bool) [clone .part.7]+0x1ee>
    1252:	81 11       	cpse	r24, r1
    1254:	07 c0       	rjmp	.+14     	; 0x1264 <updateScreenData(bool) [clone .part.7]+0x170>
    1256:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:563
        display("A AL", 0);
    125a:	68 e1       	ldi	r22, 0x18	; 24
    125c:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:562
    }

    //Show Error if Available
    
    if(!status && menu == -1){
      if(!inputVok() && !outputVok() && !currentok()){
    125e:	88 23       	and	r24, r24
    1260:	09 f4       	brne	.+2      	; 0x1264 <updateScreenData(bool) [clone .part.7]+0x170>
    1262:	96 c0       	rjmp	.+300    	; 0x1390 <updateScreenData(bool) [clone .part.7]+0x29c>
RINOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:467
}

//Update Run Mode Screen

bool RINOK() {
  if(rinvoltage > ILV && rinvoltage < IHV){
    1264:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <rinvoltage>
    1268:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <rinvoltage+0x1>
    126c:	00 91 ce 01 	lds	r16, 0x01CE	; 0x8001ce <ILV>
    1270:	10 91 cf 01 	lds	r17, 0x01CF	; 0x8001cf <ILV+0x1>
    1274:	08 17       	cp	r16, r24
    1276:	19 07       	cpc	r17, r25
    1278:	44 f4       	brge	.+16     	; 0x128a <updateScreenData(bool) [clone .part.7]+0x196>
    127a:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <IHV>
    127e:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <IHV+0x1>
    1282:	82 17       	cp	r24, r18
    1284:	93 07       	cpc	r25, r19
    1286:	0c f4       	brge	.+2      	; 0x128a <updateScreenData(bool) [clone .part.7]+0x196>
    1288:	fc c0       	rjmp	.+504    	; 0x1482 <updateScreenData(bool) [clone .part.7]+0x38e>
YINOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:475
    return false;
  }
}

bool YINOK() {
  if(yinvoltage > ILV && yinvoltage < IHV){
    128a:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <yinvoltage>
    128e:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <yinvoltage+0x1>
    1292:	08 17       	cp	r16, r24
    1294:	19 07       	cpc	r17, r25
    1296:	44 f4       	brge	.+16     	; 0x12a8 <updateScreenData(bool) [clone .part.7]+0x1b4>
    1298:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <IHV>
    129c:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <IHV+0x1>
    12a0:	82 17       	cp	r24, r18
    12a2:	93 07       	cpc	r25, r19
    12a4:	0c f4       	brge	.+2      	; 0x12a8 <updateScreenData(bool) [clone .part.7]+0x1b4>
    12a6:	df c0       	rjmp	.+446    	; 0x1466 <updateScreenData(bool) [clone .part.7]+0x372>
BINOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:483
    return false;
  }
}

bool BINOK() {
  if(binvoltage > ILV && binvoltage < IHV){
    12a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <binvoltage>
    12ac:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <binvoltage+0x1>
    12b0:	08 17       	cp	r16, r24
    12b2:	19 07       	cpc	r17, r25
    12b4:	44 f4       	brge	.+16     	; 0x12c6 <updateScreenData(bool) [clone .part.7]+0x1d2>
    12b6:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <IHV>
    12ba:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <IHV+0x1>
    12be:	82 17       	cp	r24, r18
    12c0:	93 07       	cpc	r25, r19
    12c2:	0c f4       	brge	.+2      	; 0x12c6 <updateScreenData(bool) [clone .part.7]+0x1d2>
    12c4:	d0 c0       	rjmp	.+416    	; 0x1466 <updateScreenData(bool) [clone .part.7]+0x372>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:566
    if(!status && menu == -1){
      if(!inputVok() && !outputVok() && !currentok()){
        display("A AL", 0);
      } else {
        if(!inputVok()){
          if(!RINOK() && !YINOK() && !BINOK()) { display("A AI", 0);}
    12c6:	6d e1       	ldi	r22, 0x1D	; 29
    12c8:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:570
          else{
            if(!RINOK()){ display("A rI", 0); }
            if(!YINOK()){ display("A yI", 0); }
            if(!BINOK()){ display("A bI", 0); }
    12ca:	ce 01       	movw	r24, r28
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	0e 94 b9 07 	call	0xf72	; 0xf72 <String::String(char const*)>
    12d2:	ce 01       	movw	r24, r28
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <display(String, int) [clone .constprop.6]>
    12da:	ce 01       	movw	r24, r28
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:573
          }
        }
        if(!outputVok()){
    12e2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <outputVok()>
    12e6:	81 11       	cpse	r24, r1
    12e8:	3f c0       	rjmp	.+126    	; 0x1368 <updateScreenData(bool) [clone .part.7]+0x274>
ROTOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:491
    return false;
  }
}

bool ROTOK() {
  if(routvoltage > OLV && routvoltage < OHV){
    12ea:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <routvoltage>
    12ee:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <routvoltage+0x1>
    12f2:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <OLV>
    12f6:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <OLV+0x1>
    12fa:	08 17       	cp	r16, r24
    12fc:	19 07       	cpc	r17, r25
    12fe:	44 f4       	brge	.+16     	; 0x1310 <updateScreenData(bool) [clone .part.7]+0x21c>
    1300:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <OHV>
    1304:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <OHV+0x1>
    1308:	82 17       	cp	r24, r18
    130a:	93 07       	cpc	r25, r19
    130c:	0c f4       	brge	.+2      	; 0x1310 <updateScreenData(bool) [clone .part.7]+0x21c>
    130e:	f5 c0       	rjmp	.+490    	; 0x14fa <updateScreenData(bool) [clone .part.7]+0x406>
YOTOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:499
    return false;
  }
}

bool YOTOK() {
  if(youtvoltage > OLV && youtvoltage < OHV){
    1310:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <youtvoltage>
    1314:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <youtvoltage+0x1>
    1318:	08 17       	cp	r16, r24
    131a:	19 07       	cpc	r17, r25
    131c:	44 f4       	brge	.+16     	; 0x132e <updateScreenData(bool) [clone .part.7]+0x23a>
    131e:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <OHV>
    1322:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <OHV+0x1>
    1326:	82 17       	cp	r24, r18
    1328:	93 07       	cpc	r25, r19
    132a:	0c f4       	brge	.+2      	; 0x132e <updateScreenData(bool) [clone .part.7]+0x23a>
    132c:	d8 c0       	rjmp	.+432    	; 0x14de <updateScreenData(bool) [clone .part.7]+0x3ea>
BOTOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:507
    return false;
  }
}

bool BOTOK() {
  if(boutvoltage > OLV && boutvoltage < OHV){
    132e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <boutvoltage>
    1332:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <boutvoltage+0x1>
    1336:	08 17       	cp	r16, r24
    1338:	19 07       	cpc	r17, r25
    133a:	44 f4       	brge	.+16     	; 0x134c <updateScreenData(bool) [clone .part.7]+0x258>
    133c:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <OHV>
    1340:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <OHV+0x1>
    1344:	82 17       	cp	r24, r18
    1346:	93 07       	cpc	r25, r19
    1348:	0c f4       	brge	.+2      	; 0x134c <updateScreenData(bool) [clone .part.7]+0x258>
    134a:	c9 c0       	rjmp	.+402    	; 0x14de <updateScreenData(bool) [clone .part.7]+0x3ea>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:574
            if(!YINOK()){ display("A yI", 0); }
            if(!BINOK()){ display("A bI", 0); }
          }
        }
        if(!outputVok()){
          if(!ROTOK() && !YOTOK() && !BOTOK()) { display("A AO", 0);}
    134c:	6c e2       	ldi	r22, 0x2C	; 44
    134e:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:578
          else{
            if(!ROTOK()){ display("A rO", 0); }
            if(!YOTOK()){ display("A yO", 0); }
            if(!BOTOK()){ display("A bO", 0); }
    1350:	ce 01       	movw	r24, r28
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	0e 94 b9 07 	call	0xf72	; 0xf72 <String::String(char const*)>
    1358:	ce 01       	movw	r24, r28
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <display(String, int) [clone .constprop.6]>
    1360:	ce 01       	movw	r24, r28
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:581
          }
        }
        if(!currentok()){
    1368:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:582
          display("ALOL", 0);
    136c:	6b e3       	ldi	r22, 0x3B	; 59
    136e:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:581
            if(!ROTOK()){ display("A rO", 0); }
            if(!YOTOK()){ display("A yO", 0); }
            if(!BOTOK()){ display("A bO", 0); }
          }
        }
        if(!currentok()){
    1370:	88 23       	and	r24, r24
    1372:	71 f0       	breq	.+28     	; 0x1390 <updateScreenData(bool) [clone .part.7]+0x29c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:680
      } else {
        menu = -1;
      }
    }*/
  }
}
    1374:	26 96       	adiw	r28, 0x06	; 6
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	ff 90       	pop	r15
    138a:	08 95       	ret
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:590
    }

    switch (menu)
    {
    case 0:
      display("noor", 0);
    138c:	60 e4       	ldi	r22, 0x40	; 64
    138e:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:635
      break;
    case 14:
      displayVar(currentload, 0);
      break;
    case 15:
      display("FrEq", 0);
    1390:	ce 01       	movw	r24, r28
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	0e 94 b9 07 	call	0xf72	; 0xf72 <String::String(char const*)>
    1398:	ce 01       	movw	r24, r28
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <display(String, int) [clone .constprop.6]>
    13a0:	ce 01       	movw	r24, r28
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
    13a8:	e5 cf       	rjmp	.-54     	; 0x1374 <updateScreenData(bool) [clone .part.7]+0x280>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:593
    {
    case 0:
      display("noor", 0);
      break;
    case 1:
      display("r IP", 0);
    13aa:	65 e4       	ldi	r22, 0x45	; 69
    13ac:	71 e0       	ldi	r23, 0x01	; 1
    13ae:	f0 cf       	rjmp	.-32     	; 0x1390 <updateScreenData(bool) [clone .part.7]+0x29c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:596
      break;
    case 2:
      displayVar(rinvoltage, 0);
    13b0:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <rinvoltage>
    13b4:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <rinvoltage+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:632
      break;
    case 13:
      display("LoAd", 0);
      break;
    case 14:
      displayVar(currentload, 0);
    13b8:	0e 94 2e 07 	call	0xe5c	; 0xe5c <displayVar(int, int) [clone .constprop.11]>
    13bc:	db cf       	rjmp	.-74     	; 0x1374 <updateScreenData(bool) [clone .part.7]+0x280>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:599
      break;
    case 2:
      displayVar(rinvoltage, 0);
      break;
    case 3:
      display("r OP", 0);
    13be:	6a e4       	ldi	r22, 0x4A	; 74
    13c0:	71 e0       	ldi	r23, 0x01	; 1
    13c2:	e6 cf       	rjmp	.-52     	; 0x1390 <updateScreenData(bool) [clone .part.7]+0x29c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:602
      break;
    case 4:
      displayVar(routvoltage, 0);
    13c4:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <routvoltage>
    13c8:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <routvoltage+0x1>
    13cc:	f5 cf       	rjmp	.-22     	; 0x13b8 <updateScreenData(bool) [clone .part.7]+0x2c4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:605
      break;
    case 5:
      display("Y IP", 0);
    13ce:	6f e4       	ldi	r22, 0x4F	; 79
    13d0:	71 e0       	ldi	r23, 0x01	; 1
    13d2:	de cf       	rjmp	.-68     	; 0x1390 <updateScreenData(bool) [clone .part.7]+0x29c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:608
      break;
    case 6:
      displayVar(yinvoltage, 0);
    13d4:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <yinvoltage>
    13d8:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <yinvoltage+0x1>
    13dc:	ed cf       	rjmp	.-38     	; 0x13b8 <updateScreenData(bool) [clone .part.7]+0x2c4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:611
      break;
    case 7:
      display("Y OP", 0);
    13de:	64 e5       	ldi	r22, 0x54	; 84
    13e0:	71 e0       	ldi	r23, 0x01	; 1
    13e2:	d6 cf       	rjmp	.-84     	; 0x1390 <updateScreenData(bool) [clone .part.7]+0x29c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:614
      break;
    case 8:
      displayVar(youtvoltage, 0);
    13e4:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <youtvoltage>
    13e8:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <youtvoltage+0x1>
    13ec:	e5 cf       	rjmp	.-54     	; 0x13b8 <updateScreenData(bool) [clone .part.7]+0x2c4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:617
      break;
    case 9:
      display("b IP", 0);
    13ee:	69 e5       	ldi	r22, 0x59	; 89
    13f0:	71 e0       	ldi	r23, 0x01	; 1
    13f2:	ce cf       	rjmp	.-100    	; 0x1390 <updateScreenData(bool) [clone .part.7]+0x29c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:620
      break;
    case 10:
      displayVar(binvoltage, 0);
    13f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <binvoltage>
    13f8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <binvoltage+0x1>
    13fc:	dd cf       	rjmp	.-70     	; 0x13b8 <updateScreenData(bool) [clone .part.7]+0x2c4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:623
      break;
    case 11:
      display("b OP", 0);
    13fe:	6e e5       	ldi	r22, 0x5E	; 94
    1400:	71 e0       	ldi	r23, 0x01	; 1
    1402:	c6 cf       	rjmp	.-116    	; 0x1390 <updateScreenData(bool) [clone .part.7]+0x29c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:626
      break;
    case 12:
      displayVar(boutvoltage, 0);
    1404:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <boutvoltage>
    1408:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <boutvoltage+0x1>
    140c:	d5 cf       	rjmp	.-86     	; 0x13b8 <updateScreenData(bool) [clone .part.7]+0x2c4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:629
      break;
    case 13:
      display("LoAd", 0);
    140e:	63 e6       	ldi	r22, 0x63	; 99
    1410:	71 e0       	ldi	r23, 0x01	; 1
    1412:	be cf       	rjmp	.-132    	; 0x1390 <updateScreenData(bool) [clone .part.7]+0x29c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:632
      break;
    case 14:
      displayVar(currentload, 0);
    1414:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <currentload>
    1418:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <currentload+0x1>
    141c:	cd cf       	rjmp	.-102    	; 0x13b8 <updateScreenData(bool) [clone .part.7]+0x2c4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:635
      break;
    case 15:
      display("FrEq", 0);
    141e:	68 e6       	ldi	r22, 0x68	; 104
    1420:	71 e0       	ldi	r23, 0x01	; 1
    1422:	b6 cf       	rjmp	.-148    	; 0x1390 <updateScreenData(bool) [clone .part.7]+0x29c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:638
      break;
    case 16:
      displayVar((int)freq, 0);
    1424:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <freq>
    1428:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <freq+0x1>
    142c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <freq+0x2>
    1430:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <freq+0x3>
    1434:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixsfsi>
    1438:	cb 01       	movw	r24, r22
    143a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <displayVar(int, int) [clone .constprop.11]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:640
    case 17:
      if(status){
    143e:	ff 20       	and	r15, r15
    1440:	29 f0       	breq	.+10     	; 0x144c <updateScreenData(bool) [clone .part.7]+0x358>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:641
        menu = 0;
    1442:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <menu+0x1>
    1446:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <menu>
    144a:	94 cf       	rjmp	.-216    	; 0x1374 <updateScreenData(bool) [clone .part.7]+0x280>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:643
      } else {
        menu = -1;
    144c:	8f ef       	ldi	r24, 0xFF	; 255
    144e:	9f ef       	ldi	r25, 0xFF	; 255
    1450:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <menu+0x1>
    1454:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <menu>
    1458:	8d cf       	rjmp	.-230    	; 0x1374 <updateScreenData(bool) [clone .part.7]+0x280>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:526
    }
    if(!status && !alarmOnce){
      alarmOnce = true;
      menu == -1;
    }
    if(status && alarmOnce){
    145a:	88 23       	and	r24, r24
    145c:	09 f4       	brne	.+2      	; 0x1460 <updateScreenData(bool) [clone .part.7]+0x36c>
    145e:	69 ce       	rjmp	.-814    	; 0x1132 <updateScreenData(bool) [clone .part.7]+0x3e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:527
      alarmOnce = false;
    1460:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <alarmOnce>
    1464:	66 ce       	rjmp	.-820    	; 0x1132 <updateScreenData(bool) [clone .part.7]+0x3e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:568
        display("A AL", 0);
      } else {
        if(!inputVok()){
          if(!RINOK() && !YINOK() && !BINOK()) { display("A AI", 0);}
          else{
            if(!RINOK()){ display("A rI", 0); }
    1466:	6d e6       	ldi	r22, 0x6D	; 109
    1468:	71 e0       	ldi	r23, 0x01	; 1
    146a:	ce 01       	movw	r24, r28
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	0e 94 b9 07 	call	0xf72	; 0xf72 <String::String(char const*)>
    1472:	ce 01       	movw	r24, r28
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	0e 94 cf 07 	call	0xf9e	; 0xf9e <display(String, int) [clone .constprop.6]>
    147a:	ce 01       	movw	r24, r28
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
YINOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:475
    return false;
  }
}

bool YINOK() {
  if(yinvoltage > ILV && yinvoltage < IHV){
    1482:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <yinvoltage>
    1486:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <yinvoltage+0x1>
    148a:	08 17       	cp	r16, r24
    148c:	19 07       	cpc	r17, r25
    148e:	3c f4       	brge	.+14     	; 0x149e <updateScreenData(bool) [clone .part.7]+0x3aa>
    1490:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <IHV>
    1494:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <IHV+0x1>
    1498:	82 17       	cp	r24, r18
    149a:	93 07       	cpc	r25, r19
    149c:	74 f0       	brlt	.+28     	; 0x14ba <updateScreenData(bool) [clone .part.7]+0x3c6>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:569
      } else {
        if(!inputVok()){
          if(!RINOK() && !YINOK() && !BINOK()) { display("A AI", 0);}
          else{
            if(!RINOK()){ display("A rI", 0); }
            if(!YINOK()){ display("A yI", 0); }
    149e:	62 e2       	ldi	r22, 0x22	; 34
    14a0:	71 e0       	ldi	r23, 0x01	; 1
    14a2:	ce 01       	movw	r24, r28
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	0e 94 b9 07 	call	0xf72	; 0xf72 <String::String(char const*)>
    14aa:	ce 01       	movw	r24, r28
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	0e 94 cf 07 	call	0xf9e	; 0xf9e <display(String, int) [clone .constprop.6]>
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
BINOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:483
    return false;
  }
}

bool BINOK() {
  if(binvoltage > ILV && binvoltage < IHV){
    14ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <binvoltage>
    14be:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <binvoltage+0x1>
    14c2:	08 17       	cp	r16, r24
    14c4:	19 07       	cpc	r17, r25
    14c6:	44 f4       	brge	.+16     	; 0x14d8 <updateScreenData(bool) [clone .part.7]+0x3e4>
    14c8:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <IHV>
    14cc:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <IHV+0x1>
    14d0:	82 17       	cp	r24, r18
    14d2:	93 07       	cpc	r25, r19
    14d4:	0c f4       	brge	.+2      	; 0x14d8 <updateScreenData(bool) [clone .part.7]+0x3e4>
    14d6:	05 cf       	rjmp	.-502    	; 0x12e2 <updateScreenData(bool) [clone .part.7]+0x1ee>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:570
        if(!inputVok()){
          if(!RINOK() && !YINOK() && !BINOK()) { display("A AI", 0);}
          else{
            if(!RINOK()){ display("A rI", 0); }
            if(!YINOK()){ display("A yI", 0); }
            if(!BINOK()){ display("A bI", 0); }
    14d8:	67 e2       	ldi	r22, 0x27	; 39
    14da:	71 e0       	ldi	r23, 0x01	; 1
    14dc:	f6 ce       	rjmp	.-532    	; 0x12ca <updateScreenData(bool) [clone .part.7]+0x1d6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:576
          }
        }
        if(!outputVok()){
          if(!ROTOK() && !YOTOK() && !BOTOK()) { display("A AO", 0);}
          else{
            if(!ROTOK()){ display("A rO", 0); }
    14de:	62 e7       	ldi	r22, 0x72	; 114
    14e0:	71 e0       	ldi	r23, 0x01	; 1
    14e2:	ce 01       	movw	r24, r28
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	0e 94 b9 07 	call	0xf72	; 0xf72 <String::String(char const*)>
    14ea:	ce 01       	movw	r24, r28
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	0e 94 cf 07 	call	0xf9e	; 0xf9e <display(String, int) [clone .constprop.6]>
    14f2:	ce 01       	movw	r24, r28
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
YOTOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:499
    return false;
  }
}

bool YOTOK() {
  if(youtvoltage > OLV && youtvoltage < OHV){
    14fa:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <youtvoltage>
    14fe:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <youtvoltage+0x1>
    1502:	08 17       	cp	r16, r24
    1504:	19 07       	cpc	r17, r25
    1506:	3c f4       	brge	.+14     	; 0x1516 <updateScreenData(bool) [clone .part.7]+0x422>
    1508:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <OHV>
    150c:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <OHV+0x1>
    1510:	82 17       	cp	r24, r18
    1512:	93 07       	cpc	r25, r19
    1514:	74 f0       	brlt	.+28     	; 0x1532 <updateScreenData(bool) [clone .part.7]+0x43e>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:577
        }
        if(!outputVok()){
          if(!ROTOK() && !YOTOK() && !BOTOK()) { display("A AO", 0);}
          else{
            if(!ROTOK()){ display("A rO", 0); }
            if(!YOTOK()){ display("A yO", 0); }
    1516:	61 e3       	ldi	r22, 0x31	; 49
    1518:	71 e0       	ldi	r23, 0x01	; 1
    151a:	ce 01       	movw	r24, r28
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	0e 94 b9 07 	call	0xf72	; 0xf72 <String::String(char const*)>
    1522:	ce 01       	movw	r24, r28
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	0e 94 cf 07 	call	0xf9e	; 0xf9e <display(String, int) [clone .constprop.6]>
    152a:	ce 01       	movw	r24, r28
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
BOTOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:507
    return false;
  }
}

bool BOTOK() {
  if(boutvoltage > OLV && boutvoltage < OHV){
    1532:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <boutvoltage>
    1536:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <boutvoltage+0x1>
    153a:	08 17       	cp	r16, r24
    153c:	19 07       	cpc	r17, r25
    153e:	44 f4       	brge	.+16     	; 0x1550 <updateScreenData(bool) [clone .part.7]+0x45c>
    1540:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <OHV>
    1544:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <OHV+0x1>
    1548:	82 17       	cp	r24, r18
    154a:	93 07       	cpc	r25, r19
    154c:	0c f4       	brge	.+2      	; 0x1550 <updateScreenData(bool) [clone .part.7]+0x45c>
    154e:	0c cf       	rjmp	.-488    	; 0x1368 <updateScreenData(bool) [clone .part.7]+0x274>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:578
        if(!outputVok()){
          if(!ROTOK() && !YOTOK() && !BOTOK()) { display("A AO", 0);}
          else{
            if(!ROTOK()){ display("A rO", 0); }
            if(!YOTOK()){ display("A yO", 0); }
            if(!BOTOK()){ display("A bO", 0); }
    1550:	66 e3       	ldi	r22, 0x36	; 54
    1552:	71 e0       	ldi	r23, 0x01	; 1
    1554:	fd ce       	rjmp	.-518    	; 0x1350 <updateScreenData(bool) [clone .part.7]+0x25c>

00001556 <done()>:
done():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:999
  default:
    break;
  }
}

void done() {display("donE", 0);}
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	00 d0       	rcall	.+0      	; 0x155c <done()+0x6>
    155c:	00 d0       	rcall	.+0      	; 0x155e <done()+0x8>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <done()+0xa>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	67 e7       	ldi	r22, 0x77	; 119
    1566:	71 e0       	ldi	r23, 0x01	; 1
    1568:	ce 01       	movw	r24, r28
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	0e 94 b9 07 	call	0xf72	; 0xf72 <String::String(char const*)>
    1570:	ce 01       	movw	r24, r28
    1572:	01 96       	adiw	r24, 0x01	; 1
    1574:	0e 94 cf 07 	call	0xf9e	; 0xf9e <display(String, int) [clone .constprop.6]>
    1578:	ce 01       	movw	r24, r28
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
    1580:	26 96       	adiw	r28, 0x06	; 6
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	08 95       	ret

00001592 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>:
_ZN11EEPROMClass6updateEih.isra.2():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	ec 01       	movw	r28, r24
    159a:	16 2f       	mov	r17, r22
operator*():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    159c:	0e 94 75 12 	call	0x24ea	; 0x24ea <eeprom_read_byte>
update():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    15a0:	18 17       	cp	r17, r24
    15a2:	39 f0       	breq	.+14     	; 0x15b2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]+0x20>
_ZN5EERefaSEh():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    15a4:	61 2f       	mov	r22, r17
    15a6:	ce 01       	movw	r24, r28
_ZN11EEPROMClass6updateEih.isra.2():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
_ZN5EERefaSEh():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    15ae:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <eeprom_write_byte>
_ZN11EEPROMClass6updateEih.isra.2():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	08 95       	ret

000015ba <EEPROMClass::read(int) [clone .isra.1]>:
operator*():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    15ba:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <eeprom_read_byte>

000015be <__vector_18>:
__vector_18():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    15be:	1f 92       	push	r1
    15c0:	0f 92       	push	r0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	0f 92       	push	r0
    15c6:	11 24       	eor	r1, r1
    15c8:	2f 93       	push	r18
    15ca:	3f 93       	push	r19
    15cc:	8f 93       	push	r24
    15ce:	9f 93       	push	r25
    15d0:	af 93       	push	r26
    15d2:	bf 93       	push	r27
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    15d4:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <timer0_millis>
    15d8:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <timer0_millis+0x1>
    15dc:	a0 91 bc 02 	lds	r26, 0x02BC	; 0x8002bc <timer0_millis+0x2>
    15e0:	b0 91 bd 02 	lds	r27, 0x02BD	; 0x8002bd <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    15e4:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <timer0_fract>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    15e8:	26 e0       	ldi	r18, 0x06	; 6
    15ea:	23 0f       	add	r18, r19
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    15ec:	2d 37       	cpi	r18, 0x7D	; 125
    15ee:	68 f1       	brcs	.+90     	; 0x164a <__vector_18+0x8c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    15f0:	29 e8       	ldi	r18, 0x89	; 137
    15f2:	23 0f       	add	r18, r19
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    15f4:	03 96       	adiw	r24, 0x03	; 3
    15f6:	a1 1d       	adc	r26, r1
    15f8:	b1 1d       	adc	r27, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    15fa:	20 93 6a 02 	sts	0x026A, r18	; 0x80026a <timer0_fract>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    15fe:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <timer0_millis>
    1602:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <timer0_millis+0x1>
    1606:	a0 93 bc 02 	sts	0x02BC, r26	; 0x8002bc <timer0_millis+0x2>
    160a:	b0 93 bd 02 	sts	0x02BD, r27	; 0x8002bd <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    160e:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <timer0_overflow_count>
    1612:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <timer0_overflow_count+0x1>
    1616:	a0 91 6d 02 	lds	r26, 0x026D	; 0x80026d <timer0_overflow_count+0x2>
    161a:	b0 91 6e 02 	lds	r27, 0x026E	; 0x80026e <timer0_overflow_count+0x3>
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	a1 1d       	adc	r26, r1
    1622:	b1 1d       	adc	r27, r1
    1624:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <timer0_overflow_count>
    1628:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <timer0_overflow_count+0x1>
    162c:	a0 93 6d 02 	sts	0x026D, r26	; 0x80026d <timer0_overflow_count+0x2>
    1630:	b0 93 6e 02 	sts	0x026E, r27	; 0x80026e <timer0_overflow_count+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    1634:	bf 91       	pop	r27
    1636:	af 91       	pop	r26
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	3f 91       	pop	r19
    163e:	2f 91       	pop	r18
    1640:	0f 90       	pop	r0
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	0f 90       	pop	r0
    1646:	1f 90       	pop	r1
    1648:	18 95       	reti
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    164a:	02 96       	adiw	r24, 0x02	; 2
    164c:	a1 1d       	adc	r26, r1
    164e:	b1 1d       	adc	r27, r1
    1650:	d4 cf       	rjmp	.-88     	; 0x15fa <__vector_18+0x3c>

00001652 <countPulseASM>:
countPulseASM():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:62

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
    1652:	cf 92       	push	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:63
    push r13   ;   ;  131 pushqi1/1 [length = 1]
    1654:	df 92       	push	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:64
    push r14   ;   ;  132 pushqi1/1 [length = 1]
    1656:	ef 92       	push	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:65
    push r15   ;   ;  133 pushqi1/1 [length = 1]
    1658:	ff 92       	push	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:66
    push r16   ;   ;  134 pushqi1/1 [length = 1]
    165a:	0f 93       	push	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:67
    push r17   ;   ;  135 pushqi1/1 [length = 1]
    165c:	1f 93       	push	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:72
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
    165e:	e8 2f       	mov	r30, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:73
    mov r31,r25  ;  port, port
    1660:	f9 2f       	mov	r31, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:79
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
    1662:	05 c0       	rjmp	.+10     	; 0x166e <countPulseASM+0x1c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:83
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
    1664:	01 50       	subi	r16, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:84
    sbc r17, r1   ;  maxloops
    1666:	11 09       	sbc	r17, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:85
    sbc r18, r1   ;  maxloops
    1668:	21 09       	sbc	r18, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:86
    sbc r19, r1   ;  maxloops
    166a:	31 09       	sbc	r19, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:87
    breq .L13  ; ,   ;  19  branch  [length = 1]
    166c:	61 f1       	breq	.+88     	; 0x16c6 <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:91
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
    166e:	90 81       	ld	r25, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:92
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
    1670:	96 23       	and	r25, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:93
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
    1672:	94 17       	cp	r25, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:94
    breq .L4   ; ,   ;  26  branch  [length = 1]
    1674:	b9 f3       	breq	.-18     	; 0x1664 <countPulseASM+0x12>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:95
    rjmp .L6   ;   ;  184 jump  [length = 1]
    1676:	05 c0       	rjmp	.+10     	; 0x1682 <countPulseASM+0x30>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:104
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
    1678:	01 50       	subi	r16, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:105
    sbc r17, r1   ;  maxloops
    167a:	11 09       	sbc	r17, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:106
    sbc r18, r1   ;  maxloops
    167c:	21 09       	sbc	r18, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:107
    sbc r19, r1   ;  maxloops
    167e:	31 09       	sbc	r19, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:108
    breq .L13  ; ,   ;  33  branch  [length = 1]
    1680:	11 f1       	breq	.+68     	; 0x16c6 <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:112
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
    1682:	90 81       	ld	r25, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:113
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
    1684:	96 23       	and	r25, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:114
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
    1686:	94 13       	cpse	r25, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:115
    rjmp .L7   ;
    1688:	f7 cf       	rjmp	.-18     	; 0x1678 <countPulseASM+0x26>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:116
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
    168a:	c1 2c       	mov	r12, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:117
    mov r13, r1   ;  width
    168c:	d1 2c       	mov	r13, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:118
    mov r14, r1   ;  width
    168e:	e1 2c       	mov	r14, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:119
    mov r15, r1   ;  width
    1690:	f1 2c       	mov	r15, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:120
    rjmp .L9   ;   ;  186 jump  [length = 1]
    1692:	0a c0       	rjmp	.+20     	; 0x16a8 <countPulseASM+0x56>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:129
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
    1694:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:130
    sub r12,r24  ;  width,
    1696:	c8 1a       	sub	r12, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:131
    sbc r13,r24  ;  width,
    1698:	d8 0a       	sbc	r13, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:132
    sbc r14,r24  ;  width,
    169a:	e8 0a       	sbc	r14, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:133
    sbc r15,r24  ;  width,
    169c:	f8 0a       	sbc	r15, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:134
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
    169e:	0c 15       	cp	r16, r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:135
    cpc r17,r13  ;  maxloops, width
    16a0:	1d 05       	cpc	r17, r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:136
    cpc r18,r14  ;  maxloops, width
    16a2:	2e 05       	cpc	r18, r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:137
    cpc r19,r15  ;  maxloops, width
    16a4:	3f 05       	cpc	r19, r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:138
    breq .L13  ; ,   ;  52  branch  [length = 1]
    16a6:	79 f0       	breq	.+30     	; 0x16c6 <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:142
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
    16a8:	80 81       	ld	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:143
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
    16aa:	86 23       	and	r24, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:144
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
    16ac:	84 17       	cp	r24, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:145
    breq .L10  ; ,   ;  64  branch  [length = 1]
    16ae:	91 f3       	breq	.-28     	; 0x1694 <countPulseASM+0x42>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:151
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
    16b0:	6c 2d       	mov	r22, r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:152
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
    16b2:	7d 2d       	mov	r23, r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:153
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
    16b4:	8e 2d       	mov	r24, r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:154
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
    16b6:	9f 2d       	mov	r25, r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:157
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
    16b8:	1f 91       	pop	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:158
    pop r16  ;   ;  172 popqi [length = 1]
    16ba:	0f 91       	pop	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:159
    pop r15  ;   ;  173 popqi [length = 1]
    16bc:	ff 90       	pop	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:160
    pop r14  ;   ;  174 popqi [length = 1]
    16be:	ef 90       	pop	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:161
    pop r13  ;   ;  175 popqi [length = 1]
    16c0:	df 90       	pop	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:162
    pop r12  ;   ;  176 popqi [length = 1]
    16c2:	cf 90       	pop	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:163
    ret  ;  177 return_from_epilogue  [length = 1]
    16c4:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:166
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
    16c6:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:167
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
    16c8:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:168
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
    16ca:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:169
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
    16cc:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:172
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
    16ce:	1f 91       	pop	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:173
    pop r16  ;   ;  139 popqi [length = 1]
    16d0:	0f 91       	pop	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:174
    pop r15  ;   ;  140 popqi [length = 1]
    16d2:	ff 90       	pop	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:175
    pop r14  ;   ;  141 popqi [length = 1]
    16d4:	ef 90       	pop	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:176
    pop r13  ;   ;  142 popqi [length = 1]
    16d6:	df 90       	pop	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:177
    pop r12  ;   ;  143 popqi [length = 1]
    16d8:	cf 90       	pop	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:178
    ret  ;  144 return_from_epilogue  [length = 1]
    16da:	08 95       	ret

000016dc <BlockNot::addToTimerList()>:
addToTimerList():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:640
void resetAllTimers(BlockNot *timer) {
        resetAllTimers(timer->BlockNot::getStartTime());
}

void BlockNot::addToTimerList() {
        if (firstTimer == nullptr) {
    16dc:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <BlockNot::firstTimer>
    16e0:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <BlockNot::firstTimer+0x1>
    16e4:	23 2b       	or	r18, r19
    16e6:	61 f4       	brne	.+24     	; 0x1700 <BlockNot::addToTimerList()+0x24>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:641
            firstTimer = currentTimer = this;
    16e8:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <BlockNot::currentTimer+0x1>
    16ec:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <BlockNot::currentTimer>
    16f0:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <BlockNot::firstTimer+0x1>
    16f4:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <BlockNot::firstTimer>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:646
        } else {
            currentTimer->nextTimer = this;
            currentTimer = this;
        }
        this->nextTimer = nullptr;
    16f8:	fc 01       	movw	r30, r24
    16fa:	10 a2       	std	Z+32, r1	; 0x20
    16fc:	17 8e       	std	Z+31, r1	; 0x1f
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:647
}
    16fe:	08 95       	ret
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:643

void BlockNot::addToTimerList() {
        if (firstTimer == nullptr) {
            firstTimer = currentTimer = this;
        } else {
            currentTimer->nextTimer = this;
    1700:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <BlockNot::currentTimer>
    1704:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <BlockNot::currentTimer+0x1>
    1708:	90 a3       	std	Z+32, r25	; 0x20
    170a:	87 8f       	std	Z+31, r24	; 0x1f
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:644
            currentTimer = this;
    170c:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <BlockNot::currentTimer+0x1>
    1710:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <BlockNot::currentTimer>
    1714:	f1 cf       	rjmp	.-30     	; 0x16f8 <BlockNot::addToTimerList()+0x1c>

00001716 <main>:
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	64 97       	sbiw	r28, 0x14	; 20
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    172a:	78 94       	sei
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    172c:	84 b5       	in	r24, 0x24	; 36
    172e:	83 60       	ori	r24, 0x03	; 3
    1730:	84 bd       	out	0x24, r24	; 36
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    1732:	85 b5       	in	r24, 0x25	; 37
    1734:	83 60       	ori	r24, 0x03	; 3
    1736:	85 bd       	out	0x25, r24	; 37
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1738:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    173c:	81 60       	ori	r24, 0x01	; 1
    173e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1742:	82 e0       	ldi	r24, 0x02	; 2
    1744:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1748:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    174c:	81 60       	ori	r24, 0x01	; 1
    174e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1752:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1756:	81 60       	ori	r24, 0x01	; 1
    1758:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    175c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1760:	84 60       	ori	r24, 0x04	; 4
    1762:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    1766:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    176a:	81 60       	ori	r24, 0x01	; 1
    176c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    1770:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    1774:	83 60       	ori	r24, 0x03	; 3
    1776:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    177a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    177e:	81 60       	ori	r24, 0x01	; 1
    1780:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    1784:	86 e8       	ldi	r24, 0x86	; 134
    1786:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    178a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
Begin():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:78
	byte segA, byte segB, byte segC, byte segD, byte segE, byte segF, byte segG,
	byte segDP,
	byte segCol, byte segApos)
{
  //Bring all the variables in from the caller
  numberOfDigits = numOfDigits;
    178e:	84 e0       	ldi	r24, 0x04	; 4
    1790:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <display1+0x15>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:79
  digit1 = dig1;
    1794:	13 e1       	ldi	r17, 0x13	; 19
    1796:	10 93 74 02 	sts	0x0274, r17	; 0x800274 <display1+0x5>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:80
  digit2 = dig2;
    179a:	b2 e1       	ldi	r27, 0x12	; 18
    179c:	b0 93 75 02 	sts	0x0275, r27	; 0x800275 <display1+0x6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:81
  digit3 = dig3;
    17a0:	a1 e1       	ldi	r26, 0x11	; 17
    17a2:	a0 93 76 02 	sts	0x0276, r26	; 0x800276 <display1+0x7>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:82
  digit4 = dig4;
    17a6:	f0 e1       	ldi	r31, 0x10	; 16
    17a8:	f0 93 77 02 	sts	0x0277, r31	; 0x800277 <display1+0x8>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:83
  digitApostrophe = digitApos;
    17ac:	8f ef       	ldi	r24, 0xFF	; 255
    17ae:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <display1+0x9>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:84
  digitColon = digitCol;
    17b2:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <display1+0xa>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:85
  segmentA = segA;
    17b6:	e8 e0       	ldi	r30, 0x08	; 8
    17b8:	e0 93 7c 02 	sts	0x027C, r30	; 0x80027c <display1+0xd>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:86
  segmentB = segB;
    17bc:	79 e0       	ldi	r23, 0x09	; 9
    17be:	70 93 7d 02 	sts	0x027D, r23	; 0x80027d <display1+0xe>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:87
  segmentC = segC;
    17c2:	6a e0       	ldi	r22, 0x0A	; 10
    17c4:	60 93 7e 02 	sts	0x027E, r22	; 0x80027e <display1+0xf>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:88
  segmentD = segD;
    17c8:	5b e0       	ldi	r21, 0x0B	; 11
    17ca:	50 93 7f 02 	sts	0x027F, r21	; 0x80027f <display1+0x10>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:89
  segmentE = segE;
    17ce:	4c e0       	ldi	r20, 0x0C	; 12
    17d0:	40 93 80 02 	sts	0x0280, r20	; 0x800280 <display1+0x11>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:90
  segmentF = segF;
    17d4:	3d e0       	ldi	r19, 0x0D	; 13
    17d6:	30 93 81 02 	sts	0x0281, r19	; 0x800281 <display1+0x12>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:91
  segmentG = segG;
    17da:	2e e0       	ldi	r18, 0x0E	; 14
    17dc:	20 93 82 02 	sts	0x0282, r18	; 0x800282 <display1+0x13>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:92
  segmentDP = segDP;
    17e0:	9f e0       	ldi	r25, 0x0F	; 15
    17e2:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <display1+0x14>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:93
  segmentApostrophe = segApos;
    17e6:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <display1+0xb>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:94
  segmentColon = segCol;
    17ea:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <display1+0xc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:98

  //Assign input values to variables
  //mode is what the digit pins must be set at for it to be turned on. 0 for common cathode, 1 for common anode
  mode = mode_in;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <display1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:101
  if(mode == COMMON_ANODE)
  {
    DigitOn = HIGH;
    17f4:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <display1+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:102
    DigitOff = LOW;
    17f8:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <display1+0x2>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:103
    SegOn = LOW;
    17fc:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <display1+0x3>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:104
    SegOff = HIGH;
    1800:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <display1+0x4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:114
    DigitOff = HIGH;
    SegOn = HIGH;
    SegOff = LOW;
  }

  DigitPins[0] = digit1;
    1804:	10 93 87 02 	sts	0x0287, r17	; 0x800287 <display1+0x18>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:115
  DigitPins[1] = digit2;
    1808:	b0 93 88 02 	sts	0x0288, r27	; 0x800288 <display1+0x19>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:116
  DigitPins[2] = digit3;
    180c:	a0 93 89 02 	sts	0x0289, r26	; 0x800289 <display1+0x1a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:117
  DigitPins[3] = digit4;
    1810:	f0 93 8a 02 	sts	0x028A, r31	; 0x80028a <display1+0x1b>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:118
  SegmentPins[0] = segmentA;
    1814:	e0 93 8b 02 	sts	0x028B, r30	; 0x80028b <display1+0x1c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:119
  SegmentPins[1] = segmentB;
    1818:	70 93 8c 02 	sts	0x028C, r23	; 0x80028c <display1+0x1d>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:120
  SegmentPins[2] = segmentC;
    181c:	60 93 8d 02 	sts	0x028D, r22	; 0x80028d <display1+0x1e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:121
  SegmentPins[3] = segmentD;
    1820:	50 93 8e 02 	sts	0x028E, r21	; 0x80028e <display1+0x1f>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:122
  SegmentPins[4] = segmentE;
    1824:	40 93 8f 02 	sts	0x028F, r20	; 0x80028f <display1+0x20>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:123
  SegmentPins[5] = segmentF;
    1828:	30 93 90 02 	sts	0x0290, r19	; 0x800290 <display1+0x21>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:124
  SegmentPins[6] = segmentG;
    182c:	20 93 91 02 	sts	0x0291, r18	; 0x800291 <display1+0x22>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:125
  SegmentPins[7] = segmentDP;
    1830:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <display1+0x23>
main():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:129

  //Turn everything Off before setting pin as output
  //Set all digit pins off. Low for common anode, high for common cathode
  for (byte digit = 0 ; digit < numberOfDigits ; digit++)
    1834:	10 e0       	ldi	r17, 0x00	; 0
Begin():
    1836:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <display1+0x15>
    183a:	18 17       	cp	r17, r24
    183c:	98 f4       	brcc	.+38     	; 0x1864 <main+0x14e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:131
  {
    digitalWrite(DigitPins[digit], DigitOff);
    183e:	81 2f       	mov	r24, r17
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9c 01       	movw	r18, r24
    1844:	21 59       	subi	r18, 0x91	; 145
    1846:	3d 4f       	sbci	r19, 0xFD	; 253
    1848:	79 01       	movw	r14, r18
    184a:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <display1+0x2>
    184e:	f9 01       	movw	r30, r18
    1850:	80 8d       	ldd	r24, Z+24	; 0x18
    1852:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:132
    pinMode(DigitPins[digit], OUTPUT);
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	f7 01       	movw	r30, r14
    185a:	80 8d       	ldd	r24, Z+24	; 0x18
    185c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:129
  SegmentPins[6] = segmentG;
  SegmentPins[7] = segmentDP;

  //Turn everything Off before setting pin as output
  //Set all digit pins off. Low for common anode, high for common cathode
  for (byte digit = 0 ; digit < numberOfDigits ; digit++)
    1860:	1f 5f       	subi	r17, 0xFF	; 255
    1862:	e9 cf       	rjmp	.-46     	; 0x1836 <main+0x120>
    1864:	0f e6       	ldi	r16, 0x6F	; 111
    1866:	12 e0       	ldi	r17, 0x02	; 2
    1868:	b7 e7       	ldi	r27, 0x77	; 119
    186a:	eb 2e       	mov	r14, r27
    186c:	b2 e0       	ldi	r27, 0x02	; 2
    186e:	fb 2e       	mov	r15, r27
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:137
    pinMode(DigitPins[digit], OUTPUT);
  }
  //Set all segment pins off. High for common anode, low for common cathode
  for (byte seg = 0 ; seg < 8 ; seg++)
  {
    digitalWrite(SegmentPins[seg], SegOff);
    1870:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <display1+0x4>
    1874:	f8 01       	movw	r30, r16
    1876:	84 8d       	ldd	r24, Z+28	; 0x1c
    1878:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:138
    pinMode(SegmentPins[seg], OUTPUT);
    187c:	61 e0       	ldi	r22, 0x01	; 1
    187e:	f8 01       	movw	r30, r16
    1880:	84 8d       	ldd	r24, Z+28	; 0x1c
    1882:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
    1886:	0f 5f       	subi	r16, 0xFF	; 255
    1888:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:135
  {
    digitalWrite(DigitPins[digit], DigitOff);
    pinMode(DigitPins[digit], OUTPUT);
  }
  //Set all segment pins off. High for common anode, low for common cathode
  for (byte seg = 0 ; seg < 8 ; seg++)
    188a:	e0 16       	cp	r14, r16
    188c:	f1 06       	cpc	r15, r17
    188e:	81 f7       	brne	.-32     	; 0x1870 <main+0x15a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:141
  {
    digitalWrite(SegmentPins[seg], SegOff);
    pinMode(SegmentPins[seg], OUTPUT);
  }

  if (digitColon != 255)
    1890:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <display1+0xa>
    1894:	8f 3f       	cpi	r24, 0xFF	; 255
    1896:	a1 f0       	breq	.+40     	; 0x18c0 <main+0x1aa>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:143
  {
	digitalWrite(digitColon, DigitOff);
    1898:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <display1+0x2>
    189c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:144
	pinMode(digitColon, OUTPUT);
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <display1+0xa>
    18a6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:145
	digitalWrite(segmentColon, SegOff);
    18aa:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <display1+0x4>
    18ae:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <display1+0xc>
    18b2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:146
	pinMode(segmentColon, OUTPUT);
    18b6:	61 e0       	ldi	r22, 0x01	; 1
    18b8:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <display1+0xc>
    18bc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:148
  }
  if (digitApostrophe != 255)
    18c0:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <display1+0x9>
    18c4:	8f 3f       	cpi	r24, 0xFF	; 255
    18c6:	a1 f0       	breq	.+40     	; 0x18f0 <main+0x1da>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:150
  {
	digitalWrite(digitApostrophe, DigitOff);
    18c8:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <display1+0x2>
    18cc:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:151
	pinMode(digitApostrophe, OUTPUT);
    18d0:	61 e0       	ldi	r22, 0x01	; 1
    18d2:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <display1+0x9>
    18d6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:152
	digitalWrite(segmentApostrophe, SegOff);
    18da:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <display1+0x4>
    18de:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <display1+0xb>
    18e2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:153
	pinMode(segmentApostrophe, OUTPUT);
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <display1+0xb>
    18ec:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
SetBrightness():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:179
//We need to error check and map the incoming value
void SevSeg::SetBrightness(byte percentBright)
{
	//Error check and scale brightnessLevel
	if(percentBright > 100) percentBright = 100;
	brightnessDelay = map(percentBright, 0, 100, 0, FRAMEPERIOD); //map brightnessDelay to 0 to the max which is framePeriod
    18f0:	80 ed       	ldi	r24, 0xD0	; 208
    18f2:	97 e0       	ldi	r25, 0x07	; 7
    18f4:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <display1+0x17>
    18f8:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <display1+0x16>
setup():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:193
void setup() {
//Setup Display Data
setupDisplay();
//Setup Inputs 
//setIN(); is a custom Function Defined at the bottom of the Program!
setIN(ok);
    18fc:	84 e1       	ldi	r24, 0x14	; 20
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:194
setIN(plus);
    1904:	85 e1       	ldi	r24, 0x15	; 21
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:195
setIN(minus);
    190c:	86 e1       	ldi	r24, 0x16	; 22
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:196
setIN(RINPIN);
    1914:	88 e1       	ldi	r24, 0x18	; 24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:197
setIN(YINPIN);
    191c:	89 e1       	ldi	r24, 0x19	; 25
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:198
setIN(BINPIN);
    1924:	8a e1       	ldi	r24, 0x1A	; 26
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:199
setIN(ROTPIN);
    192c:	8b e1       	ldi	r24, 0x1B	; 27
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:200
setIN(YOTPIN);
    1934:	8c e1       	ldi	r24, 0x1C	; 28
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:201
setIN(BOTPIN);
    193c:	8d e1       	ldi	r24, 0x1D	; 29
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:202
setIN(current);
    1944:	8e e1       	ldi	r24, 0x1E	; 30
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:211
//setIN(setupPin); //change setup mode from RUN/SETUP//
///////////////////////////////////////////////////////

//Set Outputs
//setOUT(); is a custom Function Defined at the bottom of the Program!
setOUT(motorRFW);
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	0e 94 8d 04 	call	0x91a	; 0x91a <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:212
setOUT(motorRBW);
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 94 8d 04 	call	0x91a	; 0x91a <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:213
setOUT(motorYFW);
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	0e 94 8d 04 	call	0x91a	; 0x91a <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:214
setOUT(motorYBW);
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	0e 94 8d 04 	call	0x91a	; 0x91a <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:215
setOUT(motorBFW);
    196c:	84 e0       	ldi	r24, 0x04	; 4
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 8d 04 	call	0x91a	; 0x91a <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:216
setOUT(motorBBW);
    1974:	85 e0       	ldi	r24, 0x05	; 5
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 8d 04 	call	0x91a	; 0x91a <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:217
setOUT(contactor);
    197c:	86 e0       	ldi	r24, 0x06	; 6
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	0e 94 8d 04 	call	0x91a	; 0x91a <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:227
//uncomment when programming Arduino/MCU
/**/

//using the EEPROM.h Librabry Included by the Arduino IDE & Arduino Core

IHV = 2 * EEPROM.read(0);
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <EEPROMClass::read(int) [clone .isra.1]>
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <IHV+0x1>
    1996:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <IHV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:228
ILV = 2 * EEPROM.read(1);
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <EEPROMClass::read(int) [clone .isra.1]>
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <ILV+0x1>
    19ac:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <ILV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:229
OHV = 2 * EEPROM.read(2);
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <EEPROMClass::read(int) [clone .isra.1]>
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <OHV+0x1>
    19c2:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <OHV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:230
OLV = 2 * EEPROM.read(3);
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <EEPROMClass::read(int) [clone .isra.1]>
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <OLV+0x1>
    19d8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <OLV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:231
SETV = 2 * EEPROM.read(4);
    19dc:	84 e0       	ldi	r24, 0x04	; 4
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <EEPROMClass::read(int) [clone .isra.1]>
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <SETV+0x1>
    19ee:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <SETV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:232
OVL = EEPROM.read(5);
    19f2:	85 e0       	ldi	r24, 0x05	; 5
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <EEPROMClass::read(int) [clone .isra.1]>
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <OVL+0x1>
    1a00:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <OVL>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:233
TON = EEPROM.read(6);
    1a04:	86 e0       	ldi	r24, 0x06	; 6
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <EEPROMClass::read(int) [clone .isra.1]>
    1a0c:	08 2f       	mov	r16, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <TON+0x1>
    1a14:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <TON>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:234
TOFF = EEPROM.read(7);
    1a18:	87 e0       	ldi	r24, 0x07	; 7
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <EEPROMClass::read(int) [clone .isra.1]>
    1a20:	18 2f       	mov	r17, r24
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <TOFF+0x1>
    1a28:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <TOFF>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:235
DIFF = EEPROM.read(8);
    1a2c:	88 e0       	ldi	r24, 0x08	; 8
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <EEPROMClass::read(int) [clone .isra.1]>
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <DIFF+0x1>
    1a3a:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <DIFF>
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
            break;
        case MILLISECONDS:
            duration.millis = time;
            break;
        case SECONDS:
            duration.seconds = time;
    1a3e:	60 2f       	mov	r22, r16
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatunsisf>
    1a4a:	60 93 31 02 	sts	0x0231, r22	; 0x800231 <on+0x15>
    1a4e:	70 93 32 02 	sts	0x0232, r23	; 0x800232 <on+0x16>
    1a52:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <on+0x17>
    1a56:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <on+0x18>
setDuration():
    1a5a:	8c e1       	ldi	r24, 0x1C	; 28
    1a5c:	92 e0       	ldi	r25, 0x02	; 2
    1a5e:	0e 94 8d 03 	call	0x71a	; 0x71a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
initDuration():
    1a62:	61 2f       	mov	r22, r17
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatunsisf>
    1a6e:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <off+0x15>
    1a72:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <off+0x16>
    1a76:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <off+0x17>
    1a7a:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <off+0x18>
setDuration():
    1a7e:	8b ef       	ldi	r24, 0xFB	; 251
    1a80:	91 e0       	ldi	r25, 0x01	; 1
    1a82:	0e 94 8d 03 	call	0x71a	; 0x71a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
setup():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:259

//Setup Variable Timers after the variable is read from the Memory!
on.setDuration(TON, SECONDS);
off.setDuration(TOFF, SECONDS);
//Reset the Timers after time update.
on.reset();
    1a86:	8c e1       	ldi	r24, 0x1C	; 28
    1a88:	92 e0       	ldi	r25, 0x02	; 2
    1a8a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:260
off.reset();
    1a8e:	8b ef       	ldi	r24, 0xFB	; 251
    1a90:	91 e0       	ldi	r25, 0x01	; 1
    1a92:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
checkok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:902
//Check OK Button Pressed



void checkok() {
  if(read(ok) && okold == !read(ok)){
    1a96:	bb 24       	eor	r11, r11
    1a98:	b3 94       	inc	r11
    1a9a:	8e 01       	movw	r16, r28
    1a9c:	01 5f       	subi	r16, 0xF1	; 241
    1a9e:	1f 4f       	sbci	r17, 0xFF	; 255
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1aa0:	a0 e0       	ldi	r26, 0x00	; 0
    1aa2:	ca 2e       	mov	r12, r26
    1aa4:	a0 e0       	ldi	r26, 0x00	; 0
    1aa6:	da 2e       	mov	r13, r26
checkok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:902
    1aa8:	aa 24       	eor	r10, r10
    1aaa:	a3 94       	inc	r10
    1aac:	84 e1       	ldi	r24, 0x14	; 20
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1ab4:	88 23       	and	r24, r24
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <main+0x3a4>
    1ab8:	a6 c0       	rjmp	.+332    	; 0x1c06 <main+0x4f0>
    1aba:	90 90 69 02 	lds	r9, 0x0269	; 0x800269 <mode>
    1abe:	84 e1       	ldi	r24, 0x14	; 20
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1ac6:	8b 25       	eor	r24, r11
    1ac8:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <okold>
    1acc:	89 13       	cpse	r24, r25
    1ace:	9b c0       	rjmp	.+310    	; 0x1c06 <main+0x4f0>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:903
  okold = read(ok);
    1ad0:	84 e1       	ldi	r24, 0x14	; 20
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1ad8:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <okold>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:904
  encMenu++;
    1adc:	e0 90 66 02 	lds	r14, 0x0266	; 0x800266 <encMenu>
    1ae0:	f0 90 67 02 	lds	r15, 0x0267	; 0x800267 <encMenu+0x1>
    1ae4:	ff ef       	ldi	r31, 0xFF	; 255
    1ae6:	ef 1a       	sub	r14, r31
    1ae8:	ff 0a       	sbc	r15, r31
    1aea:	f0 92 67 02 	sts	0x0267, r15	; 0x800267 <encMenu+0x1>
    1aee:	e0 92 66 02 	sts	0x0266, r14	; 0x800266 <encMenu>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:905
  if(!mode && !tmrstp){
    1af2:	91 10       	cpse	r9, r1
    1af4:	06 c0       	rjmp	.+12     	; 0x1b02 <main+0x3ec>
    1af6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <tmrstp>
    1afa:	81 11       	cpse	r24, r1
    1afc:	19 c0       	rjmp	.+50     	; 0x1b30 <main+0x41a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:906
    tmrstp = true;
    1afe:	a0 92 d2 01 	sts	0x01D2, r10	; 0x8001d2 <tmrstp>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:911
  }
  else if(!mode) {
    tmrstp = false;
  }
  refresh.reset();
    1b02:	8a ed       	ldi	r24, 0xDA	; 218
    1b04:	91 e0       	ldi	r25, 0x01	; 1
    1b06:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
encUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:938

//Update Parameters on Menu Change

void encUpdate() {
  
  switch (encMenu)
    1b0a:	f7 01       	movw	r30, r14
    1b0c:	31 97       	sbiw	r30, 0x01	; 1
    1b0e:	ea 30       	cpi	r30, 0x0A	; 10
    1b10:	f1 05       	cpc	r31, r1
    1b12:	d8 f4       	brcc	.+54     	; 0x1b4a <main+0x434>
    1b14:	e2 57       	subi	r30, 0x72	; 114
    1b16:	f2 4f       	sbci	r31, 0xF2	; 242
    1b18:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__tablejump2__>
    1b1c:	9b 0d       	add	r25, r11
    1b1e:	ad 0e       	add	r10, r29
    1b20:	ba 0e       	add	r11, r26
    1b22:	c7 0e       	add	r12, r23
    1b24:	d4 0e       	add	r13, r20
    1b26:	e1 0e       	add	r14, r17
    1b28:	ee 0e       	add	r14, r30
    1b2a:	fb 0e       	add	r15, r27
    1b2c:	22 0f       	add	r18, r18
    1b2e:	47 0f       	add	r20, r23
checkok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:909
  encMenu++;
  if(!mode && !tmrstp){
    tmrstp = true;
  }
  else if(!mode) {
    tmrstp = false;
    1b30:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <tmrstp>
    1b34:	e6 cf       	rjmp	.-52     	; 0x1b02 <main+0x3ec>
encUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:943
  switch (encMenu)
  {
  case 0:
    break;
  case 1:
    enc = IHV;
    1b36:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <IHV>
    1b3a:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <IHV+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:948
    done();
    break;
  case 2:
    IHV = enc;
    enc = ILV;
    1b3e:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <enc+0x1>
    1b42:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:992
    off.reset();
    done();
    break;
  case 10:
    DIFF = enc;
    done();
    1b46:	0e 94 ab 0a 	call	0x1556	; 0x1556 <done()>
eepromUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:923
}

//Save Parameters to MCU EEPROM Memory (only if changed)

void eepromUpdate() {
  EEPROM.update(0, IHV/2);
    1b4a:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <IHV>
    1b4e:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <IHV+0x1>
    1b52:	77 ff       	sbrs	r23, 7
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <main+0x444>
    1b56:	6f 5f       	subi	r22, 0xFF	; 255
    1b58:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5a:	75 95       	asr	r23
    1b5c:	67 95       	ror	r22
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	0e 94 c9 0a 	call	0x1592	; 0x1592 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:924
  EEPROM.update(1, ILV/2);
    1b66:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <ILV>
    1b6a:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <ILV+0x1>
    1b6e:	77 ff       	sbrs	r23, 7
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <main+0x460>
    1b72:	6f 5f       	subi	r22, 0xFF	; 255
    1b74:	7f 4f       	sbci	r23, 0xFF	; 255
    1b76:	75 95       	asr	r23
    1b78:	67 95       	ror	r22
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:925
  EEPROM.update(2, OHV/2);
    1b82:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <OHV>
    1b86:	70 91 cd 01 	lds	r23, 0x01CD	; 0x8001cd <OHV+0x1>
    1b8a:	77 ff       	sbrs	r23, 7
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <main+0x47c>
    1b8e:	6f 5f       	subi	r22, 0xFF	; 255
    1b90:	7f 4f       	sbci	r23, 0xFF	; 255
    1b92:	75 95       	asr	r23
    1b94:	67 95       	ror	r22
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:926
  EEPROM.update(3, OLV/2);
    1b9e:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <OLV>
    1ba2:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <OLV+0x1>
    1ba6:	77 ff       	sbrs	r23, 7
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <main+0x498>
    1baa:	6f 5f       	subi	r22, 0xFF	; 255
    1bac:	7f 4f       	sbci	r23, 0xFF	; 255
    1bae:	75 95       	asr	r23
    1bb0:	67 95       	ror	r22
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 c9 0a 	call	0x1592	; 0x1592 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:927
  EEPROM.update(4, SETV/2);
    1bba:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <SETV>
    1bbe:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <SETV+0x1>
    1bc2:	77 ff       	sbrs	r23, 7
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <main+0x4b4>
    1bc6:	6f 5f       	subi	r22, 0xFF	; 255
    1bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bca:	75 95       	asr	r23
    1bcc:	67 95       	ror	r22
    1bce:	84 e0       	ldi	r24, 0x04	; 4
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:928
  EEPROM.update(5, OVL);
    1bd6:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <OVL>
    1bda:	85 e0       	ldi	r24, 0x05	; 5
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	0e 94 c9 0a 	call	0x1592	; 0x1592 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:929
  EEPROM.update(6, TON);
    1be2:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <TON>
    1be6:	86 e0       	ldi	r24, 0x06	; 6
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 c9 0a 	call	0x1592	; 0x1592 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:930
  EEPROM.update(7, TOFF);
    1bee:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <TOFF>
    1bf2:	87 e0       	ldi	r24, 0x07	; 7
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 c9 0a 	call	0x1592	; 0x1592 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:931
  EEPROM.update(8, DIFF);
    1bfa:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <DIFF>
    1bfe:	88 e0       	ldi	r24, 0x08	; 8
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 c9 0a 	call	0x1592	; 0x1592 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
checkok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:915
  }
  refresh.reset();
  encUpdate();
  eepromUpdate();
  }
  if(read(ok) == false){
    1c06:	84 e1       	ldi	r24, 0x14	; 20
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1c0e:	81 11       	cpse	r24, r1
    1c10:	06 c0       	rjmp	.+12     	; 0x1c1e <main+0x508>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:916
  okold = read(ok);
    1c12:	84 e1       	ldi	r24, 0x14	; 20
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1c1a:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <okold>
checkplus():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1012
}

//Check Plus Button Pressed

void checkplus() {
  if(read(plus) && plusold == !read(plus)){
    1c1e:	85 e1       	ldi	r24, 0x15	; 21
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1c26:	f0 90 69 02 	lds	r15, 0x0269	; 0x800269 <mode>
    1c2a:	88 23       	and	r24, r24
    1c2c:	19 f1       	breq	.+70     	; 0x1c74 <main+0x55e>
    1c2e:	85 e1       	ldi	r24, 0x15	; 21
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1c36:	8b 25       	eor	r24, r11
    1c38:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <plusold>
    1c3c:	89 13       	cpse	r24, r25
    1c3e:	1a c0       	rjmp	.+52     	; 0x1c74 <main+0x55e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1013
  plusold = read(plus);
    1c40:	85 e1       	ldi	r24, 0x15	; 21
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1c48:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <plusold>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1014
  enc++;
    1c4c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1c50:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1c54:	01 96       	adiw	r24, 0x01	; 1
    1c56:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <enc+0x1>
    1c5a:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1015
  if(!mode){
    1c5e:	f1 10       	cpse	r15, r1
    1c60:	09 c0       	rjmp	.+18     	; 0x1c74 <main+0x55e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1016
    menu++;
    1c62:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <menu>
    1c66:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <menu+0x1>
    1c6a:	01 96       	adiw	r24, 0x01	; 1
    1c6c:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <menu+0x1>
    1c70:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <menu>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1019
  }
  }
  if(read(plus) == false){
    1c74:	85 e1       	ldi	r24, 0x15	; 21
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1c7c:	81 11       	cpse	r24, r1
    1c7e:	06 c0       	rjmp	.+12     	; 0x1c8c <main+0x576>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1020
  plusold = read(plus);
    1c80:	85 e1       	ldi	r24, 0x15	; 21
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1c88:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <plusold>
checkminus():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1027
}

//Check Minus Button Pressed

void checkminus() {
  if(read(minus) && minusold == !read(minus)){
    1c8c:	86 e1       	ldi	r24, 0x16	; 22
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1c94:	88 23       	and	r24, r24
    1c96:	19 f1       	breq	.+70     	; 0x1cde <main+0x5c8>
    1c98:	86 e1       	ldi	r24, 0x16	; 22
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1ca0:	8b 25       	eor	r24, r11
    1ca2:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <minusold>
    1ca6:	89 13       	cpse	r24, r25
    1ca8:	1a c0       	rjmp	.+52     	; 0x1cde <main+0x5c8>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1028
  minusold = read(minus);
    1caa:	86 e1       	ldi	r24, 0x16	; 22
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1cb2:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <minusold>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1029
  enc--;
    1cb6:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1cba:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <enc+0x1>
    1cc4:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1030
  if(!mode){
    1cc8:	f1 10       	cpse	r15, r1
    1cca:	09 c0       	rjmp	.+18     	; 0x1cde <main+0x5c8>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1031
    menu--;
    1ccc:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <menu>
    1cd0:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <menu+0x1>
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <menu+0x1>
    1cda:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <menu>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1034
  }
  }
  if(read(minus) == false){
    1cde:	86 e1       	ldi	r24, 0x16	; 22
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1ce6:	81 11       	cpse	r24, r1
    1ce8:	06 c0       	rjmp	.+12     	; 0x1cf6 <main+0x5e0>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1035
  minusold = read(minus);
    1cea:	86 e1       	ldi	r24, 0x16	; 22
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1cf2:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <minusold>
loop():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:282
  }
*/
///////////////////////////////////////////////////////
  //Switch to Parameter Edit/Run Mode
  /* Uncomment this for not using setup Pin*/
  if(mode){
    1cf6:	ff 20       	and	r15, r15
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <main+0x5e6>
    1cfa:	98 c1       	rjmp	.+816    	; 0x202c <main+0x916>
runSetup():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:850
}

//Change Screens/Menus on pessing OK/Menu

void runSetup() {
  int OTs[7] = { motorRFW, motorRBW, motorYFW, motorYBW, motorBFW, motorBBW, contactor };
    1cfc:	8e e0       	ldi	r24, 0x0E	; 14
    1cfe:	e6 e0       	ldi	r30, 0x06	; 6
    1d00:	f1 e0       	ldi	r31, 0x01	; 1
    1d02:	de 01       	movw	r26, r28
    1d04:	11 96       	adiw	r26, 0x01	; 1
    1d06:	01 90       	ld	r0, Z+
    1d08:	0d 92       	st	X+, r0
    1d0a:	8a 95       	dec	r24
    1d0c:	e1 f7       	brne	.-8      	; 0x1d06 <main+0x5f0>
    1d0e:	9e 01       	movw	r18, r28
    1d10:	2f 5f       	subi	r18, 0xFF	; 255
    1d12:	3f 4f       	sbci	r19, 0xFF	; 255
    1d14:	79 01       	movw	r14, r18
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:853
  
  for(int i = 0; i < 7; i++){
    digitalWrite(OTs[i], LOW);
    1d16:	f7 01       	movw	r30, r14
    1d18:	80 81       	ld	r24, Z
    1d1a:	f2 e0       	ldi	r31, 0x02	; 2
    1d1c:	ef 0e       	add	r14, r31
    1d1e:	f1 1c       	adc	r15, r1
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:852
//Change Screens/Menus on pessing OK/Menu

void runSetup() {
  int OTs[7] = { motorRFW, motorRBW, motorYFW, motorYBW, motorBFW, motorBBW, contactor };
  
  for(int i = 0; i < 7; i++){
    1d26:	0e 15       	cp	r16, r14
    1d28:	1f 05       	cpc	r17, r15
    1d2a:	a9 f7       	brne	.-22     	; 0x1d16 <main+0x600>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:856
    digitalWrite(OTs[i], LOW);
  }

  switch (encMenu)
    1d2c:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <encMenu>
    1d30:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <encMenu+0x1>
    1d34:	eb 30       	cpi	r30, 0x0B	; 11
    1d36:	f1 05       	cpc	r31, r1
    1d38:	08 f0       	brcs	.+2      	; 0x1d3c <main+0x626>
    1d3a:	73 c1       	rjmp	.+742    	; 0x2022 <main+0x90c>
    1d3c:	ee 55       	subi	r30, 0x5E	; 94
    1d3e:	f1 4f       	sbci	r31, 0xF1	; 241
    1d40:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__tablejump2__>
    1d44:	50 0f       	add	r21, r16
    1d46:	5c 0f       	add	r21, r28
    1d48:	a6 0f       	add	r26, r22
    1d4a:	b3 0f       	add	r27, r19
    1d4c:	c0 0f       	add	r28, r16
    1d4e:	cd 0f       	add	r28, r29
    1d50:	da 0f       	add	r29, r26
    1d52:	e7 0f       	add	r30, r23
    1d54:	f4 0f       	add	r31, r20
    1d56:	01 10       	cpse	r0, r1
    1d58:	0e 10       	cpse	r0, r14
encUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:947
  case 1:
    enc = IHV;
    done();
    break;
  case 2:
    IHV = enc;
    1d5a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1d5e:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1d62:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <IHV+0x1>
    1d66:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <IHV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:948
    enc = ILV;
    1d6a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <ILV>
    1d6e:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <ILV+0x1>
    1d72:	e5 ce       	rjmp	.-566    	; 0x1b3e <main+0x428>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:952
    done();
    break;
  case 3:
    ILV = enc;
    1d74:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1d78:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1d7c:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <ILV+0x1>
    1d80:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <ILV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:953
    enc = OHV;
    1d84:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <OHV>
    1d88:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <OHV+0x1>
    1d8c:	d8 ce       	rjmp	.-592    	; 0x1b3e <main+0x428>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:957
    done();
    break;
  case 4:
    OHV = enc;
    1d8e:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1d92:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1d96:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <OHV+0x1>
    1d9a:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <OHV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:958
    enc = OLV;
    1d9e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <OLV>
    1da2:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <OLV+0x1>
    1da6:	cb ce       	rjmp	.-618    	; 0x1b3e <main+0x428>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:962
    done();
    break;
  case 5:
    OLV = enc;
    1da8:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1dac:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1db0:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <OLV+0x1>
    1db4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <OLV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:963
    enc = SETV;
    1db8:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <SETV>
    1dbc:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <SETV+0x1>
    1dc0:	be ce       	rjmp	.-644    	; 0x1b3e <main+0x428>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:967
    done();
    break;
  case 6:
    SETV = enc;
    1dc2:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1dc6:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1dca:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <SETV+0x1>
    1dce:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <SETV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:968
    enc = OVL;
    1dd2:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <OVL>
    1dd6:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <OVL+0x1>
    1dda:	b1 ce       	rjmp	.-670    	; 0x1b3e <main+0x428>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:972
    done();
    break;
  case 7:
    OVL = enc;
    1ddc:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1de0:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1de4:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <OVL+0x1>
    1de8:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <OVL>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:973
    enc = TON;
    1dec:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <TON>
    1df0:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <TON+0x1>
    1df4:	a4 ce       	rjmp	.-696    	; 0x1b3e <main+0x428>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:977
    done();
    break;
  case 8:
    TON = enc;
    1df6:	60 91 d7 01 	lds	r22, 0x01D7	; 0x8001d7 <enc>
    1dfa:	70 91 d8 01 	lds	r23, 0x01D8	; 0x8001d8 <enc+0x1>
    1dfe:	70 93 c7 01 	sts	0x01C7, r23	; 0x8001c7 <TON+0x1>
    1e02:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <TON>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:978
    enc = TOFF;
    1e06:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <TOFF>
    1e0a:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <TOFF+0x1>
    1e0e:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <enc+0x1>
    1e12:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:979
    on.setDuration(TON, SECONDS);
    1e16:	07 2e       	mov	r0, r23
    1e18:	00 0c       	add	r0, r0
    1e1a:	88 0b       	sbc	r24, r24
    1e1c:	99 0b       	sbc	r25, r25
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
    1e1e:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatunsisf>
    1e22:	60 93 31 02 	sts	0x0231, r22	; 0x800231 <on+0x15>
    1e26:	70 93 32 02 	sts	0x0232, r23	; 0x800232 <on+0x16>
    1e2a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <on+0x17>
    1e2e:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <on+0x18>
setDuration():
    1e32:	8c e1       	ldi	r24, 0x1C	; 28
    1e34:	92 e0       	ldi	r25, 0x02	; 2
    1e36:	0e 94 8d 03 	call	0x71a	; 0x71a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
encUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:980
    on.reset();
    1e3a:	8c e1       	ldi	r24, 0x1C	; 28
    1e3c:	92 e0       	ldi	r25, 0x02	; 2
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:987
    break;
  case 9:
    TOFF = enc;
    enc = DIFF;
    off.setDuration(TOFF, SECONDS);
    off.reset();
    1e3e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
    1e42:	81 ce       	rjmp	.-766    	; 0x1b46 <main+0x430>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:984
    on.setDuration(TON, SECONDS);
    on.reset();
    done();
    break;
  case 9:
    TOFF = enc;
    1e44:	60 91 d7 01 	lds	r22, 0x01D7	; 0x8001d7 <enc>
    1e48:	70 91 d8 01 	lds	r23, 0x01D8	; 0x8001d8 <enc+0x1>
    1e4c:	70 93 c5 01 	sts	0x01C5, r23	; 0x8001c5 <TOFF+0x1>
    1e50:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <TOFF>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:985
    enc = DIFF;
    1e54:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <DIFF>
    1e58:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <DIFF+0x1>
    1e5c:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <enc+0x1>
    1e60:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:986
    off.setDuration(TOFF, SECONDS);
    1e64:	07 2e       	mov	r0, r23
    1e66:	00 0c       	add	r0, r0
    1e68:	88 0b       	sbc	r24, r24
    1e6a:	99 0b       	sbc	r25, r25
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
    1e6c:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatunsisf>
    1e70:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <off+0x15>
    1e74:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <off+0x16>
    1e78:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <off+0x17>
    1e7c:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <off+0x18>
setDuration():
    1e80:	8b ef       	ldi	r24, 0xFB	; 251
    1e82:	91 e0       	ldi	r25, 0x01	; 1
    1e84:	0e 94 8d 03 	call	0x71a	; 0x71a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
encUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:987
    off.reset();
    1e88:	8b ef       	ldi	r24, 0xFB	; 251
    1e8a:	91 e0       	ldi	r25, 0x01	; 1
    1e8c:	d8 cf       	rjmp	.-80     	; 0x1e3e <main+0x728>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:991
    done();
    break;
  case 10:
    DIFF = enc;
    1e8e:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1e92:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1e96:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <DIFF+0x1>
    1e9a:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <DIFF>
    1e9e:	53 ce       	rjmp	.-858    	; 0x1b46 <main+0x430>
home():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:750

////////////////////////////////////////////////////////////
//Setp display on Setup Mode

void home() {
  display("SETP", 0);
    1ea0:	6c e7       	ldi	r22, 0x7C	; 124
    1ea2:	71 e0       	ldi	r23, 0x01	; 1
menuEND():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:844
    display("dIFF", 0);
  }
}

void menuEND() {
  display("End", 0);
    1ea4:	c8 01       	movw	r24, r16
    1ea6:	0e 94 b9 07 	call	0xf72	; 0xf72 <String::String(char const*)>
    1eaa:	c8 01       	movw	r24, r16
    1eac:	0e 94 cf 07 	call	0xf9e	; 0xf9e <display(String, int) [clone .constprop.6]>
    1eb0:	c8 01       	movw	r24, r16
    1eb2:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
    1eb6:	0b c0       	rjmp	.+22     	; 0x1ece <main+0x7b8>
menuIHV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:756
}

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	8a ed       	ldi	r24, 0xDA	; 218
    1ebc:	91 e0       	ldi	r25, 0x01	; 1
    1ebe:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:759
    displayVar(enc, 0);
  } else {
    display("IHu", 0);
    1ec2:	61 e8       	ldi	r22, 0x81	; 129
    1ec4:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:756
}

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    1ec6:	88 23       	and	r24, r24
    1ec8:	69 f3       	breq	.-38     	; 0x1ea4 <main+0x78e>
    1eca:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
loop():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:287
  if(mode){
    runSetup();
  } else {
    runNormal();
  }
  if(read(ok) && read(plus) && read(minus) && switched == false){
    1ece:	84 e1       	ldi	r24, 0x14	; 20
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1ed6:	88 23       	and	r24, r24
    1ed8:	d9 f0       	breq	.+54     	; 0x1f10 <main+0x7fa>
    1eda:	85 e1       	ldi	r24, 0x15	; 21
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1ee2:	88 23       	and	r24, r24
    1ee4:	a9 f0       	breq	.+42     	; 0x1f10 <main+0x7fa>
    1ee6:	86 e1       	ldi	r24, 0x16	; 22
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1eee:	88 23       	and	r24, r24
    1ef0:	79 f0       	breq	.+30     	; 0x1f10 <main+0x7fa>
    1ef2:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <switched>
    1ef6:	81 11       	cpse	r24, r1
    1ef8:	0b c0       	rjmp	.+22     	; 0x1f10 <main+0x7fa>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:288
    mode = !mode;
    1efa:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <mode>
    1efe:	8b 25       	eor	r24, r11
    1f00:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <mode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:289
    switched = true;
    1f04:	a0 92 68 02 	sts	0x0268, r10	; 0x800268 <switched>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:290
    encMenu = 0;
    1f08:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <encMenu+0x1>
    1f0c:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <encMenu>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:292
  }
  if(!read(ok) && !read(plus) && !read(minus) && switched == true){
    1f10:	84 e1       	ldi	r24, 0x14	; 20
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1f18:	81 11       	cpse	r24, r1
    1f1a:	11 c0       	rjmp	.+34     	; 0x1f3e <main+0x828>
    1f1c:	85 e1       	ldi	r24, 0x15	; 21
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1f24:	81 11       	cpse	r24, r1
    1f26:	0b c0       	rjmp	.+22     	; 0x1f3e <main+0x828>
    1f28:	86 e1       	ldi	r24, 0x16	; 22
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1f30:	81 11       	cpse	r24, r1
    1f32:	05 c0       	rjmp	.+10     	; 0x1f3e <main+0x828>
    1f34:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <switched>
    1f38:	81 11       	cpse	r24, r1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:293
    switched = false;
    1f3a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <switched>
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    1f3e:	c1 14       	cp	r12, r1
    1f40:	d1 04       	cpc	r13, r1
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <main+0x830>
    1f44:	b3 cd       	rjmp	.-1178   	; 0x1aac <main+0x396>
    1f46:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1f4a:	b0 cd       	rjmp	.-1184   	; 0x1aac <main+0x396>
menuILV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:766
}

//Setup Input low Voltage

void menuILV() {
  if(refresh.triggered(false)){
    1f4c:	60 e0       	ldi	r22, 0x00	; 0
    1f4e:	8a ed       	ldi	r24, 0xDA	; 218
    1f50:	91 e0       	ldi	r25, 0x01	; 1
    1f52:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:769
    displayVar(enc, 0);
  } else {
    display("ILu", 0);
    1f56:	65 e8       	ldi	r22, 0x85	; 133
    1f58:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:766
}

//Setup Input low Voltage

void menuILV() {
  if(refresh.triggered(false)){
    1f5a:	88 23       	and	r24, r24
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <main+0x84a>
    1f5e:	a2 cf       	rjmp	.-188    	; 0x1ea4 <main+0x78e>
    1f60:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    1f64:	b4 cf       	rjmp	.-152    	; 0x1ece <main+0x7b8>
menuOHV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:776
}

//Setup Output High Voltage

void menuOHV() {
  if(refresh.triggered(false)){
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	8a ed       	ldi	r24, 0xDA	; 218
    1f6a:	91 e0       	ldi	r25, 0x01	; 1
    1f6c:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:779
    displayVar(enc, 0);
  } else {
    display("OHu", 0);
    1f70:	69 e8       	ldi	r22, 0x89	; 137
    1f72:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:776
}

//Setup Output High Voltage

void menuOHV() {
  if(refresh.triggered(false)){
    1f74:	88 23       	and	r24, r24
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <main+0x864>
    1f78:	95 cf       	rjmp	.-214    	; 0x1ea4 <main+0x78e>
    1f7a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    1f7e:	a7 cf       	rjmp	.-178    	; 0x1ece <main+0x7b8>
menuOLV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:786
}

//Setup Output Low Voltage

void menuOLV() {
  if(refresh.triggered(false)){
    1f80:	60 e0       	ldi	r22, 0x00	; 0
    1f82:	8a ed       	ldi	r24, 0xDA	; 218
    1f84:	91 e0       	ldi	r25, 0x01	; 1
    1f86:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:789
    displayVar(enc, 0);
  } else {
    display("OLu", 0);
    1f8a:	6d e8       	ldi	r22, 0x8D	; 141
    1f8c:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:786
}

//Setup Output Low Voltage

void menuOLV() {
  if(refresh.triggered(false)){
    1f8e:	88 23       	and	r24, r24
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <main+0x87e>
    1f92:	88 cf       	rjmp	.-240    	; 0x1ea4 <main+0x78e>
    1f94:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    1f98:	9a cf       	rjmp	.-204    	; 0x1ece <main+0x7b8>
menuSETV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:796
}

//Setup Set Voltage

void menuSETV() {
  if(refresh.triggered(false)){
    1f9a:	60 e0       	ldi	r22, 0x00	; 0
    1f9c:	8a ed       	ldi	r24, 0xDA	; 218
    1f9e:	91 e0       	ldi	r25, 0x01	; 1
    1fa0:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:799
    displayVar(enc, 0);
  } else {
    display("SETu", 0);
    1fa4:	61 e9       	ldi	r22, 0x91	; 145
    1fa6:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:796
}

//Setup Set Voltage

void menuSETV() {
  if(refresh.triggered(false)){
    1fa8:	88 23       	and	r24, r24
    1faa:	09 f4       	brne	.+2      	; 0x1fae <main+0x898>
    1fac:	7b cf       	rjmp	.-266    	; 0x1ea4 <main+0x78e>
    1fae:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    1fb2:	8d cf       	rjmp	.-230    	; 0x1ece <main+0x7b8>
menuOVL():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:806
}

//Setup Overload

void menuOVL() {
  if(refresh.triggered(false)){
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	8a ed       	ldi	r24, 0xDA	; 218
    1fb8:	91 e0       	ldi	r25, 0x01	; 1
    1fba:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:809
    displayVar(enc, 0);
  } else {
    display("OuL", 0);
    1fbe:	66 e9       	ldi	r22, 0x96	; 150
    1fc0:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:806
}

//Setup Overload

void menuOVL() {
  if(refresh.triggered(false)){
    1fc2:	88 23       	and	r24, r24
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <main+0x8b2>
    1fc6:	6e cf       	rjmp	.-292    	; 0x1ea4 <main+0x78e>
    1fc8:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    1fcc:	80 cf       	rjmp	.-256    	; 0x1ece <main+0x7b8>
menuTON():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:816
}

//Setup Waiting time for Output Relay to turn on

void menuTON() {
  if(refresh.triggered(false)){
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	8a ed       	ldi	r24, 0xDA	; 218
    1fd2:	91 e0       	ldi	r25, 0x01	; 1
    1fd4:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:819
    displayVar(enc, 0);
  } else {
    display("tOn", 0);
    1fd8:	6a e9       	ldi	r22, 0x9A	; 154
    1fda:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:816
}

//Setup Waiting time for Output Relay to turn on

void menuTON() {
  if(refresh.triggered(false)){
    1fdc:	88 23       	and	r24, r24
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <main+0x8cc>
    1fe0:	61 cf       	rjmp	.-318    	; 0x1ea4 <main+0x78e>
    1fe2:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    1fe6:	73 cf       	rjmp	.-282    	; 0x1ece <main+0x7b8>
menuTOFF():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:826
}

//Setup Waiting time for Output Relay to turn off

void menuTOFF() {
  if(refresh.triggered(false)){
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	8a ed       	ldi	r24, 0xDA	; 218
    1fec:	91 e0       	ldi	r25, 0x01	; 1
    1fee:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:829
    displayVar(enc, 0);
  } else {
    display("tOFF", 0);
    1ff2:	6e e9       	ldi	r22, 0x9E	; 158
    1ff4:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:826
}

//Setup Waiting time for Output Relay to turn off

void menuTOFF() {
  if(refresh.triggered(false)){
    1ff6:	88 23       	and	r24, r24
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <main+0x8e6>
    1ffa:	54 cf       	rjmp	.-344    	; 0x1ea4 <main+0x78e>
    1ffc:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    2000:	66 cf       	rjmp	.-308    	; 0x1ece <main+0x7b8>
menuDIFF():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:836
}

//setup voltage difference from set voltage to move motor

void menuDIFF() {
  if(refresh.triggered(false)){
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	8a ed       	ldi	r24, 0xDA	; 218
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:839
    displayVar(enc, 0);
  } else {
    display("dIFF", 0);
    200c:	63 ea       	ldi	r22, 0xA3	; 163
    200e:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:836
}

//setup voltage difference from set voltage to move motor

void menuDIFF() {
  if(refresh.triggered(false)){
    2010:	88 23       	and	r24, r24
    2012:	09 f4       	brne	.+2      	; 0x2016 <main+0x900>
    2014:	47 cf       	rjmp	.-370    	; 0x1ea4 <main+0x78e>
    2016:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    201a:	59 cf       	rjmp	.-334    	; 0x1ece <main+0x7b8>
menuEND():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:844
    display("dIFF", 0);
  }
}

void menuEND() {
  display("End", 0);
    201c:	68 ea       	ldi	r22, 0xA8	; 168
    201e:	71 e0       	ldi	r23, 0x01	; 1
    2020:	41 cf       	rjmp	.-382    	; 0x1ea4 <main+0x78e>
runSetup():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:892
    break;
  case 10:
    menuEND();
    break;
  default:
    encMenu = 0;
    2022:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <encMenu+0x1>
    2026:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <encMenu>
    202a:	51 cf       	rjmp	.-350    	; 0x1ece <main+0x7b8>
runNormal():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:380


//Run Mode

void runNormal() {
  if(checkin.triggered()){
    202c:	61 e0       	ldi	r22, 0x01	; 1
    202e:	85 e4       	ldi	r24, 0x45	; 69
    2030:	92 e0       	ldi	r25, 0x02	; 2
    2032:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
    2036:	88 23       	and	r24, r24
    2038:	31 f0       	breq	.+12     	; 0x2046 <main+0x930>
checkinputs():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:701
/////////////////////////////////////////////////////////////////


//update inputs once based on highest voltage...
void checkinputs() {
  IVo();
    203a:	0e 94 8c 05 	call	0xb18	; 0xb18 <IVo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:702
  OVo();
    203e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <OVo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:703
  ampo();
    2042:	0e 94 93 04 	call	0x926	; 0x926 <ampo()>
runNormal():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:389
    //ampo();                   //
    ////////////////////////////// No Longer Used...!
    checkinputs();
  }
  //digitalWrite(motor0Rev, HIGH);
  if(routvoltage < SETV && rdiffcheck() && inputVok() && currentok()){
    2046:	80 90 43 02 	lds	r8, 0x0243	; 0x800243 <routvoltage>
    204a:	90 90 44 02 	lds	r9, 0x0244	; 0x800244 <routvoltage+0x1>
    204e:	e0 90 41 02 	lds	r14, 0x0241	; 0x800241 <SETV>
    2052:	f0 90 42 02 	lds	r15, 0x0242	; 0x800242 <SETV+0x1>
    2056:	8e 14       	cp	r8, r14
    2058:	9f 04       	cpc	r9, r15
    205a:	94 f4       	brge	.+36     	; 0x2080 <main+0x96a>
    205c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <rdiffcheck()>
    2060:	88 23       	and	r24, r24
    2062:	71 f0       	breq	.+28     	; 0x2080 <main+0x96a>
    2064:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
    2068:	88 23       	and	r24, r24
    206a:	51 f0       	breq	.+20     	; 0x2080 <main+0x96a>
    206c:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
    2070:	88 23       	and	r24, r24
    2072:	31 f0       	breq	.+12     	; 0x2080 <main+0x96a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:390
    digitalWrite(motorRFW, HIGH);
    2074:	61 e0       	ldi	r22, 0x01	; 1
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:397
    digitalWrite(motorRFW, LOW);
  }
  if(routvoltage > SETV && rdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorRBW, HIGH);
  } else {
    digitalWrite(motorRBW, LOW);
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	14 c0       	rjmp	.+40     	; 0x20a8 <main+0x992>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:392
  }
  //digitalWrite(motor0Rev, HIGH);
  if(routvoltage < SETV && rdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorRFW, HIGH);
  } else {
    digitalWrite(motorRFW, LOW);
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:394
  }
  if(routvoltage > SETV && rdiffcheck() && inputVok() && currentok()){
    2088:	e8 14       	cp	r14, r8
    208a:	f9 04       	cpc	r15, r9
    208c:	bc f7       	brge	.-18     	; 0x207c <main+0x966>
    208e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <rdiffcheck()>
    2092:	88 23       	and	r24, r24
    2094:	99 f3       	breq	.-26     	; 0x207c <main+0x966>
    2096:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
    209a:	88 23       	and	r24, r24
    209c:	79 f3       	breq	.-34     	; 0x207c <main+0x966>
    209e:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:395
    digitalWrite(motorRBW, HIGH);
    20a2:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:394
  if(routvoltage < SETV && rdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorRFW, HIGH);
  } else {
    digitalWrite(motorRFW, LOW);
  }
  if(routvoltage > SETV && rdiffcheck() && inputVok() && currentok()){
    20a4:	88 23       	and	r24, r24
    20a6:	51 f3       	breq	.-44     	; 0x207c <main+0x966>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:395
    digitalWrite(motorRBW, HIGH);
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:402
    digitalWrite(motorRBW, LOW);
  }



  if(youtvoltage < SETV && ydiffcheck() && inputVok() && currentok()){
    20ae:	80 90 3f 02 	lds	r8, 0x023F	; 0x80023f <youtvoltage>
    20b2:	90 90 40 02 	lds	r9, 0x0240	; 0x800240 <youtvoltage+0x1>
    20b6:	8e 14       	cp	r8, r14
    20b8:	9f 04       	cpc	r9, r15
    20ba:	64 f4       	brge	.+24     	; 0x20d4 <main+0x9be>
    20bc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <ydiffcheck()>
    20c0:	88 23       	and	r24, r24
    20c2:	41 f0       	breq	.+16     	; 0x20d4 <main+0x9be>
    20c4:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
    20c8:	88 23       	and	r24, r24
    20ca:	21 f0       	breq	.+8      	; 0x20d4 <main+0x9be>
    20cc:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
    20d0:	81 11       	cpse	r24, r1
    20d2:	09 c0       	rjmp	.+18     	; 0x20e6 <main+0x9d0>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:405
    digitalWrite(motorYFW, HIGH);
  } else {
    digitalWrite(motorYFW, LOW);
    20d4:	60 e0       	ldi	r22, 0x00	; 0
    20d6:	82 e0       	ldi	r24, 0x02	; 2
    20d8:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:407
  }
  if(youtvoltage > SETV && ydiffcheck() && inputVok() && currentok()){
    20dc:	e8 14       	cp	r14, r8
    20de:	f9 04       	cpc	r15, r9
    20e0:	3c f0       	brlt	.+14     	; 0x20f0 <main+0x9da>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:410
    digitalWrite(motorYBW, HIGH);
  } else {
    digitalWrite(motorYBW, LOW);
    20e2:	60 e0       	ldi	r22, 0x00	; 0
    20e4:	12 c0       	rjmp	.+36     	; 0x210a <main+0x9f4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:403
  }



  if(youtvoltage < SETV && ydiffcheck() && inputVok() && currentok()){
    digitalWrite(motorYFW, HIGH);
    20e6:	61 e0       	ldi	r22, 0x01	; 1
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
    20ee:	f9 cf       	rjmp	.-14     	; 0x20e2 <main+0x9cc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:407
  } else {
    digitalWrite(motorYFW, LOW);
  }
  if(youtvoltage > SETV && ydiffcheck() && inputVok() && currentok()){
    20f0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <ydiffcheck()>
    20f4:	88 23       	and	r24, r24
    20f6:	a9 f3       	breq	.-22     	; 0x20e2 <main+0x9cc>
    20f8:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
    20fc:	88 23       	and	r24, r24
    20fe:	89 f3       	breq	.-30     	; 0x20e2 <main+0x9cc>
    2100:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:408
    digitalWrite(motorYBW, HIGH);
    2104:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:407
  if(youtvoltage < SETV && ydiffcheck() && inputVok() && currentok()){
    digitalWrite(motorYFW, HIGH);
  } else {
    digitalWrite(motorYFW, LOW);
  }
  if(youtvoltage > SETV && ydiffcheck() && inputVok() && currentok()){
    2106:	88 23       	and	r24, r24
    2108:	61 f3       	breq	.-40     	; 0x20e2 <main+0x9cc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:408
    digitalWrite(motorYBW, HIGH);
    210a:	83 e0       	ldi	r24, 0x03	; 3
    210c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:414
  } else {
    digitalWrite(motorYBW, LOW);
  }


  if(boutvoltage < SETV && bdiffcheck() && inputVok() && currentok()){
    2110:	80 90 3d 02 	lds	r8, 0x023D	; 0x80023d <boutvoltage>
    2114:	90 90 3e 02 	lds	r9, 0x023E	; 0x80023e <boutvoltage+0x1>
    2118:	8e 14       	cp	r8, r14
    211a:	9f 04       	cpc	r9, r15
    211c:	64 f4       	brge	.+24     	; 0x2136 <main+0xa20>
    211e:	0e 94 46 06 	call	0xc8c	; 0xc8c <bdiffcheck()>
    2122:	88 23       	and	r24, r24
    2124:	41 f0       	breq	.+16     	; 0x2136 <main+0xa20>
    2126:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
    212a:	88 23       	and	r24, r24
    212c:	21 f0       	breq	.+8      	; 0x2136 <main+0xa20>
    212e:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
    2132:	81 11       	cpse	r24, r1
    2134:	09 c0       	rjmp	.+18     	; 0x2148 <main+0xa32>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:417
    digitalWrite(motorBFW, HIGH);
  } else {
    digitalWrite(motorBFW, LOW);
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	84 e0       	ldi	r24, 0x04	; 4
    213a:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:419
  }
  if(boutvoltage > SETV && bdiffcheck() && inputVok() && currentok()){
    213e:	e8 14       	cp	r14, r8
    2140:	f9 04       	cpc	r15, r9
    2142:	3c f0       	brlt	.+14     	; 0x2152 <main+0xa3c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:422
    digitalWrite(motorBBW, HIGH);
  } else {
    digitalWrite(motorBBW, LOW);
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	12 c0       	rjmp	.+36     	; 0x216c <main+0xa56>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:415
    digitalWrite(motorYBW, LOW);
  }


  if(boutvoltage < SETV && bdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorBFW, HIGH);
    2148:	61 e0       	ldi	r22, 0x01	; 1
    214a:	84 e0       	ldi	r24, 0x04	; 4
    214c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
    2150:	f9 cf       	rjmp	.-14     	; 0x2144 <main+0xa2e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:419
  } else {
    digitalWrite(motorBFW, LOW);
  }
  if(boutvoltage > SETV && bdiffcheck() && inputVok() && currentok()){
    2152:	0e 94 46 06 	call	0xc8c	; 0xc8c <bdiffcheck()>
    2156:	88 23       	and	r24, r24
    2158:	a9 f3       	breq	.-22     	; 0x2144 <main+0xa2e>
    215a:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
    215e:	88 23       	and	r24, r24
    2160:	89 f3       	breq	.-30     	; 0x2144 <main+0xa2e>
    2162:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:420
    digitalWrite(motorBBW, HIGH);
    2166:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:419
  if(boutvoltage < SETV && bdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorBFW, HIGH);
  } else {
    digitalWrite(motorBFW, LOW);
  }
  if(boutvoltage > SETV && bdiffcheck() && inputVok() && currentok()){
    2168:	88 23       	and	r24, r24
    216a:	61 f3       	breq	.-40     	; 0x2144 <main+0xa2e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:420
    digitalWrite(motorBBW, HIGH);
    216c:	85 e0       	ldi	r24, 0x05	; 5
    216e:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:425
  } else {
    digitalWrite(motorBBW, LOW);
  }

  if(checksystem()){
    2172:	0e 94 f1 06 	call	0xde2	; 0xde2 <checksystem()>
    2176:	88 23       	and	r24, r24
    2178:	c1 f0       	breq	.+48     	; 0x21aa <main+0xa94>
updateScreenData():
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <updateScreenData(bool) [clone .part.7]>
updatePower():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:450
}

//Control Output Supply Relay

void updatePower() {
  if(checksystem()){
    2180:	0e 94 f1 06 	call	0xde2	; 0xde2 <checksystem()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:451
    if(on.triggered(false)){  
    2184:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:450
}

//Control Output Supply Relay

void updatePower() {
  if(checksystem()){
    2186:	88 23       	and	r24, r24
    2188:	91 f0       	breq	.+36     	; 0x21ae <main+0xa98>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:451
    if(on.triggered(false)){  
    218a:	8c e1       	ldi	r24, 0x1C	; 28
    218c:	92 e0       	ldi	r25, 0x02	; 2
    218e:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
    2192:	88 23       	and	r24, r24
    2194:	09 f4       	brne	.+2      	; 0x2198 <main+0xa82>
    2196:	9b ce       	rjmp	.-714    	; 0x1ece <main+0x7b8>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:452
      digitalWrite(contactor, HIGH);
    2198:	61 e0       	ldi	r22, 0x01	; 1
    219a:	86 e0       	ldi	r24, 0x06	; 6
    219c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:453
      off.reset();
    21a0:	8b ef       	ldi	r24, 0xFB	; 251
    21a2:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:459
    }
  }
  else {
    if(off.triggered(false)) {
      digitalWrite(contactor, LOW);
      on.reset();
    21a4:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
    21a8:	92 ce       	rjmp	.-732    	; 0x1ece <main+0x7b8>
updateScreenData():
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	e7 cf       	rjmp	.-50     	; 0x217c <main+0xa66>
updatePower():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:457
      digitalWrite(contactor, HIGH);
      off.reset();
    }
  }
  else {
    if(off.triggered(false)) {
    21ae:	8b ef       	ldi	r24, 0xFB	; 251
    21b0:	91 e0       	ldi	r25, 0x01	; 1
    21b2:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
    21b6:	88 23       	and	r24, r24
    21b8:	09 f4       	brne	.+2      	; 0x21bc <main+0xaa6>
    21ba:	89 ce       	rjmp	.-750    	; 0x1ece <main+0x7b8>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:458
      digitalWrite(contactor, LOW);
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	86 e0       	ldi	r24, 0x06	; 6
    21c0:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:459
      on.reset();
    21c4:	8c e1       	ldi	r24, 0x1C	; 28
    21c6:	92 e0       	ldi	r25, 0x02	; 2
    21c8:	ed cf       	rjmp	.-38     	; 0x21a4 <main+0xa8e>

000021ca <_GLOBAL__sub_I_display1>:
_GLOBAL__sub_I_display1():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1101
  int numberOfDigits = 4; 

  display1.Begin(displayType, numberOfDigits, digit1, digit2, digit3, digit4, segA, segB, segC, segD, segE, segF, segG, segDP);
  
  display1.SetBrightness(100); 
}
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
__base_ctor ():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:67
#include "SevSeg.h"

SevSeg::SevSeg()
{
  //Initial values
  DecAposColon = 0; //This variable tracks the decimal place, apostrophe, and colon (if the display has support)
    21ce:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <display1+0x48>
__static_initialization_and_destruction_0():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:132


//Intialize the SevenSegament Display
SevSeg display1;
//Timer that updates Main screen every Second.
BlockNot refresh(1, SECONDS);
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	50 e0       	ldi	r21, 0x00	; 0
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	70 e0       	ldi	r23, 0x00	; 0
    21da:	8a ed       	ldi	r24, 0xDA	; 218
    21dc:	91 e0       	ldi	r25, 0x01	; 1
    21de:	0e 94 8f 03 	call	0x71e	; 0x71e <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]>
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:34
BlockNot::BlockNot() {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    if (global == GLOBAL_RESET) addToTimerList();
}

BlockNot::BlockNot(unsigned long time) {
    21e2:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <checkin+0x4>
    21e6:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <checkin+0x5>
    21ea:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <checkin+0x6>
    21ee:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <checkin+0x7>
    21f2:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <checkin+0x8>
    21f6:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <checkin+0x9>
    21fa:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <checkin+0xa>
    21fe:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <checkin+0xb>
    2202:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <checkin+0xc>
    2206:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <checkin+0xd>
    220a:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <checkin+0xe>
    220e:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <checkin+0xf>
    2212:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <checkin+0x11>
    2216:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <checkin+0x10>
    221a:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <checkin+0x12>
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <checkin+0x14>
    2226:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <checkin+0x13>
    222a:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <checkin+0x1e>
    222e:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <checkin+0x1d>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:35
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    2232:	c0 91 b8 02 	lds	r28, 0x02B8	; 0x8002b8 <BlockNot::global>
    2236:	d0 91 b9 02 	lds	r29, 0x02B9	; 0x8002b9 <BlockNot::global+0x1>
    223a:	c1 30       	cpi	r28, 0x01	; 1
    223c:	d1 05       	cpc	r29, r1
    223e:	11 f0       	breq	.+4      	; 0x2244 <_GLOBAL__sub_I_display1+0x7a>
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <BlockNot::global+0x1>
    2248:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <BlockNot::global>
_ZN8BlockNot5cTime7milli_taSEd():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:197

        class milli_t {
            double seconds;
        public:
            milli_t &operator=(double ms) {
                seconds = ms * .001;
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	a0 e8       	ldi	r26, 0x80	; 128
    2252:	be e3       	ldi	r27, 0x3E	; 62
    2254:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <checkin+0x15>
    2258:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <checkin+0x16>
    225c:	a0 93 5c 02 	sts	0x025C, r26	; 0x80025c <checkin+0x17>
    2260:	b0 93 5d 02 	sts	0x025D, r27	; 0x80025d <checkin+0x18>
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:37
    initDuration(time);
    reset();
    2264:	85 e4       	ldi	r24, 0x45	; 69
    2266:	92 e0       	ldi	r25, 0x02	; 2
    2268:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:38
    if (global == GLOBAL_RESET) addToTimerList();
    226c:	21 97       	sbiw	r28, 0x01	; 1
    226e:	21 f0       	breq	.+8      	; 0x2278 <_GLOBAL__sub_I_display1+0xae>
    2270:	85 e4       	ldi	r24, 0x45	; 69
    2272:	92 e0       	ldi	r25, 0x02	; 2
    2274:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <BlockNot::addToTimerList()>
__static_initialization_and_destruction_0():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:185
bool mode = false;
bool switched = false;
bool tmrstp;
/**/

BlockNot on(TON, SECONDS);
    2278:	40 91 c6 01 	lds	r20, 0x01C6	; 0x8001c6 <TON>
    227c:	50 91 c7 01 	lds	r21, 0x01C7	; 0x8001c7 <TON+0x1>
    2280:	05 2e       	mov	r0, r21
    2282:	00 0c       	add	r0, r0
    2284:	66 0b       	sbc	r22, r22
    2286:	77 0b       	sbc	r23, r23
    2288:	8c e1       	ldi	r24, 0x1C	; 28
    228a:	92 e0       	ldi	r25, 0x02	; 2
    228c:	0e 94 8f 03 	call	0x71e	; 0x71e <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:186
BlockNot off(TOFF, SECONDS);
    2290:	40 91 c4 01 	lds	r20, 0x01C4	; 0x8001c4 <TOFF>
    2294:	50 91 c5 01 	lds	r21, 0x01C5	; 0x8001c5 <TOFF+0x1>
    2298:	05 2e       	mov	r0, r21
    229a:	00 0c       	add	r0, r0
    229c:	66 0b       	sbc	r22, r22
    229e:	77 0b       	sbc	r23, r23
    22a0:	8b ef       	ldi	r24, 0xFB	; 251
    22a2:	91 e0       	ldi	r25, 0x01	; 1
_GLOBAL__sub_I_display1():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1101
  int numberOfDigits = 4; 

  display1.Begin(displayType, numberOfDigits, digit1, digit2, digit3, digit4, segA, segB, segC, segD, segE, segF, segG, segDP);
  
  display1.SetBrightness(100); 
}
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
__static_initialization_and_destruction_0():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:186
bool switched = false;
bool tmrstp;
/**/

BlockNot on(TON, SECONDS);
BlockNot off(TOFF, SECONDS);
    22a8:	0c 94 8f 03 	jmp	0x71e	; 0x71e <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]>

000022ac <__floatunsisf>:
__floatunsisf():
    22ac:	e8 94       	clt
    22ae:	09 c0       	rjmp	.+18     	; 0x22c2 <__floatsisf+0x12>

000022b0 <__floatsisf>:
    22b0:	97 fb       	bst	r25, 7
    22b2:	3e f4       	brtc	.+14     	; 0x22c2 <__floatsisf+0x12>
    22b4:	90 95       	com	r25
    22b6:	80 95       	com	r24
    22b8:	70 95       	com	r23
    22ba:	61 95       	neg	r22
    22bc:	7f 4f       	sbci	r23, 0xFF	; 255
    22be:	8f 4f       	sbci	r24, 0xFF	; 255
    22c0:	9f 4f       	sbci	r25, 0xFF	; 255
    22c2:	99 23       	and	r25, r25
    22c4:	a9 f0       	breq	.+42     	; 0x22f0 <__floatsisf+0x40>
    22c6:	f9 2f       	mov	r31, r25
    22c8:	96 e9       	ldi	r25, 0x96	; 150
    22ca:	bb 27       	eor	r27, r27
    22cc:	93 95       	inc	r25
    22ce:	f6 95       	lsr	r31
    22d0:	87 95       	ror	r24
    22d2:	77 95       	ror	r23
    22d4:	67 95       	ror	r22
    22d6:	b7 95       	ror	r27
    22d8:	f1 11       	cpse	r31, r1
    22da:	f8 cf       	rjmp	.-16     	; 0x22cc <__floatsisf+0x1c>
    22dc:	fa f4       	brpl	.+62     	; 0x231c <__floatsisf+0x6c>
    22de:	bb 0f       	add	r27, r27
    22e0:	11 f4       	brne	.+4      	; 0x22e6 <__floatsisf+0x36>
    22e2:	60 ff       	sbrs	r22, 0
    22e4:	1b c0       	rjmp	.+54     	; 0x231c <__floatsisf+0x6c>
    22e6:	6f 5f       	subi	r22, 0xFF	; 255
    22e8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ea:	8f 4f       	sbci	r24, 0xFF	; 255
    22ec:	9f 4f       	sbci	r25, 0xFF	; 255
    22ee:	16 c0       	rjmp	.+44     	; 0x231c <__floatsisf+0x6c>
    22f0:	88 23       	and	r24, r24
    22f2:	11 f0       	breq	.+4      	; 0x22f8 <__floatsisf+0x48>
    22f4:	96 e9       	ldi	r25, 0x96	; 150
    22f6:	11 c0       	rjmp	.+34     	; 0x231a <__floatsisf+0x6a>
    22f8:	77 23       	and	r23, r23
    22fa:	21 f0       	breq	.+8      	; 0x2304 <__floatsisf+0x54>
    22fc:	9e e8       	ldi	r25, 0x8E	; 142
    22fe:	87 2f       	mov	r24, r23
    2300:	76 2f       	mov	r23, r22
    2302:	05 c0       	rjmp	.+10     	; 0x230e <__floatsisf+0x5e>
    2304:	66 23       	and	r22, r22
    2306:	71 f0       	breq	.+28     	; 0x2324 <__floatsisf+0x74>
    2308:	96 e8       	ldi	r25, 0x86	; 134
    230a:	86 2f       	mov	r24, r22
    230c:	70 e0       	ldi	r23, 0x00	; 0
    230e:	60 e0       	ldi	r22, 0x00	; 0
    2310:	2a f0       	brmi	.+10     	; 0x231c <__floatsisf+0x6c>
    2312:	9a 95       	dec	r25
    2314:	66 0f       	add	r22, r22
    2316:	77 1f       	adc	r23, r23
    2318:	88 1f       	adc	r24, r24
    231a:	da f7       	brpl	.-10     	; 0x2312 <__floatsisf+0x62>
    231c:	88 0f       	add	r24, r24
    231e:	96 95       	lsr	r25
    2320:	87 95       	ror	r24
    2322:	97 f9       	bld	r25, 7
    2324:	08 95       	ret

00002326 <__fp_cmp>:
__fp_cmp():
    2326:	99 0f       	add	r25, r25
    2328:	00 08       	sbc	r0, r0
    232a:	55 0f       	add	r21, r21
    232c:	aa 0b       	sbc	r26, r26
    232e:	e0 e8       	ldi	r30, 0x80	; 128
    2330:	fe ef       	ldi	r31, 0xFE	; 254
    2332:	16 16       	cp	r1, r22
    2334:	17 06       	cpc	r1, r23
    2336:	e8 07       	cpc	r30, r24
    2338:	f9 07       	cpc	r31, r25
    233a:	c0 f0       	brcs	.+48     	; 0x236c <__fp_cmp+0x46>
    233c:	12 16       	cp	r1, r18
    233e:	13 06       	cpc	r1, r19
    2340:	e4 07       	cpc	r30, r20
    2342:	f5 07       	cpc	r31, r21
    2344:	98 f0       	brcs	.+38     	; 0x236c <__fp_cmp+0x46>
    2346:	62 1b       	sub	r22, r18
    2348:	73 0b       	sbc	r23, r19
    234a:	84 0b       	sbc	r24, r20
    234c:	95 0b       	sbc	r25, r21
    234e:	39 f4       	brne	.+14     	; 0x235e <__fp_cmp+0x38>
    2350:	0a 26       	eor	r0, r26
    2352:	61 f0       	breq	.+24     	; 0x236c <__fp_cmp+0x46>
    2354:	23 2b       	or	r18, r19
    2356:	24 2b       	or	r18, r20
    2358:	25 2b       	or	r18, r21
    235a:	21 f4       	brne	.+8      	; 0x2364 <__fp_cmp+0x3e>
    235c:	08 95       	ret
    235e:	0a 26       	eor	r0, r26
    2360:	09 f4       	brne	.+2      	; 0x2364 <__fp_cmp+0x3e>
    2362:	a1 40       	sbci	r26, 0x01	; 1
    2364:	a6 95       	lsr	r26
    2366:	8f ef       	ldi	r24, 0xFF	; 255
    2368:	81 1d       	adc	r24, r1
    236a:	81 1d       	adc	r24, r1
    236c:	08 95       	ret

0000236e <__mulsf3>:
__mulsf3():
    236e:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsf3x>
    2372:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__fp_round>
    2376:	0e 94 2d 12 	call	0x245a	; 0x245a <__fp_pscA>
    237a:	38 f0       	brcs	.+14     	; 0x238a <__mulsf3+0x1c>
    237c:	0e 94 34 12 	call	0x2468	; 0x2468 <__fp_pscB>
    2380:	20 f0       	brcs	.+8      	; 0x238a <__mulsf3+0x1c>
    2382:	95 23       	and	r25, r21
    2384:	11 f0       	breq	.+4      	; 0x238a <__mulsf3+0x1c>
    2386:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__fp_inf>
    238a:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__fp_nan>
    238e:	11 24       	eor	r1, r1
    2390:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__fp_szero>

00002394 <__mulsf3x>:
__mulsf3x():
    2394:	0e 94 4c 12 	call	0x2498	; 0x2498 <__fp_split3>
    2398:	70 f3       	brcs	.-36     	; 0x2376 <__mulsf3+0x8>

0000239a <__mulsf3_pse>:
    239a:	95 9f       	mul	r25, r21
    239c:	c1 f3       	breq	.-16     	; 0x238e <__mulsf3+0x20>
    239e:	95 0f       	add	r25, r21
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	55 1f       	adc	r21, r21
    23a4:	62 9f       	mul	r22, r18
    23a6:	f0 01       	movw	r30, r0
    23a8:	72 9f       	mul	r23, r18
    23aa:	bb 27       	eor	r27, r27
    23ac:	f0 0d       	add	r31, r0
    23ae:	b1 1d       	adc	r27, r1
    23b0:	63 9f       	mul	r22, r19
    23b2:	aa 27       	eor	r26, r26
    23b4:	f0 0d       	add	r31, r0
    23b6:	b1 1d       	adc	r27, r1
    23b8:	aa 1f       	adc	r26, r26
    23ba:	64 9f       	mul	r22, r20
    23bc:	66 27       	eor	r22, r22
    23be:	b0 0d       	add	r27, r0
    23c0:	a1 1d       	adc	r26, r1
    23c2:	66 1f       	adc	r22, r22
    23c4:	82 9f       	mul	r24, r18
    23c6:	22 27       	eor	r18, r18
    23c8:	b0 0d       	add	r27, r0
    23ca:	a1 1d       	adc	r26, r1
    23cc:	62 1f       	adc	r22, r18
    23ce:	73 9f       	mul	r23, r19
    23d0:	b0 0d       	add	r27, r0
    23d2:	a1 1d       	adc	r26, r1
    23d4:	62 1f       	adc	r22, r18
    23d6:	83 9f       	mul	r24, r19
    23d8:	a0 0d       	add	r26, r0
    23da:	61 1d       	adc	r22, r1
    23dc:	22 1f       	adc	r18, r18
    23de:	74 9f       	mul	r23, r20
    23e0:	33 27       	eor	r19, r19
    23e2:	a0 0d       	add	r26, r0
    23e4:	61 1d       	adc	r22, r1
    23e6:	23 1f       	adc	r18, r19
    23e8:	84 9f       	mul	r24, r20
    23ea:	60 0d       	add	r22, r0
    23ec:	21 1d       	adc	r18, r1
    23ee:	82 2f       	mov	r24, r18
    23f0:	76 2f       	mov	r23, r22
    23f2:	6a 2f       	mov	r22, r26
    23f4:	11 24       	eor	r1, r1
    23f6:	9f 57       	subi	r25, 0x7F	; 127
    23f8:	50 40       	sbci	r21, 0x00	; 0
    23fa:	9a f0       	brmi	.+38     	; 0x2422 <__mulsf3_pse+0x88>
    23fc:	f1 f0       	breq	.+60     	; 0x243a <__mulsf3_pse+0xa0>
    23fe:	88 23       	and	r24, r24
    2400:	4a f0       	brmi	.+18     	; 0x2414 <__mulsf3_pse+0x7a>
    2402:	ee 0f       	add	r30, r30
    2404:	ff 1f       	adc	r31, r31
    2406:	bb 1f       	adc	r27, r27
    2408:	66 1f       	adc	r22, r22
    240a:	77 1f       	adc	r23, r23
    240c:	88 1f       	adc	r24, r24
    240e:	91 50       	subi	r25, 0x01	; 1
    2410:	50 40       	sbci	r21, 0x00	; 0
    2412:	a9 f7       	brne	.-22     	; 0x23fe <__mulsf3_pse+0x64>
    2414:	9e 3f       	cpi	r25, 0xFE	; 254
    2416:	51 05       	cpc	r21, r1
    2418:	80 f0       	brcs	.+32     	; 0x243a <__mulsf3_pse+0xa0>
    241a:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__fp_inf>
    241e:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__fp_szero>
    2422:	5f 3f       	cpi	r21, 0xFF	; 255
    2424:	e4 f3       	brlt	.-8      	; 0x241e <__mulsf3_pse+0x84>
    2426:	98 3e       	cpi	r25, 0xE8	; 232
    2428:	d4 f3       	brlt	.-12     	; 0x241e <__mulsf3_pse+0x84>
    242a:	86 95       	lsr	r24
    242c:	77 95       	ror	r23
    242e:	67 95       	ror	r22
    2430:	b7 95       	ror	r27
    2432:	f7 95       	ror	r31
    2434:	e7 95       	ror	r30
    2436:	9f 5f       	subi	r25, 0xFF	; 255
    2438:	c1 f7       	brne	.-16     	; 0x242a <__mulsf3_pse+0x90>
    243a:	fe 2b       	or	r31, r30
    243c:	88 0f       	add	r24, r24
    243e:	91 1d       	adc	r25, r1
    2440:	96 95       	lsr	r25
    2442:	87 95       	ror	r24
    2444:	97 f9       	bld	r25, 7
    2446:	08 95       	ret

00002448 <__fp_inf>:
    2448:	97 f9       	bld	r25, 7
    244a:	9f 67       	ori	r25, 0x7F	; 127
    244c:	80 e8       	ldi	r24, 0x80	; 128
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	60 e0       	ldi	r22, 0x00	; 0
    2452:	08 95       	ret

00002454 <__fp_nan>:
    2454:	9f ef       	ldi	r25, 0xFF	; 255
    2456:	80 ec       	ldi	r24, 0xC0	; 192
    2458:	08 95       	ret

0000245a <__fp_pscA>:
    245a:	00 24       	eor	r0, r0
    245c:	0a 94       	dec	r0
    245e:	16 16       	cp	r1, r22
    2460:	17 06       	cpc	r1, r23
    2462:	18 06       	cpc	r1, r24
    2464:	09 06       	cpc	r0, r25
__fp_pscA():
    2466:	08 95       	ret

00002468 <__fp_pscB>:
__fp_pscB():
    2468:	00 24       	eor	r0, r0
    246a:	0a 94       	dec	r0
    246c:	12 16       	cp	r1, r18
    246e:	13 06       	cpc	r1, r19
    2470:	14 06       	cpc	r1, r20
    2472:	05 06       	cpc	r0, r21
    2474:	08 95       	ret

00002476 <__fp_round>:
__fp_round():
    2476:	09 2e       	mov	r0, r25
    2478:	03 94       	inc	r0
    247a:	00 0c       	add	r0, r0
    247c:	11 f4       	brne	.+4      	; 0x2482 <__fp_round+0xc>
    247e:	88 23       	and	r24, r24
    2480:	52 f0       	brmi	.+20     	; 0x2496 <__fp_round+0x20>
    2482:	bb 0f       	add	r27, r27
    2484:	40 f4       	brcc	.+16     	; 0x2496 <__fp_round+0x20>
    2486:	bf 2b       	or	r27, r31
    2488:	11 f4       	brne	.+4      	; 0x248e <__fp_round+0x18>
    248a:	60 ff       	sbrs	r22, 0
    248c:	04 c0       	rjmp	.+8      	; 0x2496 <__fp_round+0x20>
    248e:	6f 5f       	subi	r22, 0xFF	; 255
    2490:	7f 4f       	sbci	r23, 0xFF	; 255
    2492:	8f 4f       	sbci	r24, 0xFF	; 255
    2494:	9f 4f       	sbci	r25, 0xFF	; 255
    2496:	08 95       	ret

00002498 <__fp_split3>:
__fp_split3():
    2498:	57 fd       	sbrc	r21, 7
    249a:	90 58       	subi	r25, 0x80	; 128
    249c:	44 0f       	add	r20, r20
    249e:	55 1f       	adc	r21, r21
    24a0:	59 f0       	breq	.+22     	; 0x24b8 <__fp_splitA+0x10>
    24a2:	5f 3f       	cpi	r21, 0xFF	; 255
    24a4:	71 f0       	breq	.+28     	; 0x24c2 <__fp_splitA+0x1a>
    24a6:	47 95       	ror	r20

000024a8 <__fp_splitA>:
    24a8:	88 0f       	add	r24, r24
    24aa:	97 fb       	bst	r25, 7
    24ac:	99 1f       	adc	r25, r25
    24ae:	61 f0       	breq	.+24     	; 0x24c8 <__fp_splitA+0x20>
    24b0:	9f 3f       	cpi	r25, 0xFF	; 255
    24b2:	79 f0       	breq	.+30     	; 0x24d2 <__fp_splitA+0x2a>
    24b4:	87 95       	ror	r24
    24b6:	08 95       	ret
    24b8:	12 16       	cp	r1, r18
    24ba:	13 06       	cpc	r1, r19
    24bc:	14 06       	cpc	r1, r20
    24be:	55 1f       	adc	r21, r21
    24c0:	f2 cf       	rjmp	.-28     	; 0x24a6 <__fp_split3+0xe>
    24c2:	46 95       	lsr	r20
    24c4:	f1 df       	rcall	.-30     	; 0x24a8 <__fp_splitA>
    24c6:	08 c0       	rjmp	.+16     	; 0x24d8 <__fp_splitA+0x30>
    24c8:	16 16       	cp	r1, r22
    24ca:	17 06       	cpc	r1, r23
    24cc:	18 06       	cpc	r1, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	f1 cf       	rjmp	.-30     	; 0x24b4 <__fp_splitA+0xc>
    24d2:	86 95       	lsr	r24
    24d4:	71 05       	cpc	r23, r1
    24d6:	61 05       	cpc	r22, r1
    24d8:	08 94       	sec
    24da:	08 95       	ret

000024dc <__fp_zero>:
__fp_zero():
    24dc:	e8 94       	clt

000024de <__fp_szero>:
    24de:	bb 27       	eor	r27, r27
    24e0:	66 27       	eor	r22, r22
    24e2:	77 27       	eor	r23, r23
    24e4:	cb 01       	movw	r24, r22
    24e6:	97 f9       	bld	r25, 7
    24e8:	08 95       	ret

000024ea <eeprom_read_byte>:
eeprom_read_byte():
    24ea:	f9 99       	sbic	0x1f, 1	; 31
    24ec:	fe cf       	rjmp	.-4      	; 0x24ea <eeprom_read_byte>
    24ee:	92 bd       	out	0x22, r25	; 34
    24f0:	81 bd       	out	0x21, r24	; 33
    24f2:	f8 9a       	sbi	0x1f, 0	; 31
    24f4:	99 27       	eor	r25, r25
    24f6:	80 b5       	in	r24, 0x20	; 32
    24f8:	08 95       	ret

000024fa <eeprom_write_byte>:
eeprom_write_byte():
    24fa:	26 2f       	mov	r18, r22

000024fc <eeprom_write_r18>:
    24fc:	f9 99       	sbic	0x1f, 1	; 31
    24fe:	fe cf       	rjmp	.-4      	; 0x24fc <eeprom_write_r18>
    2500:	1f ba       	out	0x1f, r1	; 31
    2502:	92 bd       	out	0x22, r25	; 34
    2504:	81 bd       	out	0x21, r24	; 33
    2506:	20 bd       	out	0x20, r18	; 32
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	f8 94       	cli
    250c:	fa 9a       	sbi	0x1f, 2	; 31
    250e:	f9 9a       	sbi	0x1f, 1	; 31
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	01 96       	adiw	r24, 0x01	; 1
    2514:	08 95       	ret

00002516 <__divsf3>:
__divsf3():
    2516:	0e 94 9f 12 	call	0x253e	; 0x253e <__divsf3x>
    251a:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__fp_round>
    251e:	0e 94 34 12 	call	0x2468	; 0x2468 <__fp_pscB>
    2522:	58 f0       	brcs	.+22     	; 0x253a <__divsf3+0x24>
    2524:	0e 94 2d 12 	call	0x245a	; 0x245a <__fp_pscA>
    2528:	40 f0       	brcs	.+16     	; 0x253a <__divsf3+0x24>
    252a:	29 f4       	brne	.+10     	; 0x2536 <__divsf3+0x20>
    252c:	5f 3f       	cpi	r21, 0xFF	; 255
    252e:	29 f0       	breq	.+10     	; 0x253a <__divsf3+0x24>
    2530:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__fp_inf>
    2534:	51 11       	cpse	r21, r1
    2536:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__fp_szero>
    253a:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__fp_nan>

0000253e <__divsf3x>:
__divsf3x():
    253e:	0e 94 4c 12 	call	0x2498	; 0x2498 <__fp_split3>
    2542:	68 f3       	brcs	.-38     	; 0x251e <__divsf3+0x8>

00002544 <__divsf3_pse>:
    2544:	99 23       	and	r25, r25
    2546:	b1 f3       	breq	.-20     	; 0x2534 <__divsf3+0x1e>
    2548:	55 23       	and	r21, r21
    254a:	91 f3       	breq	.-28     	; 0x2530 <__divsf3+0x1a>
    254c:	95 1b       	sub	r25, r21
    254e:	55 0b       	sbc	r21, r21
    2550:	bb 27       	eor	r27, r27
    2552:	aa 27       	eor	r26, r26
    2554:	62 17       	cp	r22, r18
    2556:	73 07       	cpc	r23, r19
    2558:	84 07       	cpc	r24, r20
    255a:	38 f0       	brcs	.+14     	; 0x256a <__divsf3_pse+0x26>
    255c:	9f 5f       	subi	r25, 0xFF	; 255
    255e:	5f 4f       	sbci	r21, 0xFF	; 255
    2560:	22 0f       	add	r18, r18
    2562:	33 1f       	adc	r19, r19
    2564:	44 1f       	adc	r20, r20
    2566:	aa 1f       	adc	r26, r26
    2568:	a9 f3       	breq	.-22     	; 0x2554 <__divsf3_pse+0x10>
    256a:	35 d0       	rcall	.+106    	; 0x25d6 <__divsf3_pse+0x92>
    256c:	0e 2e       	mov	r0, r30
    256e:	3a f0       	brmi	.+14     	; 0x257e <__divsf3_pse+0x3a>
    2570:	e0 e8       	ldi	r30, 0x80	; 128
    2572:	32 d0       	rcall	.+100    	; 0x25d8 <__divsf3_pse+0x94>
    2574:	91 50       	subi	r25, 0x01	; 1
    2576:	50 40       	sbci	r21, 0x00	; 0
    2578:	e6 95       	lsr	r30
    257a:	00 1c       	adc	r0, r0
    257c:	ca f7       	brpl	.-14     	; 0x2570 <__divsf3_pse+0x2c>
    257e:	2b d0       	rcall	.+86     	; 0x25d6 <__divsf3_pse+0x92>
    2580:	fe 2f       	mov	r31, r30
    2582:	29 d0       	rcall	.+82     	; 0x25d6 <__divsf3_pse+0x92>
    2584:	66 0f       	add	r22, r22
    2586:	77 1f       	adc	r23, r23
    2588:	88 1f       	adc	r24, r24
    258a:	bb 1f       	adc	r27, r27
    258c:	26 17       	cp	r18, r22
    258e:	37 07       	cpc	r19, r23
    2590:	48 07       	cpc	r20, r24
    2592:	ab 07       	cpc	r26, r27
    2594:	b0 e8       	ldi	r27, 0x80	; 128
    2596:	09 f0       	breq	.+2      	; 0x259a <__divsf3_pse+0x56>
    2598:	bb 0b       	sbc	r27, r27
    259a:	80 2d       	mov	r24, r0
    259c:	bf 01       	movw	r22, r30
    259e:	ff 27       	eor	r31, r31
    25a0:	93 58       	subi	r25, 0x83	; 131
    25a2:	5f 4f       	sbci	r21, 0xFF	; 255
    25a4:	3a f0       	brmi	.+14     	; 0x25b4 <__divsf3_pse+0x70>
    25a6:	9e 3f       	cpi	r25, 0xFE	; 254
    25a8:	51 05       	cpc	r21, r1
    25aa:	78 f0       	brcs	.+30     	; 0x25ca <__divsf3_pse+0x86>
    25ac:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__fp_inf>
    25b0:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__fp_szero>
    25b4:	5f 3f       	cpi	r21, 0xFF	; 255
    25b6:	e4 f3       	brlt	.-8      	; 0x25b0 <__divsf3_pse+0x6c>
    25b8:	98 3e       	cpi	r25, 0xE8	; 232
    25ba:	d4 f3       	brlt	.-12     	; 0x25b0 <__divsf3_pse+0x6c>
    25bc:	86 95       	lsr	r24
    25be:	77 95       	ror	r23
    25c0:	67 95       	ror	r22
    25c2:	b7 95       	ror	r27
    25c4:	f7 95       	ror	r31
    25c6:	9f 5f       	subi	r25, 0xFF	; 255
    25c8:	c9 f7       	brne	.-14     	; 0x25bc <__divsf3_pse+0x78>
    25ca:	88 0f       	add	r24, r24
    25cc:	91 1d       	adc	r25, r1
    25ce:	96 95       	lsr	r25
    25d0:	87 95       	ror	r24
    25d2:	97 f9       	bld	r25, 7
    25d4:	08 95       	ret
    25d6:	e1 e0       	ldi	r30, 0x01	; 1
    25d8:	66 0f       	add	r22, r22
    25da:	77 1f       	adc	r23, r23
    25dc:	88 1f       	adc	r24, r24
    25de:	bb 1f       	adc	r27, r27
    25e0:	62 17       	cp	r22, r18
    25e2:	73 07       	cpc	r23, r19
    25e4:	84 07       	cpc	r24, r20
    25e6:	ba 07       	cpc	r27, r26
    25e8:	20 f0       	brcs	.+8      	; 0x25f2 <__divsf3_pse+0xae>
    25ea:	62 1b       	sub	r22, r18
    25ec:	73 0b       	sbc	r23, r19
    25ee:	84 0b       	sbc	r24, r20
    25f0:	ba 0b       	sbc	r27, r26
    25f2:	ee 1f       	adc	r30, r30
    25f4:	88 f7       	brcc	.-30     	; 0x25d8 <__divsf3_pse+0x94>
    25f6:	e0 95       	com	r30
    25f8:	08 95       	ret

000025fa <__fixsfsi>:
    25fa:	0e 94 04 13 	call	0x2608	; 0x2608 <__fixunssfsi>
    25fe:	68 94       	set
    2600:	b1 11       	cpse	r27, r1
    2602:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__fp_szero>
    2606:	08 95       	ret

00002608 <__fixunssfsi>:
    2608:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__fp_splitA>
    260c:	88 f0       	brcs	.+34     	; 0x2630 <__fixunssfsi+0x28>
    260e:	9f 57       	subi	r25, 0x7F	; 127
    2610:	98 f0       	brcs	.+38     	; 0x2638 <__fixunssfsi+0x30>
    2612:	b9 2f       	mov	r27, r25
    2614:	99 27       	eor	r25, r25
    2616:	b7 51       	subi	r27, 0x17	; 23
    2618:	b0 f0       	brcs	.+44     	; 0x2646 <__fixunssfsi+0x3e>
__fixunssfsi():
    261a:	e1 f0       	breq	.+56     	; 0x2654 <__fixunssfsi+0x4c>
    261c:	66 0f       	add	r22, r22
    261e:	77 1f       	adc	r23, r23
    2620:	88 1f       	adc	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	1a f0       	brmi	.+6      	; 0x262c <__fixunssfsi+0x24>
    2626:	ba 95       	dec	r27
    2628:	c9 f7       	brne	.-14     	; 0x261c <__fixunssfsi+0x14>
    262a:	14 c0       	rjmp	.+40     	; 0x2654 <__fixunssfsi+0x4c>
    262c:	b1 30       	cpi	r27, 0x01	; 1
    262e:	91 f0       	breq	.+36     	; 0x2654 <__fixunssfsi+0x4c>
    2630:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__fp_zero>
    2634:	b1 e0       	ldi	r27, 0x01	; 1
    2636:	08 95       	ret
    2638:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__fp_zero>
    263c:	67 2f       	mov	r22, r23
    263e:	78 2f       	mov	r23, r24
    2640:	88 27       	eor	r24, r24
    2642:	b8 5f       	subi	r27, 0xF8	; 248
    2644:	39 f0       	breq	.+14     	; 0x2654 <__fixunssfsi+0x4c>
    2646:	b9 3f       	cpi	r27, 0xF9	; 249
    2648:	cc f3       	brlt	.-14     	; 0x263c <__fixunssfsi+0x34>
    264a:	86 95       	lsr	r24
    264c:	77 95       	ror	r23
    264e:	67 95       	ror	r22
    2650:	b3 95       	inc	r27
    2652:	d9 f7       	brne	.-10     	; 0x264a <__fixunssfsi+0x42>
    2654:	3e f4       	brtc	.+14     	; 0x2664 <__fixunssfsi+0x5c>
    2656:	90 95       	com	r25
    2658:	80 95       	com	r24
    265a:	70 95       	com	r23
    265c:	61 95       	neg	r22
    265e:	7f 4f       	sbci	r23, 0xFF	; 255
    2660:	8f 4f       	sbci	r24, 0xFF	; 255
    2662:	9f 4f       	sbci	r25, 0xFF	; 255
    2664:	08 95       	ret

00002666 <__gesf2>:
__gesf2():
    2666:	0e 94 93 11 	call	0x2326	; 0x2326 <__fp_cmp>
    266a:	08 f4       	brcc	.+2      	; 0x266e <__gesf2+0x8>
    266c:	8f ef       	ldi	r24, 0xFF	; 255
    266e:	08 95       	ret

00002670 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    2670:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    2672:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    2674:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    2676:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    2678:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    267a:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    267c:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    267e:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    2680:	09 94       	ijmp

00002682 <malloc>:
malloc():
    2682:	0f 93       	push	r16
    2684:	1f 93       	push	r17
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	82 30       	cpi	r24, 0x02	; 2
    268c:	91 05       	cpc	r25, r1
    268e:	10 f4       	brcc	.+4      	; 0x2694 <malloc+0x12>
    2690:	82 e0       	ldi	r24, 0x02	; 2
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <__flp>
    2698:	f0 91 c1 02 	lds	r31, 0x02C1	; 0x8002c1 <__flp+0x1>
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	a0 e0       	ldi	r26, 0x00	; 0
    26a4:	30 97       	sbiw	r30, 0x00	; 0
    26a6:	99 f4       	brne	.+38     	; 0x26ce <malloc+0x4c>
    26a8:	21 15       	cp	r18, r1
    26aa:	31 05       	cpc	r19, r1
    26ac:	09 f4       	brne	.+2      	; 0x26b0 <malloc+0x2e>
    26ae:	4a c0       	rjmp	.+148    	; 0x2744 <malloc+0xc2>
    26b0:	28 1b       	sub	r18, r24
    26b2:	39 0b       	sbc	r19, r25
    26b4:	24 30       	cpi	r18, 0x04	; 4
    26b6:	31 05       	cpc	r19, r1
    26b8:	d8 f5       	brcc	.+118    	; 0x2730 <malloc+0xae>
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	9b 81       	ldd	r25, Y+3	; 0x03
    26be:	61 15       	cp	r22, r1
    26c0:	71 05       	cpc	r23, r1
    26c2:	89 f1       	breq	.+98     	; 0x2726 <malloc+0xa4>
    26c4:	fb 01       	movw	r30, r22
    26c6:	93 83       	std	Z+3, r25	; 0x03
    26c8:	82 83       	std	Z+2, r24	; 0x02
    26ca:	fe 01       	movw	r30, r28
    26cc:	11 c0       	rjmp	.+34     	; 0x26f0 <malloc+0x6e>
    26ce:	40 81       	ld	r20, Z
    26d0:	51 81       	ldd	r21, Z+1	; 0x01
    26d2:	02 81       	ldd	r16, Z+2	; 0x02
    26d4:	13 81       	ldd	r17, Z+3	; 0x03
    26d6:	48 17       	cp	r20, r24
    26d8:	59 07       	cpc	r21, r25
    26da:	e0 f0       	brcs	.+56     	; 0x2714 <malloc+0x92>
    26dc:	48 17       	cp	r20, r24
    26de:	59 07       	cpc	r21, r25
    26e0:	99 f4       	brne	.+38     	; 0x2708 <malloc+0x86>
    26e2:	10 97       	sbiw	r26, 0x00	; 0
    26e4:	61 f0       	breq	.+24     	; 0x26fe <malloc+0x7c>
    26e6:	12 96       	adiw	r26, 0x02	; 2
    26e8:	0c 93       	st	X, r16
    26ea:	12 97       	sbiw	r26, 0x02	; 2
    26ec:	13 96       	adiw	r26, 0x03	; 3
    26ee:	1c 93       	st	X, r17
    26f0:	32 96       	adiw	r30, 0x02	; 2
    26f2:	cf 01       	movw	r24, r30
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	08 95       	ret
    26fe:	00 93 c0 02 	sts	0x02C0, r16	; 0x8002c0 <__flp>
    2702:	10 93 c1 02 	sts	0x02C1, r17	; 0x8002c1 <__flp+0x1>
    2706:	f4 cf       	rjmp	.-24     	; 0x26f0 <malloc+0x6e>
    2708:	21 15       	cp	r18, r1
    270a:	31 05       	cpc	r19, r1
    270c:	51 f0       	breq	.+20     	; 0x2722 <malloc+0xa0>
    270e:	42 17       	cp	r20, r18
    2710:	53 07       	cpc	r21, r19
    2712:	38 f0       	brcs	.+14     	; 0x2722 <malloc+0xa0>
    2714:	a9 01       	movw	r20, r18
    2716:	db 01       	movw	r26, r22
    2718:	9a 01       	movw	r18, r20
    271a:	bd 01       	movw	r22, r26
    271c:	df 01       	movw	r26, r30
    271e:	f8 01       	movw	r30, r16
    2720:	c1 cf       	rjmp	.-126    	; 0x26a4 <malloc+0x22>
    2722:	ef 01       	movw	r28, r30
    2724:	f9 cf       	rjmp	.-14     	; 0x2718 <malloc+0x96>
    2726:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <__flp+0x1>
    272a:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <__flp>
    272e:	cd cf       	rjmp	.-102    	; 0x26ca <malloc+0x48>
    2730:	fe 01       	movw	r30, r28
    2732:	e2 0f       	add	r30, r18
    2734:	f3 1f       	adc	r31, r19
    2736:	81 93       	st	Z+, r24
    2738:	91 93       	st	Z+, r25
    273a:	22 50       	subi	r18, 0x02	; 2
    273c:	31 09       	sbc	r19, r1
    273e:	39 83       	std	Y+1, r19	; 0x01
    2740:	28 83       	st	Y, r18
    2742:	d7 cf       	rjmp	.-82     	; 0x26f2 <malloc+0x70>
    2744:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <__brkval>
    2748:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <__brkval+0x1>
    274c:	23 2b       	or	r18, r19
    274e:	41 f4       	brne	.+16     	; 0x2760 <malloc+0xde>
    2750:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2754:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2758:	30 93 bf 02 	sts	0x02BF, r19	; 0x8002bf <__brkval+0x1>
    275c:	20 93 be 02 	sts	0x02BE, r18	; 0x8002be <__brkval>
    2760:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2764:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2768:	21 15       	cp	r18, r1
    276a:	31 05       	cpc	r19, r1
    276c:	41 f4       	brne	.+16     	; 0x277e <malloc+0xfc>
    276e:	2d b7       	in	r18, 0x3d	; 61
    2770:	3e b7       	in	r19, 0x3e	; 62
    2772:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2776:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    277a:	24 1b       	sub	r18, r20
    277c:	35 0b       	sbc	r19, r21
    277e:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <__brkval>
    2782:	f0 91 bf 02 	lds	r31, 0x02BF	; 0x8002bf <__brkval+0x1>
    2786:	e2 17       	cp	r30, r18
    2788:	f3 07       	cpc	r31, r19
    278a:	a0 f4       	brcc	.+40     	; 0x27b4 <malloc+0x132>
    278c:	2e 1b       	sub	r18, r30
    278e:	3f 0b       	sbc	r19, r31
    2790:	28 17       	cp	r18, r24
    2792:	39 07       	cpc	r19, r25
    2794:	78 f0       	brcs	.+30     	; 0x27b4 <malloc+0x132>
    2796:	ac 01       	movw	r20, r24
    2798:	4e 5f       	subi	r20, 0xFE	; 254
    279a:	5f 4f       	sbci	r21, 0xFF	; 255
    279c:	24 17       	cp	r18, r20
    279e:	35 07       	cpc	r19, r21
    27a0:	48 f0       	brcs	.+18     	; 0x27b4 <malloc+0x132>
    27a2:	4e 0f       	add	r20, r30
    27a4:	5f 1f       	adc	r21, r31
    27a6:	50 93 bf 02 	sts	0x02BF, r21	; 0x8002bf <__brkval+0x1>
    27aa:	40 93 be 02 	sts	0x02BE, r20	; 0x8002be <__brkval>
    27ae:	81 93       	st	Z+, r24
    27b0:	91 93       	st	Z+, r25
    27b2:	9f cf       	rjmp	.-194    	; 0x26f2 <malloc+0x70>
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	e0 e0       	ldi	r30, 0x00	; 0
    27b8:	9c cf       	rjmp	.-200    	; 0x26f2 <malloc+0x70>

000027ba <free>:
free():
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	e9 f0       	breq	.+58     	; 0x27fc <free+0x42>
    27c2:	fc 01       	movw	r30, r24
    27c4:	32 97       	sbiw	r30, 0x02	; 2
    27c6:	13 82       	std	Z+3, r1	; 0x03
    27c8:	12 82       	std	Z+2, r1	; 0x02
    27ca:	a0 91 c0 02 	lds	r26, 0x02C0	; 0x8002c0 <__flp>
    27ce:	b0 91 c1 02 	lds	r27, 0x02C1	; 0x8002c1 <__flp+0x1>
    27d2:	ed 01       	movw	r28, r26
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	10 97       	sbiw	r26, 0x00	; 0
    27da:	a1 f4       	brne	.+40     	; 0x2804 <free+0x4a>
    27dc:	20 81       	ld	r18, Z
    27de:	31 81       	ldd	r19, Z+1	; 0x01
    27e0:	82 0f       	add	r24, r18
    27e2:	93 1f       	adc	r25, r19
    27e4:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <__brkval>
    27e8:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <__brkval+0x1>
    27ec:	28 17       	cp	r18, r24
    27ee:	39 07       	cpc	r19, r25
    27f0:	09 f0       	breq	.+2      	; 0x27f4 <free+0x3a>
    27f2:	61 c0       	rjmp	.+194    	; 0x28b6 <free+0xfc>
    27f4:	f0 93 bf 02 	sts	0x02BF, r31	; 0x8002bf <__brkval+0x1>
    27f8:	e0 93 be 02 	sts	0x02BE, r30	; 0x8002be <__brkval>
    27fc:	df 91       	pop	r29
    27fe:	cf 91       	pop	r28
    2800:	08 95       	ret
    2802:	ea 01       	movw	r28, r20
    2804:	ce 17       	cp	r28, r30
    2806:	df 07       	cpc	r29, r31
    2808:	e8 f5       	brcc	.+122    	; 0x2884 <free+0xca>
    280a:	4a 81       	ldd	r20, Y+2	; 0x02
    280c:	5b 81       	ldd	r21, Y+3	; 0x03
    280e:	9e 01       	movw	r18, r28
    2810:	41 15       	cp	r20, r1
    2812:	51 05       	cpc	r21, r1
    2814:	b1 f7       	brne	.-20     	; 0x2802 <free+0x48>
    2816:	e9 01       	movw	r28, r18
    2818:	fb 83       	std	Y+3, r31	; 0x03
    281a:	ea 83       	std	Y+2, r30	; 0x02
    281c:	49 91       	ld	r20, Y+
    281e:	59 91       	ld	r21, Y+
    2820:	c4 0f       	add	r28, r20
    2822:	d5 1f       	adc	r29, r21
    2824:	ec 17       	cp	r30, r28
    2826:	fd 07       	cpc	r31, r29
    2828:	61 f4       	brne	.+24     	; 0x2842 <free+0x88>
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	02 96       	adiw	r24, 0x02	; 2
    2830:	84 0f       	add	r24, r20
    2832:	95 1f       	adc	r25, r21
    2834:	e9 01       	movw	r28, r18
    2836:	99 83       	std	Y+1, r25	; 0x01
    2838:	88 83       	st	Y, r24
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	9b 83       	std	Y+3, r25	; 0x03
    2840:	8a 83       	std	Y+2, r24	; 0x02
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	e0 e0       	ldi	r30, 0x00	; 0
    2846:	12 96       	adiw	r26, 0x02	; 2
    2848:	8d 91       	ld	r24, X+
    284a:	9c 91       	ld	r25, X
    284c:	13 97       	sbiw	r26, 0x03	; 3
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	b9 f5       	brne	.+110    	; 0x28c0 <free+0x106>
    2852:	2d 91       	ld	r18, X+
    2854:	3c 91       	ld	r19, X
    2856:	11 97       	sbiw	r26, 0x01	; 1
    2858:	cd 01       	movw	r24, r26
    285a:	02 96       	adiw	r24, 0x02	; 2
    285c:	82 0f       	add	r24, r18
    285e:	93 1f       	adc	r25, r19
    2860:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <__brkval>
    2864:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <__brkval+0x1>
    2868:	28 17       	cp	r18, r24
    286a:	39 07       	cpc	r19, r25
    286c:	39 f6       	brne	.-114    	; 0x27fc <free+0x42>
    286e:	30 97       	sbiw	r30, 0x00	; 0
    2870:	51 f5       	brne	.+84     	; 0x28c6 <free+0x10c>
    2872:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <__flp+0x1>
    2876:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <__flp>
    287a:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <__brkval+0x1>
    287e:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <__brkval>
    2882:	bc cf       	rjmp	.-136    	; 0x27fc <free+0x42>
    2884:	d3 83       	std	Z+3, r29	; 0x03
    2886:	c2 83       	std	Z+2, r28	; 0x02
    2888:	40 81       	ld	r20, Z
    288a:	51 81       	ldd	r21, Z+1	; 0x01
    288c:	84 0f       	add	r24, r20
    288e:	95 1f       	adc	r25, r21
    2890:	c8 17       	cp	r28, r24
    2892:	d9 07       	cpc	r29, r25
    2894:	61 f4       	brne	.+24     	; 0x28ae <free+0xf4>
    2896:	4e 5f       	subi	r20, 0xFE	; 254
    2898:	5f 4f       	sbci	r21, 0xFF	; 255
    289a:	88 81       	ld	r24, Y
    289c:	99 81       	ldd	r25, Y+1	; 0x01
    289e:	48 0f       	add	r20, r24
    28a0:	59 1f       	adc	r21, r25
    28a2:	51 83       	std	Z+1, r21	; 0x01
    28a4:	40 83       	st	Z, r20
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	9b 81       	ldd	r25, Y+3	; 0x03
    28aa:	93 83       	std	Z+3, r25	; 0x03
    28ac:	82 83       	std	Z+2, r24	; 0x02
    28ae:	21 15       	cp	r18, r1
    28b0:	31 05       	cpc	r19, r1
    28b2:	09 f0       	breq	.+2      	; 0x28b6 <free+0xfc>
    28b4:	b0 cf       	rjmp	.-160    	; 0x2816 <free+0x5c>
    28b6:	f0 93 c1 02 	sts	0x02C1, r31	; 0x8002c1 <__flp+0x1>
    28ba:	e0 93 c0 02 	sts	0x02C0, r30	; 0x8002c0 <__flp>
    28be:	9e cf       	rjmp	.-196    	; 0x27fc <free+0x42>
    28c0:	fd 01       	movw	r30, r26
    28c2:	dc 01       	movw	r26, r24
    28c4:	c0 cf       	rjmp	.-128    	; 0x2846 <free+0x8c>
    28c6:	13 82       	std	Z+3, r1	; 0x03
    28c8:	12 82       	std	Z+2, r1	; 0x02
    28ca:	d7 cf       	rjmp	.-82     	; 0x287a <free+0xc0>

000028cc <realloc>:
realloc():
    28cc:	4f 92       	push	r4
    28ce:	5f 92       	push	r5
    28d0:	6f 92       	push	r6
    28d2:	7f 92       	push	r7
    28d4:	8f 92       	push	r8
    28d6:	9f 92       	push	r9
    28d8:	af 92       	push	r10
    28da:	bf 92       	push	r11
    28dc:	cf 92       	push	r12
    28de:	df 92       	push	r13
    28e0:	ef 92       	push	r14
    28e2:	ff 92       	push	r15
    28e4:	0f 93       	push	r16
    28e6:	1f 93       	push	r17
    28e8:	cf 93       	push	r28
    28ea:	df 93       	push	r29
    28ec:	8c 01       	movw	r16, r24
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	99 f4       	brne	.+38     	; 0x2918 <realloc+0x4c>
    28f2:	cb 01       	movw	r24, r22
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	1f 91       	pop	r17
    28fa:	0f 91       	pop	r16
    28fc:	ff 90       	pop	r15
    28fe:	ef 90       	pop	r14
    2900:	df 90       	pop	r13
    2902:	cf 90       	pop	r12
    2904:	bf 90       	pop	r11
    2906:	af 90       	pop	r10
    2908:	9f 90       	pop	r9
    290a:	8f 90       	pop	r8
    290c:	7f 90       	pop	r7
    290e:	6f 90       	pop	r6
    2910:	5f 90       	pop	r5
    2912:	4f 90       	pop	r4
    2914:	0c 94 41 13 	jmp	0x2682	; 0x2682 <malloc>
    2918:	fc 01       	movw	r30, r24
    291a:	e6 0f       	add	r30, r22
    291c:	f7 1f       	adc	r31, r23
    291e:	9c 01       	movw	r18, r24
    2920:	22 50       	subi	r18, 0x02	; 2
    2922:	31 09       	sbc	r19, r1
    2924:	e2 17       	cp	r30, r18
    2926:	f3 07       	cpc	r31, r19
    2928:	08 f4       	brcc	.+2      	; 0x292c <realloc+0x60>
    292a:	ae c0       	rjmp	.+348    	; 0x2a88 <realloc+0x1bc>
    292c:	d9 01       	movw	r26, r18
    292e:	cd 91       	ld	r28, X+
    2930:	dc 91       	ld	r29, X
    2932:	11 97       	sbiw	r26, 0x01	; 1
    2934:	c6 17       	cp	r28, r22
    2936:	d7 07       	cpc	r29, r23
    2938:	20 f1       	brcs	.+72     	; 0x2982 <realloc+0xb6>
    293a:	c5 30       	cpi	r28, 0x05	; 5
    293c:	d1 05       	cpc	r29, r1
    293e:	78 f0       	brcs	.+30     	; 0x295e <realloc+0x92>
    2940:	ce 01       	movw	r24, r28
    2942:	04 97       	sbiw	r24, 0x04	; 4
    2944:	86 17       	cp	r24, r22
    2946:	97 07       	cpc	r25, r23
    2948:	50 f0       	brcs	.+20     	; 0x295e <realloc+0x92>
    294a:	c6 1b       	sub	r28, r22
    294c:	d7 0b       	sbc	r29, r23
    294e:	22 97       	sbiw	r28, 0x02	; 2
    2950:	c1 93       	st	Z+, r28
    2952:	d1 93       	st	Z+, r29
    2954:	6d 93       	st	X+, r22
    2956:	7c 93       	st	X, r23
    2958:	cf 01       	movw	r24, r30
    295a:	0e 94 dd 13 	call	0x27ba	; 0x27ba <free>
    295e:	c8 01       	movw	r24, r16
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
    2964:	1f 91       	pop	r17
    2966:	0f 91       	pop	r16
    2968:	ff 90       	pop	r15
    296a:	ef 90       	pop	r14
    296c:	df 90       	pop	r13
    296e:	cf 90       	pop	r12
    2970:	bf 90       	pop	r11
    2972:	af 90       	pop	r10
    2974:	9f 90       	pop	r9
    2976:	8f 90       	pop	r8
    2978:	7f 90       	pop	r7
    297a:	6f 90       	pop	r6
    297c:	5f 90       	pop	r5
    297e:	4f 90       	pop	r4
    2980:	08 95       	ret
    2982:	5b 01       	movw	r10, r22
    2984:	ac 1a       	sub	r10, r28
    2986:	bd 0a       	sbc	r11, r29
    2988:	4c 01       	movw	r8, r24
    298a:	8c 0e       	add	r8, r28
    298c:	9d 1e       	adc	r9, r29
    298e:	a0 91 c0 02 	lds	r26, 0x02C0	; 0x8002c0 <__flp>
    2992:	b0 91 c1 02 	lds	r27, 0x02C1	; 0x8002c1 <__flp+0x1>
    2996:	51 2c       	mov	r5, r1
    2998:	41 2c       	mov	r4, r1
    299a:	f1 2c       	mov	r15, r1
    299c:	e1 2c       	mov	r14, r1
    299e:	10 97       	sbiw	r26, 0x00	; 0
    29a0:	31 f5       	brne	.+76     	; 0x29ee <realloc+0x122>
    29a2:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <__brkval>
    29a6:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <__brkval+0x1>
    29aa:	88 15       	cp	r24, r8
    29ac:	99 05       	cpc	r25, r9
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <realloc+0xe6>
    29b0:	5c c0       	rjmp	.+184    	; 0x2a6a <realloc+0x19e>
    29b2:	46 16       	cp	r4, r22
    29b4:	57 06       	cpc	r5, r23
    29b6:	08 f0       	brcs	.+2      	; 0x29ba <realloc+0xee>
    29b8:	58 c0       	rjmp	.+176    	; 0x2a6a <realloc+0x19e>
    29ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    29be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	41 f4       	brne	.+16     	; 0x29d6 <realloc+0x10a>
    29c6:	8d b7       	in	r24, 0x3d	; 61
    29c8:	9e b7       	in	r25, 0x3e	; 62
    29ca:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    29ce:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    29d2:	84 1b       	sub	r24, r20
    29d4:	95 0b       	sbc	r25, r21
    29d6:	e8 17       	cp	r30, r24
    29d8:	f9 07       	cpc	r31, r25
    29da:	08 f0       	brcs	.+2      	; 0x29de <realloc+0x112>
    29dc:	55 c0       	rjmp	.+170    	; 0x2a88 <realloc+0x1bc>
    29de:	f0 93 bf 02 	sts	0x02BF, r31	; 0x8002bf <__brkval+0x1>
    29e2:	e0 93 be 02 	sts	0x02BE, r30	; 0x8002be <__brkval>
    29e6:	f9 01       	movw	r30, r18
    29e8:	71 83       	std	Z+1, r23	; 0x01
    29ea:	60 83       	st	Z, r22
    29ec:	b8 cf       	rjmp	.-144    	; 0x295e <realloc+0x92>
    29ee:	8d 91       	ld	r24, X+
    29f0:	9c 91       	ld	r25, X
    29f2:	11 97       	sbiw	r26, 0x01	; 1
    29f4:	12 96       	adiw	r26, 0x02	; 2
    29f6:	6c 90       	ld	r6, X
    29f8:	12 97       	sbiw	r26, 0x02	; 2
    29fa:	13 96       	adiw	r26, 0x03	; 3
    29fc:	7c 90       	ld	r7, X
    29fe:	13 97       	sbiw	r26, 0x03	; 3
    2a00:	a8 15       	cp	r26, r8
    2a02:	b9 05       	cpc	r27, r9
    2a04:	59 f5       	brne	.+86     	; 0x2a5c <realloc+0x190>
    2a06:	6c 01       	movw	r12, r24
    2a08:	42 e0       	ldi	r20, 0x02	; 2
    2a0a:	c4 0e       	add	r12, r20
    2a0c:	d1 1c       	adc	r13, r1
    2a0e:	ca 14       	cp	r12, r10
    2a10:	db 04       	cpc	r13, r11
    2a12:	20 f1       	brcs	.+72     	; 0x2a5c <realloc+0x190>
    2a14:	ac 01       	movw	r20, r24
    2a16:	4a 19       	sub	r20, r10
    2a18:	5b 09       	sbc	r21, r11
    2a1a:	da 01       	movw	r26, r20
    2a1c:	12 96       	adiw	r26, 0x02	; 2
    2a1e:	15 97       	sbiw	r26, 0x05	; 5
    2a20:	80 f0       	brcs	.+32     	; 0x2a42 <realloc+0x176>
    2a22:	62 82       	std	Z+2, r6	; 0x02
    2a24:	73 82       	std	Z+3, r7	; 0x03
    2a26:	51 83       	std	Z+1, r21	; 0x01
    2a28:	40 83       	st	Z, r20
    2a2a:	d9 01       	movw	r26, r18
    2a2c:	6d 93       	st	X+, r22
    2a2e:	7c 93       	st	X, r23
    2a30:	e1 14       	cp	r14, r1
    2a32:	f1 04       	cpc	r15, r1
    2a34:	71 f0       	breq	.+28     	; 0x2a52 <realloc+0x186>
    2a36:	d7 01       	movw	r26, r14
    2a38:	13 96       	adiw	r26, 0x03	; 3
    2a3a:	fc 93       	st	X, r31
    2a3c:	ee 93       	st	-X, r30
    2a3e:	12 97       	sbiw	r26, 0x02	; 2
    2a40:	8e cf       	rjmp	.-228    	; 0x295e <realloc+0x92>
    2a42:	22 96       	adiw	r28, 0x02	; 2
    2a44:	8c 0f       	add	r24, r28
    2a46:	9d 1f       	adc	r25, r29
    2a48:	f9 01       	movw	r30, r18
    2a4a:	91 83       	std	Z+1, r25	; 0x01
    2a4c:	80 83       	st	Z, r24
    2a4e:	f3 01       	movw	r30, r6
    2a50:	ef cf       	rjmp	.-34     	; 0x2a30 <realloc+0x164>
    2a52:	f0 93 c1 02 	sts	0x02C1, r31	; 0x8002c1 <__flp+0x1>
    2a56:	e0 93 c0 02 	sts	0x02C0, r30	; 0x8002c0 <__flp>
    2a5a:	81 cf       	rjmp	.-254    	; 0x295e <realloc+0x92>
    2a5c:	48 16       	cp	r4, r24
    2a5e:	59 06       	cpc	r5, r25
    2a60:	08 f4       	brcc	.+2      	; 0x2a64 <realloc+0x198>
    2a62:	2c 01       	movw	r4, r24
    2a64:	7d 01       	movw	r14, r26
    2a66:	d3 01       	movw	r26, r6
    2a68:	9a cf       	rjmp	.-204    	; 0x299e <realloc+0xd2>
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	0e 94 41 13 	call	0x2682	; 0x2682 <malloc>
    2a70:	7c 01       	movw	r14, r24
    2a72:	00 97       	sbiw	r24, 0x00	; 0
    2a74:	49 f0       	breq	.+18     	; 0x2a88 <realloc+0x1bc>
    2a76:	ae 01       	movw	r20, r28
    2a78:	b8 01       	movw	r22, r16
    2a7a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <memcpy>
    2a7e:	c8 01       	movw	r24, r16
    2a80:	0e 94 dd 13 	call	0x27ba	; 0x27ba <free>
    2a84:	87 01       	movw	r16, r14
    2a86:	6b cf       	rjmp	.-298    	; 0x295e <realloc+0x92>
    2a88:	10 e0       	ldi	r17, 0x00	; 0
    2a8a:	00 e0       	ldi	r16, 0x00	; 0
    2a8c:	68 cf       	rjmp	.-304    	; 0x295e <realloc+0x92>

00002a8e <memcpy>:
memcpy():
    2a8e:	fb 01       	movw	r30, r22
    2a90:	dc 01       	movw	r26, r24
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <memcpy+0xa>
    2a94:	01 90       	ld	r0, Z+
    2a96:	0d 92       	st	X+, r0
    2a98:	41 50       	subi	r20, 0x01	; 1
    2a9a:	50 40       	sbci	r21, 0x00	; 0
    2a9c:	d8 f7       	brcc	.-10     	; 0x2a94 <memcpy+0x6>
    2a9e:	08 95       	ret

00002aa0 <strcpy>:
strcpy():
    2aa0:	fb 01       	movw	r30, r22
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	01 90       	ld	r0, Z+
    2aa6:	0d 92       	st	X+, r0
    2aa8:	00 20       	and	r0, r0
    2aaa:	e1 f7       	brne	.-8      	; 0x2aa4 <strcpy+0x4>
    2aac:	08 95       	ret

00002aae <strncpy>:
strncpy():
    2aae:	fb 01       	movw	r30, r22
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	41 50       	subi	r20, 0x01	; 1
    2ab4:	50 40       	sbci	r21, 0x00	; 0
    2ab6:	48 f0       	brcs	.+18     	; 0x2aca <strncpy+0x1c>
    2ab8:	01 90       	ld	r0, Z+
    2aba:	0d 92       	st	X+, r0
    2abc:	00 20       	and	r0, r0
    2abe:	c9 f7       	brne	.-14     	; 0x2ab2 <strncpy+0x4>
    2ac0:	01 c0       	rjmp	.+2      	; 0x2ac4 <strncpy+0x16>
    2ac2:	1d 92       	st	X+, r1
    2ac4:	41 50       	subi	r20, 0x01	; 1
    2ac6:	50 40       	sbci	r21, 0x00	; 0
    2ac8:	e0 f7       	brcc	.-8      	; 0x2ac2 <strncpy+0x14>
    2aca:	08 95       	ret

00002acc <sprintf>:
sprintf():
    2acc:	0f 93       	push	r16
    2ace:	1f 93       	push	r17
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	2e 97       	sbiw	r28, 0x0e	; 14
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	f8 94       	cli
    2ade:	de bf       	out	0x3e, r29	; 62
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	cd bf       	out	0x3d, r28	; 61
    2ae4:	0d 89       	ldd	r16, Y+21	; 0x15
    2ae6:	1e 89       	ldd	r17, Y+22	; 0x16
    2ae8:	86 e0       	ldi	r24, 0x06	; 6
    2aea:	8c 83       	std	Y+4, r24	; 0x04
    2aec:	1a 83       	std	Y+2, r17	; 0x02
    2aee:	09 83       	std	Y+1, r16	; 0x01
    2af0:	8f ef       	ldi	r24, 0xFF	; 255
    2af2:	9f e7       	ldi	r25, 0x7F	; 127
    2af4:	9e 83       	std	Y+6, r25	; 0x06
    2af6:	8d 83       	std	Y+5, r24	; 0x05
    2af8:	ae 01       	movw	r20, r28
    2afa:	47 5e       	subi	r20, 0xE7	; 231
    2afc:	5f 4f       	sbci	r21, 0xFF	; 255
    2afe:	6f 89       	ldd	r22, Y+23	; 0x17
    2b00:	78 8d       	ldd	r23, Y+24	; 0x18
    2b02:	ce 01       	movw	r24, r28
    2b04:	01 96       	adiw	r24, 0x01	; 1
    2b06:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <vfprintf>
    2b0a:	2f 81       	ldd	r18, Y+7	; 0x07
    2b0c:	38 85       	ldd	r19, Y+8	; 0x08
    2b0e:	02 0f       	add	r16, r18
    2b10:	13 1f       	adc	r17, r19
    2b12:	f8 01       	movw	r30, r16
    2b14:	10 82       	st	Z, r1
    2b16:	2e 96       	adiw	r28, 0x0e	; 14
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	08 95       	ret

00002b2c <vfprintf>:
vfprintf():
    2b2c:	2f 92       	push	r2
    2b2e:	3f 92       	push	r3
    2b30:	4f 92       	push	r4
    2b32:	5f 92       	push	r5
    2b34:	6f 92       	push	r6
    2b36:	7f 92       	push	r7
    2b38:	8f 92       	push	r8
    2b3a:	9f 92       	push	r9
    2b3c:	af 92       	push	r10
    2b3e:	bf 92       	push	r11
    2b40:	cf 92       	push	r12
    2b42:	df 92       	push	r13
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	2b 97       	sbiw	r28, 0x0b	; 11
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	7c 01       	movw	r14, r24
    2b62:	3b 01       	movw	r6, r22
    2b64:	8a 01       	movw	r16, r20
    2b66:	fc 01       	movw	r30, r24
    2b68:	17 82       	std	Z+7, r1	; 0x07
    2b6a:	16 82       	std	Z+6, r1	; 0x06
    2b6c:	83 81       	ldd	r24, Z+3	; 0x03
    2b6e:	81 ff       	sbrs	r24, 1
    2b70:	dd c1       	rjmp	.+954    	; 0x2f2c <vfprintf+0x400>
    2b72:	ce 01       	movw	r24, r28
    2b74:	01 96       	adiw	r24, 0x01	; 1
    2b76:	5c 01       	movw	r10, r24
    2b78:	f7 01       	movw	r30, r14
    2b7a:	93 81       	ldd	r25, Z+3	; 0x03
    2b7c:	f3 01       	movw	r30, r6
    2b7e:	93 fd       	sbrc	r25, 3
    2b80:	85 91       	lpm	r24, Z+
    2b82:	93 ff       	sbrs	r25, 3
    2b84:	81 91       	ld	r24, Z+
    2b86:	3f 01       	movw	r6, r30
    2b88:	88 23       	and	r24, r24
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <vfprintf+0x62>
    2b8c:	53 c1       	rjmp	.+678    	; 0x2e34 <vfprintf+0x308>
    2b8e:	85 32       	cpi	r24, 0x25	; 37
    2b90:	39 f4       	brne	.+14     	; 0x2ba0 <vfprintf+0x74>
    2b92:	93 fd       	sbrc	r25, 3
    2b94:	85 91       	lpm	r24, Z+
    2b96:	93 ff       	sbrs	r25, 3
    2b98:	81 91       	ld	r24, Z+
    2b9a:	3f 01       	movw	r6, r30
    2b9c:	85 32       	cpi	r24, 0x25	; 37
    2b9e:	29 f4       	brne	.+10     	; 0x2baa <vfprintf+0x7e>
    2ba0:	b7 01       	movw	r22, r14
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <fputc>
    2ba8:	e7 cf       	rjmp	.-50     	; 0x2b78 <vfprintf+0x4c>
    2baa:	91 2c       	mov	r9, r1
    2bac:	21 2c       	mov	r2, r1
    2bae:	31 2c       	mov	r3, r1
    2bb0:	ff e1       	ldi	r31, 0x1F	; 31
    2bb2:	f3 15       	cp	r31, r3
    2bb4:	38 f0       	brcs	.+14     	; 0x2bc4 <vfprintf+0x98>
    2bb6:	8b 32       	cpi	r24, 0x2B	; 43
    2bb8:	11 f1       	breq	.+68     	; 0x2bfe <vfprintf+0xd2>
    2bba:	90 f4       	brcc	.+36     	; 0x2be0 <vfprintf+0xb4>
    2bbc:	80 32       	cpi	r24, 0x20	; 32
    2bbe:	09 f1       	breq	.+66     	; 0x2c02 <vfprintf+0xd6>
    2bc0:	83 32       	cpi	r24, 0x23	; 35
    2bc2:	29 f1       	breq	.+74     	; 0x2c0e <vfprintf+0xe2>
    2bc4:	37 fc       	sbrc	r3, 7
    2bc6:	3c c0       	rjmp	.+120    	; 0x2c40 <vfprintf+0x114>
    2bc8:	20 ed       	ldi	r18, 0xD0	; 208
    2bca:	28 0f       	add	r18, r24
    2bcc:	2a 30       	cpi	r18, 0x0A	; 10
    2bce:	50 f5       	brcc	.+84     	; 0x2c24 <vfprintf+0xf8>
    2bd0:	36 fe       	sbrs	r3, 6
    2bd2:	20 c0       	rjmp	.+64     	; 0x2c14 <vfprintf+0xe8>
    2bd4:	8a e0       	ldi	r24, 0x0A	; 10
    2bd6:	98 9e       	mul	r9, r24
    2bd8:	20 0d       	add	r18, r0
    2bda:	11 24       	eor	r1, r1
    2bdc:	92 2e       	mov	r9, r18
    2bde:	06 c0       	rjmp	.+12     	; 0x2bec <vfprintf+0xc0>
    2be0:	8d 32       	cpi	r24, 0x2D	; 45
    2be2:	91 f0       	breq	.+36     	; 0x2c08 <vfprintf+0xdc>
    2be4:	80 33       	cpi	r24, 0x30	; 48
    2be6:	71 f7       	brne	.-36     	; 0x2bc4 <vfprintf+0x98>
    2be8:	68 94       	set
    2bea:	30 f8       	bld	r3, 0
    2bec:	f3 01       	movw	r30, r6
    2bee:	93 fd       	sbrc	r25, 3
    2bf0:	85 91       	lpm	r24, Z+
    2bf2:	93 ff       	sbrs	r25, 3
    2bf4:	81 91       	ld	r24, Z+
    2bf6:	3f 01       	movw	r6, r30
    2bf8:	81 11       	cpse	r24, r1
    2bfa:	da cf       	rjmp	.-76     	; 0x2bb0 <vfprintf+0x84>
    2bfc:	21 c0       	rjmp	.+66     	; 0x2c40 <vfprintf+0x114>
    2bfe:	68 94       	set
    2c00:	31 f8       	bld	r3, 1
    2c02:	68 94       	set
    2c04:	32 f8       	bld	r3, 2
    2c06:	f2 cf       	rjmp	.-28     	; 0x2bec <vfprintf+0xc0>
    2c08:	68 94       	set
    2c0a:	33 f8       	bld	r3, 3
    2c0c:	ef cf       	rjmp	.-34     	; 0x2bec <vfprintf+0xc0>
    2c0e:	68 94       	set
    2c10:	34 f8       	bld	r3, 4
    2c12:	ec cf       	rjmp	.-40     	; 0x2bec <vfprintf+0xc0>
    2c14:	ea e0       	ldi	r30, 0x0A	; 10
    2c16:	2e 9e       	mul	r2, r30
    2c18:	20 0d       	add	r18, r0
    2c1a:	11 24       	eor	r1, r1
    2c1c:	22 2e       	mov	r2, r18
    2c1e:	68 94       	set
    2c20:	35 f8       	bld	r3, 5
    2c22:	e4 cf       	rjmp	.-56     	; 0x2bec <vfprintf+0xc0>
    2c24:	8e 32       	cpi	r24, 0x2E	; 46
    2c26:	29 f4       	brne	.+10     	; 0x2c32 <vfprintf+0x106>
    2c28:	36 fc       	sbrc	r3, 6
    2c2a:	04 c1       	rjmp	.+520    	; 0x2e34 <vfprintf+0x308>
    2c2c:	68 94       	set
    2c2e:	36 f8       	bld	r3, 6
    2c30:	dd cf       	rjmp	.-70     	; 0x2bec <vfprintf+0xc0>
    2c32:	8c 36       	cpi	r24, 0x6C	; 108
    2c34:	19 f4       	brne	.+6      	; 0x2c3c <vfprintf+0x110>
    2c36:	68 94       	set
    2c38:	37 f8       	bld	r3, 7
    2c3a:	d8 cf       	rjmp	.-80     	; 0x2bec <vfprintf+0xc0>
    2c3c:	88 36       	cpi	r24, 0x68	; 104
    2c3e:	b1 f2       	breq	.-84     	; 0x2bec <vfprintf+0xc0>
    2c40:	98 2f       	mov	r25, r24
    2c42:	9f 7d       	andi	r25, 0xDF	; 223
    2c44:	95 54       	subi	r25, 0x45	; 69
    2c46:	93 30       	cpi	r25, 0x03	; 3
    2c48:	e0 f0       	brcs	.+56     	; 0x2c82 <vfprintf+0x156>
    2c4a:	83 36       	cpi	r24, 0x63	; 99
    2c4c:	a1 f1       	breq	.+104    	; 0x2cb6 <vfprintf+0x18a>
    2c4e:	83 37       	cpi	r24, 0x73	; 115
    2c50:	c1 f1       	breq	.+112    	; 0x2cc2 <vfprintf+0x196>
    2c52:	83 35       	cpi	r24, 0x53	; 83
    2c54:	09 f0       	breq	.+2      	; 0x2c58 <vfprintf+0x12c>
    2c56:	63 c0       	rjmp	.+198    	; 0x2d1e <vfprintf+0x1f2>
    2c58:	28 01       	movw	r4, r16
    2c5a:	f2 e0       	ldi	r31, 0x02	; 2
    2c5c:	4f 0e       	add	r4, r31
    2c5e:	51 1c       	adc	r5, r1
    2c60:	f8 01       	movw	r30, r16
    2c62:	c0 80       	ld	r12, Z
    2c64:	d1 80       	ldd	r13, Z+1	; 0x01
    2c66:	69 2d       	mov	r22, r9
    2c68:	70 e0       	ldi	r23, 0x00	; 0
    2c6a:	36 fc       	sbrc	r3, 6
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <vfprintf+0x146>
    2c6e:	6f ef       	ldi	r22, 0xFF	; 255
    2c70:	7f ef       	ldi	r23, 0xFF	; 255
    2c72:	c6 01       	movw	r24, r12
    2c74:	0e 94 99 17 	call	0x2f32	; 0x2f32 <strnlen_P>
    2c78:	4c 01       	movw	r8, r24
    2c7a:	68 94       	set
    2c7c:	37 f8       	bld	r3, 7
    2c7e:	82 01       	movw	r16, r4
    2c80:	0a c0       	rjmp	.+20     	; 0x2c96 <vfprintf+0x16a>
    2c82:	0c 5f       	subi	r16, 0xFC	; 252
    2c84:	1f 4f       	sbci	r17, 0xFF	; 255
    2c86:	ff e3       	ldi	r31, 0x3F	; 63
    2c88:	f9 83       	std	Y+1, r31	; 0x01
    2c8a:	88 24       	eor	r8, r8
    2c8c:	83 94       	inc	r8
    2c8e:	91 2c       	mov	r9, r1
    2c90:	65 01       	movw	r12, r10
    2c92:	e8 94       	clt
    2c94:	37 f8       	bld	r3, 7
    2c96:	33 fe       	sbrs	r3, 3
    2c98:	2d c0       	rjmp	.+90     	; 0x2cf4 <vfprintf+0x1c8>
    2c9a:	52 2c       	mov	r5, r2
    2c9c:	81 14       	cp	r8, r1
    2c9e:	91 04       	cpc	r9, r1
    2ca0:	71 f5       	brne	.+92     	; 0x2cfe <vfprintf+0x1d2>
    2ca2:	55 20       	and	r5, r5
    2ca4:	09 f4       	brne	.+2      	; 0x2ca8 <vfprintf+0x17c>
    2ca6:	68 cf       	rjmp	.-304    	; 0x2b78 <vfprintf+0x4c>
    2ca8:	b7 01       	movw	r22, r14
    2caa:	80 e2       	ldi	r24, 0x20	; 32
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <fputc>
    2cb2:	5a 94       	dec	r5
    2cb4:	f6 cf       	rjmp	.-20     	; 0x2ca2 <vfprintf+0x176>
    2cb6:	f8 01       	movw	r30, r16
    2cb8:	80 81       	ld	r24, Z
    2cba:	89 83       	std	Y+1, r24	; 0x01
    2cbc:	0e 5f       	subi	r16, 0xFE	; 254
    2cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc0:	e4 cf       	rjmp	.-56     	; 0x2c8a <vfprintf+0x15e>
    2cc2:	28 01       	movw	r4, r16
    2cc4:	f2 e0       	ldi	r31, 0x02	; 2
    2cc6:	4f 0e       	add	r4, r31
    2cc8:	51 1c       	adc	r5, r1
    2cca:	f8 01       	movw	r30, r16
    2ccc:	c0 80       	ld	r12, Z
    2cce:	d1 80       	ldd	r13, Z+1	; 0x01
    2cd0:	69 2d       	mov	r22, r9
    2cd2:	70 e0       	ldi	r23, 0x00	; 0
    2cd4:	36 fc       	sbrc	r3, 6
    2cd6:	02 c0       	rjmp	.+4      	; 0x2cdc <vfprintf+0x1b0>
    2cd8:	6f ef       	ldi	r22, 0xFF	; 255
    2cda:	7f ef       	ldi	r23, 0xFF	; 255
    2cdc:	c6 01       	movw	r24, r12
    2cde:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <strnlen>
    2ce2:	4c 01       	movw	r8, r24
    2ce4:	82 01       	movw	r16, r4
    2ce6:	d5 cf       	rjmp	.-86     	; 0x2c92 <vfprintf+0x166>
    2ce8:	b7 01       	movw	r22, r14
    2cea:	80 e2       	ldi	r24, 0x20	; 32
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <fputc>
    2cf2:	2a 94       	dec	r2
    2cf4:	28 14       	cp	r2, r8
    2cf6:	19 04       	cpc	r1, r9
    2cf8:	09 f0       	breq	.+2      	; 0x2cfc <vfprintf+0x1d0>
    2cfa:	b0 f7       	brcc	.-20     	; 0x2ce8 <vfprintf+0x1bc>
    2cfc:	ce cf       	rjmp	.-100    	; 0x2c9a <vfprintf+0x16e>
    2cfe:	f6 01       	movw	r30, r12
    2d00:	37 fc       	sbrc	r3, 7
    2d02:	85 91       	lpm	r24, Z+
    2d04:	37 fe       	sbrs	r3, 7
    2d06:	81 91       	ld	r24, Z+
    2d08:	6f 01       	movw	r12, r30
    2d0a:	b7 01       	movw	r22, r14
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <fputc>
    2d12:	51 10       	cpse	r5, r1
    2d14:	5a 94       	dec	r5
    2d16:	f1 e0       	ldi	r31, 0x01	; 1
    2d18:	8f 1a       	sub	r8, r31
    2d1a:	91 08       	sbc	r9, r1
    2d1c:	bf cf       	rjmp	.-130    	; 0x2c9c <vfprintf+0x170>
    2d1e:	84 36       	cpi	r24, 0x64	; 100
    2d20:	19 f0       	breq	.+6      	; 0x2d28 <vfprintf+0x1fc>
    2d22:	89 36       	cpi	r24, 0x69	; 105
    2d24:	09 f0       	breq	.+2      	; 0x2d28 <vfprintf+0x1fc>
    2d26:	77 c0       	rjmp	.+238    	; 0x2e16 <vfprintf+0x2ea>
    2d28:	f8 01       	movw	r30, r16
    2d2a:	37 fe       	sbrs	r3, 7
    2d2c:	6b c0       	rjmp	.+214    	; 0x2e04 <vfprintf+0x2d8>
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	0c 5f       	subi	r16, 0xFC	; 252
    2d38:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3a:	f3 2d       	mov	r31, r3
    2d3c:	ff 76       	andi	r31, 0x6F	; 111
    2d3e:	3f 2e       	mov	r3, r31
    2d40:	97 ff       	sbrs	r25, 7
    2d42:	09 c0       	rjmp	.+18     	; 0x2d56 <vfprintf+0x22a>
    2d44:	90 95       	com	r25
    2d46:	80 95       	com	r24
    2d48:	70 95       	com	r23
    2d4a:	61 95       	neg	r22
    2d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d50:	9f 4f       	sbci	r25, 0xFF	; 255
    2d52:	68 94       	set
    2d54:	37 f8       	bld	r3, 7
    2d56:	2a e0       	ldi	r18, 0x0A	; 10
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	a5 01       	movw	r20, r10
    2d5c:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__ultoa_invert>
    2d60:	c8 2e       	mov	r12, r24
    2d62:	ca 18       	sub	r12, r10
    2d64:	8c 2c       	mov	r8, r12
    2d66:	43 2c       	mov	r4, r3
    2d68:	36 fe       	sbrs	r3, 6
    2d6a:	0c c0       	rjmp	.+24     	; 0x2d84 <vfprintf+0x258>
    2d6c:	e8 94       	clt
    2d6e:	40 f8       	bld	r4, 0
    2d70:	c9 14       	cp	r12, r9
    2d72:	40 f4       	brcc	.+16     	; 0x2d84 <vfprintf+0x258>
    2d74:	34 fe       	sbrs	r3, 4
    2d76:	05 c0       	rjmp	.+10     	; 0x2d82 <vfprintf+0x256>
    2d78:	32 fc       	sbrc	r3, 2
    2d7a:	03 c0       	rjmp	.+6      	; 0x2d82 <vfprintf+0x256>
    2d7c:	f3 2d       	mov	r31, r3
    2d7e:	fe 7e       	andi	r31, 0xEE	; 238
    2d80:	4f 2e       	mov	r4, r31
    2d82:	89 2c       	mov	r8, r9
    2d84:	44 fe       	sbrs	r4, 4
    2d86:	aa c0       	rjmp	.+340    	; 0x2edc <vfprintf+0x3b0>
    2d88:	fe 01       	movw	r30, r28
    2d8a:	ec 0d       	add	r30, r12
    2d8c:	f1 1d       	adc	r31, r1
    2d8e:	80 81       	ld	r24, Z
    2d90:	80 33       	cpi	r24, 0x30	; 48
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <vfprintf+0x26a>
    2d94:	9c c0       	rjmp	.+312    	; 0x2ece <vfprintf+0x3a2>
    2d96:	24 2d       	mov	r18, r4
    2d98:	29 7e       	andi	r18, 0xE9	; 233
    2d9a:	42 2e       	mov	r4, r18
    2d9c:	84 2d       	mov	r24, r4
    2d9e:	88 70       	andi	r24, 0x08	; 8
    2da0:	58 2e       	mov	r5, r24
    2da2:	43 fc       	sbrc	r4, 3
    2da4:	aa c0       	rjmp	.+340    	; 0x2efa <vfprintf+0x3ce>
    2da6:	40 fe       	sbrs	r4, 0
    2da8:	a4 c0       	rjmp	.+328    	; 0x2ef2 <vfprintf+0x3c6>
    2daa:	9c 2c       	mov	r9, r12
    2dac:	82 14       	cp	r8, r2
    2dae:	18 f4       	brcc	.+6      	; 0x2db6 <vfprintf+0x28a>
    2db0:	2c 0c       	add	r2, r12
    2db2:	92 2c       	mov	r9, r2
    2db4:	98 18       	sub	r9, r8
    2db6:	44 fe       	sbrs	r4, 4
    2db8:	a6 c0       	rjmp	.+332    	; 0x2f06 <vfprintf+0x3da>
    2dba:	b7 01       	movw	r22, r14
    2dbc:	80 e3       	ldi	r24, 0x30	; 48
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <fputc>
    2dc4:	42 fe       	sbrs	r4, 2
    2dc6:	09 c0       	rjmp	.+18     	; 0x2dda <vfprintf+0x2ae>
    2dc8:	88 e7       	ldi	r24, 0x78	; 120
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	41 fe       	sbrs	r4, 1
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <vfprintf+0x2a8>
    2dd0:	88 e5       	ldi	r24, 0x58	; 88
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	b7 01       	movw	r22, r14
    2dd6:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <fputc>
    2dda:	c9 14       	cp	r12, r9
    2ddc:	08 f4       	brcc	.+2      	; 0x2de0 <vfprintf+0x2b4>
    2dde:	9f c0       	rjmp	.+318    	; 0x2f1e <vfprintf+0x3f2>
    2de0:	ca 94       	dec	r12
    2de2:	d1 2c       	mov	r13, r1
    2de4:	9f ef       	ldi	r25, 0xFF	; 255
    2de6:	c9 1a       	sub	r12, r25
    2de8:	d9 0a       	sbc	r13, r25
    2dea:	ca 0c       	add	r12, r10
    2dec:	db 1c       	adc	r13, r11
    2dee:	f6 01       	movw	r30, r12
    2df0:	82 91       	ld	r24, -Z
    2df2:	6f 01       	movw	r12, r30
    2df4:	b7 01       	movw	r22, r14
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <fputc>
    2dfc:	ac 14       	cp	r10, r12
    2dfe:	bd 04       	cpc	r11, r13
    2e00:	b1 f7       	brne	.-20     	; 0x2dee <vfprintf+0x2c2>
    2e02:	4f cf       	rjmp	.-354    	; 0x2ca2 <vfprintf+0x176>
    2e04:	60 81       	ld	r22, Z
    2e06:	71 81       	ldd	r23, Z+1	; 0x01
    2e08:	07 2e       	mov	r0, r23
    2e0a:	00 0c       	add	r0, r0
    2e0c:	88 0b       	sbc	r24, r24
    2e0e:	99 0b       	sbc	r25, r25
    2e10:	0e 5f       	subi	r16, 0xFE	; 254
    2e12:	1f 4f       	sbci	r17, 0xFF	; 255
    2e14:	92 cf       	rjmp	.-220    	; 0x2d3a <vfprintf+0x20e>
    2e16:	d3 2c       	mov	r13, r3
    2e18:	e8 94       	clt
    2e1a:	d4 f8       	bld	r13, 4
    2e1c:	2a e0       	ldi	r18, 0x0A	; 10
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	85 37       	cpi	r24, 0x75	; 117
    2e22:	e1 f1       	breq	.+120    	; 0x2e9c <vfprintf+0x370>
    2e24:	23 2d       	mov	r18, r3
    2e26:	29 7f       	andi	r18, 0xF9	; 249
    2e28:	d2 2e       	mov	r13, r18
    2e2a:	8f 36       	cpi	r24, 0x6F	; 111
    2e2c:	a9 f1       	breq	.+106    	; 0x2e98 <vfprintf+0x36c>
    2e2e:	f0 f4       	brcc	.+60     	; 0x2e6c <vfprintf+0x340>
    2e30:	88 35       	cpi	r24, 0x58	; 88
    2e32:	51 f1       	breq	.+84     	; 0x2e88 <vfprintf+0x35c>
    2e34:	f7 01       	movw	r30, r14
    2e36:	86 81       	ldd	r24, Z+6	; 0x06
    2e38:	97 81       	ldd	r25, Z+7	; 0x07
    2e3a:	2b 96       	adiw	r28, 0x0b	; 11
    2e3c:	0f b6       	in	r0, 0x3f	; 63
    2e3e:	f8 94       	cli
    2e40:	de bf       	out	0x3e, r29	; 62
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	cd bf       	out	0x3d, r28	; 61
    2e46:	df 91       	pop	r29
    2e48:	cf 91       	pop	r28
    2e4a:	1f 91       	pop	r17
    2e4c:	0f 91       	pop	r16
    2e4e:	ff 90       	pop	r15
    2e50:	ef 90       	pop	r14
    2e52:	df 90       	pop	r13
    2e54:	cf 90       	pop	r12
    2e56:	bf 90       	pop	r11
    2e58:	af 90       	pop	r10
    2e5a:	9f 90       	pop	r9
    2e5c:	8f 90       	pop	r8
    2e5e:	7f 90       	pop	r7
    2e60:	6f 90       	pop	r6
    2e62:	5f 90       	pop	r5
    2e64:	4f 90       	pop	r4
    2e66:	3f 90       	pop	r3
    2e68:	2f 90       	pop	r2
    2e6a:	08 95       	ret
    2e6c:	80 37       	cpi	r24, 0x70	; 112
    2e6e:	49 f0       	breq	.+18     	; 0x2e82 <vfprintf+0x356>
    2e70:	88 37       	cpi	r24, 0x78	; 120
    2e72:	01 f7       	brne	.-64     	; 0x2e34 <vfprintf+0x308>
    2e74:	d4 fe       	sbrs	r13, 4
    2e76:	02 c0       	rjmp	.+4      	; 0x2e7c <vfprintf+0x350>
    2e78:	68 94       	set
    2e7a:	d2 f8       	bld	r13, 2
    2e7c:	20 e1       	ldi	r18, 0x10	; 16
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	0d c0       	rjmp	.+26     	; 0x2e9c <vfprintf+0x370>
    2e82:	68 94       	set
    2e84:	d4 f8       	bld	r13, 4
    2e86:	f6 cf       	rjmp	.-20     	; 0x2e74 <vfprintf+0x348>
    2e88:	34 fe       	sbrs	r3, 4
    2e8a:	03 c0       	rjmp	.+6      	; 0x2e92 <vfprintf+0x366>
    2e8c:	82 2f       	mov	r24, r18
    2e8e:	86 60       	ori	r24, 0x06	; 6
    2e90:	d8 2e       	mov	r13, r24
    2e92:	20 e1       	ldi	r18, 0x10	; 16
    2e94:	32 e0       	ldi	r19, 0x02	; 2
    2e96:	02 c0       	rjmp	.+4      	; 0x2e9c <vfprintf+0x370>
    2e98:	28 e0       	ldi	r18, 0x08	; 8
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	f8 01       	movw	r30, r16
    2e9e:	d7 fe       	sbrs	r13, 7
    2ea0:	0f c0       	rjmp	.+30     	; 0x2ec0 <vfprintf+0x394>
    2ea2:	60 81       	ld	r22, Z
    2ea4:	71 81       	ldd	r23, Z+1	; 0x01
    2ea6:	82 81       	ldd	r24, Z+2	; 0x02
    2ea8:	93 81       	ldd	r25, Z+3	; 0x03
    2eaa:	0c 5f       	subi	r16, 0xFC	; 252
    2eac:	1f 4f       	sbci	r17, 0xFF	; 255
    2eae:	a5 01       	movw	r20, r10
    2eb0:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__ultoa_invert>
    2eb4:	c8 2e       	mov	r12, r24
    2eb6:	ca 18       	sub	r12, r10
    2eb8:	3d 2c       	mov	r3, r13
    2eba:	e8 94       	clt
    2ebc:	37 f8       	bld	r3, 7
    2ebe:	52 cf       	rjmp	.-348    	; 0x2d64 <vfprintf+0x238>
    2ec0:	60 81       	ld	r22, Z
    2ec2:	71 81       	ldd	r23, Z+1	; 0x01
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	0e 5f       	subi	r16, 0xFE	; 254
    2eca:	1f 4f       	sbci	r17, 0xFF	; 255
    2ecc:	f0 cf       	rjmp	.-32     	; 0x2eae <vfprintf+0x382>
    2ece:	42 fc       	sbrc	r4, 2
    2ed0:	02 c0       	rjmp	.+4      	; 0x2ed6 <vfprintf+0x3aa>
    2ed2:	83 94       	inc	r8
    2ed4:	63 cf       	rjmp	.-314    	; 0x2d9c <vfprintf+0x270>
    2ed6:	83 94       	inc	r8
    2ed8:	83 94       	inc	r8
    2eda:	60 cf       	rjmp	.-320    	; 0x2d9c <vfprintf+0x270>
    2edc:	84 2d       	mov	r24, r4
    2ede:	86 78       	andi	r24, 0x86	; 134
    2ee0:	09 f4       	brne	.+2      	; 0x2ee4 <vfprintf+0x3b8>
    2ee2:	5c cf       	rjmp	.-328    	; 0x2d9c <vfprintf+0x270>
    2ee4:	f6 cf       	rjmp	.-20     	; 0x2ed2 <vfprintf+0x3a6>
    2ee6:	b7 01       	movw	r22, r14
    2ee8:	80 e2       	ldi	r24, 0x20	; 32
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <fputc>
    2ef0:	83 94       	inc	r8
    2ef2:	82 14       	cp	r8, r2
    2ef4:	c0 f3       	brcs	.-16     	; 0x2ee6 <vfprintf+0x3ba>
    2ef6:	51 2c       	mov	r5, r1
    2ef8:	5e cf       	rjmp	.-324    	; 0x2db6 <vfprintf+0x28a>
    2efa:	52 2c       	mov	r5, r2
    2efc:	58 18       	sub	r5, r8
    2efe:	82 14       	cp	r8, r2
    2f00:	08 f4       	brcc	.+2      	; 0x2f04 <vfprintf+0x3d8>
    2f02:	59 cf       	rjmp	.-334    	; 0x2db6 <vfprintf+0x28a>
    2f04:	f8 cf       	rjmp	.-16     	; 0x2ef6 <vfprintf+0x3ca>
    2f06:	84 2d       	mov	r24, r4
    2f08:	86 78       	andi	r24, 0x86	; 134
    2f0a:	09 f4       	brne	.+2      	; 0x2f0e <vfprintf+0x3e2>
    2f0c:	66 cf       	rjmp	.-308    	; 0x2dda <vfprintf+0x2ae>
    2f0e:	8b e2       	ldi	r24, 0x2B	; 43
    2f10:	41 fe       	sbrs	r4, 1
    2f12:	80 e2       	ldi	r24, 0x20	; 32
    2f14:	47 fc       	sbrc	r4, 7
    2f16:	8d e2       	ldi	r24, 0x2D	; 45
    2f18:	b7 01       	movw	r22, r14
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	5c cf       	rjmp	.-328    	; 0x2dd6 <vfprintf+0x2aa>
    2f1e:	b7 01       	movw	r22, r14
    2f20:	80 e3       	ldi	r24, 0x30	; 48
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <fputc>
    2f28:	9a 94       	dec	r9
    2f2a:	57 cf       	rjmp	.-338    	; 0x2dda <vfprintf+0x2ae>
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	9f ef       	ldi	r25, 0xFF	; 255
    2f30:	84 cf       	rjmp	.-248    	; 0x2e3a <vfprintf+0x30e>

00002f32 <strnlen_P>:
strnlen_P():
    2f32:	fc 01       	movw	r30, r24
    2f34:	05 90       	lpm	r0, Z+
    2f36:	61 50       	subi	r22, 0x01	; 1
    2f38:	70 40       	sbci	r23, 0x00	; 0
    2f3a:	01 10       	cpse	r0, r1
    2f3c:	d8 f7       	brcc	.-10     	; 0x2f34 <strnlen_P+0x2>
    2f3e:	80 95       	com	r24
    2f40:	90 95       	com	r25
    2f42:	8e 0f       	add	r24, r30
    2f44:	9f 1f       	adc	r25, r31
    2f46:	08 95       	ret

00002f48 <strnlen>:
strnlen():
    2f48:	fc 01       	movw	r30, r24
    2f4a:	61 50       	subi	r22, 0x01	; 1
    2f4c:	70 40       	sbci	r23, 0x00	; 0
    2f4e:	01 90       	ld	r0, Z+
    2f50:	01 10       	cpse	r0, r1
    2f52:	d8 f7       	brcc	.-10     	; 0x2f4a <strnlen+0x2>
    2f54:	80 95       	com	r24
    2f56:	90 95       	com	r25
    2f58:	8e 0f       	add	r24, r30
    2f5a:	9f 1f       	adc	r25, r31
    2f5c:	08 95       	ret

00002f5e <fputc>:
fputc():
    2f5e:	0f 93       	push	r16
    2f60:	1f 93       	push	r17
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
    2f66:	18 2f       	mov	r17, r24
    2f68:	09 2f       	mov	r16, r25
    2f6a:	eb 01       	movw	r28, r22
    2f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6e:	81 fd       	sbrc	r24, 1
    2f70:	09 c0       	rjmp	.+18     	; 0x2f84 <fputc+0x26>
    2f72:	1f ef       	ldi	r17, 0xFF	; 255
    2f74:	0f ef       	ldi	r16, 0xFF	; 255
    2f76:	81 2f       	mov	r24, r17
    2f78:	90 2f       	mov	r25, r16
    2f7a:	df 91       	pop	r29
    2f7c:	cf 91       	pop	r28
    2f7e:	1f 91       	pop	r17
    2f80:	0f 91       	pop	r16
    2f82:	08 95       	ret
    2f84:	82 ff       	sbrs	r24, 2
    2f86:	14 c0       	rjmp	.+40     	; 0x2fb0 <fputc+0x52>
    2f88:	2e 81       	ldd	r18, Y+6	; 0x06
    2f8a:	3f 81       	ldd	r19, Y+7	; 0x07
    2f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f90:	28 17       	cp	r18, r24
    2f92:	39 07       	cpc	r19, r25
    2f94:	3c f4       	brge	.+14     	; 0x2fa4 <fputc+0x46>
    2f96:	e8 81       	ld	r30, Y
    2f98:	f9 81       	ldd	r31, Y+1	; 0x01
    2f9a:	cf 01       	movw	r24, r30
    2f9c:	01 96       	adiw	r24, 0x01	; 1
    2f9e:	99 83       	std	Y+1, r25	; 0x01
    2fa0:	88 83       	st	Y, r24
    2fa2:	10 83       	st	Z, r17
    2fa4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fa8:	01 96       	adiw	r24, 0x01	; 1
    2faa:	9f 83       	std	Y+7, r25	; 0x07
    2fac:	8e 83       	std	Y+6, r24	; 0x06
    2fae:	e3 cf       	rjmp	.-58     	; 0x2f76 <fputc+0x18>
    2fb0:	e8 85       	ldd	r30, Y+8	; 0x08
    2fb2:	f9 85       	ldd	r31, Y+9	; 0x09
    2fb4:	81 2f       	mov	r24, r17
    2fb6:	09 95       	icall
    2fb8:	89 2b       	or	r24, r25
    2fba:	a1 f3       	breq	.-24     	; 0x2fa4 <fputc+0x46>
    2fbc:	da cf       	rjmp	.-76     	; 0x2f72 <fputc+0x14>

00002fbe <__ultoa_invert>:
__ultoa_invert():
    2fbe:	fa 01       	movw	r30, r20
    2fc0:	aa 27       	eor	r26, r26
    2fc2:	28 30       	cpi	r18, 0x08	; 8
    2fc4:	51 f1       	breq	.+84     	; 0x301a <__ultoa_invert+0x5c>
    2fc6:	20 31       	cpi	r18, 0x10	; 16
    2fc8:	81 f1       	breq	.+96     	; 0x302a <__ultoa_invert+0x6c>
    2fca:	e8 94       	clt
    2fcc:	6f 93       	push	r22
    2fce:	6e 7f       	andi	r22, 0xFE	; 254
    2fd0:	6e 5f       	subi	r22, 0xFE	; 254
    2fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd4:	8f 4f       	sbci	r24, 0xFF	; 255
    2fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd8:	af 4f       	sbci	r26, 0xFF	; 255
    2fda:	b1 e0       	ldi	r27, 0x01	; 1
    2fdc:	3e d0       	rcall	.+124    	; 0x305a <__ultoa_invert+0x9c>
    2fde:	b4 e0       	ldi	r27, 0x04	; 4
    2fe0:	3c d0       	rcall	.+120    	; 0x305a <__ultoa_invert+0x9c>
    2fe2:	67 0f       	add	r22, r23
    2fe4:	78 1f       	adc	r23, r24
    2fe6:	89 1f       	adc	r24, r25
    2fe8:	9a 1f       	adc	r25, r26
    2fea:	a1 1d       	adc	r26, r1
    2fec:	68 0f       	add	r22, r24
    2fee:	79 1f       	adc	r23, r25
    2ff0:	8a 1f       	adc	r24, r26
    2ff2:	91 1d       	adc	r25, r1
    2ff4:	a1 1d       	adc	r26, r1
    2ff6:	6a 0f       	add	r22, r26
    2ff8:	71 1d       	adc	r23, r1
    2ffa:	81 1d       	adc	r24, r1
    2ffc:	91 1d       	adc	r25, r1
    2ffe:	a1 1d       	adc	r26, r1
    3000:	20 d0       	rcall	.+64     	; 0x3042 <__ultoa_invert+0x84>
    3002:	09 f4       	brne	.+2      	; 0x3006 <__ultoa_invert+0x48>
    3004:	68 94       	set
    3006:	3f 91       	pop	r19
    3008:	2a e0       	ldi	r18, 0x0A	; 10
    300a:	26 9f       	mul	r18, r22
    300c:	11 24       	eor	r1, r1
    300e:	30 19       	sub	r19, r0
    3010:	30 5d       	subi	r19, 0xD0	; 208
    3012:	31 93       	st	Z+, r19
    3014:	de f6       	brtc	.-74     	; 0x2fcc <__ultoa_invert+0xe>
    3016:	cf 01       	movw	r24, r30
    3018:	08 95       	ret
    301a:	46 2f       	mov	r20, r22
    301c:	47 70       	andi	r20, 0x07	; 7
    301e:	40 5d       	subi	r20, 0xD0	; 208
    3020:	41 93       	st	Z+, r20
    3022:	b3 e0       	ldi	r27, 0x03	; 3
    3024:	0f d0       	rcall	.+30     	; 0x3044 <__ultoa_invert+0x86>
    3026:	c9 f7       	brne	.-14     	; 0x301a <__ultoa_invert+0x5c>
    3028:	f6 cf       	rjmp	.-20     	; 0x3016 <__ultoa_invert+0x58>
    302a:	46 2f       	mov	r20, r22
    302c:	4f 70       	andi	r20, 0x0F	; 15
    302e:	40 5d       	subi	r20, 0xD0	; 208
    3030:	4a 33       	cpi	r20, 0x3A	; 58
    3032:	18 f0       	brcs	.+6      	; 0x303a <__ultoa_invert+0x7c>
    3034:	49 5d       	subi	r20, 0xD9	; 217
    3036:	31 fd       	sbrc	r19, 1
    3038:	40 52       	subi	r20, 0x20	; 32
    303a:	41 93       	st	Z+, r20
    303c:	02 d0       	rcall	.+4      	; 0x3042 <__ultoa_invert+0x84>
    303e:	a9 f7       	brne	.-22     	; 0x302a <__ultoa_invert+0x6c>
    3040:	ea cf       	rjmp	.-44     	; 0x3016 <__ultoa_invert+0x58>
    3042:	b4 e0       	ldi	r27, 0x04	; 4
    3044:	a6 95       	lsr	r26
    3046:	97 95       	ror	r25
    3048:	87 95       	ror	r24
    304a:	77 95       	ror	r23
    304c:	67 95       	ror	r22
    304e:	ba 95       	dec	r27
    3050:	c9 f7       	brne	.-14     	; 0x3044 <__ultoa_invert+0x86>
    3052:	00 97       	sbiw	r24, 0x00	; 0
    3054:	61 05       	cpc	r22, r1
    3056:	71 05       	cpc	r23, r1
    3058:	08 95       	ret
    305a:	9b 01       	movw	r18, r22
    305c:	ac 01       	movw	r20, r24
    305e:	0a 2e       	mov	r0, r26
    3060:	06 94       	lsr	r0
    3062:	57 95       	ror	r21
    3064:	47 95       	ror	r20
    3066:	37 95       	ror	r19
    3068:	27 95       	ror	r18
    306a:	ba 95       	dec	r27
    306c:	c9 f7       	brne	.-14     	; 0x3060 <__ultoa_invert+0xa2>
    306e:	62 0f       	add	r22, r18
    3070:	73 1f       	adc	r23, r19
    3072:	84 1f       	adc	r24, r20
    3074:	95 1f       	adc	r25, r21
    3076:	a0 1d       	adc	r26, r0
    3078:	08 95       	ret

0000307a <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    307a:	f8 94       	cli

0000307c <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    307c:	ff cf       	rjmp	.-2      	; 0x307c <__stop_program>
