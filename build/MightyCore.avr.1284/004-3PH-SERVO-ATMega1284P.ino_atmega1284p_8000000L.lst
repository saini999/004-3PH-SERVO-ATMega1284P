
C:\Users\Admin\AppData\Local\Temp\arduino-sketch-F080B17A2320CF8E17961042ADCE1DFB/004-3PH-SERVO-ATMega1284P.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__vector_18>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      68:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      6c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      70:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      74:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      78:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      7c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      80:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      84:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      88:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	21 00       	.word	0x0021	; ????
      90:	24 00       	.word	0x0024	; ????
      92:	27 00       	.word	0x0027	; ????
      94:	2a 00       	.word	0x002a	; ????

00000096 <port_to_output_PGM>:
      96:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

000000a0 <digital_pin_to_timer_PGM>:
      a0:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

000000c0 <characterArray>:
      c0:	7e 30 6d 79 33 5b 5f 70 7f 7b 77 1f 4e 3d 4f 47     ~0my3[_p.{w.N=OG
	...
      e0:	00 00 22 00 00 00 00 20 4e 78 00 00 04 01 00 00     ..".... Nx......
      f0:	7e 30 6d 79 33 5b 5f 70 7f 7b 00 00 00 00 00 00     ~0my3[_p.{......
     100:	00 77 1f 4e 3d 4f 47 5e 37 30 38 00 0e 00 15 7e     .w.N=OG^708....~
     110:	67 73 05 5b 0f 3e 00 00 00 3b 00 4e 00 78 00 08     gs.[.>...;.N.x..
     120:	02 77 1f 0d 3d 6f 47 5e 17 10 38 00 30 00 15 1d     .w..=oG^..8.0...
     130:	67 73 05 5b 0f 1c 00 00 00 00 00 00 00 00 00 00     gs.[............

00000140 <port_to_input_PGM>:
     140:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

0000014a <digital_pin_to_port_PGM>:
     14a:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     15a:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

0000016a <digital_pin_to_bit_mask_PGM>:
     16a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     17a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

0000018a <__ctors_start>:
__ctors_start():
     18a:	39 11       	cpse	r19, r9

0000018c <__ctors_end>:
__dtors_end():
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	d0 e4       	ldi	r29, 0x40	; 64
     194:	de bf       	out	0x3e, r29	; 62
     196:	cd bf       	out	0x3d, r28	; 61

00000198 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     198:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     19a:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     19c:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     19e:	e0 e0       	ldi	r30, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     1a0:	f2 e3       	ldi	r31, 0x32	; 50
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     1a2:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     1a4:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     1a8:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     1aa:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     1ac:	ac 3a       	cpi	r26, 0xAC	; 172
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     1ae:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0x10>

000001b2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1b2:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1b4:	ac ea       	ldi	r26, 0xAC	; 172
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1bc:	a2 3c       	cpi	r26, 0xC2	; 194
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1be:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>

000001c2 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     1c2:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     1c4:	c6 ec       	ldi	r28, 0xC6	; 198
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     1c6:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     1ca:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     1cc:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1ce:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1d2:	c5 3c       	cpi	r28, 0xC5	; 197
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1d4:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1d6:	c9 f7       	brne	.-14     	; 0x1ca <__do_global_ctors+0x8>
     1d8:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <main>
     1dc:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <_exit>

000001e0 <__bad_interrupt>:
__vector_22():
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <turnOffPWM>:
turnOffPWM():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     1e4:	82 50       	subi	r24, 0x02	; 2
     1e6:	8a 30       	cpi	r24, 0x0A	; 10
     1e8:	88 f5       	brcc	.+98     	; 0x24c <turnOffPWM+0x68>
     1ea:	e8 2f       	mov	r30, r24
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	e5 50       	subi	r30, 0x05	; 5
     1f0:	ff 4f       	sbci	r31, 0xFF	; 255
     1f2:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__tablejump2__>
     1f6:	23 01       	movw	r4, r6
     1f8:	27 01       	movw	r4, r14
     1fa:	05 01       	movw	r0, r10
     1fc:	0b 01       	movw	r0, r22
     1fe:	26 01       	movw	r4, r12
     200:	26 01       	movw	r4, r12
     202:	0f 01       	movw	r0, r30
     204:	15 01       	movw	r2, r10
     206:	19 01       	movw	r2, r18
     208:	1f 01       	movw	r2, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     20a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     20e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     210:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     214:	08 95       	ret
     216:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     21a:	8f 7d       	andi	r24, 0xDF	; 223
     21c:	f9 cf       	rjmp	.-14     	; 0x210 <turnOffPWM+0x2c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     21e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     222:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     224:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     228:	08 95       	ret
     22a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     22e:	8f 7d       	andi	r24, 0xDF	; 223
     230:	f9 cf       	rjmp	.-14     	; 0x224 <turnOffPWM+0x40>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     232:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     236:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     238:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     23c:	08 95       	ret
     23e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     242:	8f 7d       	andi	r24, 0xDF	; 223
     244:	f9 cf       	rjmp	.-14     	; 0x238 <turnOffPWM+0x54>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     246:	84 b5       	in	r24, 0x24	; 36
     248:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     24a:	84 bd       	out	0x24, r24	; 36
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     24c:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     24e:	84 b5       	in	r24, 0x24	; 36
     250:	8f 7d       	andi	r24, 0xDF	; 223
     252:	fb cf       	rjmp	.-10     	; 0x24a <turnOffPWM+0x66>

00000254 <digitalWrite>:
digitalWrite():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     25a:	28 2f       	mov	r18, r24
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	e0 56       	subi	r30, 0x60	; 96
     262:	ff 4f       	sbci	r31, 0xFF	; 255
     264:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     266:	f9 01       	movw	r30, r18
     268:	e6 59       	subi	r30, 0x96	; 150
     26a:	fe 4f       	sbci	r31, 0xFE	; 254
     26c:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     26e:	f9 01       	movw	r30, r18
     270:	e6 5b       	subi	r30, 0xB6	; 182
     272:	fe 4f       	sbci	r31, 0xFE	; 254
     274:	c4 91       	lpm	r28, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     276:	cc 23       	and	r28, r28
     278:	a9 f0       	breq	.+42     	; 0x2a4 <digitalWrite+0x50>
     27a:	16 2f       	mov	r17, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     27c:	81 11       	cpse	r24, r1
     27e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <turnOffPWM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     282:	ec 2f       	mov	r30, r28
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	ee 0f       	add	r30, r30
     288:	ff 1f       	adc	r31, r31
     28a:	ea 56       	subi	r30, 0x6A	; 106
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	a5 91       	lpm	r26, Z+
     290:	b4 91       	lpm	r27, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     292:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     294:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     296:	ec 91       	ld	r30, X
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     298:	11 11       	cpse	r17, r1
     29a:	08 c0       	rjmp	.+16     	; 0x2ac <digitalWrite+0x58>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     29c:	d0 95       	com	r29
     29e:	de 23       	and	r29, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     2a0:	dc 93       	st	X, r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     2a2:	8f bf       	out	0x3f, r24	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     2ac:	de 2b       	or	r29, r30
     2ae:	f8 cf       	rjmp	.-16     	; 0x2a0 <digitalWrite+0x4c>

000002b0 <pinMode>:
pinMode():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	fc 01       	movw	r30, r24
     2b8:	e6 59       	subi	r30, 0x96	; 150
     2ba:	fe 4f       	sbci	r31, 0xFE	; 254
     2bc:	24 91       	lpm	r18, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     2be:	86 5b       	subi	r24, 0xB6	; 182
     2c0:	9e 4f       	sbci	r25, 0xFE	; 254
     2c2:	fc 01       	movw	r30, r24
     2c4:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     2c6:	88 23       	and	r24, r24
     2c8:	d1 f0       	breq	.+52     	; 0x2fe <pinMode+0x4e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	88 0f       	add	r24, r24
     2ce:	99 1f       	adc	r25, r25
     2d0:	fc 01       	movw	r30, r24
     2d2:	e4 57       	subi	r30, 0x74	; 116
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	a5 91       	lpm	r26, Z+
     2d8:	b4 91       	lpm	r27, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     2da:	fc 01       	movw	r30, r24
     2dc:	ea 56       	subi	r30, 0x6A	; 106
     2de:	ff 4f       	sbci	r31, 0xFF	; 255
     2e0:	c5 91       	lpm	r28, Z+
     2e2:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     2e4:	61 11       	cpse	r22, r1
     2e6:	0e c0       	rjmp	.+28     	; 0x304 <pinMode+0x54>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     2e8:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     2ea:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     2ec:	8c 91       	ld	r24, X
     2ee:	e2 2f       	mov	r30, r18
     2f0:	e0 95       	com	r30
     2f2:	8e 23       	and	r24, r30
     2f4:	8c 93       	st	X, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     2f6:	28 81       	ld	r18, Y
     2f8:	e2 23       	and	r30, r18
     2fa:	e8 83       	st	Y, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     2fc:	9f bf       	out	0x3f, r25	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     304:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     306:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     308:	ec 91       	ld	r30, X
     30a:	e2 2b       	or	r30, r18
     30c:	ec 93       	st	X, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     30e:	8f bf       	out	0x3f, r24	; 63
     310:	f6 cf       	rjmp	.-20     	; 0x2fe <pinMode+0x4e>

00000312 <analogRead>:
analogRead():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
     312:	88 51       	subi	r24, 0x18	; 24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     314:	80 64       	ori	r24, 0x40	; 64
     316:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     31a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     31e:	80 64       	ori	r24, 0x40	; 64
     320:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
     324:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     328:	86 fd       	sbrc	r24, 6
     32a:	fc cf       	rjmp	.-8      	; 0x324 <analogRead+0x12>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
     32c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
     330:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
     334:	08 95       	ret

00000336 <delayMicroseconds>:
delayMicroseconds():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
     336:	00 00       	nop
     338:	00 00       	nop
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:767
    "nop" "\n\t"
    "nop"); //just waiting 2 cycles

  // for a 1 and 2 microsecond delay, simply return.  the overhead
  // of the function call takes 16 (18) cycles, which is 2us
  if (us <= 2) return; // = 3 cycles, (4 when true)
     33a:	83 30       	cpi	r24, 0x03	; 3
     33c:	91 05       	cpc	r25, r1
     33e:	28 f0       	brcs	.+10     	; 0x34a <delayMicroseconds+0x14>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:772

  // the following loop takes 1/2 of a microsecond (4 cycles)
  // per iteration, so execute it twice for each microsecond of
  // delay requested.
  us <<= 1; //x2 us, = 2 cycles
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:777

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
     344:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <delayMicroseconds+0x10>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     34a:	08 95       	ret

0000034c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]>:
DisplayString():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:189
/*******************************************************************************************/
//Given a string such as "-A32", we display -A32
//Each digit is displayed for ~2000us, and cycles through the 4 digits
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
     34c:	6f 92       	push	r6
     34e:	7f 92       	push	r7
     350:	9f 92       	push	r9
     352:	bf 92       	push	r11
     354:	cf 92       	push	r12
     356:	df 92       	push	r13
     358:	ef 92       	push	r14
     35a:	ff 92       	push	r15
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	7c 01       	movw	r14, r24
     364:	96 2e       	mov	r9, r22
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:192
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     366:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:238
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
		}
		//Service the decimal point, apostrophe and colon
		if ((DecAposColon & (1<<(digit-1))) && (digit < 5)) //Test DecAposColon to see if we need to turn on a decimal point
     368:	c6 2e       	mov	r12, r22
     36a:	d1 2c       	mov	r13, r1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:273
			  digitalWrite(digit4, DigitOff);
			  break;
			//This only currently works for 4 digits
		}
		// The display is on for microSeconds(brightnessLevel + 1), now turn off for the remainder of the framePeriod
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     36c:	81 ed       	ldi	r24, 0xD1	; 209
     36e:	68 2e       	mov	r6, r24
     370:	87 e0       	ldi	r24, 0x07	; 7
     372:	78 2e       	mov	r7, r24
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:192
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     374:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <display1+0x15>
     378:	81 17       	cp	r24, r17
     37a:	08 f4       	brcc	.+2      	; 0x37e <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]+0x32>
     37c:	0d c1       	rjmp	.+538    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
	{
		switch(digit)
     37e:	c1 2f       	mov	r28, r17
     380:	d0 e0       	ldi	r29, 0x00	; 0
     382:	12 30       	cpi	r17, 0x02	; 2
     384:	09 f4       	brne	.+2      	; 0x388 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]+0x3c>
     386:	55 c0       	rjmp	.+170    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     388:	08 f0       	brcs	.+2      	; 0x38c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]+0x40>
     38a:	47 c0       	rjmp	.+142    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:197
		{
			case 1:
				digitalWrite(digit1, DigitOn);
     38c:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <display1+0x1>
     390:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <display1+0x5>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     394:	11 30       	cpi	r17, 0x01	; 1
     396:	09 f4       	brne	.+2      	; 0x39a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]+0x4e>
     398:	49 c0       	rjmp	.+146    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:215

		//Here we access the array of segments
		//This could be cleaned up a bit but it works
		//displayCharacter(toDisplay[digit-1]); //Now display this digit
		// displayArray (defined in SevSeg.h) decides which segments are turned on for each number or symbol
		unsigned char characterToDisplay = toDisplay[digit-1];
     39a:	f7 01       	movw	r30, r14
     39c:	ec 0f       	add	r30, r28
     39e:	fd 1f       	adc	r31, r29
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	b0 80       	ld	r11, Z
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:216
		if (characterToDisplay & 0x80)	// bit 7 enables bit-per-segment control
     3a4:	b7 fe       	sbrs	r11, 7
     3a6:	4f c0       	rjmp	.+158    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:218
		{	// Each bit of characterToDisplay turns on a single segment (from A-to-G)
			if (characterToDisplay & 0x01) digitalWrite(segmentA, SegOn);
     3a8:	b0 fe       	sbrs	r11, 0
     3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]+0x6c>
     3ac:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     3b0:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <display1+0xd>
     3b4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:219
			if (characterToDisplay & 0x02) digitalWrite(segmentB, SegOn);
     3b8:	b1 fe       	sbrs	r11, 1
     3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]+0x7c>
     3bc:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     3c0:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <display1+0xe>
     3c4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:220
			if (characterToDisplay & 0x04) digitalWrite(segmentC, SegOn);
     3c8:	b2 fe       	sbrs	r11, 2
     3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]+0x8c>
     3cc:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     3d0:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <display1+0xf>
     3d4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:221
			if (characterToDisplay & 0x08) digitalWrite(segmentD, SegOn);
     3d8:	b3 fe       	sbrs	r11, 3
     3da:	06 c0       	rjmp	.+12     	; 0x3e8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]+0x9c>
     3dc:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     3e0:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <display1+0x10>
     3e4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:222
			if (characterToDisplay & 0x10) digitalWrite(segmentE, SegOn);
     3e8:	b4 fe       	sbrs	r11, 4
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]+0xac>
     3ec:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     3f0:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <display1+0x11>
     3f4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:223
			if (characterToDisplay & 0x20) digitalWrite(segmentF, SegOn);
     3f8:	b5 fe       	sbrs	r11, 5
     3fa:	06 c0       	rjmp	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3fc:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     400:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <display1+0x12>
     404:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:224
			if (characterToDisplay & 0x40) digitalWrite(segmentG, SegOn);
     408:	b6 fe       	sbrs	r11, 6
     40a:	54 c0       	rjmp	.+168    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:235
			if (chr & (1<<5)) digitalWrite(segmentB, SegOn);
			if (chr & (1<<4)) digitalWrite(segmentC, SegOn);
			if (chr & (1<<3)) digitalWrite(segmentD, SegOn);
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
     40c:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     410:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <display1+0x13>
     414:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
     418:	4d c0       	rjmp	.+154    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     41a:	13 30       	cpi	r17, 0x03	; 3
     41c:	79 f0       	breq	.+30     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:206
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
				break;
			case 4:
				digitalWrite(digit4, DigitOn);
     41e:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <display1+0x1>
     422:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <display1+0x8>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     426:	14 30       	cpi	r17, 0x04	; 4
     428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	b7 cf       	rjmp	.-146    	; 0x39a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]+0x4e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:206
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
				break;
			case 4:
				digitalWrite(digit4, DigitOn);
     42c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
     430:	b4 cf       	rjmp	.-152    	; 0x39a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]+0x4e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:200
		{
			case 1:
				digitalWrite(digit1, DigitOn);
				break;
			case 2:
				digitalWrite(digit2, DigitOn);
     432:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <display1+0x1>
     436:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <display1+0x6>
     43a:	f8 cf       	rjmp	.-16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:203
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
     43c:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <display1+0x1>
     440:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <display1+0x7>
     444:	f3 cf       	rjmp	.-26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:228
			if (characterToDisplay & 0x20) digitalWrite(segmentF, SegOn);
			if (characterToDisplay & 0x40) digitalWrite(segmentG, SegOn);
		}
		else
		{
			const uint8_t chr = pgm_read_byte(&characterArray[characterToDisplay]);
     446:	eb 2d       	mov	r30, r11
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	e0 54       	subi	r30, 0x40	; 64
     44c:	ff 4f       	sbci	r31, 0xFF	; 255
     44e:	b4 90       	lpm	r11, Z
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:229
			if (chr & (1<<6)) digitalWrite(segmentA, SegOn);
     450:	b6 fe       	sbrs	r11, 6
     452:	06 c0       	rjmp	.+12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     454:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     458:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <display1+0xd>
     45c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:230
			if (chr & (1<<5)) digitalWrite(segmentB, SegOn);
     460:	b5 fe       	sbrs	r11, 5
     462:	06 c0       	rjmp	.+12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     464:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     468:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <display1+0xe>
     46c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:231
			if (chr & (1<<4)) digitalWrite(segmentC, SegOn);
     470:	b4 fe       	sbrs	r11, 4
     472:	06 c0       	rjmp	.+12     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     474:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     478:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <display1+0xf>
     47c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:232
			if (chr & (1<<3)) digitalWrite(segmentD, SegOn);
     480:	b3 fe       	sbrs	r11, 3
     482:	06 c0       	rjmp	.+12     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     484:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     488:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <display1+0x10>
     48c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:233
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
     490:	b2 fe       	sbrs	r11, 2
     492:	06 c0       	rjmp	.+12     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     494:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     498:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <display1+0x11>
     49c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:234
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
     4a0:	b1 fe       	sbrs	r11, 1
     4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4a4:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     4a8:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <display1+0x12>
     4ac:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:235
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
     4b0:	b0 fc       	sbrc	r11, 0
     4b2:	ac cf       	rjmp	.-168    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:238
		}
		//Service the decimal point, apostrophe and colon
		if ((DecAposColon & (1<<(digit-1))) && (digit < 5)) //Test DecAposColon to see if we need to turn on a decimal point
     4b4:	21 97       	sbiw	r28, 0x01	; 1
     4b6:	c6 01       	movw	r24, r12
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4ba:	95 95       	asr	r25
     4bc:	87 95       	ror	r24
     4be:	ca 95       	dec	r28
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4c2:	80 ff       	sbrs	r24, 0
     4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4c6:	15 30       	cpi	r17, 0x05	; 5
     4c8:	30 f4       	brcc	.+12     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:239
			digitalWrite(segmentDP, SegOn);
     4ca:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     4ce:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <display1+0x14>
     4d2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:241

		delayMicroseconds(brightnessDelay + 1); //Display this digit for a fraction of a second (between 1us and 5000us, 500-2000 is pretty good)
     4d6:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <display1+0x16>
     4da:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <display1+0x17>
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	0e 94 9b 01 	call	0x336	; 0x336 <delayMicroseconds>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:246
		//The + 1 is a bit of a hack but it removes the possible zero display (0 causes display to become bright and flickery)
		//If you set this too long, the display will start to flicker. Set it to 25000 for some fun.

		//Turn off all segments
		digitalWrite(segmentA, SegOff);
     4e4:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <display1+0x4>
     4e8:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <display1+0xd>
     4ec:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:247
		digitalWrite(segmentB, SegOff);
     4f0:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <display1+0x4>
     4f4:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <display1+0xe>
     4f8:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:248
		digitalWrite(segmentC, SegOff);
     4fc:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <display1+0x4>
     500:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <display1+0xf>
     504:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:249
		digitalWrite(segmentD, SegOff);
     508:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <display1+0x4>
     50c:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <display1+0x10>
     510:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:250
		digitalWrite(segmentE, SegOff);
     514:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <display1+0x4>
     518:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <display1+0x11>
     51c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:251
		digitalWrite(segmentF, SegOff);
     520:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <display1+0x4>
     524:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <display1+0x12>
     528:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:252
		digitalWrite(segmentG, SegOff);
     52c:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <display1+0x4>
     530:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <display1+0x13>
     534:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:253
		digitalWrite(segmentDP, SegOff);
     538:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <display1+0x4>
     53c:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <display1+0x14>
     540:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256

		//Turn off this digit
		switch(digit)
     544:	12 30       	cpi	r17, 0x02	; 2
     546:	f1 f0       	breq	.+60     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     548:	90 f4       	brcc	.+36     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:259
		{
			case 1:
			  digitalWrite(digit1, DigitOff);
     54a:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <display1+0x2>
     54e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <display1+0x5>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     552:	11 30       	cpi	r17, 0x01	; 1
     554:	a1 f0       	breq	.+40     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:273
			  digitalWrite(digit4, DigitOff);
			  break;
			//This only currently works for 4 digits
		}
		// The display is on for microSeconds(brightnessLevel + 1), now turn off for the remainder of the framePeriod
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     556:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <display1+0x16>
     55a:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <display1+0x17>
     55e:	93 01       	movw	r18, r6
     560:	28 1b       	sub	r18, r24
     562:	39 0b       	sbc	r19, r25
     564:	c9 01       	movw	r24, r18
     566:	0e 94 9b 01 	call	0x336	; 0x336 <delayMicroseconds>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:192
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     56a:	1f 5f       	subi	r17, 0xFF	; 255
     56c:	03 cf       	rjmp	.-506    	; 0x374 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]+0x28>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     56e:	13 30       	cpi	r17, 0x03	; 3
     570:	71 f0       	breq	.+28     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:268
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
			  break;
			case 4:
			  digitalWrite(digit4, DigitOff);
     572:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <display1+0x2>
     576:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <display1+0x8>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     57a:	14 30       	cpi	r17, 0x04	; 4
     57c:	61 f7       	brne	.-40     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:268
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
			  break;
			case 4:
			  digitalWrite(digit4, DigitOff);
     57e:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
     582:	e9 cf       	rjmp	.-46     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:262
		{
			case 1:
			  digitalWrite(digit1, DigitOff);
			  break;
			case 2:
			  digitalWrite(digit2, DigitOff);
     584:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <display1+0x2>
     588:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <display1+0x6>
     58c:	f8 cf       	rjmp	.-16     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:265
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
     58e:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <display1+0x2>
     592:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <display1+0x7>
     596:	f3 cf       	rjmp	.-26     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:279
	}

	//After we've gone through the digits, we control the colon and apostrophe (if the display supports it)

	//Turn on the colon and/or apostrophe
	if ((digitColon != 255) || (digitApostrophe != 255))
     598:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <display1+0xa>
     59c:	8f 3f       	cpi	r24, 0xFF	; 255
     59e:	29 f4       	brne	.+10     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5a0:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <display1+0x9>
     5a4:	9f 3f       	cpi	r25, 0xFF	; 255
     5a6:	09 f4       	brne	.+2      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5a8:	4e c0       	rjmp	.+156    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:281
	{
		if (DecAposColon & (1<<4)) //Test to see if we need to turn on the Colon
     5aa:	94 fe       	sbrs	r9, 4
     5ac:	0a c0       	rjmp	.+20     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:283
		{
			digitalWrite(digitColon, DigitOn);
     5ae:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <display1+0x1>
     5b2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:284
			digitalWrite(segmentColon, SegOn);
     5b6:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     5ba:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <display1+0xc>
     5be:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:286
		}
		if (DecAposColon & (1<<5)) //Test DecAposColon to see if we need to turn on Apostrophe
     5c2:	95 fe       	sbrs	r9, 5
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:288
		{
			digitalWrite(digitApostrophe, DigitOn);
     5c6:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <display1+0x1>
     5ca:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <display1+0x9>
     5ce:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:289
			digitalWrite(segmentApostrophe, SegOn);
     5d2:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <display1+0x3>
     5d6:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <display1+0xb>
     5da:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:291
		}
		delayMicroseconds(brightnessDelay + 1); //Display this digit for a fraction of a second (between 1us and 5000us, 500-2000 is pretty good)
     5de:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <display1+0x16>
     5e2:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <display1+0x17>
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	0e 94 9b 01 	call	0x336	; 0x336 <delayMicroseconds>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:294

		//Turn off the colon and/or apostrophe
		digitalWrite(digitColon, DigitOff);
     5ec:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <display1+0x2>
     5f0:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <display1+0xa>
     5f4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:295
		digitalWrite(segmentColon, SegOff);
     5f8:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <display1+0x4>
     5fc:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <display1+0xc>
     600:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:296
		digitalWrite(digitApostrophe, DigitOff);
     604:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <display1+0x2>
     608:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <display1+0x9>
     60c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:297
		digitalWrite(segmentApostrophe, SegOff);
     610:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <display1+0x4>
     614:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <display1+0xb>
     618:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:298
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     61c:	20 91 89 02 	lds	r18, 0x0289	; 0x800289 <display1+0x16>
     620:	30 91 8a 02 	lds	r19, 0x028A	; 0x80028a <display1+0x17>
     624:	81 ed       	ldi	r24, 0xD1	; 209
     626:	97 e0       	ldi	r25, 0x07	; 7
     628:	82 1b       	sub	r24, r18
     62a:	93 0b       	sbc	r25, r19
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:301
	}

}
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	bf 90       	pop	r11
     63c:	9f 90       	pop	r9
     63e:	7f 90       	pop	r7
     640:	6f 90       	pop	r6
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:298
		//Turn off the colon and/or apostrophe
		digitalWrite(digitColon, DigitOff);
		digitalWrite(segmentColon, SegOff);
		digitalWrite(digitApostrophe, DigitOff);
		digitalWrite(segmentApostrophe, SegOff);
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     642:	0c 94 9b 01 	jmp	0x336	; 0x336 <delayMicroseconds>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:301
	}

}
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	bf 90       	pop	r11
     656:	9f 90       	pop	r9
     658:	7f 90       	pop	r7
     65a:	6f 90       	pop	r6
     65c:	08 95       	ret

0000065e <micros>:
micros():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     65e:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     660:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     662:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <timer0_overflow_count>
     666:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <timer0_overflow_count+0x1>
     66a:	a0 91 71 02 	lds	r26, 0x0271	; 0x800271 <timer0_overflow_count+0x2>
     66e:	b0 91 72 02 	lds	r27, 0x0272	; 0x800272 <timer0_overflow_count+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     672:	26 b5       	in	r18, 0x26	; 38
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     674:	a8 9b       	sbis	0x15, 0	; 21
     676:	05 c0       	rjmp	.+10     	; 0x682 <micros+0x24>
     678:	2f 3f       	cpi	r18, 0xFF	; 255
     67a:	19 f0       	breq	.+6      	; 0x682 <micros+0x24>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	a1 1d       	adc	r26, r1
     680:	b1 1d       	adc	r27, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     682:	3f bf       	out	0x3f, r19	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     684:	ba 2f       	mov	r27, r26
     686:	a9 2f       	mov	r26, r25
     688:	98 2f       	mov	r25, r24
     68a:	88 27       	eor	r24, r24
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	62 0f       	add	r22, r18
     692:	71 1d       	adc	r23, r1
     694:	81 1d       	adc	r24, r1
     696:	91 1d       	adc	r25, r1
     698:	43 e0       	ldi	r20, 0x03	; 3
     69a:	66 0f       	add	r22, r22
     69c:	77 1f       	adc	r23, r23
     69e:	88 1f       	adc	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	4a 95       	dec	r20
     6a4:	d1 f7       	brne	.-12     	; 0x69a <micros+0x3c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     6a6:	08 95       	ret

000006a8 <millis>:
millis():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     6a8:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     6aa:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     6ac:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <timer0_millis>
     6b0:	70 91 6c 02 	lds	r23, 0x026C	; 0x80026c <timer0_millis+0x1>
     6b4:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <timer0_millis+0x2>
     6b8:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     6bc:	2f bf       	out	0x3f, r18	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
     6be:	08 95       	ret

000006c0 <BlockNot::reset(unsigned long) [clone .constprop.21]>:
reset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:444
    return result;
}

void BlockNot::switchTo(Unit units) { baseUnits = units; }

void BlockNot::reset(const unsigned long newStartTime) {
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	ec 01       	movw	r28, r24
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:447
   unsigned long finalStartTime = newStartTime;
    if(newStartTime == 0) {
        switch(baseUnits) {
     6ca:	8b 89       	ldd	r24, Y+19	; 0x13
     6cc:	9c 89       	ldd	r25, Y+20	; 0x14
     6ce:	00 97       	sbiw	r24, 0x00	; 0
     6d0:	31 f0       	breq	.+12     	; 0x6de <BlockNot::reset(unsigned long) [clone .constprop.21]+0x1e>
     6d2:	03 97       	sbiw	r24, 0x03	; 3
     6d4:	c0 f0       	brcs	.+48     	; 0x706 <BlockNot::reset(unsigned long) [clone .constprop.21]+0x46>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:445
}

void BlockNot::switchTo(Unit units) { baseUnits = units; }

void BlockNot::reset(const unsigned long newStartTime) {
   unsigned long finalStartTime = newStartTime;
     6d6:	00 e0       	ldi	r16, 0x00	; 0
     6d8:	10 e0       	ldi	r17, 0x00	; 0
     6da:	98 01       	movw	r18, r16
     6dc:	0a c0       	rjmp	.+20     	; 0x6f2 <BlockNot::reset(unsigned long) [clone .constprop.21]+0x32>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:449
    if(newStartTime == 0) {
        switch(baseUnits) {
            case MICROSECONDS:
                finalStartTime = micros() + microsOffset;
     6de:	0e 94 2f 03 	call	0x65e	; 0x65e <micros>
     6e2:	08 85       	ldd	r16, Y+8	; 0x08
     6e4:	19 85       	ldd	r17, Y+9	; 0x09
     6e6:	2a 85       	ldd	r18, Y+10	; 0x0a
     6e8:	3b 85       	ldd	r19, Y+11	; 0x0b
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:452
                break;
            case MILLISECONDS:
                finalStartTime = millis() + millisOffset;
     6ea:	06 0f       	add	r16, r22
     6ec:	17 1f       	adc	r17, r23
     6ee:	28 1f       	adc	r18, r24
     6f0:	39 1f       	adc	r19, r25
resetTimer():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:509
            break;
    }
}

void BlockNot::resetTimer(const unsigned long newStartTime) {
    startTime = newStartTime;
     6f2:	08 83       	st	Y, r16
     6f4:	19 83       	std	Y+1, r17	; 0x01
     6f6:	2a 83       	std	Y+2, r18	; 0x02
     6f8:	3b 83       	std	Y+3, r19	; 0x03
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:510
    onceTriggered = false;
     6fa:	1a 8a       	std	Y+18, r1	; 0x12
reset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:460
                finalStartTime = millis() + millisOffset;
                break;
        }
    }
    resetTimer(finalStartTime);
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	08 95       	ret
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:452
        switch(baseUnits) {
            case MICROSECONDS:
                finalStartTime = micros() + microsOffset;
                break;
            case MILLISECONDS:
                finalStartTime = millis() + millisOffset;
     706:	0e 94 54 03 	call	0x6a8	; 0x6a8 <millis>
     70a:	0c 81       	ldd	r16, Y+4	; 0x04
     70c:	1d 81       	ldd	r17, Y+5	; 0x05
     70e:	2e 81       	ldd	r18, Y+6	; 0x06
     710:	3f 81       	ldd	r19, Y+7	; 0x07
     712:	eb cf       	rjmp	.-42     	; 0x6ea <BlockNot::reset(unsigned long) [clone .constprop.21]+0x2a>

00000714 <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>:
_ZN8BlockNot11setDurationEm4Unitb.part.3():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:189
    if (resetOption) reset();
}

void BlockNot::setDuration(const unsigned long time, Unit inUnits, bool resetOption) {
    initDuration(time, inUnits);
    if (resetOption) reset();
     714:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <BlockNot::reset(unsigned long) [clone .constprop.21]>

00000718 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.20]>:
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:50
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
}

BlockNot::BlockNot(unsigned long time, Unit units) {
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	ec 01       	movw	r28, r24
     722:	1c 82       	std	Y+4, r1	; 0x04
     724:	1d 82       	std	Y+5, r1	; 0x05
     726:	1e 82       	std	Y+6, r1	; 0x06
     728:	1f 82       	std	Y+7, r1	; 0x07
     72a:	18 86       	std	Y+8, r1	; 0x08
     72c:	19 86       	std	Y+9, r1	; 0x09
     72e:	1a 86       	std	Y+10, r1	; 0x0a
     730:	1b 86       	std	Y+11, r1	; 0x0b
     732:	1c 86       	std	Y+12, r1	; 0x0c
     734:	1d 86       	std	Y+13, r1	; 0x0d
     736:	1e 86       	std	Y+14, r1	; 0x0e
     738:	1f 86       	std	Y+15, r1	; 0x0f
     73a:	19 8a       	std	Y+17, r1	; 0x11
     73c:	18 8a       	std	Y+16, r1	; 0x10
     73e:	1a 8a       	std	Y+18, r1	; 0x12
     740:	1e 8e       	std	Y+30, r1	; 0x1e
     742:	1d 8e       	std	Y+29, r1	; 0x1d
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:51
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
     744:	00 91 bc 02 	lds	r16, 0x02BC	; 0x8002bc <BlockNot::global>
     748:	10 91 bd 02 	lds	r17, 0x02BD	; 0x8002bd <BlockNot::global+0x1>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	01 30       	cpi	r16, 0x01	; 1
     752:	11 05       	cpc	r17, r1
     754:	11 f0       	breq	.+4      	; 0x75a <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.20]+0x42>
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <BlockNot::global+0x1>
     75e:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <BlockNot::global>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:52
    baseUnits = units;
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	9c 8b       	std	Y+20, r25	; 0x14
     768:	8b 8b       	std	Y+19, r24	; 0x13
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:489
            break;
        case MILLISECONDS:
            duration.millis = time;
            break;
        case SECONDS:
            duration.seconds = time;
     76a:	cb 01       	movw	r24, r22
     76c:	ba 01       	movw	r22, r20
     76e:	0e 94 aa 11 	call	0x2354	; 0x2354 <__floatunsisf>
     772:	6d 8b       	std	Y+21, r22	; 0x15
     774:	7e 8b       	std	Y+22, r23	; 0x16
     776:	8f 8b       	std	Y+23, r24	; 0x17
     778:	98 8f       	std	Y+24, r25	; 0x18
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:54

BlockNot::BlockNot(unsigned long time, Unit units) {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    baseUnits = units;
    initDuration(time);
    reset();
     77a:	ce 01       	movw	r24, r28
     77c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <BlockNot::reset(unsigned long) [clone .constprop.21]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:55
    if (global == GLOBAL_RESET) addToTimerList();
     780:	01 30       	cpi	r16, 0x01	; 1
     782:	11 05       	cpc	r17, r1
     784:	39 f0       	breq	.+14     	; 0x794 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.20]+0x7c>
     786:	ce 01       	movw	r24, r28
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:56
}
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:55
BlockNot::BlockNot(unsigned long time, Unit units) {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    baseUnits = units;
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
     790:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <BlockNot::addToTimerList()>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:56
}
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	08 95       	ret

0000079e <BlockNot::timeSinceReset()>:
timeSinceReset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:513
void BlockNot::resetTimer(const unsigned long newStartTime) {
    startTime = newStartTime;
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
     79e:	cf 92       	push	r12
     7a0:	df 92       	push	r13
     7a2:	ef 92       	push	r14
     7a4:	ff 92       	push	r15
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	ec 01       	movw	r28, r24
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:515
    unsigned long result = 0L;
    unsigned long millisBase = millisOffset + millis();
     7b0:	cc 80       	ldd	r12, Y+4	; 0x04
     7b2:	dd 80       	ldd	r13, Y+5	; 0x05
     7b4:	ee 80       	ldd	r14, Y+6	; 0x06
     7b6:	ff 80       	ldd	r15, Y+7	; 0x07
     7b8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <millis>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:516
    switch (baseUnits) {
     7bc:	2b 89       	ldd	r18, Y+19	; 0x13
     7be:	3c 89       	ldd	r19, Y+20	; 0x14
     7c0:	21 15       	cp	r18, r1
     7c2:	31 05       	cpc	r19, r1
     7c4:	39 f0       	breq	.+14     	; 0x7d4 <BlockNot::timeSinceReset()+0x36>
     7c6:	23 30       	cpi	r18, 0x03	; 3
     7c8:	31 05       	cpc	r19, r1
     7ca:	50 f0       	brcs	.+20     	; 0x7e0 <BlockNot::timeSinceReset()+0x42>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:514
    startTime = newStartTime;
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
    unsigned long result = 0L;
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	cb 01       	movw	r24, r22
     7d2:	12 c0       	rjmp	.+36     	; 0x7f8 <BlockNot::timeSinceReset()+0x5a>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:518
    unsigned long millisBase = millisOffset + millis();
    switch (baseUnits) {
        case MICROSECONDS:
            result = microsOffset + micros() - startTime;
     7d4:	c8 84       	ldd	r12, Y+8	; 0x08
     7d6:	d9 84       	ldd	r13, Y+9	; 0x09
     7d8:	ea 84       	ldd	r14, Y+10	; 0x0a
     7da:	fb 84       	ldd	r15, Y+11	; 0x0b
     7dc:	0e 94 2f 03 	call	0x65e	; 0x65e <micros>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:524
            break;
        case MILLISECONDS:
            result = millisBase - startTime;
            break;
        case SECONDS:
            result = millisBase - startTime;
     7e0:	08 81       	ld	r16, Y
     7e2:	19 81       	ldd	r17, Y+1	; 0x01
     7e4:	2a 81       	ldd	r18, Y+2	; 0x02
     7e6:	3b 81       	ldd	r19, Y+3	; 0x03
     7e8:	c0 1a       	sub	r12, r16
     7ea:	d1 0a       	sbc	r13, r17
     7ec:	e2 0a       	sbc	r14, r18
     7ee:	f3 0a       	sbc	r15, r19
     7f0:	6c 0d       	add	r22, r12
     7f2:	7d 1d       	adc	r23, r13
     7f4:	8e 1d       	adc	r24, r14
     7f6:	9f 1d       	adc	r25, r15
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:528
            break;
    }
    return result;
}
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	ef 90       	pop	r14
     804:	df 90       	pop	r13
     806:	cf 90       	pop	r12
     808:	08 95       	ret

0000080a <BlockNot::triggered(bool)>:
triggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:236
            break;
    }
    if (resetOption) reset();
}

bool BlockNot::triggered(bool resetOption) {
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	ec 01       	movw	r28, r24
     81c:	06 2f       	mov	r16, r22
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:532
    return result;
}

bool BlockNot::hasTriggered() {
    bool triggered;
    switch(baseUnits) {
     81e:	8b 89       	ldd	r24, Y+19	; 0x13
     820:	9c 89       	ldd	r25, Y+20	; 0x14
     822:	81 30       	cpi	r24, 0x01	; 1
     824:	91 05       	cpc	r25, r1
     826:	91 f1       	breq	.+100    	; 0x88c <BlockNot::triggered(bool)+0x82>
     828:	c0 f0       	brcs	.+48     	; 0x85a <BlockNot::triggered(bool)+0x50>
     82a:	02 97       	sbiw	r24, 0x02	; 2
     82c:	79 f1       	breq	.+94     	; 0x88c <BlockNot::triggered(bool)+0x82>
triggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:238
    if (resetOption) reset();
}

bool BlockNot::triggered(bool resetOption) {
    bool triggered = hasTriggered();
    if (resetOption && triggered) {
     82e:	00 23       	and	r16, r16
     830:	29 f0       	breq	.+10     	; 0x83c <BlockNot::triggered(bool)+0x32>
     832:	11 23       	and	r17, r17
     834:	19 f0       	breq	.+6      	; 0x83c <BlockNot::triggered(bool)+0x32>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:239
        reset();
     836:	ce 01       	movw	r24, r28
     838:	0e 94 60 03 	call	0x6c0	; 0x6c0 <BlockNot::reset(unsigned long) [clone .constprop.21]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:241
    }
    if (timerState == RUNNING) return triggered;
     83c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     83e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     840:	89 2b       	or	r24, r25
     842:	09 f0       	breq	.+2      	; 0x846 <BlockNot::triggered(bool)+0x3c>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:242
    else return false;
     844:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:243
}
     846:	81 2f       	mov	r24, r17
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	df 90       	pop	r13
     856:	cf 90       	pop	r12
     858:	08 95       	ret
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:534

bool BlockNot::hasTriggered() {
    bool triggered;
    switch(baseUnits) {
        case MICROSECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.micros;
     85a:	ce 01       	movw	r24, r28
     85c:	0e 94 cf 03 	call	0x79e	; 0x79e <BlockNot::timeSinceReset()>
     860:	6b 01       	movw	r12, r22
     862:	7c 01       	movw	r14, r24
_ZNK8BlockNot5cTime7micro_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:213
            micro_t &operator=(double us) {
                seconds = us * .000001;
                return *this;
            }
            operator double() const {
                return seconds * 1000000.0;
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	34 e2       	ldi	r19, 0x24	; 36
     868:	44 e7       	ldi	r20, 0x74	; 116
     86a:	59 e4       	ldi	r21, 0x49	; 73
_ZNK8BlockNot5cTime7milli_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:201
            milli_t &operator=(double ms) {
                seconds = ms * .001;
                return *this;
            }
            operator double() const {
                return seconds * 1000.0;
     86c:	6d 89       	ldd	r22, Y+21	; 0x15
     86e:	7e 89       	ldd	r23, Y+22	; 0x16
     870:	8f 89       	ldd	r24, Y+23	; 0x17
     872:	98 8d       	ldd	r25, Y+24	; 0x18
     874:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:540
            break;
        case MILLISECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.millis;
            break;
        case SECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.millis;
     878:	0e 94 c5 13 	call	0x278a	; 0x278a <__fixunssfsi>
     87c:	11 e0       	ldi	r17, 0x01	; 1
     87e:	c6 16       	cp	r12, r22
     880:	d7 06       	cpc	r13, r23
     882:	e8 06       	cpc	r14, r24
     884:	f9 06       	cpc	r15, r25
     886:	98 f6       	brcc	.-90     	; 0x82e <BlockNot::triggered(bool)+0x24>
     888:	10 e0       	ldi	r17, 0x00	; 0
     88a:	d1 cf       	rjmp	.-94     	; 0x82e <BlockNot::triggered(bool)+0x24>
     88c:	ce 01       	movw	r24, r28
     88e:	0e 94 cf 03 	call	0x79e	; 0x79e <BlockNot::timeSinceReset()>
     892:	6b 01       	movw	r12, r22
     894:	7c 01       	movw	r14, r24
_ZNK8BlockNot5cTime7milli_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:201
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	4a e7       	ldi	r20, 0x7A	; 122
     89c:	54 e4       	ldi	r21, 0x44	; 68
     89e:	e6 cf       	rjmp	.-52     	; 0x86c <BlockNot::triggered(bool)+0x62>

000008a0 <read(int)>:
read():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1053
  pinMode(PIN, OUTPUT);
}

//Read Input

bool read(int PIN) {
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	9c 01       	movw	r18, r24
digitalRead():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
     8a6:	fc 01       	movw	r30, r24
     8a8:	e0 56       	subi	r30, 0x60	; 96
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     8ae:	f9 01       	movw	r30, r18
     8b0:	e6 59       	subi	r30, 0x96	; 150
     8b2:	fe 4f       	sbci	r31, 0xFE	; 254
     8b4:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     8b6:	f9 01       	movw	r30, r18
     8b8:	e6 5b       	subi	r30, 0xB6	; 182
     8ba:	fe 4f       	sbci	r31, 0xFE	; 254
     8bc:	c4 91       	lpm	r28, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     8be:	cc 23       	and	r28, r28
     8c0:	79 f0       	breq	.+30     	; 0x8e0 <read(int)+0x40>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     8c2:	81 11       	cpse	r24, r1
     8c4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <turnOffPWM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     8c8:	ec 2f       	mov	r30, r28
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	ee 0f       	add	r30, r30
     8ce:	ff 1f       	adc	r31, r31
     8d0:	e0 5c       	subi	r30, 0xC0	; 192
     8d2:	fe 4f       	sbci	r31, 0xFE	; 254
     8d4:	a5 91       	lpm	r26, Z+
     8d6:	b4 91       	lpm	r27, Z
     8d8:	ec 91       	ld	r30, X
     8da:	ed 23       	and	r30, r29
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	09 f4       	brne	.+2      	; 0x8e2 <read(int)+0x42>
read():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1057
  if(digitalRead(PIN)) {
    return true;
  } else {
    return false;
     8e0:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1059
  }
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <setOUT(int)>:
setOUT():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1048
}

//Setup Outputs

void setOUT(int PIN) {
  pinMode(PIN, OUTPUT);
     8e8:	61 e0       	ldi	r22, 0x01	; 1
     8ea:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <pinMode>

000008ee <setIN(int)>:
setIN():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1042
}

// Setup Inputs

void setIN(int PIN) {
  pinMode(PIN, INPUT);
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <pinMode>

000008f4 <ampo()>:
ampo():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:734
    boutvoltage = 0.64 * analogRead(BOTPIN);
    }
  }
}

void ampo() {
     8f4:	cf 92       	push	r12
     8f6:	df 92       	push	r13
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	ca e0       	ldi	r28, 0x0A	; 10
     902:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:737
float ampov;
for(int i=0; i<10; i++) {
  if((0.1 * analogRead(current)) > ampov){
     904:	8e e1       	ldi	r24, 0x1E	; 30
     906:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     90a:	bc 01       	movw	r22, r24
     90c:	99 0f       	add	r25, r25
     90e:	88 0b       	sbc	r24, r24
     910:	99 0b       	sbc	r25, r25
     912:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     916:	2d ec       	ldi	r18, 0xCD	; 205
     918:	3c ec       	ldi	r19, 0xCC	; 204
     91a:	4c ec       	ldi	r20, 0xCC	; 204
     91c:	5d e3       	ldi	r21, 0x3D	; 61
     91e:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
     922:	a7 01       	movw	r20, r14
     924:	96 01       	movw	r18, r12
     926:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__gesf2>
     92a:	18 16       	cp	r1, r24
     92c:	8c f4       	brge	.+34     	; 0x950 <ampo()+0x5c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:738
    ampov = 0.1 * analogRead(current);
     92e:	8e e1       	ldi	r24, 0x1E	; 30
     930:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     934:	bc 01       	movw	r22, r24
     936:	99 0f       	add	r25, r25
     938:	88 0b       	sbc	r24, r24
     93a:	99 0b       	sbc	r25, r25
     93c:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     940:	2d ec       	ldi	r18, 0xCD	; 205
     942:	3c ec       	ldi	r19, 0xCC	; 204
     944:	4c ec       	ldi	r20, 0xCC	; 204
     946:	5d e3       	ldi	r21, 0x3D	; 61
     948:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
     94c:	6b 01       	movw	r12, r22
     94e:	7c 01       	movw	r14, r24
     950:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:736
  }
}

void ampo() {
float ampov;
for(int i=0; i<10; i++) {
     952:	c1 f6       	brne	.-80     	; 0x904 <ampo()+0x10>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:741
  if((0.1 * analogRead(current)) > ampov){
    ampov = 0.1 * analogRead(current);
    }
  }
currentload = ampov;
     954:	c7 01       	movw	r24, r14
     956:	b6 01       	movw	r22, r12
     958:	0e 94 be 13 	call	0x277c	; 0x277c <__fixsfsi>
     95c:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <currentload+0x1>
     960:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <currentload>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:742
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	cf 90       	pop	r12
     970:	08 95       	ret

00000972 <OVo()>:
OVo():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:720
  }
}



void OVo() {
     972:	cf 92       	push	r12
     974:	df 92       	push	r13
     976:	ef 92       	push	r14
     978:	ff 92       	push	r15
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	ca e0       	ldi	r28, 0x0A	; 10
     980:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:722
for(int i=0; i<10; i++) {
  if((0.64 * analogRead(ROTPIN)) > routvoltage){
     982:	8b e1       	ldi	r24, 0x1B	; 27
     984:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     988:	bc 01       	movw	r22, r24
     98a:	99 0f       	add	r25, r25
     98c:	88 0b       	sbc	r24, r24
     98e:	99 0b       	sbc	r25, r25
     990:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     994:	2a e0       	ldi	r18, 0x0A	; 10
     996:	37 ed       	ldi	r19, 0xD7	; 215
     998:	43 e2       	ldi	r20, 0x23	; 35
     99a:	5f e3       	ldi	r21, 0x3F	; 63
     99c:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
     9a0:	6b 01       	movw	r12, r22
     9a2:	7c 01       	movw	r14, r24
     9a4:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <routvoltage>
     9a8:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <routvoltage+0x1>
     9ac:	07 2e       	mov	r0, r23
     9ae:	00 0c       	add	r0, r0
     9b0:	88 0b       	sbc	r24, r24
     9b2:	99 0b       	sbc	r25, r25
     9b4:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     9b8:	9b 01       	movw	r18, r22
     9ba:	ac 01       	movw	r20, r24
     9bc:	c7 01       	movw	r24, r14
     9be:	b6 01       	movw	r22, r12
     9c0:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__gesf2>
     9c4:	18 16       	cp	r1, r24
     9c6:	ac f4       	brge	.+42     	; 0x9f2 <OVo()+0x80>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:723
    routvoltage = 0.64 * analogRead(ROTPIN);
     9c8:	8b e1       	ldi	r24, 0x1B	; 27
     9ca:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     9ce:	bc 01       	movw	r22, r24
     9d0:	99 0f       	add	r25, r25
     9d2:	88 0b       	sbc	r24, r24
     9d4:	99 0b       	sbc	r25, r25
     9d6:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     9da:	2a e0       	ldi	r18, 0x0A	; 10
     9dc:	37 ed       	ldi	r19, 0xD7	; 215
     9de:	43 e2       	ldi	r20, 0x23	; 35
     9e0:	5f e3       	ldi	r21, 0x3F	; 63
     9e2:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
     9e6:	0e 94 be 13 	call	0x277c	; 0x277c <__fixsfsi>
     9ea:	70 93 23 02 	sts	0x0223, r23	; 0x800223 <routvoltage+0x1>
     9ee:	60 93 22 02 	sts	0x0222, r22	; 0x800222 <routvoltage>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:725
    }
  if((0.64 * analogRead(YOTPIN)) > youtvoltage){
     9f2:	8c e1       	ldi	r24, 0x1C	; 28
     9f4:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     9f8:	bc 01       	movw	r22, r24
     9fa:	99 0f       	add	r25, r25
     9fc:	88 0b       	sbc	r24, r24
     9fe:	99 0b       	sbc	r25, r25
     a00:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     a04:	2a e0       	ldi	r18, 0x0A	; 10
     a06:	37 ed       	ldi	r19, 0xD7	; 215
     a08:	43 e2       	ldi	r20, 0x23	; 35
     a0a:	5f e3       	ldi	r21, 0x3F	; 63
     a0c:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
     a10:	6b 01       	movw	r12, r22
     a12:	7c 01       	movw	r14, r24
     a14:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <youtvoltage>
     a18:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <youtvoltage+0x1>
     a1c:	07 2e       	mov	r0, r23
     a1e:	00 0c       	add	r0, r0
     a20:	88 0b       	sbc	r24, r24
     a22:	99 0b       	sbc	r25, r25
     a24:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     a28:	9b 01       	movw	r18, r22
     a2a:	ac 01       	movw	r20, r24
     a2c:	c7 01       	movw	r24, r14
     a2e:	b6 01       	movw	r22, r12
     a30:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__gesf2>
     a34:	18 16       	cp	r1, r24
     a36:	ac f4       	brge	.+42     	; 0xa62 <OVo()+0xf0>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:726
    youtvoltage = 0.64 * analogRead(YOTPIN);
     a38:	8c e1       	ldi	r24, 0x1C	; 28
     a3a:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     a3e:	bc 01       	movw	r22, r24
     a40:	99 0f       	add	r25, r25
     a42:	88 0b       	sbc	r24, r24
     a44:	99 0b       	sbc	r25, r25
     a46:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     a4a:	2a e0       	ldi	r18, 0x0A	; 10
     a4c:	37 ed       	ldi	r19, 0xD7	; 215
     a4e:	43 e2       	ldi	r20, 0x23	; 35
     a50:	5f e3       	ldi	r21, 0x3F	; 63
     a52:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
     a56:	0e 94 be 13 	call	0x277c	; 0x277c <__fixsfsi>
     a5a:	70 93 1f 02 	sts	0x021F, r23	; 0x80021f <youtvoltage+0x1>
     a5e:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <youtvoltage>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:728
    }
  if((0.64 * analogRead(BOTPIN)) > boutvoltage){
     a62:	8d e1       	ldi	r24, 0x1D	; 29
     a64:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     a68:	bc 01       	movw	r22, r24
     a6a:	99 0f       	add	r25, r25
     a6c:	88 0b       	sbc	r24, r24
     a6e:	99 0b       	sbc	r25, r25
     a70:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     a74:	2a e0       	ldi	r18, 0x0A	; 10
     a76:	37 ed       	ldi	r19, 0xD7	; 215
     a78:	43 e2       	ldi	r20, 0x23	; 35
     a7a:	5f e3       	ldi	r21, 0x3F	; 63
     a7c:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
     a80:	6b 01       	movw	r12, r22
     a82:	7c 01       	movw	r14, r24
     a84:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <boutvoltage>
     a88:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <boutvoltage+0x1>
     a8c:	07 2e       	mov	r0, r23
     a8e:	00 0c       	add	r0, r0
     a90:	88 0b       	sbc	r24, r24
     a92:	99 0b       	sbc	r25, r25
     a94:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     a98:	9b 01       	movw	r18, r22
     a9a:	ac 01       	movw	r20, r24
     a9c:	c7 01       	movw	r24, r14
     a9e:	b6 01       	movw	r22, r12
     aa0:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__gesf2>
     aa4:	18 16       	cp	r1, r24
     aa6:	ac f4       	brge	.+42     	; 0xad2 <OVo()+0x160>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:729
    boutvoltage = 0.64 * analogRead(BOTPIN);
     aa8:	8d e1       	ldi	r24, 0x1D	; 29
     aaa:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     aae:	bc 01       	movw	r22, r24
     ab0:	99 0f       	add	r25, r25
     ab2:	88 0b       	sbc	r24, r24
     ab4:	99 0b       	sbc	r25, r25
     ab6:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     aba:	2a e0       	ldi	r18, 0x0A	; 10
     abc:	37 ed       	ldi	r19, 0xD7	; 215
     abe:	43 e2       	ldi	r20, 0x23	; 35
     ac0:	5f e3       	ldi	r21, 0x3F	; 63
     ac2:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
     ac6:	0e 94 be 13 	call	0x277c	; 0x277c <__fixsfsi>
     aca:	70 93 1d 02 	sts	0x021D, r23	; 0x80021d <boutvoltage+0x1>
     ace:	60 93 1c 02 	sts	0x021C, r22	; 0x80021c <boutvoltage>
     ad2:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:721
}



void OVo() {
for(int i=0; i<10; i++) {
     ad4:	09 f0       	breq	.+2      	; 0xad8 <OVo()+0x166>
     ad6:	55 cf       	rjmp	.-342    	; 0x982 <OVo()+0x10>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:732
    }
  if((0.64 * analogRead(BOTPIN)) > boutvoltage){
    boutvoltage = 0.64 * analogRead(BOTPIN);
    }
  }
}
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	df 90       	pop	r13
     ae2:	cf 90       	pop	r12
     ae4:	08 95       	ret

00000ae6 <IVo()>:
IVo():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:704
  IVo();
  OVo();
  ampo();
}

void IVo() {
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	ca e0       	ldi	r28, 0x0A	; 10
     af4:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:706
for(int i=0; i<10; i++) {
  if((0.64 * analogRead(RINPIN)) > rinvoltage){
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     afc:	bc 01       	movw	r22, r24
     afe:	99 0f       	add	r25, r25
     b00:	88 0b       	sbc	r24, r24
     b02:	99 0b       	sbc	r25, r25
     b04:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     b08:	2a e0       	ldi	r18, 0x0A	; 10
     b0a:	37 ed       	ldi	r19, 0xD7	; 215
     b0c:	43 e2       	ldi	r20, 0x23	; 35
     b0e:	5f e3       	ldi	r21, 0x3F	; 63
     b10:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
     b14:	6b 01       	movw	r12, r22
     b16:	7c 01       	movw	r14, r24
     b18:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <rinvoltage>
     b1c:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <rinvoltage+0x1>
     b20:	07 2e       	mov	r0, r23
     b22:	00 0c       	add	r0, r0
     b24:	88 0b       	sbc	r24, r24
     b26:	99 0b       	sbc	r25, r25
     b28:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     b2c:	9b 01       	movw	r18, r22
     b2e:	ac 01       	movw	r20, r24
     b30:	c7 01       	movw	r24, r14
     b32:	b6 01       	movw	r22, r12
     b34:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__gesf2>
     b38:	18 16       	cp	r1, r24
     b3a:	ac f4       	brge	.+42     	; 0xb66 <IVo()+0x80>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:707
    rinvoltage = 0.64 * analogRead(RINPIN);
     b3c:	88 e1       	ldi	r24, 0x18	; 24
     b3e:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     b42:	bc 01       	movw	r22, r24
     b44:	99 0f       	add	r25, r25
     b46:	88 0b       	sbc	r24, r24
     b48:	99 0b       	sbc	r25, r25
     b4a:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     b4e:	2a e0       	ldi	r18, 0x0A	; 10
     b50:	37 ed       	ldi	r19, 0xD7	; 215
     b52:	43 e2       	ldi	r20, 0x23	; 35
     b54:	5f e3       	ldi	r21, 0x3F	; 63
     b56:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
     b5a:	0e 94 be 13 	call	0x277c	; 0x277c <__fixsfsi>
     b5e:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <rinvoltage+0x1>
     b62:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <rinvoltage>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:709
    }
  if((0.64 * analogRead(YINPIN)) > yinvoltage){
     b66:	89 e1       	ldi	r24, 0x19	; 25
     b68:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     b6c:	bc 01       	movw	r22, r24
     b6e:	99 0f       	add	r25, r25
     b70:	88 0b       	sbc	r24, r24
     b72:	99 0b       	sbc	r25, r25
     b74:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     b78:	2a e0       	ldi	r18, 0x0A	; 10
     b7a:	37 ed       	ldi	r19, 0xD7	; 215
     b7c:	43 e2       	ldi	r20, 0x23	; 35
     b7e:	5f e3       	ldi	r21, 0x3F	; 63
     b80:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
     b84:	6b 01       	movw	r12, r22
     b86:	7c 01       	movw	r14, r24
     b88:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <yinvoltage>
     b8c:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <yinvoltage+0x1>
     b90:	07 2e       	mov	r0, r23
     b92:	00 0c       	add	r0, r0
     b94:	88 0b       	sbc	r24, r24
     b96:	99 0b       	sbc	r25, r25
     b98:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     b9c:	9b 01       	movw	r18, r22
     b9e:	ac 01       	movw	r20, r24
     ba0:	c7 01       	movw	r24, r14
     ba2:	b6 01       	movw	r22, r12
     ba4:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__gesf2>
     ba8:	18 16       	cp	r1, r24
     baa:	ac f4       	brge	.+42     	; 0xbd6 <IVo()+0xf0>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:710
    yinvoltage = 0.64 * analogRead(YINPIN);
     bac:	89 e1       	ldi	r24, 0x19	; 25
     bae:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     bb2:	bc 01       	movw	r22, r24
     bb4:	99 0f       	add	r25, r25
     bb6:	88 0b       	sbc	r24, r24
     bb8:	99 0b       	sbc	r25, r25
     bba:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     bbe:	2a e0       	ldi	r18, 0x0A	; 10
     bc0:	37 ed       	ldi	r19, 0xD7	; 215
     bc2:	43 e2       	ldi	r20, 0x23	; 35
     bc4:	5f e3       	ldi	r21, 0x3F	; 63
     bc6:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
     bca:	0e 94 be 13 	call	0x277c	; 0x277c <__fixsfsi>
     bce:	70 93 b9 01 	sts	0x01B9, r23	; 0x8001b9 <yinvoltage+0x1>
     bd2:	60 93 b8 01 	sts	0x01B8, r22	; 0x8001b8 <yinvoltage>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:712
    }
  if((0.64 * analogRead(BINPIN)) > binvoltage){
     bd6:	8a e1       	ldi	r24, 0x1A	; 26
     bd8:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     bdc:	bc 01       	movw	r22, r24
     bde:	99 0f       	add	r25, r25
     be0:	88 0b       	sbc	r24, r24
     be2:	99 0b       	sbc	r25, r25
     be4:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     be8:	2a e0       	ldi	r18, 0x0A	; 10
     bea:	37 ed       	ldi	r19, 0xD7	; 215
     bec:	43 e2       	ldi	r20, 0x23	; 35
     bee:	5f e3       	ldi	r21, 0x3F	; 63
     bf0:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
     bf4:	6b 01       	movw	r12, r22
     bf6:	7c 01       	movw	r14, r24
     bf8:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <binvoltage>
     bfc:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <binvoltage+0x1>
     c00:	07 2e       	mov	r0, r23
     c02:	00 0c       	add	r0, r0
     c04:	88 0b       	sbc	r24, r24
     c06:	99 0b       	sbc	r25, r25
     c08:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     c0c:	9b 01       	movw	r18, r22
     c0e:	ac 01       	movw	r20, r24
     c10:	c7 01       	movw	r24, r14
     c12:	b6 01       	movw	r22, r12
     c14:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__gesf2>
     c18:	18 16       	cp	r1, r24
     c1a:	ac f4       	brge	.+42     	; 0xc46 <IVo()+0x160>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:713
    binvoltage = 0.64 * analogRead(BINPIN);
     c1c:	8a e1       	ldi	r24, 0x1A	; 26
     c1e:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     c22:	bc 01       	movw	r22, r24
     c24:	99 0f       	add	r25, r25
     c26:	88 0b       	sbc	r24, r24
     c28:	99 0b       	sbc	r25, r25
     c2a:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
     c2e:	2a e0       	ldi	r18, 0x0A	; 10
     c30:	37 ed       	ldi	r19, 0xD7	; 215
     c32:	43 e2       	ldi	r20, 0x23	; 35
     c34:	5f e3       	ldi	r21, 0x3F	; 63
     c36:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
     c3a:	0e 94 be 13 	call	0x277c	; 0x277c <__fixsfsi>
     c3e:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <binvoltage+0x1>
     c42:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <binvoltage>
     c46:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:705
  OVo();
  ampo();
}

void IVo() {
for(int i=0; i<10; i++) {
     c48:	09 f0       	breq	.+2      	; 0xc4c <IVo()+0x166>
     c4a:	55 cf       	rjmp	.-342    	; 0xaf6 <IVo()+0x10>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:716
    }
  if((0.64 * analogRead(BINPIN)) > binvoltage){
    binvoltage = 0.64 * analogRead(BINPIN);
    }
  }
}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	ff 90       	pop	r15
     c52:	ef 90       	pop	r14
     c54:	df 90       	pop	r13
     c56:	cf 90       	pop	r12
     c58:	08 95       	ret

00000c5a <bdiffcheck()>:
bdiffcheck():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:365
    return false;
  }
}

bool bdiffcheck() { //(returns true if difference is more than set difference and runs motor)
  int dif = SETV - boutvoltage;
     c5a:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <SETV>
     c5e:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <SETV+0x1>
     c62:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <boutvoltage>
     c66:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <boutvoltage+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:369
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     c6a:	28 1b       	sub	r18, r24
     c6c:	39 0b       	sbc	r19, r25
     c6e:	37 ff       	sbrs	r19, 7
     c70:	03 c0       	rjmp	.+6      	; 0xc78 <bdiffcheck()+0x1e>
     c72:	31 95       	neg	r19
     c74:	21 95       	neg	r18
     c76:	31 09       	sbc	r19, r1
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	40 91 c2 01 	lds	r20, 0x01C2	; 0x8001c2 <DIFF>
     c7e:	50 91 c3 01 	lds	r21, 0x01C3	; 0x8001c3 <DIFF+0x1>
     c82:	42 17       	cp	r20, r18
     c84:	53 07       	cpc	r21, r19
     c86:	0c f0       	brlt	.+2      	; 0xc8a <bdiffcheck()+0x30>
     c88:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:374
    return true;
  } else {
    return false;
  }
}
     c8a:	08 95       	ret

00000c8c <ydiffcheck()>:
ydiffcheck():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:353
    return false;
  }
}

bool ydiffcheck() { //(returns true if difference is more than set difference and runs motor)
  int dif = SETV - youtvoltage;
     c8c:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <SETV>
     c90:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <SETV+0x1>
     c94:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <youtvoltage>
     c98:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <youtvoltage+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:357
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     c9c:	28 1b       	sub	r18, r24
     c9e:	39 0b       	sbc	r19, r25
     ca0:	37 ff       	sbrs	r19, 7
     ca2:	03 c0       	rjmp	.+6      	; 0xcaa <ydiffcheck()+0x1e>
     ca4:	31 95       	neg	r19
     ca6:	21 95       	neg	r18
     ca8:	31 09       	sbc	r19, r1
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	40 91 c2 01 	lds	r20, 0x01C2	; 0x8001c2 <DIFF>
     cb0:	50 91 c3 01 	lds	r21, 0x01C3	; 0x8001c3 <DIFF+0x1>
     cb4:	42 17       	cp	r20, r18
     cb6:	53 07       	cpc	r21, r19
     cb8:	0c f0       	brlt	.+2      	; 0xcbc <ydiffcheck()+0x30>
     cba:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:362
    return true;
  } else {
    return false;
  }
}
     cbc:	08 95       	ret

00000cbe <rdiffcheck()>:
rdiffcheck():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:341
}


//Check Voltage Difference from Set Voltage
bool rdiffcheck() { //(returns true if difference is more than set difference and runs motor)
  int dif = SETV - routvoltage;
     cbe:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <SETV>
     cc2:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <SETV+0x1>
     cc6:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <routvoltage>
     cca:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <routvoltage+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:345
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     cce:	28 1b       	sub	r18, r24
     cd0:	39 0b       	sbc	r19, r25
     cd2:	37 ff       	sbrs	r19, 7
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <rdiffcheck()+0x1e>
     cd6:	31 95       	neg	r19
     cd8:	21 95       	neg	r18
     cda:	31 09       	sbc	r19, r1
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	40 91 c2 01 	lds	r20, 0x01C2	; 0x8001c2 <DIFF>
     ce2:	50 91 c3 01 	lds	r21, 0x01C3	; 0x8001c3 <DIFF+0x1>
     ce6:	42 17       	cp	r20, r18
     ce8:	53 07       	cpc	r21, r19
     cea:	0c f0       	brlt	.+2      	; 0xcee <rdiffcheck()+0x30>
     cec:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:350
    return true;
  } else {
    return false;
  }
}
     cee:	08 95       	ret

00000cf0 <currentok()>:
currentok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:331
  }
}

//Check If Current Load is lower than max current Set by Parameters
bool currentok() {
  if(currentload < OVL){
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	40 91 b4 01 	lds	r20, 0x01B4	; 0x8001b4 <currentload>
     cf6:	50 91 b5 01 	lds	r21, 0x01B5	; 0x8001b5 <currentload+0x1>
     cfa:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <OVL>
     cfe:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <OVL+0x1>
     d02:	42 17       	cp	r20, r18
     d04:	53 07       	cpc	r21, r19
     d06:	0c f0       	brlt	.+2      	; 0xd0a <currentok()+0x1a>
     d08:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:336
    return true;
  } else {
    return false;
  }
}
     d0a:	08 95       	ret

00000d0c <outputVok()>:
outputVok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:322
    return false;
  }
}
//Check If output voltage is within Low & High voltage Set by Parameters
bool outputVok() {
  if(routvoltage > OLV && routvoltage < OHV && youtvoltage > OLV && youtvoltage < OHV && boutvoltage > OLV && boutvoltage < OHV){
     d0c:	40 91 22 02 	lds	r20, 0x0222	; 0x800222 <routvoltage>
     d10:	50 91 23 02 	lds	r21, 0x0223	; 0x800223 <routvoltage+0x1>
     d14:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <OLV>
     d18:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <OLV+0x1>
     d1c:	84 17       	cp	r24, r20
     d1e:	95 07       	cpc	r25, r21
     d20:	e4 f4       	brge	.+56     	; 0xd5a <outputVok()+0x4e>
     d22:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <OHV>
     d26:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <OHV+0x1>
     d2a:	42 17       	cp	r20, r18
     d2c:	53 07       	cpc	r21, r19
     d2e:	ac f4       	brge	.+42     	; 0xd5a <outputVok()+0x4e>
     d30:	40 91 1e 02 	lds	r20, 0x021E	; 0x80021e <youtvoltage>
     d34:	50 91 1f 02 	lds	r21, 0x021F	; 0x80021f <youtvoltage+0x1>
     d38:	84 17       	cp	r24, r20
     d3a:	95 07       	cpc	r25, r21
     d3c:	74 f4       	brge	.+28     	; 0xd5a <outputVok()+0x4e>
     d3e:	42 17       	cp	r20, r18
     d40:	53 07       	cpc	r21, r19
     d42:	5c f4       	brge	.+22     	; 0xd5a <outputVok()+0x4e>
     d44:	40 91 1c 02 	lds	r20, 0x021C	; 0x80021c <boutvoltage>
     d48:	50 91 1d 02 	lds	r21, 0x021D	; 0x80021d <boutvoltage+0x1>
     d4c:	84 17       	cp	r24, r20
     d4e:	95 07       	cpc	r25, r21
     d50:	24 f4       	brge	.+8      	; 0xd5a <outputVok()+0x4e>
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	42 17       	cp	r20, r18
     d56:	53 07       	cpc	r21, r19
     d58:	0c f0       	brlt	.+2      	; 0xd5c <outputVok()+0x50>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:325
    return true;
  } else {
    return false;
     d5a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:327
  }
}
     d5c:	08 95       	ret

00000d5e <inputVok()>:
inputVok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:314
}


//Check If input voltage is within Low & High voltage Set by Parameters
bool inputVok() {
  if(rinvoltage > ILV && rinvoltage < IHV && yinvoltage > ILV && yinvoltage < IHV && binvoltage > ILV && binvoltage < IHV){
     d5e:	40 91 ba 01 	lds	r20, 0x01BA	; 0x8001ba <rinvoltage>
     d62:	50 91 bb 01 	lds	r21, 0x01BB	; 0x8001bb <rinvoltage+0x1>
     d66:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <ILV>
     d6a:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <ILV+0x1>
     d6e:	84 17       	cp	r24, r20
     d70:	95 07       	cpc	r25, r21
     d72:	e4 f4       	brge	.+56     	; 0xdac <inputVok()+0x4e>
     d74:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <IHV>
     d78:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <IHV+0x1>
     d7c:	42 17       	cp	r20, r18
     d7e:	53 07       	cpc	r21, r19
     d80:	ac f4       	brge	.+42     	; 0xdac <inputVok()+0x4e>
     d82:	40 91 b8 01 	lds	r20, 0x01B8	; 0x8001b8 <yinvoltage>
     d86:	50 91 b9 01 	lds	r21, 0x01B9	; 0x8001b9 <yinvoltage+0x1>
     d8a:	84 17       	cp	r24, r20
     d8c:	95 07       	cpc	r25, r21
     d8e:	74 f4       	brge	.+28     	; 0xdac <inputVok()+0x4e>
     d90:	42 17       	cp	r20, r18
     d92:	53 07       	cpc	r21, r19
     d94:	5c f4       	brge	.+22     	; 0xdac <inputVok()+0x4e>
     d96:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <binvoltage>
     d9a:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <binvoltage+0x1>
     d9e:	84 17       	cp	r24, r20
     da0:	95 07       	cpc	r25, r21
     da2:	24 f4       	brge	.+8      	; 0xdac <inputVok()+0x4e>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	42 17       	cp	r20, r18
     da8:	53 07       	cpc	r21, r19
     daa:	0c f0       	brlt	.+2      	; 0xdae <inputVok()+0x50>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:317
    return true;
  } else {
    return false;
     dac:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:319
  }
}
     dae:	08 95       	ret

00000db0 <checksystem()>:
checksystem():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:438
}

//Check if Input,Output Voltage and current is within the set range

bool checksystem() {
  if(inputVok()) {
     db0:	0e 94 af 06 	call	0xd5e	; 0xd5e <inputVok()>
     db4:	88 23       	and	r24, r24
     db6:	29 f0       	breq	.+10     	; 0xdc2 <checksystem()+0x12>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:439
    if(outputVok()) {
     db8:	0e 94 86 06 	call	0xd0c	; 0xd0c <outputVok()>
     dbc:	81 11       	cpse	r24, r1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:440
      if(currentok()){
     dbe:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:445
            return true;
      } else { return false; }
    } else { return false; }
  } else { return false; }
}
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	08 95       	ret

00000dc6 <pulseIn.constprop.16>:
pulseIn():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:33
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	48 2f       	mov	r20, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:38
{
  // cache the port and bit of the pin in order to speed up the
  // pulse width measuring loop and achieve finer resolution.  calling
  // digitalRead() instead yields much coarser resolution.
  uint8_t bit = digitalPinToBitMask(pin);
     dcc:	e5 e8       	ldi	r30, 0x85	; 133
     dce:	f1 e0       	ldi	r31, 0x01	; 1
     dd0:	64 91       	lpm	r22, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:39
  uint8_t port = digitalPinToPort(pin);
     dd2:	e5 e6       	ldi	r30, 0x65	; 101
     dd4:	f1 e0       	ldi	r31, 0x01	; 1
     dd6:	e4 91       	lpm	r30, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:40
  uint8_t stateMask = (state ? bit : 0);
     dd8:	81 11       	cpse	r24, r1
     dda:	46 2f       	mov	r20, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:46

  // convert the timeout from microseconds to a number of times through
  // the initial loop; it takes approximately 16 clock cycles per iteration
  unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

  unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	e0 5c       	subi	r30, 0xC0	; 192
     de4:	fe 4f       	sbci	r31, 0xFE	; 254
     de6:	85 91       	lpm	r24, Z+
     de8:	94 91       	lpm	r25, Z
     dea:	0e e1       	ldi	r16, 0x1E	; 30
     dec:	10 e0       	ldi	r17, 0x00	; 0
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <countPulseASM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:49

  // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
  if (width)
     df6:	61 15       	cp	r22, r1
     df8:	71 05       	cpc	r23, r1
     dfa:	81 05       	cpc	r24, r1
     dfc:	91 05       	cpc	r25, r1
     dfe:	91 f0       	breq	.+36     	; 0xe24 <pulseIn.constprop.16+0x5e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:50
    return clockCyclesToMicroseconds(width * 16 + 16);
     e00:	6f 5f       	subi	r22, 0xFF	; 255
     e02:	7f 4f       	sbci	r23, 0xFF	; 255
     e04:	8f 4f       	sbci	r24, 0xFF	; 255
     e06:	9f 4f       	sbci	r25, 0xFF	; 255
     e08:	24 e0       	ldi	r18, 0x04	; 4
     e0a:	66 0f       	add	r22, r22
     e0c:	77 1f       	adc	r23, r23
     e0e:	88 1f       	adc	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	2a 95       	dec	r18
     e14:	d1 f7       	brne	.-12     	; 0xe0a <pulseIn.constprop.16+0x44>
     e16:	33 e0       	ldi	r19, 0x03	; 3
     e18:	96 95       	lsr	r25
     e1a:	87 95       	ror	r24
     e1c:	77 95       	ror	r23
     e1e:	67 95       	ror	r22
     e20:	3a 95       	dec	r19
     e22:	d1 f7       	brne	.-12     	; 0xe18 <pulseIn.constprop.16+0x52>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:53
  else
    return 0;
}
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	08 95       	ret

00000e2a <displayVar(int, int) [clone .constprop.14]>:
displayVar():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1003

void done() {display("donE", 0);}

//Display INT Variable

void displayVar(int var, int deci) {
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	00 d0       	rcall	.+0      	; 0xe34 <displayVar(int, int) [clone .constprop.14]+0xa>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <displayVar(int, int) [clone .constprop.14]+0xc>
     e36:	1f 92       	push	r1
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1005
  char buffer[5];
  sprintf(buffer, "%4d", var);
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	84 e1       	ldi	r24, 0x14	; 20
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	9f 93       	push	r25
     e46:	8f 93       	push	r24
     e48:	8e 01       	movw	r16, r28
     e4a:	0f 5f       	subi	r16, 0xFF	; 255
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	1f 93       	push	r17
     e50:	0f 93       	push	r16
     e52:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <sprintf>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1006
  display1.DisplayString(buffer, deci);
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	c8 01       	movw	r24, r16
     e5a:	0e 94 a6 01 	call	0x34c	; 0x34c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]>
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1007
}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	08 95       	ret

00000e7e <menuIHV() [clone .part.8]>:
_Z7menuIHVv.part.8():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:755

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
     e7e:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
     e82:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
     e86:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <displayVar(int, int) [clone .constprop.14]>

00000e8a <String::reserve(unsigned int)>:
reserve():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:146
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	ec 01       	movw	r28, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
     e94:	88 81       	ld	r24, Y
     e96:	99 81       	ldd	r25, Y+1	; 0x01
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	59 f0       	breq	.+22     	; 0xeb2 <String::reserve(unsigned int)+0x28>
     e9c:	2a 81       	ldd	r18, Y+2	; 0x02
     e9e:	3b 81       	ldd	r19, Y+3	; 0x03
     ea0:	26 17       	cp	r18, r22
     ea2:	37 07       	cpc	r19, r23
     ea4:	30 f0       	brcs	.+12     	; 0xeb2 <String::reserve(unsigned int)+0x28>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	08 95       	ret
     eb2:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     eb4:	6f 5f       	subi	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <realloc>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	59 f0       	breq	.+22     	; 0xed6 <String::reserve(unsigned int)+0x4c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
     ec0:	99 83       	std	Y+1, r25	; 0x01
     ec2:	88 83       	st	Y, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
     ec4:	1b 83       	std	Y+3, r17	; 0x03
     ec6:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     ec8:	2c 81       	ldd	r18, Y+4	; 0x04
     eca:	3d 81       	ldd	r19, Y+5	; 0x05
     ecc:	23 2b       	or	r18, r19
     ece:	59 f7       	brne	.-42     	; 0xea6 <String::reserve(unsigned int)+0x1c>
     ed0:	fc 01       	movw	r30, r24
     ed2:	10 82       	st	Z, r1
     ed4:	e8 cf       	rjmp	.-48     	; 0xea6 <String::reserve(unsigned int)+0x1c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:152
    return 1;
  }
  return 0;
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	e7 cf       	rjmp	.-50     	; 0xea8 <String::reserve(unsigned int)+0x1e>

00000eda <String::invalidate()>:
invalidate():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	ec 01       	movw	r28, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
     ee0:	88 81       	ld	r24, Y
     ee2:	99 81       	ldd	r25, Y+1	; 0x01
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	11 f0       	breq	.+4      	; 0xeec <String::invalidate()+0x12>
     ee8:	0e 94 9e 14 	call	0x293c	; 0x293c <free>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
     eec:	19 82       	std	Y+1, r1	; 0x01
     eee:	18 82       	st	Y, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
     ef0:	1d 82       	std	Y+5, r1	; 0x05
     ef2:	1c 82       	std	Y+4, r1	; 0x04
     ef4:	1b 82       	std	Y+3, r1	; 0x03
     ef6:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:143
}
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	08 95       	ret

00000efe <String::copy(char const*, unsigned int)>:
copy():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	ec 01       	movw	r28, r24
     f0c:	7b 01       	movw	r14, r22
     f0e:	8a 01       	movw	r16, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
  if (!reserve(length)) {
     f10:	ba 01       	movw	r22, r20
     f12:	0e 94 45 07 	call	0xe8a	; 0xe8a <String::reserve(unsigned int)>
     f16:	81 11       	cpse	r24, r1
     f18:	0b c0       	rjmp	.+22     	; 0xf30 <String::copy(char const*, unsigned int)+0x32>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
     f1a:	ce 01       	movw	r24, r28
     f1c:	0e 94 6d 07 	call	0xeda	; 0xeda <String::invalidate()>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:179
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
     f20:	ce 01       	movw	r24, r28
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     f30:	1d 83       	std	Y+5, r17	; 0x05
     f32:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
     f34:	b7 01       	movw	r22, r14
     f36:	88 81       	ld	r24, Y
     f38:	99 81       	ldd	r25, Y+1	; 0x01
     f3a:	0e 94 11 16 	call	0x2c22	; 0x2c22 <strcpy>
     f3e:	f0 cf       	rjmp	.-32     	; 0xf20 <String::copy(char const*, unsigned int)+0x22>

00000f40 <String::String(char const*)>:
_ZN6String4initEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     f40:	fc 01       	movw	r30, r24
     f42:	11 82       	std	Z+1, r1	; 0x01
     f44:	10 82       	st	Z, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
     f46:	13 82       	std	Z+3, r1	; 0x03
     f48:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
     f4a:	15 82       	std	Z+5, r1	; 0x05
     f4c:	14 82       	std	Z+4, r1	; 0x04
__base_ctor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
     f4e:	fb 01       	movw	r30, r22
     f50:	01 90       	ld	r0, Z+
     f52:	00 20       	and	r0, r0
     f54:	e9 f7       	brne	.-6      	; 0xf50 <String::String(char const*)+0x10>
     f56:	31 97       	sbiw	r30, 0x01	; 1
     f58:	af 01       	movw	r20, r30
     f5a:	46 1b       	sub	r20, r22
     f5c:	57 0b       	sbc	r21, r23
     f5e:	0c 94 7f 07 	jmp	0xefe	; 0xefe <String::copy(char const*, unsigned int)>

00000f62 <String::~String()>:
__base_dtor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
     f62:	fc 01       	movw	r30, r24
     f64:	80 81       	ld	r24, Z
     f66:	91 81       	ldd	r25, Z+1	; 0x01
     f68:	0c 94 9e 14 	jmp	0x293c	; 0x293c <free>

00000f6c <display(String, int) [clone .constprop.9]>:
display():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1063
  }
}

//Display String Variable

void display(String str, int deci) {
     f6c:	af 92       	push	r10
     f6e:	bf 92       	push	r11
     f70:	cf 92       	push	r12
     f72:	df 92       	push	r13
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	28 97       	sbiw	r28, 0x08	; 8
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	8c 01       	movw	r16, r24
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1074

  int str_len = str.length() + 1;
  char data[str_len];
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
}
     f92:	cd b6       	in	r12, 0x3d	; 61
     f94:	de b6       	in	r13, 0x3e	; 62
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1065

//Display String Variable

void display(String str, int deci) {
  int strl = str.length();
  if(strl < 4) {
     f96:	fc 01       	movw	r30, r24
     f98:	84 81       	ldd	r24, Z+4	; 0x04
     f9a:	95 81       	ldd	r25, Z+5	; 0x05
     f9c:	04 97       	sbiw	r24, 0x04	; 4
     f9e:	0c f0       	brlt	.+2      	; 0xfa2 <display(String, int) [clone .constprop.9]+0x36>
     fa0:	4a c0       	rjmp	.+148    	; 0x1036 <display(String, int) [clone .constprop.9]+0xca>
_ZN6String4initEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     fa2:	1a 82       	std	Y+2, r1	; 0x02
     fa4:	19 82       	std	Y+1, r1	; 0x01
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
     fa6:	1c 82       	std	Y+4, r1	; 0x04
     fa8:	1b 82       	std	Y+3, r1	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
     faa:	1e 82       	std	Y+6, r1	; 0x06
     fac:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:63

String::String(char c)
{
  init();
  char buf[2];
  buf[0] = c;
     fae:	80 e1       	ldi	r24, 0x10	; 16
     fb0:	8f 83       	std	Y+7, r24	; 0x07
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:64
  buf[1] = 0;
     fb2:	18 86       	std	Y+8, r1	; 0x08
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
     fb4:	be 01       	movw	r22, r28
     fb6:	69 5f       	subi	r22, 0xF9	; 249
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	fb 01       	movw	r30, r22
     fbc:	01 90       	ld	r0, Z+
     fbe:	00 20       	and	r0, r0
     fc0:	e9 f7       	brne	.-6      	; 0xfbc <display(String, int) [clone .constprop.9]+0x50>
     fc2:	31 97       	sbiw	r30, 0x01	; 1
     fc4:	af 01       	movw	r20, r30
     fc6:	46 1b       	sub	r20, r22
     fc8:	57 0b       	sbc	r21, r23
     fca:	ce 01       	movw	r24, r28
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	0e 94 7f 07 	call	0xefe	; 0xefe <String::copy(char const*, unsigned int)>
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     fd2:	f8 01       	movw	r30, r16
     fd4:	a0 80       	ld	r10, Z
     fd6:	b1 80       	ldd	r11, Z+1	; 0x01
concat():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
     fd8:	a1 14       	cp	r10, r1
     fda:	b1 04       	cpc	r11, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <display(String, int) [clone .constprop.9]+0x74>
     fde:	5d c0       	rjmp	.+186    	; 0x109a <display(String, int) [clone .constprop.9]+0x12e>
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     fe0:	e4 80       	ldd	r14, Z+4	; 0x04
     fe2:	f5 80       	ldd	r15, Z+5	; 0x05
concat():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
     fe4:	e1 14       	cp	r14, r1
     fe6:	f1 04       	cpc	r15, r1
     fe8:	b9 f0       	breq	.+46     	; 0x1018 <display(String, int) [clone .constprop.9]+0xac>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	e8 0e       	add	r14, r24
     ff0:	f9 1e       	adc	r15, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
     ff2:	b7 01       	movw	r22, r14
     ff4:	ce 01       	movw	r24, r28
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	0e 94 45 07 	call	0xe8a	; 0xe8a <String::reserve(unsigned int)>
     ffc:	88 23       	and	r24, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <display(String, int) [clone .constprop.9]+0x96>
    1000:	4c c0       	rjmp	.+152    	; 0x109a <display(String, int) [clone .constprop.9]+0x12e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:269
  strcpy(buffer + len, cstr);
    1002:	29 81       	ldd	r18, Y+1	; 0x01
    1004:	3a 81       	ldd	r19, Y+2	; 0x02
    1006:	8d 81       	ldd	r24, Y+5	; 0x05
    1008:	9e 81       	ldd	r25, Y+6	; 0x06
    100a:	b5 01       	movw	r22, r10
    100c:	82 0f       	add	r24, r18
    100e:	93 1f       	adc	r25, r19
    1010:	0e 94 11 16 	call	0x2c22	; 0x2c22 <strcpy>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:270
  len = newlen;
    1014:	fe 82       	std	Y+6, r15	; 0x06
    1016:	ed 82       	std	Y+5, r14	; 0x05
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:218

String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
    1018:	69 81       	ldd	r22, Y+1	; 0x01
    101a:	7a 81       	ldd	r23, Y+2	; 0x02
    101c:	61 15       	cp	r22, r1
    101e:	71 05       	cpc	r23, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <display(String, int) [clone .constprop.9]+0xb8>
    1022:	40 c0       	rjmp	.+128    	; 0x10a4 <display(String, int) [clone .constprop.9]+0x138>
    1024:	4d 81       	ldd	r20, Y+5	; 0x05
    1026:	5e 81       	ldd	r21, Y+6	; 0x06
    1028:	c8 01       	movw	r24, r16
    102a:	0e 94 7f 07 	call	0xefe	; 0xefe <String::copy(char const*, unsigned int)>
_ZN15StringSumHelperD2Ev():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
    102e:	ce 01       	movw	r24, r28
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	0e 94 b1 07 	call	0xf62	; 0xf62 <String::~String()>
    1036:	f8 01       	movw	r30, r16
    1038:	e4 80       	ldd	r14, Z+4	; 0x04
    103a:	f5 80       	ldd	r15, Z+5	; 0x05
display():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1070
    //char16 = no display on screen
    str = char(16) + str;
  }

  int str_len = str.length() + 1;
    103c:	c7 01       	movw	r24, r14
    103e:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1071
  char data[str_len];
    1040:	2d b7       	in	r18, 0x3d	; 61
    1042:	3e b7       	in	r19, 0x3e	; 62
    1044:	28 1b       	sub	r18, r24
    1046:	39 0b       	sbc	r19, r25
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	3e bf       	out	0x3e, r19	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	2d bf       	out	0x3d, r18	; 61
    1052:	ed b7       	in	r30, 0x3d	; 61
    1054:	fe b7       	in	r31, 0x3e	; 62
    1056:	31 96       	adiw	r30, 0x01	; 1
    1058:	5f 01       	movw	r10, r30
getBytes():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:539
  return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
  if (!bufsize || !buf) return;
    105a:	89 2b       	or	r24, r25
    105c:	21 f0       	breq	.+8      	; 0x1066 <display(String, int) [clone .constprop.9]+0xfa>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:540
  if (index >= len) {
    105e:	e1 14       	cp	r14, r1
    1060:	f1 04       	cpc	r15, r1
    1062:	21 f5       	brne	.+72     	; 0x10ac <display(String, int) [clone .constprop.9]+0x140>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:547
    return;
  }
  unsigned int n = bufsize - 1;
  if (n > len - index) n = len - index;
  strncpy((char *)buf, buffer + index, n);
  buf[n] = 0;
    1064:	10 82       	st	Z, r1
display():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1073
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	c5 01       	movw	r24, r10
    106a:	0e 94 a6 01 	call	0x34c	; 0x34c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.15]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1074
}
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de be       	out	0x3e, r13	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd be       	out	0x3d, r12	; 61
    1078:	28 96       	adiw	r28, 0x08	; 8
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
    1094:	bf 90       	pop	r11
    1096:	af 90       	pop	r10
    1098:	08 95       	ret
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    109a:	ce 01       	movw	r24, r28
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	0e 94 6d 07 	call	0xeda	; 0xeda <String::invalidate()>
    10a2:	ba cf       	rjmp	.-140    	; 0x1018 <display(String, int) [clone .constprop.9]+0xac>
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:219
String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
  else invalidate();
    10a4:	c8 01       	movw	r24, r16
    10a6:	0e 94 6d 07 	call	0xeda	; 0xeda <String::invalidate()>
    10aa:	c1 cf       	rjmp	.-126    	; 0x102e <display(String, int) [clone .constprop.9]+0xc2>
getBytes():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:546
    buf[0] = 0;
    return;
  }
  unsigned int n = bufsize - 1;
  if (n > len - index) n = len - index;
  strncpy((char *)buf, buffer + index, n);
    10ac:	f8 01       	movw	r30, r16
    10ae:	60 81       	ld	r22, Z
    10b0:	71 81       	ldd	r23, Z+1	; 0x01
    10b2:	a7 01       	movw	r20, r14
    10b4:	c5 01       	movw	r24, r10
    10b6:	0e 94 18 16 	call	0x2c30	; 0x2c30 <strncpy>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:547
  buf[n] = 0;
    10ba:	f5 01       	movw	r30, r10
    10bc:	ee 0d       	add	r30, r14
    10be:	ff 1d       	adc	r31, r15
    10c0:	d1 cf       	rjmp	.-94     	; 0x1064 <display(String, int) [clone .constprop.9]+0xf8>

000010c2 <updateScreenData(bool) [clone .part.7]>:
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:515
    return false;
  }
}


void updateScreenData(bool status) {
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <updateScreenData(bool) [clone .part.7]+0xc>
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <updateScreenData(bool) [clone .part.7]+0xe>
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <updateScreenData(bool) [clone .part.7]+0x10>
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	f8 2e       	mov	r15, r24
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:518
  //uncomment !mode and comment !read(setupPin) if setupPin is not being used
  if(!mode/*!read(setupPin)*/){
    if(!resetrefresh){
    10d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <resetrefresh>
    10dc:	81 11       	cpse	r24, r1
    10de:	07 c0       	rjmp	.+14     	; 0x10ee <updateScreenData(bool) [clone .part.7]+0x2c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:519
      refresh.reset();
    10e0:	85 e4       	ldi	r24, 0x45	; 69
    10e2:	92 e0       	ldi	r25, 0x02	; 2
    10e4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <BlockNot::reset(unsigned long) [clone .constprop.21]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:520
      resetrefresh = true;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <resetrefresh>
    10ee:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <alarmOnce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:522
    }
    if(!status && !alarmOnce){
    10f2:	f1 10       	cpse	r15, r1
    10f4:	95 c1       	rjmp	.+810    	; 0x1420 <updateScreenData(bool) [clone .part.7]+0x35e>
    10f6:	81 11       	cpse	r24, r1
    10f8:	03 c0       	rjmp	.+6      	; 0x1100 <updateScreenData(bool) [clone .part.7]+0x3e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:523
      alarmOnce = true;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <alarmOnce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:530
    }
    if(status && alarmOnce){
      alarmOnce = false;
      menu == 0;
    }
    if(refresh.triggered()){
    1100:	61 e0       	ldi	r22, 0x01	; 1
    1102:	85 e4       	ldi	r24, 0x45	; 69
    1104:	92 e0       	ldi	r25, 0x02	; 2
    1106:	0e 94 05 04 	call	0x80a	; 0x80a <BlockNot::triggered(bool)>
    110a:	88 23       	and	r24, r24
    110c:	e1 f0       	breq	.+56     	; 0x1146 <updateScreenData(bool) [clone .part.7]+0x84>
    110e:	00 91 d5 01 	lds	r16, 0x01D5	; 0x8001d5 <menu>
    1112:	10 91 d6 01 	lds	r17, 0x01D6	; 0x8001d6 <menu+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:532

      OVo();
    1116:	0e 94 b9 04 	call	0x972	; 0x972 <OVo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:533
      IVo();
    111a:	0e 94 73 05 	call	0xae6	; 0xae6 <IVo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:534
      ampo();
    111e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <ampo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:537


      switch (menu)
    1122:	02 30       	cpi	r16, 0x02	; 2
    1124:	11 05       	cpc	r17, r1
    1126:	09 f4       	brne	.+2      	; 0x112a <updateScreenData(bool) [clone .part.7]+0x68>
    1128:	66 c0       	rjmp	.+204    	; 0x11f6 <updateScreenData(bool) [clone .part.7]+0x134>
    112a:	0c f0       	brlt	.+2      	; 0x112e <updateScreenData(bool) [clone .part.7]+0x6c>
    112c:	2d c0       	rjmp	.+90     	; 0x1188 <updateScreenData(bool) [clone .part.7]+0xc6>
    112e:	01 2b       	or	r16, r17
    1130:	09 f4       	brne	.+2      	; 0x1134 <updateScreenData(bool) [clone .part.7]+0x72>
    1132:	5e c0       	rjmp	.+188    	; 0x11f0 <updateScreenData(bool) [clone .part.7]+0x12e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:554
          ampo();
          break;
        default:
          break;
      }
      menu++;
    1134:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <menu>
    1138:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <menu+0x1>
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <menu+0x1>
    1142:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <menu>
    1146:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <menu>
    114a:	f0 91 d6 01 	lds	r31, 0x01D6	; 0x8001d6 <menu+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:559
    }

    //Show Error if Available
    
    if(!status && menu == -1){
    114e:	ff 20       	and	r15, r15
    1150:	09 f4       	brne	.+2      	; 0x1154 <updateScreenData(bool) [clone .part.7]+0x92>
    1152:	57 c0       	rjmp	.+174    	; 0x1202 <updateScreenData(bool) [clone .part.7]+0x140>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:585
          display("ALOL", 0);
        }
      }
    }

    switch (menu)
    1154:	e2 31       	cpi	r30, 0x12	; 18
    1156:	f1 05       	cpc	r31, r1
    1158:	08 f0       	brcs	.+2      	; 0x115c <updateScreenData(bool) [clone .part.7]+0x9a>
    115a:	ef c0       	rjmp	.+478    	; 0x133a <updateScreenData(bool) [clone .part.7]+0x278>
    115c:	ee 54       	subi	r30, 0x4E	; 78
    115e:	f7 4f       	sbci	r31, 0xF7	; 247
    1160:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__tablejump2__>
    1164:	a9 09       	sbc	r26, r9
    1166:	b8 09       	sbc	r27, r8
    1168:	bb 09       	sbc	r27, r11
    116a:	c2 09       	sbc	r28, r2
    116c:	c5 09       	sbc	r28, r5
    116e:	ca 09       	sbc	r28, r10
    1170:	cd 09       	sbc	r28, r13
    1172:	d2 09       	sbc	r29, r2
    1174:	d5 09       	sbc	r29, r5
    1176:	da 09       	sbc	r29, r10
    1178:	dd 09       	sbc	r29, r13
    117a:	e2 09       	sbc	r30, r2
    117c:	e5 09       	sbc	r30, r5
    117e:	ea 09       	sbc	r30, r10
    1180:	ed 09       	sbc	r30, r13
    1182:	f2 09       	sbc	r31, r2
    1184:	f5 09       	sbc	r31, r5
    1186:	02 0a       	sbc	r0, r18
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:537
      OVo();
      IVo();
      ampo();


      switch (menu)
    1188:	04 30       	cpi	r16, 0x04	; 4
    118a:	11 05       	cpc	r17, r1
    118c:	b9 f1       	breq	.+110    	; 0x11fc <updateScreenData(bool) [clone .part.7]+0x13a>
    118e:	06 30       	cpi	r16, 0x06	; 6
    1190:	11 05       	cpc	r17, r1
    1192:	09 f0       	breq	.+2      	; 0x1196 <updateScreenData(bool) [clone .part.7]+0xd4>
    1194:	cf cf       	rjmp	.-98     	; 0x1134 <updateScreenData(bool) [clone .part.7]+0x72>
checkhz():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:305
//Checks the wavelenght of the Sine wave to calculate the frequency
//ontime is the time that sinewave stays Positive or above the 0v Threshold
//offtime is the time that sinewave stays negative or below the 0v Threshold
void checkhz() {
  //calculates the pulse width in milliseconds //timesout after 60ms to avoid blocking other code if no input is detected!
  ontime = pulseIn(hz, HIGH, 60);
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <pulseIn.constprop.16>
    119c:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <__data_end>
    11a0:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <__data_end+0x1>
    11a4:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__data_end+0x2>
    11a8:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <__data_end+0x3>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:306
  offtime = pulseIn(hz, LOW, 60);
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <pulseIn.constprop.16>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:308
  //Calculates the Frequency by dividing the ontime and offtime with 1 sec time (or 1000000 ms)
  freq = 1000000.0 / (ontime + offtime);//(ontime + offtime);
    11b2:	00 91 ac 01 	lds	r16, 0x01AC	; 0x8001ac <__data_end>
    11b6:	10 91 ad 01 	lds	r17, 0x01AD	; 0x8001ad <__data_end+0x1>
    11ba:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <__data_end+0x2>
    11be:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <__data_end+0x3>
    11c2:	60 0f       	add	r22, r16
    11c4:	71 1f       	adc	r23, r17
    11c6:	82 1f       	adc	r24, r18
    11c8:	93 1f       	adc	r25, r19
    11ca:	0e 94 ac 11 	call	0x2358	; 0x2358 <__floatsisf>
    11ce:	9b 01       	movw	r18, r22
    11d0:	ac 01       	movw	r20, r24
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	74 e2       	ldi	r23, 0x24	; 36
    11d6:	84 e7       	ldi	r24, 0x74	; 116
    11d8:	99 e4       	ldi	r25, 0x49	; 73
    11da:	0e 94 4c 13 	call	0x2698	; 0x2698 <__divsf3>
    11de:	60 93 b0 01 	sts	0x01B0, r22	; 0x8001b0 <freq>
    11e2:	70 93 b1 01 	sts	0x01B1, r23	; 0x8001b1 <freq+0x1>
    11e6:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <freq+0x2>
    11ea:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <freq+0x3>
    11ee:	a2 cf       	rjmp	.-188    	; 0x1134 <updateScreenData(bool) [clone .part.7]+0x72>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:543
      {
        case 6:
          checkhz();
          break;
        case 0:
          IVo();
    11f0:	0e 94 73 05 	call	0xae6	; 0xae6 <IVo()>
    11f4:	9f cf       	rjmp	.-194    	; 0x1134 <updateScreenData(bool) [clone .part.7]+0x72>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:546
          break;
        case 2:
          OVo();
    11f6:	0e 94 b9 04 	call	0x972	; 0x972 <OVo()>
    11fa:	9c cf       	rjmp	.-200    	; 0x1134 <updateScreenData(bool) [clone .part.7]+0x72>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:549
          break;
        case 4:
          ampo();
    11fc:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <ampo()>
    1200:	99 cf       	rjmp	.-206    	; 0x1134 <updateScreenData(bool) [clone .part.7]+0x72>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:559
      menu++;
    }

    //Show Error if Available
    
    if(!status && menu == -1){
    1202:	ef 3f       	cpi	r30, 0xFF	; 255
    1204:	fe 07       	cpc	r31, r30
    1206:	09 f0       	breq	.+2      	; 0x120a <updateScreenData(bool) [clone .part.7]+0x148>
    1208:	a5 cf       	rjmp	.-182    	; 0x1154 <updateScreenData(bool) [clone .part.7]+0x92>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:560
      if(!inputVok() && !outputVok() && !currentok()){
    120a:	0e 94 af 06 	call	0xd5e	; 0xd5e <inputVok()>
    120e:	18 2f       	mov	r17, r24
    1210:	0e 94 86 06 	call	0xd0c	; 0xd0c <outputVok()>
    1214:	11 11       	cpse	r17, r1
    1216:	48 c0       	rjmp	.+144    	; 0x12a8 <updateScreenData(bool) [clone .part.7]+0x1e6>
    1218:	81 11       	cpse	r24, r1
    121a:	07 c0       	rjmp	.+14     	; 0x122a <updateScreenData(bool) [clone .part.7]+0x168>
    121c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:561
        display("A AL", 0);
    1220:	68 e1       	ldi	r22, 0x18	; 24
    1222:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:560
    }

    //Show Error if Available
    
    if(!status && menu == -1){
      if(!inputVok() && !outputVok() && !currentok()){
    1224:	88 23       	and	r24, r24
    1226:	09 f4       	brne	.+2      	; 0x122a <updateScreenData(bool) [clone .part.7]+0x168>
    1228:	96 c0       	rjmp	.+300    	; 0x1356 <updateScreenData(bool) [clone .part.7]+0x294>
RINOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:467
}

//Update Run Mode Screen

bool RINOK() {
  if(rinvoltage > ILV && rinvoltage < IHV){
    122a:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <rinvoltage>
    122e:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <rinvoltage+0x1>
    1232:	00 91 ce 01 	lds	r16, 0x01CE	; 0x8001ce <ILV>
    1236:	10 91 cf 01 	lds	r17, 0x01CF	; 0x8001cf <ILV+0x1>
    123a:	08 17       	cp	r16, r24
    123c:	19 07       	cpc	r17, r25
    123e:	44 f4       	brge	.+16     	; 0x1250 <updateScreenData(bool) [clone .part.7]+0x18e>
    1240:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <IHV>
    1244:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <IHV+0x1>
    1248:	82 17       	cp	r24, r18
    124a:	93 07       	cpc	r25, r19
    124c:	0c f4       	brge	.+2      	; 0x1250 <updateScreenData(bool) [clone .part.7]+0x18e>
    124e:	fc c0       	rjmp	.+504    	; 0x1448 <updateScreenData(bool) [clone .part.7]+0x386>
YINOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:475
    return false;
  }
}

bool YINOK() {
  if(yinvoltage > ILV && yinvoltage < IHV){
    1250:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <yinvoltage>
    1254:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <yinvoltage+0x1>
    1258:	08 17       	cp	r16, r24
    125a:	19 07       	cpc	r17, r25
    125c:	44 f4       	brge	.+16     	; 0x126e <updateScreenData(bool) [clone .part.7]+0x1ac>
    125e:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <IHV>
    1262:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <IHV+0x1>
    1266:	82 17       	cp	r24, r18
    1268:	93 07       	cpc	r25, r19
    126a:	0c f4       	brge	.+2      	; 0x126e <updateScreenData(bool) [clone .part.7]+0x1ac>
    126c:	df c0       	rjmp	.+446    	; 0x142c <updateScreenData(bool) [clone .part.7]+0x36a>
BINOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:483
    return false;
  }
}

bool BINOK() {
  if(binvoltage > ILV && binvoltage < IHV){
    126e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <binvoltage>
    1272:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <binvoltage+0x1>
    1276:	08 17       	cp	r16, r24
    1278:	19 07       	cpc	r17, r25
    127a:	44 f4       	brge	.+16     	; 0x128c <updateScreenData(bool) [clone .part.7]+0x1ca>
    127c:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <IHV>
    1280:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <IHV+0x1>
    1284:	82 17       	cp	r24, r18
    1286:	93 07       	cpc	r25, r19
    1288:	0c f4       	brge	.+2      	; 0x128c <updateScreenData(bool) [clone .part.7]+0x1ca>
    128a:	d0 c0       	rjmp	.+416    	; 0x142c <updateScreenData(bool) [clone .part.7]+0x36a>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:564
    if(!status && menu == -1){
      if(!inputVok() && !outputVok() && !currentok()){
        display("A AL", 0);
      } else {
        if(!inputVok()){
          if(!RINOK() && !YINOK() && !BINOK()) { display("A AI", 0);}
    128c:	6d e1       	ldi	r22, 0x1D	; 29
    128e:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:568
          else{
            if(!RINOK()){ display("A rI", 0); }
            if(!YINOK()){ display("A yI", 0); }
            if(!BINOK()){ display("A bI", 0); }
    1290:	ce 01       	movw	r24, r28
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	0e 94 a0 07 	call	0xf40	; 0xf40 <String::String(char const*)>
    1298:	ce 01       	movw	r24, r28
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <display(String, int) [clone .constprop.9]>
    12a0:	ce 01       	movw	r24, r28
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	0e 94 b1 07 	call	0xf62	; 0xf62 <String::~String()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:571
          }
        }
        if(!outputVok()){
    12a8:	0e 94 86 06 	call	0xd0c	; 0xd0c <outputVok()>
    12ac:	81 11       	cpse	r24, r1
    12ae:	3f c0       	rjmp	.+126    	; 0x132e <updateScreenData(bool) [clone .part.7]+0x26c>
ROTOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:491
    return false;
  }
}

bool ROTOK() {
  if(routvoltage > OLV && routvoltage < OHV){
    12b0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <routvoltage>
    12b4:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <routvoltage+0x1>
    12b8:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <OLV>
    12bc:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <OLV+0x1>
    12c0:	08 17       	cp	r16, r24
    12c2:	19 07       	cpc	r17, r25
    12c4:	44 f4       	brge	.+16     	; 0x12d6 <updateScreenData(bool) [clone .part.7]+0x214>
    12c6:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <OHV>
    12ca:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <OHV+0x1>
    12ce:	82 17       	cp	r24, r18
    12d0:	93 07       	cpc	r25, r19
    12d2:	0c f4       	brge	.+2      	; 0x12d6 <updateScreenData(bool) [clone .part.7]+0x214>
    12d4:	f5 c0       	rjmp	.+490    	; 0x14c0 <updateScreenData(bool) [clone .part.7]+0x3fe>
YOTOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:499
    return false;
  }
}

bool YOTOK() {
  if(youtvoltage > OLV && youtvoltage < OHV){
    12d6:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <youtvoltage>
    12da:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <youtvoltage+0x1>
    12de:	08 17       	cp	r16, r24
    12e0:	19 07       	cpc	r17, r25
    12e2:	44 f4       	brge	.+16     	; 0x12f4 <updateScreenData(bool) [clone .part.7]+0x232>
    12e4:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <OHV>
    12e8:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <OHV+0x1>
    12ec:	82 17       	cp	r24, r18
    12ee:	93 07       	cpc	r25, r19
    12f0:	0c f4       	brge	.+2      	; 0x12f4 <updateScreenData(bool) [clone .part.7]+0x232>
    12f2:	d8 c0       	rjmp	.+432    	; 0x14a4 <updateScreenData(bool) [clone .part.7]+0x3e2>
BOTOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:507
    return false;
  }
}

bool BOTOK() {
  if(boutvoltage > OLV && boutvoltage < OHV){
    12f4:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <boutvoltage>
    12f8:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <boutvoltage+0x1>
    12fc:	08 17       	cp	r16, r24
    12fe:	19 07       	cpc	r17, r25
    1300:	44 f4       	brge	.+16     	; 0x1312 <updateScreenData(bool) [clone .part.7]+0x250>
    1302:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <OHV>
    1306:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <OHV+0x1>
    130a:	82 17       	cp	r24, r18
    130c:	93 07       	cpc	r25, r19
    130e:	0c f4       	brge	.+2      	; 0x1312 <updateScreenData(bool) [clone .part.7]+0x250>
    1310:	c9 c0       	rjmp	.+402    	; 0x14a4 <updateScreenData(bool) [clone .part.7]+0x3e2>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:572
            if(!YINOK()){ display("A yI", 0); }
            if(!BINOK()){ display("A bI", 0); }
          }
        }
        if(!outputVok()){
          if(!ROTOK() && !YOTOK() && !BOTOK()) { display("A AO", 0);}
    1312:	6c e2       	ldi	r22, 0x2C	; 44
    1314:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:576
          else{
            if(!ROTOK()){ display("A rO", 0); }
            if(!YOTOK()){ display("A yO", 0); }
            if(!BOTOK()){ display("A bO", 0); }
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	0e 94 a0 07 	call	0xf40	; 0xf40 <String::String(char const*)>
    131e:	ce 01       	movw	r24, r28
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	0e 94 b6 07 	call	0xf6c	; 0xf6c <display(String, int) [clone .constprop.9]>
    1326:	ce 01       	movw	r24, r28
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	0e 94 b1 07 	call	0xf62	; 0xf62 <String::~String()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:579
          }
        }
        if(!currentok()){
    132e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:580
          display("ALOL", 0);
    1332:	6b e3       	ldi	r22, 0x3B	; 59
    1334:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:579
            if(!ROTOK()){ display("A rO", 0); }
            if(!YOTOK()){ display("A yO", 0); }
            if(!BOTOK()){ display("A bO", 0); }
          }
        }
        if(!currentok()){
    1336:	88 23       	and	r24, r24
    1338:	71 f0       	breq	.+28     	; 0x1356 <updateScreenData(bool) [clone .part.7]+0x294>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:678
      } else {
        menu = -1;
      }
    }*/
  }
}
    133a:	26 96       	adiw	r28, 0x06	; 6
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	ff 90       	pop	r15
    1350:	08 95       	ret
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:588
    }

    switch (menu)
    {
    case 0:
      display("noor", 0);
    1352:	60 e4       	ldi	r22, 0x40	; 64
    1354:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:633
      break;
    case 14:
      displayVar(currentload, 0);
      break;
    case 15:
      display("FrEq", 0);
    1356:	ce 01       	movw	r24, r28
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	0e 94 a0 07 	call	0xf40	; 0xf40 <String::String(char const*)>
    135e:	ce 01       	movw	r24, r28
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	0e 94 b6 07 	call	0xf6c	; 0xf6c <display(String, int) [clone .constprop.9]>
    1366:	ce 01       	movw	r24, r28
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	0e 94 b1 07 	call	0xf62	; 0xf62 <String::~String()>
    136e:	e5 cf       	rjmp	.-54     	; 0x133a <updateScreenData(bool) [clone .part.7]+0x278>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:591
    {
    case 0:
      display("noor", 0);
      break;
    case 1:
      display("r IP", 0);
    1370:	65 e4       	ldi	r22, 0x45	; 69
    1372:	71 e0       	ldi	r23, 0x01	; 1
    1374:	f0 cf       	rjmp	.-32     	; 0x1356 <updateScreenData(bool) [clone .part.7]+0x294>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:594
      break;
    case 2:
      displayVar(rinvoltage, 0);
    1376:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <rinvoltage>
    137a:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <rinvoltage+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:630
      break;
    case 13:
      display("LoAd", 0);
      break;
    case 14:
      displayVar(currentload, 0);
    137e:	0e 94 15 07 	call	0xe2a	; 0xe2a <displayVar(int, int) [clone .constprop.14]>
    1382:	db cf       	rjmp	.-74     	; 0x133a <updateScreenData(bool) [clone .part.7]+0x278>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:597
      break;
    case 2:
      displayVar(rinvoltage, 0);
      break;
    case 3:
      display("r OP", 0);
    1384:	6a e4       	ldi	r22, 0x4A	; 74
    1386:	71 e0       	ldi	r23, 0x01	; 1
    1388:	e6 cf       	rjmp	.-52     	; 0x1356 <updateScreenData(bool) [clone .part.7]+0x294>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:600
      break;
    case 4:
      displayVar(routvoltage, 0);
    138a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <routvoltage>
    138e:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <routvoltage+0x1>
    1392:	f5 cf       	rjmp	.-22     	; 0x137e <updateScreenData(bool) [clone .part.7]+0x2bc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:603
      break;
    case 5:
      display("Y IP", 0);
    1394:	6f e4       	ldi	r22, 0x4F	; 79
    1396:	71 e0       	ldi	r23, 0x01	; 1
    1398:	de cf       	rjmp	.-68     	; 0x1356 <updateScreenData(bool) [clone .part.7]+0x294>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:606
      break;
    case 6:
      displayVar(yinvoltage, 0);
    139a:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <yinvoltage>
    139e:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <yinvoltage+0x1>
    13a2:	ed cf       	rjmp	.-38     	; 0x137e <updateScreenData(bool) [clone .part.7]+0x2bc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:609
      break;
    case 7:
      display("Y OP", 0);
    13a4:	64 e5       	ldi	r22, 0x54	; 84
    13a6:	71 e0       	ldi	r23, 0x01	; 1
    13a8:	d6 cf       	rjmp	.-84     	; 0x1356 <updateScreenData(bool) [clone .part.7]+0x294>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:612
      break;
    case 8:
      displayVar(youtvoltage, 0);
    13aa:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <youtvoltage>
    13ae:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <youtvoltage+0x1>
    13b2:	e5 cf       	rjmp	.-54     	; 0x137e <updateScreenData(bool) [clone .part.7]+0x2bc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:615
      break;
    case 9:
      display("b IP", 0);
    13b4:	69 e5       	ldi	r22, 0x59	; 89
    13b6:	71 e0       	ldi	r23, 0x01	; 1
    13b8:	ce cf       	rjmp	.-100    	; 0x1356 <updateScreenData(bool) [clone .part.7]+0x294>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:618
      break;
    case 10:
      displayVar(binvoltage, 0);
    13ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <binvoltage>
    13be:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <binvoltage+0x1>
    13c2:	dd cf       	rjmp	.-70     	; 0x137e <updateScreenData(bool) [clone .part.7]+0x2bc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:621
      break;
    case 11:
      display("b OP", 0);
    13c4:	6e e5       	ldi	r22, 0x5E	; 94
    13c6:	71 e0       	ldi	r23, 0x01	; 1
    13c8:	c6 cf       	rjmp	.-116    	; 0x1356 <updateScreenData(bool) [clone .part.7]+0x294>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:624
      break;
    case 12:
      displayVar(boutvoltage, 0);
    13ca:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <boutvoltage>
    13ce:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <boutvoltage+0x1>
    13d2:	d5 cf       	rjmp	.-86     	; 0x137e <updateScreenData(bool) [clone .part.7]+0x2bc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:627
      break;
    case 13:
      display("LoAd", 0);
    13d4:	63 e6       	ldi	r22, 0x63	; 99
    13d6:	71 e0       	ldi	r23, 0x01	; 1
    13d8:	be cf       	rjmp	.-132    	; 0x1356 <updateScreenData(bool) [clone .part.7]+0x294>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:630
      break;
    case 14:
      displayVar(currentload, 0);
    13da:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <currentload>
    13de:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <currentload+0x1>
    13e2:	cd cf       	rjmp	.-102    	; 0x137e <updateScreenData(bool) [clone .part.7]+0x2bc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:633
      break;
    case 15:
      display("FrEq", 0);
    13e4:	68 e6       	ldi	r22, 0x68	; 104
    13e6:	71 e0       	ldi	r23, 0x01	; 1
    13e8:	b6 cf       	rjmp	.-148    	; 0x1356 <updateScreenData(bool) [clone .part.7]+0x294>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:636
      break;
    case 16:
      displayVar((int)freq, 0);
    13ea:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <freq>
    13ee:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <freq+0x1>
    13f2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <freq+0x2>
    13f6:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <freq+0x3>
    13fa:	0e 94 be 13 	call	0x277c	; 0x277c <__fixsfsi>
    13fe:	cb 01       	movw	r24, r22
    1400:	0e 94 15 07 	call	0xe2a	; 0xe2a <displayVar(int, int) [clone .constprop.14]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:638
    case 17:
      if(status){
    1404:	ff 20       	and	r15, r15
    1406:	29 f0       	breq	.+10     	; 0x1412 <updateScreenData(bool) [clone .part.7]+0x350>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:639
        menu = 0;
    1408:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <menu+0x1>
    140c:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <menu>
    1410:	94 cf       	rjmp	.-216    	; 0x133a <updateScreenData(bool) [clone .part.7]+0x278>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:641
      } else {
        menu = -1;
    1412:	8f ef       	ldi	r24, 0xFF	; 255
    1414:	9f ef       	ldi	r25, 0xFF	; 255
    1416:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <menu+0x1>
    141a:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <menu>
    141e:	8d cf       	rjmp	.-230    	; 0x133a <updateScreenData(bool) [clone .part.7]+0x278>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:526
    }
    if(!status && !alarmOnce){
      alarmOnce = true;
      menu == -1;
    }
    if(status && alarmOnce){
    1420:	88 23       	and	r24, r24
    1422:	09 f4       	brne	.+2      	; 0x1426 <updateScreenData(bool) [clone .part.7]+0x364>
    1424:	6d ce       	rjmp	.-806    	; 0x1100 <updateScreenData(bool) [clone .part.7]+0x3e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:527
      alarmOnce = false;
    1426:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <alarmOnce>
    142a:	6a ce       	rjmp	.-812    	; 0x1100 <updateScreenData(bool) [clone .part.7]+0x3e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:566
        display("A AL", 0);
      } else {
        if(!inputVok()){
          if(!RINOK() && !YINOK() && !BINOK()) { display("A AI", 0);}
          else{
            if(!RINOK()){ display("A rI", 0); }
    142c:	6d e6       	ldi	r22, 0x6D	; 109
    142e:	71 e0       	ldi	r23, 0x01	; 1
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	0e 94 a0 07 	call	0xf40	; 0xf40 <String::String(char const*)>
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <display(String, int) [clone .constprop.9]>
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	0e 94 b1 07 	call	0xf62	; 0xf62 <String::~String()>
YINOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:475
    return false;
  }
}

bool YINOK() {
  if(yinvoltage > ILV && yinvoltage < IHV){
    1448:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <yinvoltage>
    144c:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <yinvoltage+0x1>
    1450:	08 17       	cp	r16, r24
    1452:	19 07       	cpc	r17, r25
    1454:	3c f4       	brge	.+14     	; 0x1464 <updateScreenData(bool) [clone .part.7]+0x3a2>
    1456:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <IHV>
    145a:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <IHV+0x1>
    145e:	82 17       	cp	r24, r18
    1460:	93 07       	cpc	r25, r19
    1462:	74 f0       	brlt	.+28     	; 0x1480 <updateScreenData(bool) [clone .part.7]+0x3be>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:567
      } else {
        if(!inputVok()){
          if(!RINOK() && !YINOK() && !BINOK()) { display("A AI", 0);}
          else{
            if(!RINOK()){ display("A rI", 0); }
            if(!YINOK()){ display("A yI", 0); }
    1464:	62 e2       	ldi	r22, 0x22	; 34
    1466:	71 e0       	ldi	r23, 0x01	; 1
    1468:	ce 01       	movw	r24, r28
    146a:	01 96       	adiw	r24, 0x01	; 1
    146c:	0e 94 a0 07 	call	0xf40	; 0xf40 <String::String(char const*)>
    1470:	ce 01       	movw	r24, r28
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	0e 94 b6 07 	call	0xf6c	; 0xf6c <display(String, int) [clone .constprop.9]>
    1478:	ce 01       	movw	r24, r28
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	0e 94 b1 07 	call	0xf62	; 0xf62 <String::~String()>
BINOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:483
    return false;
  }
}

bool BINOK() {
  if(binvoltage > ILV && binvoltage < IHV){
    1480:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <binvoltage>
    1484:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <binvoltage+0x1>
    1488:	08 17       	cp	r16, r24
    148a:	19 07       	cpc	r17, r25
    148c:	44 f4       	brge	.+16     	; 0x149e <updateScreenData(bool) [clone .part.7]+0x3dc>
    148e:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <IHV>
    1492:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <IHV+0x1>
    1496:	82 17       	cp	r24, r18
    1498:	93 07       	cpc	r25, r19
    149a:	0c f4       	brge	.+2      	; 0x149e <updateScreenData(bool) [clone .part.7]+0x3dc>
    149c:	05 cf       	rjmp	.-502    	; 0x12a8 <updateScreenData(bool) [clone .part.7]+0x1e6>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:568
        if(!inputVok()){
          if(!RINOK() && !YINOK() && !BINOK()) { display("A AI", 0);}
          else{
            if(!RINOK()){ display("A rI", 0); }
            if(!YINOK()){ display("A yI", 0); }
            if(!BINOK()){ display("A bI", 0); }
    149e:	67 e2       	ldi	r22, 0x27	; 39
    14a0:	71 e0       	ldi	r23, 0x01	; 1
    14a2:	f6 ce       	rjmp	.-532    	; 0x1290 <updateScreenData(bool) [clone .part.7]+0x1ce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:574
          }
        }
        if(!outputVok()){
          if(!ROTOK() && !YOTOK() && !BOTOK()) { display("A AO", 0);}
          else{
            if(!ROTOK()){ display("A rO", 0); }
    14a4:	62 e7       	ldi	r22, 0x72	; 114
    14a6:	71 e0       	ldi	r23, 0x01	; 1
    14a8:	ce 01       	movw	r24, r28
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	0e 94 a0 07 	call	0xf40	; 0xf40 <String::String(char const*)>
    14b0:	ce 01       	movw	r24, r28
    14b2:	01 96       	adiw	r24, 0x01	; 1
    14b4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <display(String, int) [clone .constprop.9]>
    14b8:	ce 01       	movw	r24, r28
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	0e 94 b1 07 	call	0xf62	; 0xf62 <String::~String()>
YOTOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:499
    return false;
  }
}

bool YOTOK() {
  if(youtvoltage > OLV && youtvoltage < OHV){
    14c0:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <youtvoltage>
    14c4:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <youtvoltage+0x1>
    14c8:	08 17       	cp	r16, r24
    14ca:	19 07       	cpc	r17, r25
    14cc:	3c f4       	brge	.+14     	; 0x14dc <updateScreenData(bool) [clone .part.7]+0x41a>
    14ce:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <OHV>
    14d2:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <OHV+0x1>
    14d6:	82 17       	cp	r24, r18
    14d8:	93 07       	cpc	r25, r19
    14da:	74 f0       	brlt	.+28     	; 0x14f8 <updateScreenData(bool) [clone .part.7]+0x436>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:575
        }
        if(!outputVok()){
          if(!ROTOK() && !YOTOK() && !BOTOK()) { display("A AO", 0);}
          else{
            if(!ROTOK()){ display("A rO", 0); }
            if(!YOTOK()){ display("A yO", 0); }
    14dc:	61 e3       	ldi	r22, 0x31	; 49
    14de:	71 e0       	ldi	r23, 0x01	; 1
    14e0:	ce 01       	movw	r24, r28
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	0e 94 a0 07 	call	0xf40	; 0xf40 <String::String(char const*)>
    14e8:	ce 01       	movw	r24, r28
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	0e 94 b6 07 	call	0xf6c	; 0xf6c <display(String, int) [clone .constprop.9]>
    14f0:	ce 01       	movw	r24, r28
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	0e 94 b1 07 	call	0xf62	; 0xf62 <String::~String()>
BOTOK():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:507
    return false;
  }
}

bool BOTOK() {
  if(boutvoltage > OLV && boutvoltage < OHV){
    14f8:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <boutvoltage>
    14fc:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <boutvoltage+0x1>
    1500:	08 17       	cp	r16, r24
    1502:	19 07       	cpc	r17, r25
    1504:	44 f4       	brge	.+16     	; 0x1516 <updateScreenData(bool) [clone .part.7]+0x454>
    1506:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <OHV>
    150a:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <OHV+0x1>
    150e:	82 17       	cp	r24, r18
    1510:	93 07       	cpc	r25, r19
    1512:	0c f4       	brge	.+2      	; 0x1516 <updateScreenData(bool) [clone .part.7]+0x454>
    1514:	0c cf       	rjmp	.-488    	; 0x132e <updateScreenData(bool) [clone .part.7]+0x26c>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:576
        if(!outputVok()){
          if(!ROTOK() && !YOTOK() && !BOTOK()) { display("A AO", 0);}
          else{
            if(!ROTOK()){ display("A rO", 0); }
            if(!YOTOK()){ display("A yO", 0); }
            if(!BOTOK()){ display("A bO", 0); }
    1516:	66 e3       	ldi	r22, 0x36	; 54
    1518:	71 e0       	ldi	r23, 0x01	; 1
    151a:	fd ce       	rjmp	.-518    	; 0x1316 <updateScreenData(bool) [clone .part.7]+0x254>

0000151c <done()>:
done():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:999
  default:
    break;
  }
}

void done() {display("donE", 0);}
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	00 d0       	rcall	.+0      	; 0x1522 <done()+0x6>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <done()+0x8>
    1524:	00 d0       	rcall	.+0      	; 0x1526 <done()+0xa>
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	67 e7       	ldi	r22, 0x77	; 119
    152c:	71 e0       	ldi	r23, 0x01	; 1
    152e:	ce 01       	movw	r24, r28
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	0e 94 a0 07 	call	0xf40	; 0xf40 <String::String(char const*)>
    1536:	ce 01       	movw	r24, r28
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <display(String, int) [clone .constprop.9]>
    153e:	ce 01       	movw	r24, r28
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	0e 94 b1 07 	call	0xf62	; 0xf62 <String::~String()>
    1546:	26 96       	adiw	r28, 0x06	; 6
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	08 95       	ret

00001558 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>:
_ZN11EEPROMClass6updateEih.isra.2():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	ec 01       	movw	r28, r24
    1560:	16 2f       	mov	r17, r22
operator*():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1562:	0e 94 c9 12 	call	0x2592	; 0x2592 <eeprom_read_byte>
update():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    1566:	18 17       	cp	r17, r24
    1568:	39 f0       	breq	.+14     	; 0x1578 <EEPROMClass::update(int, unsigned char) [clone .isra.2]+0x20>
_ZN5EERefaSEh():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    156a:	61 2f       	mov	r22, r17
    156c:	ce 01       	movw	r24, r28
_ZN11EEPROMClass6updateEih.isra.2():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
_ZN5EERefaSEh():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1574:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <eeprom_write_byte>
_ZN11EEPROMClass6updateEih.isra.2():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	08 95       	ret

00001580 <EEPROMClass::read(int) [clone .isra.1]>:
operator*():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1580:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <eeprom_read_byte>

00001584 <__vector_18>:
__vector_18():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1584:	1f 92       	push	r1
    1586:	0f 92       	push	r0
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	0f 92       	push	r0
    158c:	11 24       	eor	r1, r1
    158e:	2f 93       	push	r18
    1590:	3f 93       	push	r19
    1592:	8f 93       	push	r24
    1594:	9f 93       	push	r25
    1596:	af 93       	push	r26
    1598:	bf 93       	push	r27
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    159a:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <timer0_millis>
    159e:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <timer0_millis+0x1>
    15a2:	a0 91 6d 02 	lds	r26, 0x026D	; 0x80026d <timer0_millis+0x2>
    15a6:	b0 91 6e 02 	lds	r27, 0x026E	; 0x80026e <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    15aa:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <timer0_fract>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    15ae:	26 e0       	ldi	r18, 0x06	; 6
    15b0:	23 0f       	add	r18, r19
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    15b2:	2d 37       	cpi	r18, 0x7D	; 125
    15b4:	68 f1       	brcs	.+90     	; 0x1610 <__vector_18+0x8c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    15b6:	29 e8       	ldi	r18, 0x89	; 137
    15b8:	23 0f       	add	r18, r19
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    15ba:	03 96       	adiw	r24, 0x03	; 3
    15bc:	a1 1d       	adc	r26, r1
    15be:	b1 1d       	adc	r27, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    15c0:	20 93 6a 02 	sts	0x026A, r18	; 0x80026a <timer0_fract>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    15c4:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <timer0_millis>
    15c8:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <timer0_millis+0x1>
    15cc:	a0 93 6d 02 	sts	0x026D, r26	; 0x80026d <timer0_millis+0x2>
    15d0:	b0 93 6e 02 	sts	0x026E, r27	; 0x80026e <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    15d4:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <timer0_overflow_count>
    15d8:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <timer0_overflow_count+0x1>
    15dc:	a0 91 71 02 	lds	r26, 0x0271	; 0x800271 <timer0_overflow_count+0x2>
    15e0:	b0 91 72 02 	lds	r27, 0x0272	; 0x800272 <timer0_overflow_count+0x3>
    15e4:	01 96       	adiw	r24, 0x01	; 1
    15e6:	a1 1d       	adc	r26, r1
    15e8:	b1 1d       	adc	r27, r1
    15ea:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <timer0_overflow_count>
    15ee:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <timer0_overflow_count+0x1>
    15f2:	a0 93 71 02 	sts	0x0271, r26	; 0x800271 <timer0_overflow_count+0x2>
    15f6:	b0 93 72 02 	sts	0x0272, r27	; 0x800272 <timer0_overflow_count+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    15fa:	bf 91       	pop	r27
    15fc:	af 91       	pop	r26
    15fe:	9f 91       	pop	r25
    1600:	8f 91       	pop	r24
    1602:	3f 91       	pop	r19
    1604:	2f 91       	pop	r18
    1606:	0f 90       	pop	r0
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	0f 90       	pop	r0
    160c:	1f 90       	pop	r1
    160e:	18 95       	reti
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    1610:	02 96       	adiw	r24, 0x02	; 2
    1612:	a1 1d       	adc	r26, r1
    1614:	b1 1d       	adc	r27, r1
    1616:	d4 cf       	rjmp	.-88     	; 0x15c0 <__vector_18+0x3c>

00001618 <countPulseASM>:
countPulseASM():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:62

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
    1618:	cf 92       	push	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:63
    push r13   ;   ;  131 pushqi1/1 [length = 1]
    161a:	df 92       	push	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:64
    push r14   ;   ;  132 pushqi1/1 [length = 1]
    161c:	ef 92       	push	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:65
    push r15   ;   ;  133 pushqi1/1 [length = 1]
    161e:	ff 92       	push	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:66
    push r16   ;   ;  134 pushqi1/1 [length = 1]
    1620:	0f 93       	push	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:67
    push r17   ;   ;  135 pushqi1/1 [length = 1]
    1622:	1f 93       	push	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:72
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
    1624:	e8 2f       	mov	r30, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:73
    mov r31,r25  ;  port, port
    1626:	f9 2f       	mov	r31, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:79
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
    1628:	05 c0       	rjmp	.+10     	; 0x1634 <countPulseASM+0x1c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:83
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
    162a:	01 50       	subi	r16, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:84
    sbc r17, r1   ;  maxloops
    162c:	11 09       	sbc	r17, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:85
    sbc r18, r1   ;  maxloops
    162e:	21 09       	sbc	r18, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:86
    sbc r19, r1   ;  maxloops
    1630:	31 09       	sbc	r19, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:87
    breq .L13  ; ,   ;  19  branch  [length = 1]
    1632:	61 f1       	breq	.+88     	; 0x168c <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:91
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
    1634:	90 81       	ld	r25, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:92
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
    1636:	96 23       	and	r25, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:93
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
    1638:	94 17       	cp	r25, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:94
    breq .L4   ; ,   ;  26  branch  [length = 1]
    163a:	b9 f3       	breq	.-18     	; 0x162a <countPulseASM+0x12>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:95
    rjmp .L6   ;   ;  184 jump  [length = 1]
    163c:	05 c0       	rjmp	.+10     	; 0x1648 <countPulseASM+0x30>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:104
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
    163e:	01 50       	subi	r16, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:105
    sbc r17, r1   ;  maxloops
    1640:	11 09       	sbc	r17, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:106
    sbc r18, r1   ;  maxloops
    1642:	21 09       	sbc	r18, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:107
    sbc r19, r1   ;  maxloops
    1644:	31 09       	sbc	r19, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:108
    breq .L13  ; ,   ;  33  branch  [length = 1]
    1646:	11 f1       	breq	.+68     	; 0x168c <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:112
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
    1648:	90 81       	ld	r25, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:113
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
    164a:	96 23       	and	r25, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:114
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
    164c:	94 13       	cpse	r25, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:115
    rjmp .L7   ;
    164e:	f7 cf       	rjmp	.-18     	; 0x163e <countPulseASM+0x26>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:116
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
    1650:	c1 2c       	mov	r12, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:117
    mov r13, r1   ;  width
    1652:	d1 2c       	mov	r13, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:118
    mov r14, r1   ;  width
    1654:	e1 2c       	mov	r14, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:119
    mov r15, r1   ;  width
    1656:	f1 2c       	mov	r15, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:120
    rjmp .L9   ;   ;  186 jump  [length = 1]
    1658:	0a c0       	rjmp	.+20     	; 0x166e <countPulseASM+0x56>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:129
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
    165a:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:130
    sub r12,r24  ;  width,
    165c:	c8 1a       	sub	r12, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:131
    sbc r13,r24  ;  width,
    165e:	d8 0a       	sbc	r13, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:132
    sbc r14,r24  ;  width,
    1660:	e8 0a       	sbc	r14, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:133
    sbc r15,r24  ;  width,
    1662:	f8 0a       	sbc	r15, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:134
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
    1664:	0c 15       	cp	r16, r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:135
    cpc r17,r13  ;  maxloops, width
    1666:	1d 05       	cpc	r17, r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:136
    cpc r18,r14  ;  maxloops, width
    1668:	2e 05       	cpc	r18, r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:137
    cpc r19,r15  ;  maxloops, width
    166a:	3f 05       	cpc	r19, r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:138
    breq .L13  ; ,   ;  52  branch  [length = 1]
    166c:	79 f0       	breq	.+30     	; 0x168c <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:142
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
    166e:	80 81       	ld	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:143
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
    1670:	86 23       	and	r24, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:144
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
    1672:	84 17       	cp	r24, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:145
    breq .L10  ; ,   ;  64  branch  [length = 1]
    1674:	91 f3       	breq	.-28     	; 0x165a <countPulseASM+0x42>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:151
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
    1676:	6c 2d       	mov	r22, r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:152
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
    1678:	7d 2d       	mov	r23, r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:153
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
    167a:	8e 2d       	mov	r24, r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:154
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
    167c:	9f 2d       	mov	r25, r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:157
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
    167e:	1f 91       	pop	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:158
    pop r16  ;   ;  172 popqi [length = 1]
    1680:	0f 91       	pop	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:159
    pop r15  ;   ;  173 popqi [length = 1]
    1682:	ff 90       	pop	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:160
    pop r14  ;   ;  174 popqi [length = 1]
    1684:	ef 90       	pop	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:161
    pop r13  ;   ;  175 popqi [length = 1]
    1686:	df 90       	pop	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:162
    pop r12  ;   ;  176 popqi [length = 1]
    1688:	cf 90       	pop	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:163
    ret  ;  177 return_from_epilogue  [length = 1]
    168a:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:166
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
    168c:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:167
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
    168e:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:168
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
    1690:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:169
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
    1692:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:172
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
    1694:	1f 91       	pop	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:173
    pop r16  ;   ;  139 popqi [length = 1]
    1696:	0f 91       	pop	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:174
    pop r15  ;   ;  140 popqi [length = 1]
    1698:	ff 90       	pop	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:175
    pop r14  ;   ;  141 popqi [length = 1]
    169a:	ef 90       	pop	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:176
    pop r13  ;   ;  142 popqi [length = 1]
    169c:	df 90       	pop	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:177
    pop r12  ;   ;  143 popqi [length = 1]
    169e:	cf 90       	pop	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:178
    ret  ;  144 return_from_epilogue  [length = 1]
    16a0:	08 95       	ret

000016a2 <BlockNot::addToTimerList()>:
addToTimerList():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:640
void resetAllTimers(BlockNot *timer) {
        resetAllTimers(timer->BlockNot::getStartTime());
}

void BlockNot::addToTimerList() {
        if (firstTimer == nullptr) {
    16a2:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <BlockNot::firstTimer>
    16a6:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <BlockNot::firstTimer+0x1>
    16aa:	23 2b       	or	r18, r19
    16ac:	61 f4       	brne	.+24     	; 0x16c6 <BlockNot::addToTimerList()+0x24>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:641
            firstTimer = currentTimer = this;
    16ae:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <BlockNot::currentTimer+0x1>
    16b2:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <BlockNot::currentTimer>
    16b6:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <BlockNot::firstTimer+0x1>
    16ba:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <BlockNot::firstTimer>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:646
        } else {
            currentTimer->nextTimer = this;
            currentTimer = this;
        }
        this->nextTimer = nullptr;
    16be:	fc 01       	movw	r30, r24
    16c0:	10 a2       	std	Z+32, r1	; 0x20
    16c2:	17 8e       	std	Z+31, r1	; 0x1f
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:647
}
    16c4:	08 95       	ret
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:643

void BlockNot::addToTimerList() {
        if (firstTimer == nullptr) {
            firstTimer = currentTimer = this;
        } else {
            currentTimer->nextTimer = this;
    16c6:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <BlockNot::currentTimer>
    16ca:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <BlockNot::currentTimer+0x1>
    16ce:	90 a3       	std	Z+32, r25	; 0x20
    16d0:	87 8f       	std	Z+31, r24	; 0x1f
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:644
            currentTimer = this;
    16d2:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <BlockNot::currentTimer+0x1>
    16d6:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <BlockNot::currentTimer>
    16da:	f1 cf       	rjmp	.-30     	; 0x16be <BlockNot::addToTimerList()+0x1c>

000016dc <main>:
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	64 97       	sbiw	r28, 0x14	; 20
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    16f0:	78 94       	sei
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    16f2:	84 b5       	in	r24, 0x24	; 36
    16f4:	83 60       	ori	r24, 0x03	; 3
    16f6:	84 bd       	out	0x24, r24	; 36
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    16f8:	85 b5       	in	r24, 0x25	; 37
    16fa:	83 60       	ori	r24, 0x03	; 3
    16fc:	85 bd       	out	0x25, r24	; 37
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    16fe:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1702:	81 60       	ori	r24, 0x01	; 1
    1704:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1708:	82 e0       	ldi	r24, 0x02	; 2
    170a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    170e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1712:	81 60       	ori	r24, 0x01	; 1
    1714:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1718:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    171c:	81 60       	ori	r24, 0x01	; 1
    171e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    1722:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1726:	84 60       	ori	r24, 0x04	; 4
    1728:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    172c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1730:	81 60       	ori	r24, 0x01	; 1
    1732:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    1736:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    173a:	83 60       	ori	r24, 0x03	; 3
    173c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    1740:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1744:	81 60       	ori	r24, 0x01	; 1
    1746:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    174a:	86 e8       	ldi	r24, 0x86	; 134
    174c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    1750:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
Begin():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:78
	byte segA, byte segB, byte segC, byte segD, byte segE, byte segF, byte segG,
	byte segDP,
	byte segCol, byte segApos)
{
  //Bring all the variables in from the caller
  numberOfDigits = numOfDigits;
    1754:	84 e0       	ldi	r24, 0x04	; 4
    1756:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <display1+0x15>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:79
  digit1 = dig1;
    175a:	13 e1       	ldi	r17, 0x13	; 19
    175c:	10 93 78 02 	sts	0x0278, r17	; 0x800278 <display1+0x5>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:80
  digit2 = dig2;
    1760:	b2 e1       	ldi	r27, 0x12	; 18
    1762:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <display1+0x6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:81
  digit3 = dig3;
    1766:	a1 e1       	ldi	r26, 0x11	; 17
    1768:	a0 93 7a 02 	sts	0x027A, r26	; 0x80027a <display1+0x7>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:82
  digit4 = dig4;
    176c:	f0 e1       	ldi	r31, 0x10	; 16
    176e:	f0 93 7b 02 	sts	0x027B, r31	; 0x80027b <display1+0x8>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:83
  digitApostrophe = digitApos;
    1772:	8f ef       	ldi	r24, 0xFF	; 255
    1774:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <display1+0x9>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:84
  digitColon = digitCol;
    1778:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <display1+0xa>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:85
  segmentA = segA;
    177c:	e8 e0       	ldi	r30, 0x08	; 8
    177e:	e0 93 80 02 	sts	0x0280, r30	; 0x800280 <display1+0xd>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:86
  segmentB = segB;
    1782:	79 e0       	ldi	r23, 0x09	; 9
    1784:	70 93 81 02 	sts	0x0281, r23	; 0x800281 <display1+0xe>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:87
  segmentC = segC;
    1788:	6a e0       	ldi	r22, 0x0A	; 10
    178a:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <display1+0xf>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:88
  segmentD = segD;
    178e:	5b e0       	ldi	r21, 0x0B	; 11
    1790:	50 93 83 02 	sts	0x0283, r21	; 0x800283 <display1+0x10>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:89
  segmentE = segE;
    1794:	4c e0       	ldi	r20, 0x0C	; 12
    1796:	40 93 84 02 	sts	0x0284, r20	; 0x800284 <display1+0x11>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:90
  segmentF = segF;
    179a:	3d e0       	ldi	r19, 0x0D	; 13
    179c:	30 93 85 02 	sts	0x0285, r19	; 0x800285 <display1+0x12>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:91
  segmentG = segG;
    17a0:	2e e0       	ldi	r18, 0x0E	; 14
    17a2:	20 93 86 02 	sts	0x0286, r18	; 0x800286 <display1+0x13>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:92
  segmentDP = segDP;
    17a6:	9f e0       	ldi	r25, 0x0F	; 15
    17a8:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <display1+0x14>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:93
  segmentApostrophe = segApos;
    17ac:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <display1+0xb>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:94
  segmentColon = segCol;
    17b0:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <display1+0xc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:98

  //Assign input values to variables
  //mode is what the digit pins must be set at for it to be turned on. 0 for common cathode, 1 for common anode
  mode = mode_in;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <display1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:101
  if(mode == COMMON_ANODE)
  {
    DigitOn = HIGH;
    17ba:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <display1+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:102
    DigitOff = LOW;
    17be:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <display1+0x2>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:103
    SegOn = LOW;
    17c2:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <display1+0x3>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:104
    SegOff = HIGH;
    17c6:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <display1+0x4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:114
    DigitOff = HIGH;
    SegOn = HIGH;
    SegOff = LOW;
  }

  DigitPins[0] = digit1;
    17ca:	10 93 8b 02 	sts	0x028B, r17	; 0x80028b <display1+0x18>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:115
  DigitPins[1] = digit2;
    17ce:	b0 93 8c 02 	sts	0x028C, r27	; 0x80028c <display1+0x19>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:116
  DigitPins[2] = digit3;
    17d2:	a0 93 8d 02 	sts	0x028D, r26	; 0x80028d <display1+0x1a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:117
  DigitPins[3] = digit4;
    17d6:	f0 93 8e 02 	sts	0x028E, r31	; 0x80028e <display1+0x1b>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:118
  SegmentPins[0] = segmentA;
    17da:	e0 93 8f 02 	sts	0x028F, r30	; 0x80028f <display1+0x1c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:119
  SegmentPins[1] = segmentB;
    17de:	70 93 90 02 	sts	0x0290, r23	; 0x800290 <display1+0x1d>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:120
  SegmentPins[2] = segmentC;
    17e2:	60 93 91 02 	sts	0x0291, r22	; 0x800291 <display1+0x1e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:121
  SegmentPins[3] = segmentD;
    17e6:	50 93 92 02 	sts	0x0292, r21	; 0x800292 <display1+0x1f>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:122
  SegmentPins[4] = segmentE;
    17ea:	40 93 93 02 	sts	0x0293, r20	; 0x800293 <display1+0x20>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:123
  SegmentPins[5] = segmentF;
    17ee:	30 93 94 02 	sts	0x0294, r19	; 0x800294 <display1+0x21>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:124
  SegmentPins[6] = segmentG;
    17f2:	20 93 95 02 	sts	0x0295, r18	; 0x800295 <display1+0x22>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:125
  SegmentPins[7] = segmentDP;
    17f6:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <display1+0x23>
main():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:129

  //Turn everything Off before setting pin as output
  //Set all digit pins off. Low for common anode, high for common cathode
  for (byte digit = 0 ; digit < numberOfDigits ; digit++)
    17fa:	10 e0       	ldi	r17, 0x00	; 0
Begin():
    17fc:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <display1+0x15>
    1800:	18 17       	cp	r17, r24
    1802:	98 f4       	brcc	.+38     	; 0x182a <main+0x14e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:131
  {
    digitalWrite(DigitPins[digit], DigitOff);
    1804:	81 2f       	mov	r24, r17
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	9c 01       	movw	r18, r24
    180a:	2d 58       	subi	r18, 0x8D	; 141
    180c:	3d 4f       	sbci	r19, 0xFD	; 253
    180e:	79 01       	movw	r14, r18
    1810:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <display1+0x2>
    1814:	f9 01       	movw	r30, r18
    1816:	80 8d       	ldd	r24, Z+24	; 0x18
    1818:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:132
    pinMode(DigitPins[digit], OUTPUT);
    181c:	61 e0       	ldi	r22, 0x01	; 1
    181e:	f7 01       	movw	r30, r14
    1820:	80 8d       	ldd	r24, Z+24	; 0x18
    1822:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:129
  SegmentPins[6] = segmentG;
  SegmentPins[7] = segmentDP;

  //Turn everything Off before setting pin as output
  //Set all digit pins off. Low for common anode, high for common cathode
  for (byte digit = 0 ; digit < numberOfDigits ; digit++)
    1826:	1f 5f       	subi	r17, 0xFF	; 255
    1828:	e9 cf       	rjmp	.-46     	; 0x17fc <main+0x120>
    182a:	03 e7       	ldi	r16, 0x73	; 115
    182c:	12 e0       	ldi	r17, 0x02	; 2
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:137
    pinMode(DigitPins[digit], OUTPUT);
  }
  //Set all segment pins off. High for common anode, low for common cathode
  for (byte seg = 0 ; seg < 8 ; seg++)
  {
    digitalWrite(SegmentPins[seg], SegOff);
    182e:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <display1+0x4>
    1832:	f8 01       	movw	r30, r16
    1834:	84 8d       	ldd	r24, Z+28	; 0x1c
    1836:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:138
    pinMode(SegmentPins[seg], OUTPUT);
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	f8 01       	movw	r30, r16
    183e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1840:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
    1844:	0f 5f       	subi	r16, 0xFF	; 255
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:135
  {
    digitalWrite(DigitPins[digit], DigitOff);
    pinMode(DigitPins[digit], OUTPUT);
  }
  //Set all segment pins off. High for common anode, low for common cathode
  for (byte seg = 0 ; seg < 8 ; seg++)
    1848:	f2 e0       	ldi	r31, 0x02	; 2
    184a:	0b 37       	cpi	r16, 0x7B	; 123
    184c:	1f 07       	cpc	r17, r31
    184e:	79 f7       	brne	.-34     	; 0x182e <main+0x152>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:141
  {
    digitalWrite(SegmentPins[seg], SegOff);
    pinMode(SegmentPins[seg], OUTPUT);
  }

  if (digitColon != 255)
    1850:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <display1+0xa>
    1854:	8f 3f       	cpi	r24, 0xFF	; 255
    1856:	a1 f0       	breq	.+40     	; 0x1880 <main+0x1a4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:143
  {
	digitalWrite(digitColon, DigitOff);
    1858:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <display1+0x2>
    185c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:144
	pinMode(digitColon, OUTPUT);
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <display1+0xa>
    1866:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:145
	digitalWrite(segmentColon, SegOff);
    186a:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <display1+0x4>
    186e:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <display1+0xc>
    1872:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:146
	pinMode(segmentColon, OUTPUT);
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <display1+0xc>
    187c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:148
  }
  if (digitApostrophe != 255)
    1880:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <display1+0x9>
    1884:	8f 3f       	cpi	r24, 0xFF	; 255
    1886:	a1 f0       	breq	.+40     	; 0x18b0 <main+0x1d4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:150
  {
	digitalWrite(digitApostrophe, DigitOff);
    1888:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <display1+0x2>
    188c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:151
	pinMode(digitApostrophe, OUTPUT);
    1890:	61 e0       	ldi	r22, 0x01	; 1
    1892:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <display1+0x9>
    1896:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:152
	digitalWrite(segmentApostrophe, SegOff);
    189a:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <display1+0x4>
    189e:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <display1+0xb>
    18a2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:153
	pinMode(segmentApostrophe, OUTPUT);
    18a6:	61 e0       	ldi	r22, 0x01	; 1
    18a8:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <display1+0xb>
    18ac:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
SetBrightness():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:179
//We need to error check and map the incoming value
void SevSeg::SetBrightness(byte percentBright)
{
	//Error check and scale brightnessLevel
	if(percentBright > 100) percentBright = 100;
	brightnessDelay = map(percentBright, 0, 100, 0, FRAMEPERIOD); //map brightnessDelay to 0 to the max which is framePeriod
    18b0:	80 ed       	ldi	r24, 0xD0	; 208
    18b2:	97 e0       	ldi	r25, 0x07	; 7
    18b4:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <display1+0x17>
    18b8:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <display1+0x16>
setup():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:192
void setup() {
//Setup Display Data
setupDisplay();
//Setup Inputs 
//setIN(); is a custom Function Defined at the bottom of the Program!
setIN(ok);
    18bc:	84 e1       	ldi	r24, 0x14	; 20
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 77 04 	call	0x8ee	; 0x8ee <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:193
setIN(plus);
    18c4:	85 e1       	ldi	r24, 0x15	; 21
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 77 04 	call	0x8ee	; 0x8ee <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:194
setIN(minus);
    18cc:	86 e1       	ldi	r24, 0x16	; 22
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 77 04 	call	0x8ee	; 0x8ee <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:195
setIN(RINPIN);
    18d4:	88 e1       	ldi	r24, 0x18	; 24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 77 04 	call	0x8ee	; 0x8ee <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:196
setIN(YINPIN);
    18dc:	89 e1       	ldi	r24, 0x19	; 25
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	0e 94 77 04 	call	0x8ee	; 0x8ee <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:197
setIN(BINPIN);
    18e4:	8a e1       	ldi	r24, 0x1A	; 26
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 77 04 	call	0x8ee	; 0x8ee <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:198
setIN(ROTPIN);
    18ec:	8b e1       	ldi	r24, 0x1B	; 27
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 77 04 	call	0x8ee	; 0x8ee <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:199
setIN(YOTPIN);
    18f4:	8c e1       	ldi	r24, 0x1C	; 28
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 77 04 	call	0x8ee	; 0x8ee <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:200
setIN(BOTPIN);
    18fc:	8d e1       	ldi	r24, 0x1D	; 29
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 77 04 	call	0x8ee	; 0x8ee <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:201
setIN(current);
    1904:	8e e1       	ldi	r24, 0x1E	; 30
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 77 04 	call	0x8ee	; 0x8ee <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:210
//setIN(setupPin); //change setup mode from RUN/SETUP//
///////////////////////////////////////////////////////

//Set Outputs
//setOUT(); is a custom Function Defined at the bottom of the Program!
setOUT(motorRFW);
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	0e 94 74 04 	call	0x8e8	; 0x8e8 <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:211
setOUT(motorRBW);
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 74 04 	call	0x8e8	; 0x8e8 <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:212
setOUT(motorYFW);
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 74 04 	call	0x8e8	; 0x8e8 <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:213
setOUT(motorYBW);
    1924:	83 e0       	ldi	r24, 0x03	; 3
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 74 04 	call	0x8e8	; 0x8e8 <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:214
setOUT(motorBFW);
    192c:	84 e0       	ldi	r24, 0x04	; 4
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 74 04 	call	0x8e8	; 0x8e8 <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:215
setOUT(motorBBW);
    1934:	85 e0       	ldi	r24, 0x05	; 5
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 74 04 	call	0x8e8	; 0x8e8 <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:216
setOUT(contactor);
    193c:	86 e0       	ldi	r24, 0x06	; 6
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 74 04 	call	0x8e8	; 0x8e8 <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:226
//uncomment when programming Arduino/MCU
/**/

//using the EEPROM.h Librabry Included by the Arduino IDE & Arduino Core

IHV = 2 * EEPROM.read(0);
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	0e 94 c0 0a 	call	0x1580	; 0x1580 <EEPROMClass::read(int) [clone .isra.1]>
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <IHV+0x1>
    1956:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <IHV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:227
ILV = 2 * EEPROM.read(1);
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <EEPROMClass::read(int) [clone .isra.1]>
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <ILV+0x1>
    196c:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <ILV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:228
OHV = 2 * EEPROM.read(2);
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 c0 0a 	call	0x1580	; 0x1580 <EEPROMClass::read(int) [clone .isra.1]>
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <OHV+0x1>
    1982:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <OHV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:229
OLV = 2 * EEPROM.read(3);
    1986:	83 e0       	ldi	r24, 0x03	; 3
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <EEPROMClass::read(int) [clone .isra.1]>
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <OLV+0x1>
    1998:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <OLV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:230
SETV = 2 * EEPROM.read(4);
    199c:	84 e0       	ldi	r24, 0x04	; 4
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <EEPROMClass::read(int) [clone .isra.1]>
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <SETV+0x1>
    19ae:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <SETV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:231
OVL = EEPROM.read(5);
    19b2:	85 e0       	ldi	r24, 0x05	; 5
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <EEPROMClass::read(int) [clone .isra.1]>
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <OVL+0x1>
    19c0:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <OVL>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:232
TON = EEPROM.read(6);
    19c4:	86 e0       	ldi	r24, 0x06	; 6
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 94 c0 0a 	call	0x1580	; 0x1580 <EEPROMClass::read(int) [clone .isra.1]>
    19cc:	08 2f       	mov	r16, r24
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <TON+0x1>
    19d4:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <TON>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:233
TOFF = EEPROM.read(7);
    19d8:	87 e0       	ldi	r24, 0x07	; 7
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	0e 94 c0 0a 	call	0x1580	; 0x1580 <EEPROMClass::read(int) [clone .isra.1]>
    19e0:	18 2f       	mov	r17, r24
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <TOFF+0x1>
    19e8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <TOFF>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:234
DIFF = EEPROM.read(8);
    19ec:	88 e0       	ldi	r24, 0x08	; 8
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <EEPROMClass::read(int) [clone .isra.1]>
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <DIFF+0x1>
    19fa:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <DIFF>
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
            break;
        case MILLISECONDS:
            duration.millis = time;
            break;
        case SECONDS:
            duration.seconds = time;
    19fe:	60 2f       	mov	r22, r16
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	0e 94 aa 11 	call	0x2354	; 0x2354 <__floatunsisf>
    1a0a:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <on+0x15>
    1a0e:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <on+0x16>
    1a12:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <on+0x17>
    1a16:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <on+0x18>
setDuration():
    1a1a:	8b ef       	ldi	r24, 0xFB	; 251
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	0e 94 8a 03 	call	0x714	; 0x714 <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
initDuration():
    1a22:	61 2f       	mov	r22, r17
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	0e 94 aa 11 	call	0x2354	; 0x2354 <__floatunsisf>
    1a2e:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <off+0x15>
    1a32:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <off+0x16>
    1a36:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <off+0x17>
    1a3a:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <off+0x18>
setDuration():
    1a3e:	8a ed       	ldi	r24, 0xDA	; 218
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	0e 94 8a 03 	call	0x714	; 0x714 <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
setup():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:258

//Setup Variable Timers after the variable is read from the Memory!
on.setDuration(TON, SECONDS);
off.setDuration(TOFF, SECONDS);
//Reset the Timers after time update.
on.reset();
    1a46:	8b ef       	ldi	r24, 0xFB	; 251
    1a48:	91 e0       	ldi	r25, 0x01	; 1
    1a4a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <BlockNot::reset(unsigned long) [clone .constprop.21]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:259
off.reset();
    1a4e:	8a ed       	ldi	r24, 0xDA	; 218
    1a50:	91 e0       	ldi	r25, 0x01	; 1
    1a52:	0e 94 60 03 	call	0x6c0	; 0x6c0 <BlockNot::reset(unsigned long) [clone .constprop.21]>
checkok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:900
//Check OK Button Pressed

bool tmrstp;

void checkok() {
  if(read(ok) && okold == !read(ok)){
    1a56:	bb 24       	eor	r11, r11
    1a58:	b3 94       	inc	r11
    1a5a:	8e 01       	movw	r16, r28
    1a5c:	01 5f       	subi	r16, 0xF1	; 241
    1a5e:	1f 4f       	sbci	r17, 0xFF	; 255
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1a60:	a0 e0       	ldi	r26, 0x00	; 0
    1a62:	ca 2e       	mov	r12, r26
    1a64:	a0 e0       	ldi	r26, 0x00	; 0
    1a66:	da 2e       	mov	r13, r26
checkok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:900
    1a68:	aa 24       	eor	r10, r10
    1a6a:	a3 94       	inc	r10
    1a6c:	84 e1       	ldi	r24, 0x14	; 20
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1a74:	88 23       	and	r24, r24
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <main+0x39e>
    1a78:	13 c1       	rjmp	.+550    	; 0x1ca0 <main+0x5c4>
    1a7a:	90 90 69 02 	lds	r9, 0x0269	; 0x800269 <mode>
    1a7e:	84 e1       	ldi	r24, 0x14	; 20
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1a86:	8b 25       	eor	r24, r11
    1a88:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <okold>
    1a8c:	89 13       	cpse	r24, r25
    1a8e:	08 c1       	rjmp	.+528    	; 0x1ca0 <main+0x5c4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:901
  okold = read(ok);
    1a90:	84 e1       	ldi	r24, 0x14	; 20
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1a98:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <okold>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:902
  encMenu++;
    1a9c:	e0 90 66 02 	lds	r14, 0x0266	; 0x800266 <encMenu>
    1aa0:	f0 90 67 02 	lds	r15, 0x0267	; 0x800267 <encMenu+0x1>
    1aa4:	2f ef       	ldi	r18, 0xFF	; 255
    1aa6:	e2 1a       	sub	r14, r18
    1aa8:	f2 0a       	sbc	r15, r18
    1aaa:	f0 92 67 02 	sts	0x0267, r15	; 0x800267 <encMenu+0x1>
    1aae:	e0 92 66 02 	sts	0x0266, r14	; 0x800266 <encMenu>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:903
  if(!mode && !tmrstp){
    1ab2:	91 10       	cpse	r9, r1
    1ab4:	62 c0       	rjmp	.+196    	; 0x1b7a <main+0x49e>
    1ab6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <tmrstp>
    1aba:	81 11       	cpse	r24, r1
    1abc:	25 c0       	rjmp	.+74     	; 0x1b08 <main+0x42c>
stop():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:387
    }
    timerState = RUNNING;
}

void BlockNot::stop() {
    timerState = STOPPED;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <refresh+0x1e>
    1ac6:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <refresh+0x1d>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:388
    switch(baseUnits) {
    1aca:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <refresh+0x13>
    1ace:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <refresh+0x14>
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	21 f0       	breq	.+8      	; 0x1ae0 <main+0x404>
    1ad8:	08 f4       	brcc	.+2      	; 0x1adc <main+0x400>
    1ada:	66 c0       	rjmp	.+204    	; 0x1ba8 <main+0x4cc>
    1adc:	02 97       	sbiw	r24, 0x02	; 2
    1ade:	91 f4       	brne	.+36     	; 0x1b04 <main+0x428>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:394
        case SECONDS:
            stopTime.millis = millis();
            break;

        case MILLISECONDS:
            stopTime.millis = millis();
    1ae0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <millis>
    1ae4:	0e 94 aa 11 	call	0x2354	; 0x2354 <__floatunsisf>
_ZN8BlockNot5cTime7milli_taSEd():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:197

        class milli_t {
            double seconds;
        public:
            milli_t &operator=(double ms) {
                seconds = ms * .001;
    1ae8:	2f e6       	ldi	r18, 0x6F	; 111
    1aea:	32 e1       	ldi	r19, 0x12	; 18
    1aec:	43 e8       	ldi	r20, 0x83	; 131
    1aee:	5a e3       	ldi	r21, 0x3A	; 58
_ZN8BlockNot5cTime7micro_taSEd():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:209

        class micro_t {
            double seconds;
        public:
            micro_t &operator=(double us) {
                seconds = us * .000001;
    1af0:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
    1af4:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <refresh+0x19>
    1af8:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <refresh+0x1a>
    1afc:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <refresh+0x1b>
    1b00:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <refresh+0x1c>
checkok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:905
    refresh.stop();
    tmrstp = !tmrstp;
    1b04:	a0 92 d2 01 	sts	0x01D2, r10	; 0x8001d2 <tmrstp>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:907
  }
  if(!mode && tmrstp){
    1b08:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <tmrstp>
    1b0c:	88 23       	and	r24, r24
    1b0e:	a9 f1       	breq	.+106    	; 0x1b7a <main+0x49e>
start():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:369

void BlockNot::start(bool resetOption) {
    if(resetOption)
        reset();
    else {
        switch (baseUnits) {
    1b10:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <refresh+0x13>
    1b14:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <refresh+0x14>
    1b18:	81 30       	cpi	r24, 0x01	; 1
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	21 f0       	breq	.+8      	; 0x1b26 <main+0x44a>
    1b1e:	08 f4       	brcc	.+2      	; 0x1b22 <main+0x446>
    1b20:	4c c0       	rjmp	.+152    	; 0x1bba <main+0x4de>
    1b22:	02 97       	sbiw	r24, 0x02	; 2
    1b24:	21 f5       	brne	.+72     	; 0x1b6e <main+0x492>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:375
            case SECONDS:
                startTime = millis() - stopTime.millis;
                break;

            case MILLISECONDS:
                startTime = millis() - stopTime.millis;
    1b26:	0e 94 54 03 	call	0x6a8	; 0x6a8 <millis>
    1b2a:	0e 94 aa 11 	call	0x2354	; 0x2354 <__floatunsisf>
    1b2e:	2b 01       	movw	r4, r22
    1b30:	3c 01       	movw	r6, r24
_ZNK8BlockNot5cTime7milli_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:201
            milli_t &operator=(double ms) {
                seconds = ms * .001;
                return *this;
            }
            operator double() const {
                return seconds * 1000.0;
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4a e7       	ldi	r20, 0x7A	; 122
    1b38:	54 e4       	ldi	r21, 0x44	; 68
_ZNK8BlockNot5cTime7micro_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:213
            micro_t &operator=(double us) {
                seconds = us * .000001;
                return *this;
            }
            operator double() const {
                return seconds * 1000000.0;
    1b3a:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <refresh+0x19>
    1b3e:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <refresh+0x1a>
    1b42:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <refresh+0x1b>
    1b46:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <refresh+0x1c>
    1b4a:	0e 94 0b 12 	call	0x2416	; 0x2416 <__mulsf3>
    1b4e:	9b 01       	movw	r18, r22
    1b50:	ac 01       	movw	r20, r24
start():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:379
                break;

            case MICROSECONDS:
                startTime = micros() - stopTime.micros;
    1b52:	c3 01       	movw	r24, r6
    1b54:	b2 01       	movw	r22, r4
    1b56:	0e 94 df 12 	call	0x25be	; 0x25be <__subsf3>
    1b5a:	0e 94 c5 13 	call	0x278a	; 0x278a <__fixunssfsi>
    1b5e:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <refresh>
    1b62:	70 93 46 02 	sts	0x0246, r23	; 0x800246 <refresh+0x1>
    1b66:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <refresh+0x2>
    1b6a:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <refresh+0x3>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:383
                break;
        }
    }
    timerState = RUNNING;
    1b6e:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <refresh+0x1e>
    1b72:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <refresh+0x1d>
checkok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:909
    refresh.start();
    tmrstp = !tmrstp;
    1b76:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <tmrstp>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:911
  }
  refresh.reset();
    1b7a:	85 e4       	ldi	r24, 0x45	; 69
    1b7c:	92 e0       	ldi	r25, 0x02	; 2
    1b7e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <BlockNot::reset(unsigned long) [clone .constprop.21]>
encUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:938

//Update Parameters on Menu Change

void encUpdate() {
  
  switch (encMenu)
    1b82:	f7 01       	movw	r30, r14
    1b84:	31 97       	sbiw	r30, 0x01	; 1
    1b86:	ea 30       	cpi	r30, 0x0A	; 10
    1b88:	f1 05       	cpc	r31, r1
    1b8a:	60 f5       	brcc	.+88     	; 0x1be4 <main+0x508>
    1b8c:	e6 53       	subi	r30, 0x36	; 54
    1b8e:	f2 4f       	sbci	r31, 0xF2	; 242
    1b90:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__tablejump2__>
    1b94:	e8 0d       	add	r30, r8
    1b96:	f9 0e       	add	r15, r25
    1b98:	06 0f       	add	r16, r22
    1b9a:	13 0f       	add	r17, r19
    1b9c:	20 0f       	add	r18, r16
    1b9e:	2d 0f       	add	r18, r29
    1ba0:	3a 0f       	add	r19, r26
    1ba2:	47 0f       	add	r20, r23
    1ba4:	6e 0f       	add	r22, r30
    1ba6:	93 0f       	add	r25, r19
stop():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:398
        case MILLISECONDS:
            stopTime.millis = millis();
            break;

        case MICROSECONDS:
            stopTime.micros = micros();
    1ba8:	0e 94 2f 03 	call	0x65e	; 0x65e <micros>
    1bac:	0e 94 aa 11 	call	0x2354	; 0x2354 <__floatunsisf>
_ZN8BlockNot5cTime7micro_taSEd():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:209

        class micro_t {
            double seconds;
        public:
            micro_t &operator=(double us) {
                seconds = us * .000001;
    1bb0:	2d eb       	ldi	r18, 0xBD	; 189
    1bb2:	37 e3       	ldi	r19, 0x37	; 55
    1bb4:	46 e8       	ldi	r20, 0x86	; 134
    1bb6:	55 e3       	ldi	r21, 0x35	; 53
    1bb8:	9b cf       	rjmp	.-202    	; 0x1af0 <main+0x414>
start():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:379
            case MILLISECONDS:
                startTime = millis() - stopTime.millis;
                break;

            case MICROSECONDS:
                startTime = micros() - stopTime.micros;
    1bba:	0e 94 2f 03 	call	0x65e	; 0x65e <micros>
    1bbe:	0e 94 aa 11 	call	0x2354	; 0x2354 <__floatunsisf>
    1bc2:	2b 01       	movw	r4, r22
    1bc4:	3c 01       	movw	r6, r24
_ZNK8BlockNot5cTime7micro_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:213
                return *this;
            }
            operator double() const {
                return seconds * 1000000.0;
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	34 e2       	ldi	r19, 0x24	; 36
    1bca:	44 e7       	ldi	r20, 0x74	; 116
    1bcc:	59 e4       	ldi	r21, 0x49	; 73
    1bce:	b5 cf       	rjmp	.-150    	; 0x1b3a <main+0x45e>
encUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:943
  {
  case 0:
    break;
  case 1:
    enc = IHV;
    1bd0:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <IHV>
    1bd4:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <IHV+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:948
    done();
    break;
  case 2:
    IHV = enc;
    enc = ILV;
    1bd8:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <enc+0x1>
    1bdc:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:992
    off.reset();
    done();
    break;
  case 10:
    DIFF = enc;
    done();
    1be0:	0e 94 8e 0a 	call	0x151c	; 0x151c <done()>
eepromUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:923
}

//Save Parameters to MCU EEPROM Memory (only if changed)

void eepromUpdate() {
  EEPROM.update(0, IHV/2);
    1be4:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <IHV>
    1be8:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <IHV+0x1>
    1bec:	77 ff       	sbrs	r23, 7
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <main+0x518>
    1bf0:	6f 5f       	subi	r22, 0xFF	; 255
    1bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf4:	75 95       	asr	r23
    1bf6:	67 95       	ror	r22
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	0e 94 ac 0a 	call	0x1558	; 0x1558 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:924
  EEPROM.update(1, ILV/2);
    1c00:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <ILV>
    1c04:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <ILV+0x1>
    1c08:	77 ff       	sbrs	r23, 7
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <main+0x534>
    1c0c:	6f 5f       	subi	r22, 0xFF	; 255
    1c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c10:	75 95       	asr	r23
    1c12:	67 95       	ror	r22
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	0e 94 ac 0a 	call	0x1558	; 0x1558 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:925
  EEPROM.update(2, OHV/2);
    1c1c:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <OHV>
    1c20:	70 91 cd 01 	lds	r23, 0x01CD	; 0x8001cd <OHV+0x1>
    1c24:	77 ff       	sbrs	r23, 7
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <main+0x550>
    1c28:	6f 5f       	subi	r22, 0xFF	; 255
    1c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2c:	75 95       	asr	r23
    1c2e:	67 95       	ror	r22
    1c30:	82 e0       	ldi	r24, 0x02	; 2
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 ac 0a 	call	0x1558	; 0x1558 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:926
  EEPROM.update(3, OLV/2);
    1c38:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <OLV>
    1c3c:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <OLV+0x1>
    1c40:	77 ff       	sbrs	r23, 7
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <main+0x56c>
    1c44:	6f 5f       	subi	r22, 0xFF	; 255
    1c46:	7f 4f       	sbci	r23, 0xFF	; 255
    1c48:	75 95       	asr	r23
    1c4a:	67 95       	ror	r22
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	0e 94 ac 0a 	call	0x1558	; 0x1558 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:927
  EEPROM.update(4, SETV/2);
    1c54:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <SETV>
    1c58:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <SETV+0x1>
    1c5c:	77 ff       	sbrs	r23, 7
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <main+0x588>
    1c60:	6f 5f       	subi	r22, 0xFF	; 255
    1c62:	7f 4f       	sbci	r23, 0xFF	; 255
    1c64:	75 95       	asr	r23
    1c66:	67 95       	ror	r22
    1c68:	84 e0       	ldi	r24, 0x04	; 4
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:928
  EEPROM.update(5, OVL);
    1c70:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <OVL>
    1c74:	85 e0       	ldi	r24, 0x05	; 5
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 94 ac 0a 	call	0x1558	; 0x1558 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:929
  EEPROM.update(6, TON);
    1c7c:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <TON>
    1c80:	86 e0       	ldi	r24, 0x06	; 6
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	0e 94 ac 0a 	call	0x1558	; 0x1558 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:930
  EEPROM.update(7, TOFF);
    1c88:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <TOFF>
    1c8c:	87 e0       	ldi	r24, 0x07	; 7
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0e 94 ac 0a 	call	0x1558	; 0x1558 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:931
  EEPROM.update(8, DIFF);
    1c94:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <DIFF>
    1c98:	88 e0       	ldi	r24, 0x08	; 8
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
checkok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:915
  }
  refresh.reset();
  encUpdate();
  eepromUpdate();
  }
  if(read(ok) == false){
    1ca0:	84 e1       	ldi	r24, 0x14	; 20
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1ca8:	81 11       	cpse	r24, r1
    1caa:	06 c0       	rjmp	.+12     	; 0x1cb8 <main+0x5dc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:916
  okold = read(ok);
    1cac:	84 e1       	ldi	r24, 0x14	; 20
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1cb4:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <okold>
checkplus():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1012
}

//Check Plus Button Pressed

void checkplus() {
  if(read(plus) && plusold == !read(plus)){
    1cb8:	85 e1       	ldi	r24, 0x15	; 21
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1cc0:	f0 90 69 02 	lds	r15, 0x0269	; 0x800269 <mode>
    1cc4:	88 23       	and	r24, r24
    1cc6:	19 f1       	breq	.+70     	; 0x1d0e <main+0x632>
    1cc8:	85 e1       	ldi	r24, 0x15	; 21
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1cd0:	8b 25       	eor	r24, r11
    1cd2:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <plusold>
    1cd6:	89 13       	cpse	r24, r25
    1cd8:	1a c0       	rjmp	.+52     	; 0x1d0e <main+0x632>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1013
  plusold = read(plus);
    1cda:	85 e1       	ldi	r24, 0x15	; 21
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1ce2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <plusold>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1014
  enc++;
    1ce6:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1cea:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <enc+0x1>
    1cf4:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1015
  if(!mode){
    1cf8:	f1 10       	cpse	r15, r1
    1cfa:	09 c0       	rjmp	.+18     	; 0x1d0e <main+0x632>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1016
    menu++;
    1cfc:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <menu>
    1d00:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <menu+0x1>
    1d04:	01 96       	adiw	r24, 0x01	; 1
    1d06:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <menu+0x1>
    1d0a:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <menu>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1019
  }
  }
  if(read(plus) == false){
    1d0e:	85 e1       	ldi	r24, 0x15	; 21
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1d16:	81 11       	cpse	r24, r1
    1d18:	06 c0       	rjmp	.+12     	; 0x1d26 <main+0x64a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1020
  plusold = read(plus);
    1d1a:	85 e1       	ldi	r24, 0x15	; 21
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1d22:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <plusold>
checkminus():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1027
}

//Check Minus Button Pressed

void checkminus() {
  if(read(minus) && minusold == !read(minus)){
    1d26:	86 e1       	ldi	r24, 0x16	; 22
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1d2e:	88 23       	and	r24, r24
    1d30:	19 f1       	breq	.+70     	; 0x1d78 <main+0x69c>
    1d32:	86 e1       	ldi	r24, 0x16	; 22
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1d3a:	8b 25       	eor	r24, r11
    1d3c:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <minusold>
    1d40:	89 13       	cpse	r24, r25
    1d42:	1a c0       	rjmp	.+52     	; 0x1d78 <main+0x69c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1028
  minusold = read(minus);
    1d44:	86 e1       	ldi	r24, 0x16	; 22
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1d4c:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <minusold>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1029
  enc--;
    1d50:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1d54:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <enc+0x1>
    1d5e:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1030
  if(!mode){
    1d62:	f1 10       	cpse	r15, r1
    1d64:	09 c0       	rjmp	.+18     	; 0x1d78 <main+0x69c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1031
    menu--;
    1d66:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <menu>
    1d6a:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <menu+0x1>
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <menu+0x1>
    1d74:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <menu>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1034
  }
  }
  if(read(minus) == false){
    1d78:	86 e1       	ldi	r24, 0x16	; 22
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1d80:	81 11       	cpse	r24, r1
    1d82:	06 c0       	rjmp	.+12     	; 0x1d90 <main+0x6b4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1035
  minusold = read(minus);
    1d84:	86 e1       	ldi	r24, 0x16	; 22
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1d8c:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <minusold>
loop():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:281
  }
*/
///////////////////////////////////////////////////////
  //Switch to Parameter Edit/Run Mode
  /* Uncomment this for not using setup Pin*/
  if(mode){
    1d90:	ff 20       	and	r15, r15
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <main+0x6ba>
    1d94:	9f c1       	rjmp	.+830    	; 0x20d4 <main+0x9f8>
runSetup():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:848
}

//Change Screens/Menus on pessing OK/Menu

void runSetup() {
  int OTs[7] = { motorRFW, motorRBW, motorYFW, motorYBW, motorBFW, motorBBW, contactor };
    1d96:	8e e0       	ldi	r24, 0x0E	; 14
    1d98:	e6 e0       	ldi	r30, 0x06	; 6
    1d9a:	f1 e0       	ldi	r31, 0x01	; 1
    1d9c:	de 01       	movw	r26, r28
    1d9e:	11 96       	adiw	r26, 0x01	; 1
    1da0:	01 90       	ld	r0, Z+
    1da2:	0d 92       	st	X+, r0
    1da4:	8a 95       	dec	r24
    1da6:	e1 f7       	brne	.-8      	; 0x1da0 <main+0x6c4>
    1da8:	ce 01       	movw	r24, r28
    1daa:	01 96       	adiw	r24, 0x01	; 1
    1dac:	7c 01       	movw	r14, r24
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:851
  
  for(int i = 0; i < 7; i++){
    digitalWrite(OTs[i], LOW);
    1dae:	f7 01       	movw	r30, r14
    1db0:	80 81       	ld	r24, Z
    1db2:	f2 e0       	ldi	r31, 0x02	; 2
    1db4:	ef 0e       	add	r14, r31
    1db6:	f1 1c       	adc	r15, r1
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:850
//Change Screens/Menus on pessing OK/Menu

void runSetup() {
  int OTs[7] = { motorRFW, motorRBW, motorYFW, motorYBW, motorBFW, motorBBW, contactor };
  
  for(int i = 0; i < 7; i++){
    1dbe:	0e 15       	cp	r16, r14
    1dc0:	1f 05       	cpc	r17, r15
    1dc2:	a9 f7       	brne	.-22     	; 0x1dae <main+0x6d2>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:854
    digitalWrite(OTs[i], LOW);
  }

  switch (encMenu)
    1dc4:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <encMenu>
    1dc8:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <encMenu+0x1>
    1dcc:	eb 30       	cpi	r30, 0x0B	; 11
    1dce:	f1 05       	cpc	r31, r1
    1dd0:	08 f0       	brcs	.+2      	; 0x1dd4 <main+0x6f8>
    1dd2:	7b c1       	rjmp	.+758    	; 0x20ca <main+0x9ee>
    1dd4:	e2 51       	subi	r30, 0x12	; 18
    1dd6:	f1 4f       	sbci	r31, 0xF1	; 241
    1dd8:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__tablejump2__>
    1ddc:	9c 0f       	add	r25, r28
    1dde:	a8 0f       	add	r26, r24
    1de0:	fa 0f       	add	r31, r26
    1de2:	07 10       	cpse	r0, r7
    1de4:	14 10       	cpse	r1, r4
    1de6:	21 10       	cpse	r2, r1
    1de8:	2e 10       	cpse	r2, r14
    1dea:	3b 10       	cpse	r3, r11
    1dec:	48 10       	cpse	r4, r8
    1dee:	55 10       	cpse	r5, r5
    1df0:	62 10       	cpse	r6, r2
encUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:947
  case 1:
    enc = IHV;
    done();
    break;
  case 2:
    IHV = enc;
    1df2:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1df6:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1dfa:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <IHV+0x1>
    1dfe:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <IHV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:948
    enc = ILV;
    1e02:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <ILV>
    1e06:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <ILV+0x1>
    1e0a:	e6 ce       	rjmp	.-564    	; 0x1bd8 <main+0x4fc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:952
    done();
    break;
  case 3:
    ILV = enc;
    1e0c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1e10:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1e14:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <ILV+0x1>
    1e18:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <ILV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:953
    enc = OHV;
    1e1c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <OHV>
    1e20:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <OHV+0x1>
    1e24:	d9 ce       	rjmp	.-590    	; 0x1bd8 <main+0x4fc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:957
    done();
    break;
  case 4:
    OHV = enc;
    1e26:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1e2a:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1e2e:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <OHV+0x1>
    1e32:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <OHV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:958
    enc = OLV;
    1e36:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <OLV>
    1e3a:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <OLV+0x1>
    1e3e:	cc ce       	rjmp	.-616    	; 0x1bd8 <main+0x4fc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:962
    done();
    break;
  case 5:
    OLV = enc;
    1e40:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1e44:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1e48:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <OLV+0x1>
    1e4c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <OLV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:963
    enc = SETV;
    1e50:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <SETV>
    1e54:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <SETV+0x1>
    1e58:	bf ce       	rjmp	.-642    	; 0x1bd8 <main+0x4fc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:967
    done();
    break;
  case 6:
    SETV = enc;
    1e5a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1e5e:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1e62:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <SETV+0x1>
    1e66:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <SETV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:968
    enc = OVL;
    1e6a:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <OVL>
    1e6e:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <OVL+0x1>
    1e72:	b2 ce       	rjmp	.-668    	; 0x1bd8 <main+0x4fc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:972
    done();
    break;
  case 7:
    OVL = enc;
    1e74:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1e78:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1e7c:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <OVL+0x1>
    1e80:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <OVL>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:973
    enc = TON;
    1e84:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <TON>
    1e88:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <TON+0x1>
    1e8c:	a5 ce       	rjmp	.-694    	; 0x1bd8 <main+0x4fc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:977
    done();
    break;
  case 8:
    TON = enc;
    1e8e:	60 91 d7 01 	lds	r22, 0x01D7	; 0x8001d7 <enc>
    1e92:	70 91 d8 01 	lds	r23, 0x01D8	; 0x8001d8 <enc+0x1>
    1e96:	70 93 c7 01 	sts	0x01C7, r23	; 0x8001c7 <TON+0x1>
    1e9a:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <TON>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:978
    enc = TOFF;
    1e9e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <TOFF>
    1ea2:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <TOFF+0x1>
    1ea6:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <enc+0x1>
    1eaa:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:979
    on.setDuration(TON, SECONDS);
    1eae:	07 2e       	mov	r0, r23
    1eb0:	00 0c       	add	r0, r0
    1eb2:	88 0b       	sbc	r24, r24
    1eb4:	99 0b       	sbc	r25, r25
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
            break;
        case MILLISECONDS:
            duration.millis = time;
            break;
        case SECONDS:
            duration.seconds = time;
    1eb6:	0e 94 aa 11 	call	0x2354	; 0x2354 <__floatunsisf>
    1eba:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <on+0x15>
    1ebe:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <on+0x16>
    1ec2:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <on+0x17>
    1ec6:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <on+0x18>
setDuration():
    1eca:	8b ef       	ldi	r24, 0xFB	; 251
    1ecc:	91 e0       	ldi	r25, 0x01	; 1
    1ece:	0e 94 8a 03 	call	0x714	; 0x714 <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
encUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:980
    on.reset();
    1ed2:	8b ef       	ldi	r24, 0xFB	; 251
    1ed4:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:987
    break;
  case 9:
    TOFF = enc;
    enc = DIFF;
    off.setDuration(TOFF, SECONDS);
    off.reset();
    1ed6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <BlockNot::reset(unsigned long) [clone .constprop.21]>
    1eda:	82 ce       	rjmp	.-764    	; 0x1be0 <main+0x504>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:984
    on.setDuration(TON, SECONDS);
    on.reset();
    done();
    break;
  case 9:
    TOFF = enc;
    1edc:	60 91 d7 01 	lds	r22, 0x01D7	; 0x8001d7 <enc>
    1ee0:	70 91 d8 01 	lds	r23, 0x01D8	; 0x8001d8 <enc+0x1>
    1ee4:	70 93 c5 01 	sts	0x01C5, r23	; 0x8001c5 <TOFF+0x1>
    1ee8:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <TOFF>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:985
    enc = DIFF;
    1eec:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <DIFF>
    1ef0:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <DIFF+0x1>
    1ef4:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <enc+0x1>
    1ef8:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:986
    off.setDuration(TOFF, SECONDS);
    1efc:	07 2e       	mov	r0, r23
    1efe:	00 0c       	add	r0, r0
    1f00:	88 0b       	sbc	r24, r24
    1f02:	99 0b       	sbc	r25, r25
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
    1f04:	0e 94 aa 11 	call	0x2354	; 0x2354 <__floatunsisf>
    1f08:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <off+0x15>
    1f0c:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <off+0x16>
    1f10:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <off+0x17>
    1f14:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <off+0x18>
setDuration():
    1f18:	8a ed       	ldi	r24, 0xDA	; 218
    1f1a:	91 e0       	ldi	r25, 0x01	; 1
    1f1c:	0e 94 8a 03 	call	0x714	; 0x714 <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
encUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:987
    off.reset();
    1f20:	8a ed       	ldi	r24, 0xDA	; 218
    1f22:	91 e0       	ldi	r25, 0x01	; 1
    1f24:	d8 cf       	rjmp	.-80     	; 0x1ed6 <main+0x7fa>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:991
    done();
    break;
  case 10:
    DIFF = enc;
    1f26:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <enc>
    1f2a:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <enc+0x1>
    1f2e:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <DIFF+0x1>
    1f32:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <DIFF>
    1f36:	54 ce       	rjmp	.-856    	; 0x1be0 <main+0x504>
home():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:748

////////////////////////////////////////////////////////////
//Setp display on Setup Mode

void home() {
  display("SETP", 0);
    1f38:	6c e7       	ldi	r22, 0x7C	; 124
    1f3a:	71 e0       	ldi	r23, 0x01	; 1
menuEND():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:842
    display("dIFF", 0);
  }
}

void menuEND() {
  display("End", 0);
    1f3c:	c8 01       	movw	r24, r16
    1f3e:	0e 94 a0 07 	call	0xf40	; 0xf40 <String::String(char const*)>
    1f42:	c8 01       	movw	r24, r16
    1f44:	0e 94 b6 07 	call	0xf6c	; 0xf6c <display(String, int) [clone .constprop.9]>
    1f48:	c8 01       	movw	r24, r16
    1f4a:	0e 94 b1 07 	call	0xf62	; 0xf62 <String::~String()>
    1f4e:	0b c0       	rjmp	.+22     	; 0x1f66 <main+0x88a>
menuIHV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:754
}

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	85 e4       	ldi	r24, 0x45	; 69
    1f54:	92 e0       	ldi	r25, 0x02	; 2
    1f56:	0e 94 05 04 	call	0x80a	; 0x80a <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:757
    displayVar(enc, 0);
  } else {
    display("IHu", 0);
    1f5a:	61 e8       	ldi	r22, 0x81	; 129
    1f5c:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:754
}

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    1f5e:	88 23       	and	r24, r24
    1f60:	69 f3       	breq	.-38     	; 0x1f3c <main+0x860>
    1f62:	0e 94 3f 07 	call	0xe7e	; 0xe7e <menuIHV() [clone .part.8]>
loop():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:286
  if(mode){
    runSetup();
  } else {
    runNormal();
  }
  if(read(ok) && read(plus) && read(minus) && switched == false){
    1f66:	84 e1       	ldi	r24, 0x14	; 20
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1f6e:	88 23       	and	r24, r24
    1f70:	19 f1       	breq	.+70     	; 0x1fb8 <main+0x8dc>
    1f72:	85 e1       	ldi	r24, 0x15	; 21
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1f7a:	88 23       	and	r24, r24
    1f7c:	e9 f0       	breq	.+58     	; 0x1fb8 <main+0x8dc>
    1f7e:	86 e1       	ldi	r24, 0x16	; 22
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1f86:	88 23       	and	r24, r24
    1f88:	b9 f0       	breq	.+46     	; 0x1fb8 <main+0x8dc>
    1f8a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <switched>
    1f8e:	81 11       	cpse	r24, r1
    1f90:	13 c0       	rjmp	.+38     	; 0x1fb8 <main+0x8dc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:287
    mode = !mode;
    1f92:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <mode>
    1f96:	8b 25       	eor	r24, r11
    1f98:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <mode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:288
    switched = true;
    1f9c:	a0 92 68 02 	sts	0x0268, r10	; 0x800268 <switched>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:289
    encMenu = 0;
    1fa0:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <encMenu+0x1>
    1fa4:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <encMenu>
start():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:367
    timerStoppedReturnValue = stoppedReturnValue;
}

void BlockNot::start(bool resetOption) {
    if(resetOption)
        reset();
    1fa8:	85 e4       	ldi	r24, 0x45	; 69
    1faa:	92 e0       	ldi	r25, 0x02	; 2
    1fac:	0e 94 60 03 	call	0x6c0	; 0x6c0 <BlockNot::reset(unsigned long) [clone .constprop.21]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:383
            case MICROSECONDS:
                startTime = micros() - stopTime.micros;
                break;
        }
    }
    timerState = RUNNING;
    1fb0:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <refresh+0x1e>
    1fb4:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <refresh+0x1d>
loop():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:292
    refresh.start(true);
  }
  if(!read(ok) && !read(plus) && !read(minus) && switched == true){
    1fb8:	84 e1       	ldi	r24, 0x14	; 20
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1fc0:	81 11       	cpse	r24, r1
    1fc2:	11 c0       	rjmp	.+34     	; 0x1fe6 <main+0x90a>
    1fc4:	85 e1       	ldi	r24, 0x15	; 21
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1fcc:	81 11       	cpse	r24, r1
    1fce:	0b c0       	rjmp	.+22     	; 0x1fe6 <main+0x90a>
    1fd0:	86 e1       	ldi	r24, 0x16	; 22
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <read(int)>
    1fd8:	81 11       	cpse	r24, r1
    1fda:	05 c0       	rjmp	.+10     	; 0x1fe6 <main+0x90a>
    1fdc:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <switched>
    1fe0:	81 11       	cpse	r24, r1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:293
    switched = false;
    1fe2:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <switched>
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    1fe6:	c1 14       	cp	r12, r1
    1fe8:	d1 04       	cpc	r13, r1
    1fea:	09 f4       	brne	.+2      	; 0x1fee <main+0x912>
    1fec:	3f cd       	rjmp	.-1410   	; 0x1a6c <main+0x390>
    1fee:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1ff2:	3c cd       	rjmp	.-1416   	; 0x1a6c <main+0x390>
menuILV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:764
}

//Setup Input low Voltage

void menuILV() {
  if(refresh.triggered(false)){
    1ff4:	60 e0       	ldi	r22, 0x00	; 0
    1ff6:	85 e4       	ldi	r24, 0x45	; 69
    1ff8:	92 e0       	ldi	r25, 0x02	; 2
    1ffa:	0e 94 05 04 	call	0x80a	; 0x80a <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:767
    displayVar(enc, 0);
  } else {
    display("ILu", 0);
    1ffe:	65 e8       	ldi	r22, 0x85	; 133
    2000:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:764
}

//Setup Input low Voltage

void menuILV() {
  if(refresh.triggered(false)){
    2002:	88 23       	and	r24, r24
    2004:	09 f4       	brne	.+2      	; 0x2008 <main+0x92c>
    2006:	9a cf       	rjmp	.-204    	; 0x1f3c <main+0x860>
    2008:	0e 94 3f 07 	call	0xe7e	; 0xe7e <menuIHV() [clone .part.8]>
    200c:	ac cf       	rjmp	.-168    	; 0x1f66 <main+0x88a>
menuOHV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:774
}

//Setup Output High Voltage

void menuOHV() {
  if(refresh.triggered(false)){
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	85 e4       	ldi	r24, 0x45	; 69
    2012:	92 e0       	ldi	r25, 0x02	; 2
    2014:	0e 94 05 04 	call	0x80a	; 0x80a <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:777
    displayVar(enc, 0);
  } else {
    display("OHu", 0);
    2018:	69 e8       	ldi	r22, 0x89	; 137
    201a:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:774
}

//Setup Output High Voltage

void menuOHV() {
  if(refresh.triggered(false)){
    201c:	88 23       	and	r24, r24
    201e:	09 f4       	brne	.+2      	; 0x2022 <main+0x946>
    2020:	8d cf       	rjmp	.-230    	; 0x1f3c <main+0x860>
    2022:	0e 94 3f 07 	call	0xe7e	; 0xe7e <menuIHV() [clone .part.8]>
    2026:	9f cf       	rjmp	.-194    	; 0x1f66 <main+0x88a>
menuOLV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:784
}

//Setup Output Low Voltage

void menuOLV() {
  if(refresh.triggered(false)){
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	85 e4       	ldi	r24, 0x45	; 69
    202c:	92 e0       	ldi	r25, 0x02	; 2
    202e:	0e 94 05 04 	call	0x80a	; 0x80a <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:787
    displayVar(enc, 0);
  } else {
    display("OLu", 0);
    2032:	6d e8       	ldi	r22, 0x8D	; 141
    2034:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:784
}

//Setup Output Low Voltage

void menuOLV() {
  if(refresh.triggered(false)){
    2036:	88 23       	and	r24, r24
    2038:	09 f4       	brne	.+2      	; 0x203c <main+0x960>
    203a:	80 cf       	rjmp	.-256    	; 0x1f3c <main+0x860>
    203c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <menuIHV() [clone .part.8]>
    2040:	92 cf       	rjmp	.-220    	; 0x1f66 <main+0x88a>
menuSETV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:794
}

//Setup Set Voltage

void menuSETV() {
  if(refresh.triggered(false)){
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	85 e4       	ldi	r24, 0x45	; 69
    2046:	92 e0       	ldi	r25, 0x02	; 2
    2048:	0e 94 05 04 	call	0x80a	; 0x80a <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:797
    displayVar(enc, 0);
  } else {
    display("SETu", 0);
    204c:	61 e9       	ldi	r22, 0x91	; 145
    204e:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:794
}

//Setup Set Voltage

void menuSETV() {
  if(refresh.triggered(false)){
    2050:	88 23       	and	r24, r24
    2052:	09 f4       	brne	.+2      	; 0x2056 <main+0x97a>
    2054:	73 cf       	rjmp	.-282    	; 0x1f3c <main+0x860>
    2056:	0e 94 3f 07 	call	0xe7e	; 0xe7e <menuIHV() [clone .part.8]>
    205a:	85 cf       	rjmp	.-246    	; 0x1f66 <main+0x88a>
menuOVL():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:804
}

//Setup Overload

void menuOVL() {
  if(refresh.triggered(false)){
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	85 e4       	ldi	r24, 0x45	; 69
    2060:	92 e0       	ldi	r25, 0x02	; 2
    2062:	0e 94 05 04 	call	0x80a	; 0x80a <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:807
    displayVar(enc, 0);
  } else {
    display("OuL", 0);
    2066:	66 e9       	ldi	r22, 0x96	; 150
    2068:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:804
}

//Setup Overload

void menuOVL() {
  if(refresh.triggered(false)){
    206a:	88 23       	and	r24, r24
    206c:	09 f4       	brne	.+2      	; 0x2070 <main+0x994>
    206e:	66 cf       	rjmp	.-308    	; 0x1f3c <main+0x860>
    2070:	0e 94 3f 07 	call	0xe7e	; 0xe7e <menuIHV() [clone .part.8]>
    2074:	78 cf       	rjmp	.-272    	; 0x1f66 <main+0x88a>
menuTON():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:814
}

//Setup Waiting time for Output Relay to turn on

void menuTON() {
  if(refresh.triggered(false)){
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	85 e4       	ldi	r24, 0x45	; 69
    207a:	92 e0       	ldi	r25, 0x02	; 2
    207c:	0e 94 05 04 	call	0x80a	; 0x80a <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:817
    displayVar(enc, 0);
  } else {
    display("tOn", 0);
    2080:	6a e9       	ldi	r22, 0x9A	; 154
    2082:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:814
}

//Setup Waiting time for Output Relay to turn on

void menuTON() {
  if(refresh.triggered(false)){
    2084:	88 23       	and	r24, r24
    2086:	09 f4       	brne	.+2      	; 0x208a <main+0x9ae>
    2088:	59 cf       	rjmp	.-334    	; 0x1f3c <main+0x860>
    208a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <menuIHV() [clone .part.8]>
    208e:	6b cf       	rjmp	.-298    	; 0x1f66 <main+0x88a>
menuTOFF():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:824
}

//Setup Waiting time for Output Relay to turn off

void menuTOFF() {
  if(refresh.triggered(false)){
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	85 e4       	ldi	r24, 0x45	; 69
    2094:	92 e0       	ldi	r25, 0x02	; 2
    2096:	0e 94 05 04 	call	0x80a	; 0x80a <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:827
    displayVar(enc, 0);
  } else {
    display("tOFF", 0);
    209a:	6e e9       	ldi	r22, 0x9E	; 158
    209c:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:824
}

//Setup Waiting time for Output Relay to turn off

void menuTOFF() {
  if(refresh.triggered(false)){
    209e:	88 23       	and	r24, r24
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <main+0x9c8>
    20a2:	4c cf       	rjmp	.-360    	; 0x1f3c <main+0x860>
    20a4:	0e 94 3f 07 	call	0xe7e	; 0xe7e <menuIHV() [clone .part.8]>
    20a8:	5e cf       	rjmp	.-324    	; 0x1f66 <main+0x88a>
menuDIFF():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:834
}

//setup voltage difference from set voltage to move motor

void menuDIFF() {
  if(refresh.triggered(false)){
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	85 e4       	ldi	r24, 0x45	; 69
    20ae:	92 e0       	ldi	r25, 0x02	; 2
    20b0:	0e 94 05 04 	call	0x80a	; 0x80a <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:837
    displayVar(enc, 0);
  } else {
    display("dIFF", 0);
    20b4:	63 ea       	ldi	r22, 0xA3	; 163
    20b6:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:834
}

//setup voltage difference from set voltage to move motor

void menuDIFF() {
  if(refresh.triggered(false)){
    20b8:	88 23       	and	r24, r24
    20ba:	09 f4       	brne	.+2      	; 0x20be <main+0x9e2>
    20bc:	3f cf       	rjmp	.-386    	; 0x1f3c <main+0x860>
    20be:	0e 94 3f 07 	call	0xe7e	; 0xe7e <menuIHV() [clone .part.8]>
    20c2:	51 cf       	rjmp	.-350    	; 0x1f66 <main+0x88a>
menuEND():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:842
    display("dIFF", 0);
  }
}

void menuEND() {
  display("End", 0);
    20c4:	68 ea       	ldi	r22, 0xA8	; 168
    20c6:	71 e0       	ldi	r23, 0x01	; 1
    20c8:	39 cf       	rjmp	.-398    	; 0x1f3c <main+0x860>
runSetup():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:890
    break;
  case 10:
    menuEND();
    break;
  default:
    encMenu = 0;
    20ca:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <encMenu+0x1>
    20ce:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <encMenu>
    20d2:	49 cf       	rjmp	.-366    	; 0x1f66 <main+0x88a>
runNormal():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:380


//Run Mode

void runNormal() {
  if(checkin.triggered()){
    20d4:	61 e0       	ldi	r22, 0x01	; 1
    20d6:	84 e2       	ldi	r24, 0x24	; 36
    20d8:	92 e0       	ldi	r25, 0x02	; 2
    20da:	0e 94 05 04 	call	0x80a	; 0x80a <BlockNot::triggered(bool)>
    20de:	88 23       	and	r24, r24
    20e0:	31 f0       	breq	.+12     	; 0x20ee <main+0xa12>
checkinputs():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:699
/////////////////////////////////////////////////////////////////


//update inputs once based on highest voltage...
void checkinputs() {
  IVo();
    20e2:	0e 94 73 05 	call	0xae6	; 0xae6 <IVo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:700
  OVo();
    20e6:	0e 94 b9 04 	call	0x972	; 0x972 <OVo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:701
  ampo();
    20ea:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <ampo()>
runNormal():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:389
    //ampo();                   //
    ////////////////////////////// No Longer Used...!
    checkinputs();
  }
  //digitalWrite(motor0Rev, HIGH);
  if(routvoltage < SETV && rdiffcheck() && inputVok() && currentok()){
    20ee:	80 90 22 02 	lds	r8, 0x0222	; 0x800222 <routvoltage>
    20f2:	90 90 23 02 	lds	r9, 0x0223	; 0x800223 <routvoltage+0x1>
    20f6:	e0 90 20 02 	lds	r14, 0x0220	; 0x800220 <SETV>
    20fa:	f0 90 21 02 	lds	r15, 0x0221	; 0x800221 <SETV+0x1>
    20fe:	8e 14       	cp	r8, r14
    2100:	9f 04       	cpc	r9, r15
    2102:	94 f4       	brge	.+36     	; 0x2128 <main+0xa4c>
    2104:	0e 94 5f 06 	call	0xcbe	; 0xcbe <rdiffcheck()>
    2108:	88 23       	and	r24, r24
    210a:	71 f0       	breq	.+28     	; 0x2128 <main+0xa4c>
    210c:	0e 94 af 06 	call	0xd5e	; 0xd5e <inputVok()>
    2110:	88 23       	and	r24, r24
    2112:	51 f0       	breq	.+20     	; 0x2128 <main+0xa4c>
    2114:	0e 94 78 06 	call	0xcf0	; 0xcf0 <currentok()>
    2118:	88 23       	and	r24, r24
    211a:	31 f0       	breq	.+12     	; 0x2128 <main+0xa4c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:390
    digitalWrite(motorRFW, HIGH);
    211c:	61 e0       	ldi	r22, 0x01	; 1
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:397
    digitalWrite(motorRFW, LOW);
  }
  if(routvoltage > SETV && rdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorRBW, HIGH);
  } else {
    digitalWrite(motorRBW, LOW);
    2124:	60 e0       	ldi	r22, 0x00	; 0
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <main+0xa74>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:392
  }
  //digitalWrite(motor0Rev, HIGH);
  if(routvoltage < SETV && rdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorRFW, HIGH);
  } else {
    digitalWrite(motorRFW, LOW);
    2128:	60 e0       	ldi	r22, 0x00	; 0
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:394
  }
  if(routvoltage > SETV && rdiffcheck() && inputVok() && currentok()){
    2130:	e8 14       	cp	r14, r8
    2132:	f9 04       	cpc	r15, r9
    2134:	bc f7       	brge	.-18     	; 0x2124 <main+0xa48>
    2136:	0e 94 5f 06 	call	0xcbe	; 0xcbe <rdiffcheck()>
    213a:	88 23       	and	r24, r24
    213c:	99 f3       	breq	.-26     	; 0x2124 <main+0xa48>
    213e:	0e 94 af 06 	call	0xd5e	; 0xd5e <inputVok()>
    2142:	88 23       	and	r24, r24
    2144:	79 f3       	breq	.-34     	; 0x2124 <main+0xa48>
    2146:	0e 94 78 06 	call	0xcf0	; 0xcf0 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:395
    digitalWrite(motorRBW, HIGH);
    214a:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:394
  if(routvoltage < SETV && rdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorRFW, HIGH);
  } else {
    digitalWrite(motorRFW, LOW);
  }
  if(routvoltage > SETV && rdiffcheck() && inputVok() && currentok()){
    214c:	88 23       	and	r24, r24
    214e:	51 f3       	breq	.-44     	; 0x2124 <main+0xa48>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:395
    digitalWrite(motorRBW, HIGH);
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:402
    digitalWrite(motorRBW, LOW);
  }



  if(youtvoltage < SETV && ydiffcheck() && inputVok() && currentok()){
    2156:	80 90 1e 02 	lds	r8, 0x021E	; 0x80021e <youtvoltage>
    215a:	90 90 1f 02 	lds	r9, 0x021F	; 0x80021f <youtvoltage+0x1>
    215e:	8e 14       	cp	r8, r14
    2160:	9f 04       	cpc	r9, r15
    2162:	64 f4       	brge	.+24     	; 0x217c <main+0xaa0>
    2164:	0e 94 46 06 	call	0xc8c	; 0xc8c <ydiffcheck()>
    2168:	88 23       	and	r24, r24
    216a:	41 f0       	breq	.+16     	; 0x217c <main+0xaa0>
    216c:	0e 94 af 06 	call	0xd5e	; 0xd5e <inputVok()>
    2170:	88 23       	and	r24, r24
    2172:	21 f0       	breq	.+8      	; 0x217c <main+0xaa0>
    2174:	0e 94 78 06 	call	0xcf0	; 0xcf0 <currentok()>
    2178:	81 11       	cpse	r24, r1
    217a:	09 c0       	rjmp	.+18     	; 0x218e <main+0xab2>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:405
    digitalWrite(motorYFW, HIGH);
  } else {
    digitalWrite(motorYFW, LOW);
    217c:	60 e0       	ldi	r22, 0x00	; 0
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:407
  }
  if(youtvoltage > SETV && ydiffcheck() && inputVok() && currentok()){
    2184:	e8 14       	cp	r14, r8
    2186:	f9 04       	cpc	r15, r9
    2188:	3c f0       	brlt	.+14     	; 0x2198 <main+0xabc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:410
    digitalWrite(motorYBW, HIGH);
  } else {
    digitalWrite(motorYBW, LOW);
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	12 c0       	rjmp	.+36     	; 0x21b2 <main+0xad6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:403
  }



  if(youtvoltage < SETV && ydiffcheck() && inputVok() && currentok()){
    digitalWrite(motorYFW, HIGH);
    218e:	61 e0       	ldi	r22, 0x01	; 1
    2190:	82 e0       	ldi	r24, 0x02	; 2
    2192:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
    2196:	f9 cf       	rjmp	.-14     	; 0x218a <main+0xaae>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:407
  } else {
    digitalWrite(motorYFW, LOW);
  }
  if(youtvoltage > SETV && ydiffcheck() && inputVok() && currentok()){
    2198:	0e 94 46 06 	call	0xc8c	; 0xc8c <ydiffcheck()>
    219c:	88 23       	and	r24, r24
    219e:	a9 f3       	breq	.-22     	; 0x218a <main+0xaae>
    21a0:	0e 94 af 06 	call	0xd5e	; 0xd5e <inputVok()>
    21a4:	88 23       	and	r24, r24
    21a6:	89 f3       	breq	.-30     	; 0x218a <main+0xaae>
    21a8:	0e 94 78 06 	call	0xcf0	; 0xcf0 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:408
    digitalWrite(motorYBW, HIGH);
    21ac:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:407
  if(youtvoltage < SETV && ydiffcheck() && inputVok() && currentok()){
    digitalWrite(motorYFW, HIGH);
  } else {
    digitalWrite(motorYFW, LOW);
  }
  if(youtvoltage > SETV && ydiffcheck() && inputVok() && currentok()){
    21ae:	88 23       	and	r24, r24
    21b0:	61 f3       	breq	.-40     	; 0x218a <main+0xaae>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:408
    digitalWrite(motorYBW, HIGH);
    21b2:	83 e0       	ldi	r24, 0x03	; 3
    21b4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:414
  } else {
    digitalWrite(motorYBW, LOW);
  }


  if(boutvoltage < SETV && bdiffcheck() && inputVok() && currentok()){
    21b8:	80 90 1c 02 	lds	r8, 0x021C	; 0x80021c <boutvoltage>
    21bc:	90 90 1d 02 	lds	r9, 0x021D	; 0x80021d <boutvoltage+0x1>
    21c0:	8e 14       	cp	r8, r14
    21c2:	9f 04       	cpc	r9, r15
    21c4:	64 f4       	brge	.+24     	; 0x21de <main+0xb02>
    21c6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <bdiffcheck()>
    21ca:	88 23       	and	r24, r24
    21cc:	41 f0       	breq	.+16     	; 0x21de <main+0xb02>
    21ce:	0e 94 af 06 	call	0xd5e	; 0xd5e <inputVok()>
    21d2:	88 23       	and	r24, r24
    21d4:	21 f0       	breq	.+8      	; 0x21de <main+0xb02>
    21d6:	0e 94 78 06 	call	0xcf0	; 0xcf0 <currentok()>
    21da:	81 11       	cpse	r24, r1
    21dc:	09 c0       	rjmp	.+18     	; 0x21f0 <main+0xb14>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:417
    digitalWrite(motorBFW, HIGH);
  } else {
    digitalWrite(motorBFW, LOW);
    21de:	60 e0       	ldi	r22, 0x00	; 0
    21e0:	84 e0       	ldi	r24, 0x04	; 4
    21e2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:419
  }
  if(boutvoltage > SETV && bdiffcheck() && inputVok() && currentok()){
    21e6:	e8 14       	cp	r14, r8
    21e8:	f9 04       	cpc	r15, r9
    21ea:	3c f0       	brlt	.+14     	; 0x21fa <main+0xb1e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:422
    digitalWrite(motorBBW, HIGH);
  } else {
    digitalWrite(motorBBW, LOW);
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	12 c0       	rjmp	.+36     	; 0x2214 <main+0xb38>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:415
    digitalWrite(motorYBW, LOW);
  }


  if(boutvoltage < SETV && bdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorBFW, HIGH);
    21f0:	61 e0       	ldi	r22, 0x01	; 1
    21f2:	84 e0       	ldi	r24, 0x04	; 4
    21f4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
    21f8:	f9 cf       	rjmp	.-14     	; 0x21ec <main+0xb10>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:419
  } else {
    digitalWrite(motorBFW, LOW);
  }
  if(boutvoltage > SETV && bdiffcheck() && inputVok() && currentok()){
    21fa:	0e 94 2d 06 	call	0xc5a	; 0xc5a <bdiffcheck()>
    21fe:	88 23       	and	r24, r24
    2200:	a9 f3       	breq	.-22     	; 0x21ec <main+0xb10>
    2202:	0e 94 af 06 	call	0xd5e	; 0xd5e <inputVok()>
    2206:	88 23       	and	r24, r24
    2208:	89 f3       	breq	.-30     	; 0x21ec <main+0xb10>
    220a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:420
    digitalWrite(motorBBW, HIGH);
    220e:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:419
  if(boutvoltage < SETV && bdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorBFW, HIGH);
  } else {
    digitalWrite(motorBFW, LOW);
  }
  if(boutvoltage > SETV && bdiffcheck() && inputVok() && currentok()){
    2210:	88 23       	and	r24, r24
    2212:	61 f3       	breq	.-40     	; 0x21ec <main+0xb10>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:420
    digitalWrite(motorBBW, HIGH);
    2214:	85 e0       	ldi	r24, 0x05	; 5
    2216:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:425
  } else {
    digitalWrite(motorBBW, LOW);
  }

  if(checksystem()){
    221a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <checksystem()>
    221e:	88 23       	and	r24, r24
    2220:	c1 f0       	breq	.+48     	; 0x2252 <main+0xb76>
updateScreenData():
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	0e 94 61 08 	call	0x10c2	; 0x10c2 <updateScreenData(bool) [clone .part.7]>
updatePower():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:450
}

//Control Output Supply Relay

void updatePower() {
  if(checksystem()){
    2228:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <checksystem()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:451
    if(on.triggered(false)){  
    222c:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:450
}

//Control Output Supply Relay

void updatePower() {
  if(checksystem()){
    222e:	88 23       	and	r24, r24
    2230:	91 f0       	breq	.+36     	; 0x2256 <main+0xb7a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:451
    if(on.triggered(false)){  
    2232:	8b ef       	ldi	r24, 0xFB	; 251
    2234:	91 e0       	ldi	r25, 0x01	; 1
    2236:	0e 94 05 04 	call	0x80a	; 0x80a <BlockNot::triggered(bool)>
    223a:	88 23       	and	r24, r24
    223c:	09 f4       	brne	.+2      	; 0x2240 <main+0xb64>
    223e:	93 ce       	rjmp	.-730    	; 0x1f66 <main+0x88a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:452
      digitalWrite(contactor, HIGH);
    2240:	61 e0       	ldi	r22, 0x01	; 1
    2242:	86 e0       	ldi	r24, 0x06	; 6
    2244:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:453
      off.reset();
    2248:	8a ed       	ldi	r24, 0xDA	; 218
    224a:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:459
    }
  }
  else {
    if(off.triggered(false)) {
      digitalWrite(contactor, LOW);
      on.reset();
    224c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <BlockNot::reset(unsigned long) [clone .constprop.21]>
    2250:	8a ce       	rjmp	.-748    	; 0x1f66 <main+0x88a>
updateScreenData():
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	e7 cf       	rjmp	.-50     	; 0x2224 <main+0xb48>
updatePower():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:457
      digitalWrite(contactor, HIGH);
      off.reset();
    }
  }
  else {
    if(off.triggered(false)) {
    2256:	8a ed       	ldi	r24, 0xDA	; 218
    2258:	91 e0       	ldi	r25, 0x01	; 1
    225a:	0e 94 05 04 	call	0x80a	; 0x80a <BlockNot::triggered(bool)>
    225e:	88 23       	and	r24, r24
    2260:	09 f4       	brne	.+2      	; 0x2264 <main+0xb88>
    2262:	81 ce       	rjmp	.-766    	; 0x1f66 <main+0x88a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:458
      digitalWrite(contactor, LOW);
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	86 e0       	ldi	r24, 0x06	; 6
    2268:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:459
      on.reset();
    226c:	8b ef       	ldi	r24, 0xFB	; 251
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	ed cf       	rjmp	.-38     	; 0x224c <main+0xb70>

00002272 <_GLOBAL__sub_I_display1>:
_GLOBAL__sub_I_display1():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1101
  int numberOfDigits = 4; 

  display1.Begin(displayType, numberOfDigits, digit1, digit2, digit3, digit4, segA, segB, segC, segD, segE, segF, segG, segDP);
  
  display1.SetBrightness(100); 
}
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
__base_ctor ():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:67
#include "SevSeg.h"

SevSeg::SevSeg()
{
  //Initial values
  DecAposColon = 0; //This variable tracks the decimal place, apostrophe, and colon (if the display has support)
    2276:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <display1+0x48>
__static_initialization_and_destruction_0():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:132


//Intialize the SevenSegament Display
SevSeg display1;
//Timer that updates Main screen every Second.
BlockNot refresh(1, SECONDS);
    227a:	41 e0       	ldi	r20, 0x01	; 1
    227c:	50 e0       	ldi	r21, 0x00	; 0
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	85 e4       	ldi	r24, 0x45	; 69
    2284:	92 e0       	ldi	r25, 0x02	; 2
    2286:	0e 94 8c 03 	call	0x718	; 0x718 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.20]>
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:34
BlockNot::BlockNot() {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    if (global == GLOBAL_RESET) addToTimerList();
}

BlockNot::BlockNot(unsigned long time) {
    228a:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <checkin+0x4>
    228e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <checkin+0x5>
    2292:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <checkin+0x6>
    2296:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <checkin+0x7>
    229a:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <checkin+0x8>
    229e:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <checkin+0x9>
    22a2:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <checkin+0xa>
    22a6:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <checkin+0xb>
    22aa:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <checkin+0xc>
    22ae:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <checkin+0xd>
    22b2:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <checkin+0xe>
    22b6:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <checkin+0xf>
    22ba:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <checkin+0x11>
    22be:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <checkin+0x10>
    22c2:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <checkin+0x12>
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <checkin+0x14>
    22ce:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <checkin+0x13>
    22d2:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <checkin+0x1e>
    22d6:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <checkin+0x1d>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:35
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    22da:	c0 91 bc 02 	lds	r28, 0x02BC	; 0x8002bc <BlockNot::global>
    22de:	d0 91 bd 02 	lds	r29, 0x02BD	; 0x8002bd <BlockNot::global+0x1>
    22e2:	c1 30       	cpi	r28, 0x01	; 1
    22e4:	d1 05       	cpc	r29, r1
    22e6:	11 f0       	breq	.+4      	; 0x22ec <_GLOBAL__sub_I_display1+0x7a>
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <BlockNot::global+0x1>
    22f0:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <BlockNot::global>
_ZN8BlockNot5cTime7milli_taSEd():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:197

        class milli_t {
            double seconds;
        public:
            milli_t &operator=(double ms) {
                seconds = ms * .001;
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	a0 e8       	ldi	r26, 0x80	; 128
    22fa:	be e3       	ldi	r27, 0x3E	; 62
    22fc:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <checkin+0x15>
    2300:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <checkin+0x16>
    2304:	a0 93 3b 02 	sts	0x023B, r26	; 0x80023b <checkin+0x17>
    2308:	b0 93 3c 02 	sts	0x023C, r27	; 0x80023c <checkin+0x18>
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:37
    initDuration(time);
    reset();
    230c:	84 e2       	ldi	r24, 0x24	; 36
    230e:	92 e0       	ldi	r25, 0x02	; 2
    2310:	0e 94 60 03 	call	0x6c0	; 0x6c0 <BlockNot::reset(unsigned long) [clone .constprop.21]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:38
    if (global == GLOBAL_RESET) addToTimerList();
    2314:	21 97       	sbiw	r28, 0x01	; 1
    2316:	21 f0       	breq	.+8      	; 0x2320 <_GLOBAL__sub_I_display1+0xae>
    2318:	84 e2       	ldi	r24, 0x24	; 36
    231a:	92 e0       	ldi	r25, 0x02	; 2
    231c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <BlockNot::addToTimerList()>
__static_initialization_and_destruction_0():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:184
/**/
bool mode = false;
bool switched = false;
/**/

BlockNot on(TON, SECONDS);
    2320:	40 91 c6 01 	lds	r20, 0x01C6	; 0x8001c6 <TON>
    2324:	50 91 c7 01 	lds	r21, 0x01C7	; 0x8001c7 <TON+0x1>
    2328:	05 2e       	mov	r0, r21
    232a:	00 0c       	add	r0, r0
    232c:	66 0b       	sbc	r22, r22
    232e:	77 0b       	sbc	r23, r23
    2330:	8b ef       	ldi	r24, 0xFB	; 251
    2332:	91 e0       	ldi	r25, 0x01	; 1
    2334:	0e 94 8c 03 	call	0x718	; 0x718 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.20]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:185
BlockNot off(TOFF, SECONDS);
    2338:	40 91 c4 01 	lds	r20, 0x01C4	; 0x8001c4 <TOFF>
    233c:	50 91 c5 01 	lds	r21, 0x01C5	; 0x8001c5 <TOFF+0x1>
    2340:	05 2e       	mov	r0, r21
    2342:	00 0c       	add	r0, r0
    2344:	66 0b       	sbc	r22, r22
    2346:	77 0b       	sbc	r23, r23
    2348:	8a ed       	ldi	r24, 0xDA	; 218
    234a:	91 e0       	ldi	r25, 0x01	; 1
_GLOBAL__sub_I_display1():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1101
  int numberOfDigits = 4; 

  display1.Begin(displayType, numberOfDigits, digit1, digit2, digit3, digit4, segA, segB, segC, segD, segE, segF, segG, segDP);
  
  display1.SetBrightness(100); 
}
    234c:	df 91       	pop	r29
    234e:	cf 91       	pop	r28
__static_initialization_and_destruction_0():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:185
bool mode = false;
bool switched = false;
/**/

BlockNot on(TON, SECONDS);
BlockNot off(TOFF, SECONDS);
    2350:	0c 94 8c 03 	jmp	0x718	; 0x718 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.20]>

00002354 <__floatunsisf>:
__floatunsisf():
    2354:	e8 94       	clt
    2356:	09 c0       	rjmp	.+18     	; 0x236a <__floatsisf+0x12>

00002358 <__floatsisf>:
    2358:	97 fb       	bst	r25, 7
    235a:	3e f4       	brtc	.+14     	; 0x236a <__floatsisf+0x12>
    235c:	90 95       	com	r25
    235e:	80 95       	com	r24
    2360:	70 95       	com	r23
    2362:	61 95       	neg	r22
    2364:	7f 4f       	sbci	r23, 0xFF	; 255
    2366:	8f 4f       	sbci	r24, 0xFF	; 255
    2368:	9f 4f       	sbci	r25, 0xFF	; 255
    236a:	99 23       	and	r25, r25
    236c:	a9 f0       	breq	.+42     	; 0x2398 <__floatsisf+0x40>
    236e:	f9 2f       	mov	r31, r25
    2370:	96 e9       	ldi	r25, 0x96	; 150
    2372:	bb 27       	eor	r27, r27
    2374:	93 95       	inc	r25
    2376:	f6 95       	lsr	r31
    2378:	87 95       	ror	r24
    237a:	77 95       	ror	r23
    237c:	67 95       	ror	r22
    237e:	b7 95       	ror	r27
    2380:	f1 11       	cpse	r31, r1
    2382:	f8 cf       	rjmp	.-16     	; 0x2374 <__floatsisf+0x1c>
    2384:	fa f4       	brpl	.+62     	; 0x23c4 <__floatsisf+0x6c>
    2386:	bb 0f       	add	r27, r27
    2388:	11 f4       	brne	.+4      	; 0x238e <__floatsisf+0x36>
    238a:	60 ff       	sbrs	r22, 0
    238c:	1b c0       	rjmp	.+54     	; 0x23c4 <__floatsisf+0x6c>
    238e:	6f 5f       	subi	r22, 0xFF	; 255
    2390:	7f 4f       	sbci	r23, 0xFF	; 255
    2392:	8f 4f       	sbci	r24, 0xFF	; 255
    2394:	9f 4f       	sbci	r25, 0xFF	; 255
    2396:	16 c0       	rjmp	.+44     	; 0x23c4 <__floatsisf+0x6c>
    2398:	88 23       	and	r24, r24
    239a:	11 f0       	breq	.+4      	; 0x23a0 <__floatsisf+0x48>
    239c:	96 e9       	ldi	r25, 0x96	; 150
    239e:	11 c0       	rjmp	.+34     	; 0x23c2 <__floatsisf+0x6a>
    23a0:	77 23       	and	r23, r23
    23a2:	21 f0       	breq	.+8      	; 0x23ac <__floatsisf+0x54>
    23a4:	9e e8       	ldi	r25, 0x8E	; 142
    23a6:	87 2f       	mov	r24, r23
    23a8:	76 2f       	mov	r23, r22
    23aa:	05 c0       	rjmp	.+10     	; 0x23b6 <__floatsisf+0x5e>
    23ac:	66 23       	and	r22, r22
    23ae:	71 f0       	breq	.+28     	; 0x23cc <__floatsisf+0x74>
    23b0:	96 e8       	ldi	r25, 0x86	; 134
    23b2:	86 2f       	mov	r24, r22
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	2a f0       	brmi	.+10     	; 0x23c4 <__floatsisf+0x6c>
    23ba:	9a 95       	dec	r25
    23bc:	66 0f       	add	r22, r22
    23be:	77 1f       	adc	r23, r23
    23c0:	88 1f       	adc	r24, r24
    23c2:	da f7       	brpl	.-10     	; 0x23ba <__floatsisf+0x62>
    23c4:	88 0f       	add	r24, r24
    23c6:	96 95       	lsr	r25
    23c8:	87 95       	ror	r24
    23ca:	97 f9       	bld	r25, 7
    23cc:	08 95       	ret

000023ce <__fp_cmp>:
__fp_cmp():
    23ce:	99 0f       	add	r25, r25
    23d0:	00 08       	sbc	r0, r0
    23d2:	55 0f       	add	r21, r21
    23d4:	aa 0b       	sbc	r26, r26
    23d6:	e0 e8       	ldi	r30, 0x80	; 128
    23d8:	fe ef       	ldi	r31, 0xFE	; 254
    23da:	16 16       	cp	r1, r22
    23dc:	17 06       	cpc	r1, r23
    23de:	e8 07       	cpc	r30, r24
    23e0:	f9 07       	cpc	r31, r25
    23e2:	c0 f0       	brcs	.+48     	; 0x2414 <__fp_cmp+0x46>
    23e4:	12 16       	cp	r1, r18
    23e6:	13 06       	cpc	r1, r19
    23e8:	e4 07       	cpc	r30, r20
    23ea:	f5 07       	cpc	r31, r21
    23ec:	98 f0       	brcs	.+38     	; 0x2414 <__fp_cmp+0x46>
    23ee:	62 1b       	sub	r22, r18
    23f0:	73 0b       	sbc	r23, r19
    23f2:	84 0b       	sbc	r24, r20
    23f4:	95 0b       	sbc	r25, r21
    23f6:	39 f4       	brne	.+14     	; 0x2406 <__fp_cmp+0x38>
    23f8:	0a 26       	eor	r0, r26
    23fa:	61 f0       	breq	.+24     	; 0x2414 <__fp_cmp+0x46>
    23fc:	23 2b       	or	r18, r19
    23fe:	24 2b       	or	r18, r20
    2400:	25 2b       	or	r18, r21
    2402:	21 f4       	brne	.+8      	; 0x240c <__fp_cmp+0x3e>
    2404:	08 95       	ret
    2406:	0a 26       	eor	r0, r26
    2408:	09 f4       	brne	.+2      	; 0x240c <__fp_cmp+0x3e>
    240a:	a1 40       	sbci	r26, 0x01	; 1
    240c:	a6 95       	lsr	r26
    240e:	8f ef       	ldi	r24, 0xFF	; 255
    2410:	81 1d       	adc	r24, r1
    2412:	81 1d       	adc	r24, r1
    2414:	08 95       	ret

00002416 <__mulsf3>:
__mulsf3():
    2416:	0e 94 1e 12 	call	0x243c	; 0x243c <__mulsf3x>
    241a:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__fp_round>
    241e:	0e 94 81 12 	call	0x2502	; 0x2502 <__fp_pscA>
    2422:	38 f0       	brcs	.+14     	; 0x2432 <__mulsf3+0x1c>
    2424:	0e 94 88 12 	call	0x2510	; 0x2510 <__fp_pscB>
    2428:	20 f0       	brcs	.+8      	; 0x2432 <__mulsf3+0x1c>
    242a:	95 23       	and	r25, r21
    242c:	11 f0       	breq	.+4      	; 0x2432 <__mulsf3+0x1c>
    242e:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__fp_inf>
    2432:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__fp_nan>
    2436:	11 24       	eor	r1, r1
    2438:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__fp_szero>

0000243c <__mulsf3x>:
__mulsf3x():
    243c:	0e 94 a0 12 	call	0x2540	; 0x2540 <__fp_split3>
    2440:	70 f3       	brcs	.-36     	; 0x241e <__mulsf3+0x8>

00002442 <__mulsf3_pse>:
    2442:	95 9f       	mul	r25, r21
    2444:	c1 f3       	breq	.-16     	; 0x2436 <__mulsf3+0x20>
    2446:	95 0f       	add	r25, r21
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	55 1f       	adc	r21, r21
    244c:	62 9f       	mul	r22, r18
    244e:	f0 01       	movw	r30, r0
    2450:	72 9f       	mul	r23, r18
    2452:	bb 27       	eor	r27, r27
    2454:	f0 0d       	add	r31, r0
    2456:	b1 1d       	adc	r27, r1
    2458:	63 9f       	mul	r22, r19
    245a:	aa 27       	eor	r26, r26
    245c:	f0 0d       	add	r31, r0
    245e:	b1 1d       	adc	r27, r1
    2460:	aa 1f       	adc	r26, r26
    2462:	64 9f       	mul	r22, r20
    2464:	66 27       	eor	r22, r22
    2466:	b0 0d       	add	r27, r0
    2468:	a1 1d       	adc	r26, r1
    246a:	66 1f       	adc	r22, r22
    246c:	82 9f       	mul	r24, r18
    246e:	22 27       	eor	r18, r18
    2470:	b0 0d       	add	r27, r0
    2472:	a1 1d       	adc	r26, r1
    2474:	62 1f       	adc	r22, r18
    2476:	73 9f       	mul	r23, r19
    2478:	b0 0d       	add	r27, r0
    247a:	a1 1d       	adc	r26, r1
    247c:	62 1f       	adc	r22, r18
    247e:	83 9f       	mul	r24, r19
    2480:	a0 0d       	add	r26, r0
    2482:	61 1d       	adc	r22, r1
    2484:	22 1f       	adc	r18, r18
    2486:	74 9f       	mul	r23, r20
    2488:	33 27       	eor	r19, r19
    248a:	a0 0d       	add	r26, r0
    248c:	61 1d       	adc	r22, r1
    248e:	23 1f       	adc	r18, r19
    2490:	84 9f       	mul	r24, r20
    2492:	60 0d       	add	r22, r0
    2494:	21 1d       	adc	r18, r1
    2496:	82 2f       	mov	r24, r18
    2498:	76 2f       	mov	r23, r22
    249a:	6a 2f       	mov	r22, r26
    249c:	11 24       	eor	r1, r1
    249e:	9f 57       	subi	r25, 0x7F	; 127
    24a0:	50 40       	sbci	r21, 0x00	; 0
    24a2:	9a f0       	brmi	.+38     	; 0x24ca <__mulsf3_pse+0x88>
    24a4:	f1 f0       	breq	.+60     	; 0x24e2 <__mulsf3_pse+0xa0>
    24a6:	88 23       	and	r24, r24
    24a8:	4a f0       	brmi	.+18     	; 0x24bc <__mulsf3_pse+0x7a>
    24aa:	ee 0f       	add	r30, r30
    24ac:	ff 1f       	adc	r31, r31
    24ae:	bb 1f       	adc	r27, r27
    24b0:	66 1f       	adc	r22, r22
    24b2:	77 1f       	adc	r23, r23
    24b4:	88 1f       	adc	r24, r24
    24b6:	91 50       	subi	r25, 0x01	; 1
    24b8:	50 40       	sbci	r21, 0x00	; 0
    24ba:	a9 f7       	brne	.-22     	; 0x24a6 <__mulsf3_pse+0x64>
    24bc:	9e 3f       	cpi	r25, 0xFE	; 254
    24be:	51 05       	cpc	r21, r1
    24c0:	80 f0       	brcs	.+32     	; 0x24e2 <__mulsf3_pse+0xa0>
    24c2:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__fp_inf>
    24c6:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__fp_szero>
    24ca:	5f 3f       	cpi	r21, 0xFF	; 255
    24cc:	e4 f3       	brlt	.-8      	; 0x24c6 <__mulsf3_pse+0x84>
    24ce:	98 3e       	cpi	r25, 0xE8	; 232
    24d0:	d4 f3       	brlt	.-12     	; 0x24c6 <__mulsf3_pse+0x84>
    24d2:	86 95       	lsr	r24
    24d4:	77 95       	ror	r23
    24d6:	67 95       	ror	r22
    24d8:	b7 95       	ror	r27
    24da:	f7 95       	ror	r31
    24dc:	e7 95       	ror	r30
    24de:	9f 5f       	subi	r25, 0xFF	; 255
    24e0:	c1 f7       	brne	.-16     	; 0x24d2 <__mulsf3_pse+0x90>
    24e2:	fe 2b       	or	r31, r30
    24e4:	88 0f       	add	r24, r24
    24e6:	91 1d       	adc	r25, r1
    24e8:	96 95       	lsr	r25
    24ea:	87 95       	ror	r24
    24ec:	97 f9       	bld	r25, 7
    24ee:	08 95       	ret

000024f0 <__fp_inf>:
    24f0:	97 f9       	bld	r25, 7
    24f2:	9f 67       	ori	r25, 0x7F	; 127
    24f4:	80 e8       	ldi	r24, 0x80	; 128
    24f6:	70 e0       	ldi	r23, 0x00	; 0
    24f8:	60 e0       	ldi	r22, 0x00	; 0
    24fa:	08 95       	ret

000024fc <__fp_nan>:
    24fc:	9f ef       	ldi	r25, 0xFF	; 255
    24fe:	80 ec       	ldi	r24, 0xC0	; 192
    2500:	08 95       	ret

00002502 <__fp_pscA>:
    2502:	00 24       	eor	r0, r0
    2504:	0a 94       	dec	r0
    2506:	16 16       	cp	r1, r22
    2508:	17 06       	cpc	r1, r23
    250a:	18 06       	cpc	r1, r24
    250c:	09 06       	cpc	r0, r25
__fp_pscA():
    250e:	08 95       	ret

00002510 <__fp_pscB>:
__fp_pscB():
    2510:	00 24       	eor	r0, r0
    2512:	0a 94       	dec	r0
    2514:	12 16       	cp	r1, r18
    2516:	13 06       	cpc	r1, r19
    2518:	14 06       	cpc	r1, r20
    251a:	05 06       	cpc	r0, r21
    251c:	08 95       	ret

0000251e <__fp_round>:
__fp_round():
    251e:	09 2e       	mov	r0, r25
    2520:	03 94       	inc	r0
    2522:	00 0c       	add	r0, r0
    2524:	11 f4       	brne	.+4      	; 0x252a <__fp_round+0xc>
    2526:	88 23       	and	r24, r24
    2528:	52 f0       	brmi	.+20     	; 0x253e <__fp_round+0x20>
    252a:	bb 0f       	add	r27, r27
    252c:	40 f4       	brcc	.+16     	; 0x253e <__fp_round+0x20>
    252e:	bf 2b       	or	r27, r31
    2530:	11 f4       	brne	.+4      	; 0x2536 <__fp_round+0x18>
    2532:	60 ff       	sbrs	r22, 0
    2534:	04 c0       	rjmp	.+8      	; 0x253e <__fp_round+0x20>
    2536:	6f 5f       	subi	r22, 0xFF	; 255
    2538:	7f 4f       	sbci	r23, 0xFF	; 255
    253a:	8f 4f       	sbci	r24, 0xFF	; 255
    253c:	9f 4f       	sbci	r25, 0xFF	; 255
    253e:	08 95       	ret

00002540 <__fp_split3>:
__fp_split3():
    2540:	57 fd       	sbrc	r21, 7
    2542:	90 58       	subi	r25, 0x80	; 128
    2544:	44 0f       	add	r20, r20
    2546:	55 1f       	adc	r21, r21
    2548:	59 f0       	breq	.+22     	; 0x2560 <__fp_splitA+0x10>
    254a:	5f 3f       	cpi	r21, 0xFF	; 255
    254c:	71 f0       	breq	.+28     	; 0x256a <__fp_splitA+0x1a>
    254e:	47 95       	ror	r20

00002550 <__fp_splitA>:
    2550:	88 0f       	add	r24, r24
    2552:	97 fb       	bst	r25, 7
    2554:	99 1f       	adc	r25, r25
    2556:	61 f0       	breq	.+24     	; 0x2570 <__fp_splitA+0x20>
    2558:	9f 3f       	cpi	r25, 0xFF	; 255
    255a:	79 f0       	breq	.+30     	; 0x257a <__fp_splitA+0x2a>
    255c:	87 95       	ror	r24
    255e:	08 95       	ret
    2560:	12 16       	cp	r1, r18
    2562:	13 06       	cpc	r1, r19
    2564:	14 06       	cpc	r1, r20
    2566:	55 1f       	adc	r21, r21
    2568:	f2 cf       	rjmp	.-28     	; 0x254e <__fp_split3+0xe>
    256a:	46 95       	lsr	r20
    256c:	f1 df       	rcall	.-30     	; 0x2550 <__fp_splitA>
    256e:	08 c0       	rjmp	.+16     	; 0x2580 <__fp_splitA+0x30>
    2570:	16 16       	cp	r1, r22
    2572:	17 06       	cpc	r1, r23
    2574:	18 06       	cpc	r1, r24
    2576:	99 1f       	adc	r25, r25
    2578:	f1 cf       	rjmp	.-30     	; 0x255c <__fp_splitA+0xc>
    257a:	86 95       	lsr	r24
    257c:	71 05       	cpc	r23, r1
    257e:	61 05       	cpc	r22, r1
    2580:	08 94       	sec
    2582:	08 95       	ret

00002584 <__fp_zero>:
__fp_zero():
    2584:	e8 94       	clt

00002586 <__fp_szero>:
    2586:	bb 27       	eor	r27, r27
    2588:	66 27       	eor	r22, r22
    258a:	77 27       	eor	r23, r23
    258c:	cb 01       	movw	r24, r22
    258e:	97 f9       	bld	r25, 7
    2590:	08 95       	ret

00002592 <eeprom_read_byte>:
eeprom_read_byte():
    2592:	f9 99       	sbic	0x1f, 1	; 31
    2594:	fe cf       	rjmp	.-4      	; 0x2592 <eeprom_read_byte>
    2596:	92 bd       	out	0x22, r25	; 34
    2598:	81 bd       	out	0x21, r24	; 33
    259a:	f8 9a       	sbi	0x1f, 0	; 31
    259c:	99 27       	eor	r25, r25
    259e:	80 b5       	in	r24, 0x20	; 32
    25a0:	08 95       	ret

000025a2 <eeprom_write_byte>:
eeprom_write_byte():
    25a2:	26 2f       	mov	r18, r22

000025a4 <eeprom_write_r18>:
    25a4:	f9 99       	sbic	0x1f, 1	; 31
    25a6:	fe cf       	rjmp	.-4      	; 0x25a4 <eeprom_write_r18>
    25a8:	1f ba       	out	0x1f, r1	; 31
    25aa:	92 bd       	out	0x22, r25	; 34
    25ac:	81 bd       	out	0x21, r24	; 33
    25ae:	20 bd       	out	0x20, r18	; 32
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	f8 94       	cli
    25b4:	fa 9a       	sbi	0x1f, 2	; 31
    25b6:	f9 9a       	sbi	0x1f, 1	; 31
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	01 96       	adiw	r24, 0x01	; 1
    25bc:	08 95       	ret

000025be <__subsf3>:
__subsf3():
    25be:	50 58       	subi	r21, 0x80	; 128

000025c0 <__addsf3>:
    25c0:	bb 27       	eor	r27, r27
    25c2:	aa 27       	eor	r26, r26
    25c4:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__addsf3x>
    25c8:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__fp_round>
__addsf3():
    25cc:	0e 94 81 12 	call	0x2502	; 0x2502 <__fp_pscA>
    25d0:	38 f0       	brcs	.+14     	; 0x25e0 <__addsf3+0x20>
    25d2:	0e 94 88 12 	call	0x2510	; 0x2510 <__fp_pscB>
    25d6:	20 f0       	brcs	.+8      	; 0x25e0 <__addsf3+0x20>
    25d8:	39 f4       	brne	.+14     	; 0x25e8 <__addsf3+0x28>
    25da:	9f 3f       	cpi	r25, 0xFF	; 255
    25dc:	19 f4       	brne	.+6      	; 0x25e4 <__addsf3+0x24>
    25de:	26 f4       	brtc	.+8      	; 0x25e8 <__addsf3+0x28>
    25e0:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__fp_nan>
    25e4:	0e f4       	brtc	.+2      	; 0x25e8 <__addsf3+0x28>
    25e6:	e0 95       	com	r30
    25e8:	e7 fb       	bst	r30, 7
    25ea:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__fp_inf>

000025ee <__addsf3x>:
__addsf3x():
    25ee:	e9 2f       	mov	r30, r25
    25f0:	0e 94 a0 12 	call	0x2540	; 0x2540 <__fp_split3>
    25f4:	58 f3       	brcs	.-42     	; 0x25cc <__addsf3+0xc>
    25f6:	ba 17       	cp	r27, r26
    25f8:	62 07       	cpc	r22, r18
    25fa:	73 07       	cpc	r23, r19
    25fc:	84 07       	cpc	r24, r20
    25fe:	95 07       	cpc	r25, r21
    2600:	20 f0       	brcs	.+8      	; 0x260a <__addsf3x+0x1c>
    2602:	79 f4       	brne	.+30     	; 0x2622 <__addsf3x+0x34>
    2604:	a6 f5       	brtc	.+104    	; 0x266e <__addsf3x+0x80>
    2606:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__fp_zero>
    260a:	0e f4       	brtc	.+2      	; 0x260e <__addsf3x+0x20>
    260c:	e0 95       	com	r30
    260e:	0b 2e       	mov	r0, r27
    2610:	ba 2f       	mov	r27, r26
    2612:	a0 2d       	mov	r26, r0
    2614:	0b 01       	movw	r0, r22
    2616:	b9 01       	movw	r22, r18
    2618:	90 01       	movw	r18, r0
    261a:	0c 01       	movw	r0, r24
    261c:	ca 01       	movw	r24, r20
    261e:	a0 01       	movw	r20, r0
    2620:	11 24       	eor	r1, r1
    2622:	ff 27       	eor	r31, r31
    2624:	59 1b       	sub	r21, r25
    2626:	99 f0       	breq	.+38     	; 0x264e <__addsf3x+0x60>
    2628:	59 3f       	cpi	r21, 0xF9	; 249
    262a:	50 f4       	brcc	.+20     	; 0x2640 <__addsf3x+0x52>
    262c:	50 3e       	cpi	r21, 0xE0	; 224
    262e:	68 f1       	brcs	.+90     	; 0x268a <__addsf3x+0x9c>
    2630:	1a 16       	cp	r1, r26
    2632:	f0 40       	sbci	r31, 0x00	; 0
    2634:	a2 2f       	mov	r26, r18
    2636:	23 2f       	mov	r18, r19
    2638:	34 2f       	mov	r19, r20
    263a:	44 27       	eor	r20, r20
    263c:	58 5f       	subi	r21, 0xF8	; 248
    263e:	f3 cf       	rjmp	.-26     	; 0x2626 <__addsf3x+0x38>
    2640:	46 95       	lsr	r20
    2642:	37 95       	ror	r19
    2644:	27 95       	ror	r18
    2646:	a7 95       	ror	r26
    2648:	f0 40       	sbci	r31, 0x00	; 0
    264a:	53 95       	inc	r21
    264c:	c9 f7       	brne	.-14     	; 0x2640 <__addsf3x+0x52>
    264e:	7e f4       	brtc	.+30     	; 0x266e <__addsf3x+0x80>
    2650:	1f 16       	cp	r1, r31
    2652:	ba 0b       	sbc	r27, r26
    2654:	62 0b       	sbc	r22, r18
    2656:	73 0b       	sbc	r23, r19
    2658:	84 0b       	sbc	r24, r20
    265a:	ba f0       	brmi	.+46     	; 0x268a <__addsf3x+0x9c>
    265c:	91 50       	subi	r25, 0x01	; 1
    265e:	a1 f0       	breq	.+40     	; 0x2688 <__addsf3x+0x9a>
    2660:	ff 0f       	add	r31, r31
    2662:	bb 1f       	adc	r27, r27
    2664:	66 1f       	adc	r22, r22
    2666:	77 1f       	adc	r23, r23
    2668:	88 1f       	adc	r24, r24
    266a:	c2 f7       	brpl	.-16     	; 0x265c <__addsf3x+0x6e>
    266c:	0e c0       	rjmp	.+28     	; 0x268a <__addsf3x+0x9c>
    266e:	ba 0f       	add	r27, r26
    2670:	62 1f       	adc	r22, r18
    2672:	73 1f       	adc	r23, r19
    2674:	84 1f       	adc	r24, r20
    2676:	48 f4       	brcc	.+18     	; 0x268a <__addsf3x+0x9c>
    2678:	87 95       	ror	r24
    267a:	77 95       	ror	r23
    267c:	67 95       	ror	r22
    267e:	b7 95       	ror	r27
    2680:	f7 95       	ror	r31
    2682:	9e 3f       	cpi	r25, 0xFE	; 254
    2684:	08 f0       	brcs	.+2      	; 0x2688 <__addsf3x+0x9a>
    2686:	b0 cf       	rjmp	.-160    	; 0x25e8 <__addsf3+0x28>
    2688:	93 95       	inc	r25
    268a:	88 0f       	add	r24, r24
    268c:	08 f0       	brcs	.+2      	; 0x2690 <__addsf3x+0xa2>
    268e:	99 27       	eor	r25, r25
    2690:	ee 0f       	add	r30, r30
    2692:	97 95       	ror	r25
    2694:	87 95       	ror	r24
    2696:	08 95       	ret

00002698 <__divsf3>:
    2698:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__divsf3x>
    269c:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__fp_round>
    26a0:	0e 94 88 12 	call	0x2510	; 0x2510 <__fp_pscB>
    26a4:	58 f0       	brcs	.+22     	; 0x26bc <__divsf3+0x24>
    26a6:	0e 94 81 12 	call	0x2502	; 0x2502 <__fp_pscA>
    26aa:	40 f0       	brcs	.+16     	; 0x26bc <__divsf3+0x24>
    26ac:	29 f4       	brne	.+10     	; 0x26b8 <__divsf3+0x20>
    26ae:	5f 3f       	cpi	r21, 0xFF	; 255
    26b0:	29 f0       	breq	.+10     	; 0x26bc <__divsf3+0x24>
    26b2:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__fp_inf>
    26b6:	51 11       	cpse	r21, r1
    26b8:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__fp_szero>
__divsf3():
    26bc:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__fp_nan>

000026c0 <__divsf3x>:
__divsf3x():
    26c0:	0e 94 a0 12 	call	0x2540	; 0x2540 <__fp_split3>
    26c4:	68 f3       	brcs	.-38     	; 0x26a0 <__divsf3+0x8>

000026c6 <__divsf3_pse>:
    26c6:	99 23       	and	r25, r25
    26c8:	b1 f3       	breq	.-20     	; 0x26b6 <__divsf3+0x1e>
    26ca:	55 23       	and	r21, r21
    26cc:	91 f3       	breq	.-28     	; 0x26b2 <__divsf3+0x1a>
    26ce:	95 1b       	sub	r25, r21
    26d0:	55 0b       	sbc	r21, r21
    26d2:	bb 27       	eor	r27, r27
    26d4:	aa 27       	eor	r26, r26
    26d6:	62 17       	cp	r22, r18
    26d8:	73 07       	cpc	r23, r19
    26da:	84 07       	cpc	r24, r20
    26dc:	38 f0       	brcs	.+14     	; 0x26ec <__divsf3_pse+0x26>
    26de:	9f 5f       	subi	r25, 0xFF	; 255
    26e0:	5f 4f       	sbci	r21, 0xFF	; 255
    26e2:	22 0f       	add	r18, r18
    26e4:	33 1f       	adc	r19, r19
    26e6:	44 1f       	adc	r20, r20
    26e8:	aa 1f       	adc	r26, r26
    26ea:	a9 f3       	breq	.-22     	; 0x26d6 <__divsf3_pse+0x10>
    26ec:	35 d0       	rcall	.+106    	; 0x2758 <__divsf3_pse+0x92>
    26ee:	0e 2e       	mov	r0, r30
    26f0:	3a f0       	brmi	.+14     	; 0x2700 <__divsf3_pse+0x3a>
    26f2:	e0 e8       	ldi	r30, 0x80	; 128
    26f4:	32 d0       	rcall	.+100    	; 0x275a <__divsf3_pse+0x94>
    26f6:	91 50       	subi	r25, 0x01	; 1
    26f8:	50 40       	sbci	r21, 0x00	; 0
    26fa:	e6 95       	lsr	r30
    26fc:	00 1c       	adc	r0, r0
    26fe:	ca f7       	brpl	.-14     	; 0x26f2 <__divsf3_pse+0x2c>
    2700:	2b d0       	rcall	.+86     	; 0x2758 <__divsf3_pse+0x92>
    2702:	fe 2f       	mov	r31, r30
    2704:	29 d0       	rcall	.+82     	; 0x2758 <__divsf3_pse+0x92>
    2706:	66 0f       	add	r22, r22
    2708:	77 1f       	adc	r23, r23
    270a:	88 1f       	adc	r24, r24
    270c:	bb 1f       	adc	r27, r27
    270e:	26 17       	cp	r18, r22
    2710:	37 07       	cpc	r19, r23
    2712:	48 07       	cpc	r20, r24
    2714:	ab 07       	cpc	r26, r27
    2716:	b0 e8       	ldi	r27, 0x80	; 128
    2718:	09 f0       	breq	.+2      	; 0x271c <__divsf3_pse+0x56>
    271a:	bb 0b       	sbc	r27, r27
    271c:	80 2d       	mov	r24, r0
    271e:	bf 01       	movw	r22, r30
    2720:	ff 27       	eor	r31, r31
    2722:	93 58       	subi	r25, 0x83	; 131
    2724:	5f 4f       	sbci	r21, 0xFF	; 255
    2726:	3a f0       	brmi	.+14     	; 0x2736 <__divsf3_pse+0x70>
    2728:	9e 3f       	cpi	r25, 0xFE	; 254
    272a:	51 05       	cpc	r21, r1
    272c:	78 f0       	brcs	.+30     	; 0x274c <__divsf3_pse+0x86>
    272e:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__fp_inf>
    2732:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__fp_szero>
    2736:	5f 3f       	cpi	r21, 0xFF	; 255
    2738:	e4 f3       	brlt	.-8      	; 0x2732 <__divsf3_pse+0x6c>
    273a:	98 3e       	cpi	r25, 0xE8	; 232
    273c:	d4 f3       	brlt	.-12     	; 0x2732 <__divsf3_pse+0x6c>
    273e:	86 95       	lsr	r24
    2740:	77 95       	ror	r23
    2742:	67 95       	ror	r22
    2744:	b7 95       	ror	r27
    2746:	f7 95       	ror	r31
    2748:	9f 5f       	subi	r25, 0xFF	; 255
    274a:	c9 f7       	brne	.-14     	; 0x273e <__divsf3_pse+0x78>
    274c:	88 0f       	add	r24, r24
    274e:	91 1d       	adc	r25, r1
    2750:	96 95       	lsr	r25
    2752:	87 95       	ror	r24
    2754:	97 f9       	bld	r25, 7
    2756:	08 95       	ret
    2758:	e1 e0       	ldi	r30, 0x01	; 1
    275a:	66 0f       	add	r22, r22
    275c:	77 1f       	adc	r23, r23
    275e:	88 1f       	adc	r24, r24
    2760:	bb 1f       	adc	r27, r27
    2762:	62 17       	cp	r22, r18
    2764:	73 07       	cpc	r23, r19
    2766:	84 07       	cpc	r24, r20
    2768:	ba 07       	cpc	r27, r26
    276a:	20 f0       	brcs	.+8      	; 0x2774 <__divsf3_pse+0xae>
    276c:	62 1b       	sub	r22, r18
    276e:	73 0b       	sbc	r23, r19
    2770:	84 0b       	sbc	r24, r20
    2772:	ba 0b       	sbc	r27, r26
    2774:	ee 1f       	adc	r30, r30
    2776:	88 f7       	brcc	.-30     	; 0x275a <__divsf3_pse+0x94>
    2778:	e0 95       	com	r30
    277a:	08 95       	ret

0000277c <__fixsfsi>:
    277c:	0e 94 c5 13 	call	0x278a	; 0x278a <__fixunssfsi>
    2780:	68 94       	set
    2782:	b1 11       	cpse	r27, r1
    2784:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__fp_szero>
    2788:	08 95       	ret

0000278a <__fixunssfsi>:
    278a:	0e 94 a8 12 	call	0x2550	; 0x2550 <__fp_splitA>
    278e:	88 f0       	brcs	.+34     	; 0x27b2 <__fixunssfsi+0x28>
    2790:	9f 57       	subi	r25, 0x7F	; 127
    2792:	98 f0       	brcs	.+38     	; 0x27ba <__fixunssfsi+0x30>
    2794:	b9 2f       	mov	r27, r25
    2796:	99 27       	eor	r25, r25
    2798:	b7 51       	subi	r27, 0x17	; 23
    279a:	b0 f0       	brcs	.+44     	; 0x27c8 <__fixunssfsi+0x3e>
__fixunssfsi():
    279c:	e1 f0       	breq	.+56     	; 0x27d6 <__fixunssfsi+0x4c>
    279e:	66 0f       	add	r22, r22
    27a0:	77 1f       	adc	r23, r23
    27a2:	88 1f       	adc	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	1a f0       	brmi	.+6      	; 0x27ae <__fixunssfsi+0x24>
    27a8:	ba 95       	dec	r27
    27aa:	c9 f7       	brne	.-14     	; 0x279e <__fixunssfsi+0x14>
    27ac:	14 c0       	rjmp	.+40     	; 0x27d6 <__fixunssfsi+0x4c>
    27ae:	b1 30       	cpi	r27, 0x01	; 1
    27b0:	91 f0       	breq	.+36     	; 0x27d6 <__fixunssfsi+0x4c>
    27b2:	0e 94 c2 12 	call	0x2584	; 0x2584 <__fp_zero>
    27b6:	b1 e0       	ldi	r27, 0x01	; 1
    27b8:	08 95       	ret
    27ba:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__fp_zero>
    27be:	67 2f       	mov	r22, r23
    27c0:	78 2f       	mov	r23, r24
    27c2:	88 27       	eor	r24, r24
    27c4:	b8 5f       	subi	r27, 0xF8	; 248
    27c6:	39 f0       	breq	.+14     	; 0x27d6 <__fixunssfsi+0x4c>
    27c8:	b9 3f       	cpi	r27, 0xF9	; 249
    27ca:	cc f3       	brlt	.-14     	; 0x27be <__fixunssfsi+0x34>
    27cc:	86 95       	lsr	r24
    27ce:	77 95       	ror	r23
    27d0:	67 95       	ror	r22
    27d2:	b3 95       	inc	r27
    27d4:	d9 f7       	brne	.-10     	; 0x27cc <__fixunssfsi+0x42>
    27d6:	3e f4       	brtc	.+14     	; 0x27e6 <__fixunssfsi+0x5c>
    27d8:	90 95       	com	r25
    27da:	80 95       	com	r24
    27dc:	70 95       	com	r23
    27de:	61 95       	neg	r22
    27e0:	7f 4f       	sbci	r23, 0xFF	; 255
    27e2:	8f 4f       	sbci	r24, 0xFF	; 255
    27e4:	9f 4f       	sbci	r25, 0xFF	; 255
    27e6:	08 95       	ret

000027e8 <__gesf2>:
__gesf2():
    27e8:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__fp_cmp>
    27ec:	08 f4       	brcc	.+2      	; 0x27f0 <__gesf2+0x8>
    27ee:	8f ef       	ldi	r24, 0xFF	; 255
    27f0:	08 95       	ret

000027f2 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    27f2:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    27f4:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    27f6:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    27f8:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    27fa:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    27fc:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    27fe:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    2800:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    2802:	09 94       	ijmp

00002804 <malloc>:
malloc():
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17
    2808:	cf 93       	push	r28
    280a:	df 93       	push	r29
    280c:	82 30       	cpi	r24, 0x02	; 2
    280e:	91 05       	cpc	r25, r1
    2810:	10 f4       	brcc	.+4      	; 0x2816 <malloc+0x12>
    2812:	82 e0       	ldi	r24, 0x02	; 2
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <__flp>
    281a:	f0 91 c1 02 	lds	r31, 0x02C1	; 0x8002c1 <__flp+0x1>
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	a0 e0       	ldi	r26, 0x00	; 0
    2826:	30 97       	sbiw	r30, 0x00	; 0
    2828:	99 f4       	brne	.+38     	; 0x2850 <malloc+0x4c>
    282a:	21 15       	cp	r18, r1
    282c:	31 05       	cpc	r19, r1
    282e:	09 f4       	brne	.+2      	; 0x2832 <malloc+0x2e>
    2830:	4a c0       	rjmp	.+148    	; 0x28c6 <malloc+0xc2>
    2832:	28 1b       	sub	r18, r24
    2834:	39 0b       	sbc	r19, r25
    2836:	24 30       	cpi	r18, 0x04	; 4
    2838:	31 05       	cpc	r19, r1
    283a:	d8 f5       	brcc	.+118    	; 0x28b2 <malloc+0xae>
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
    283e:	9b 81       	ldd	r25, Y+3	; 0x03
    2840:	61 15       	cp	r22, r1
    2842:	71 05       	cpc	r23, r1
    2844:	89 f1       	breq	.+98     	; 0x28a8 <malloc+0xa4>
    2846:	fb 01       	movw	r30, r22
    2848:	93 83       	std	Z+3, r25	; 0x03
    284a:	82 83       	std	Z+2, r24	; 0x02
    284c:	fe 01       	movw	r30, r28
    284e:	11 c0       	rjmp	.+34     	; 0x2872 <malloc+0x6e>
    2850:	40 81       	ld	r20, Z
    2852:	51 81       	ldd	r21, Z+1	; 0x01
    2854:	02 81       	ldd	r16, Z+2	; 0x02
    2856:	13 81       	ldd	r17, Z+3	; 0x03
    2858:	48 17       	cp	r20, r24
    285a:	59 07       	cpc	r21, r25
    285c:	e0 f0       	brcs	.+56     	; 0x2896 <malloc+0x92>
    285e:	48 17       	cp	r20, r24
    2860:	59 07       	cpc	r21, r25
    2862:	99 f4       	brne	.+38     	; 0x288a <malloc+0x86>
    2864:	10 97       	sbiw	r26, 0x00	; 0
    2866:	61 f0       	breq	.+24     	; 0x2880 <malloc+0x7c>
    2868:	12 96       	adiw	r26, 0x02	; 2
    286a:	0c 93       	st	X, r16
    286c:	12 97       	sbiw	r26, 0x02	; 2
    286e:	13 96       	adiw	r26, 0x03	; 3
    2870:	1c 93       	st	X, r17
    2872:	32 96       	adiw	r30, 0x02	; 2
    2874:	cf 01       	movw	r24, r30
    2876:	df 91       	pop	r29
    2878:	cf 91       	pop	r28
    287a:	1f 91       	pop	r17
    287c:	0f 91       	pop	r16
    287e:	08 95       	ret
    2880:	00 93 c0 02 	sts	0x02C0, r16	; 0x8002c0 <__flp>
    2884:	10 93 c1 02 	sts	0x02C1, r17	; 0x8002c1 <__flp+0x1>
    2888:	f4 cf       	rjmp	.-24     	; 0x2872 <malloc+0x6e>
    288a:	21 15       	cp	r18, r1
    288c:	31 05       	cpc	r19, r1
    288e:	51 f0       	breq	.+20     	; 0x28a4 <malloc+0xa0>
    2890:	42 17       	cp	r20, r18
    2892:	53 07       	cpc	r21, r19
    2894:	38 f0       	brcs	.+14     	; 0x28a4 <malloc+0xa0>
    2896:	a9 01       	movw	r20, r18
    2898:	db 01       	movw	r26, r22
    289a:	9a 01       	movw	r18, r20
    289c:	bd 01       	movw	r22, r26
    289e:	df 01       	movw	r26, r30
    28a0:	f8 01       	movw	r30, r16
    28a2:	c1 cf       	rjmp	.-126    	; 0x2826 <malloc+0x22>
    28a4:	ef 01       	movw	r28, r30
    28a6:	f9 cf       	rjmp	.-14     	; 0x289a <malloc+0x96>
    28a8:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <__flp+0x1>
    28ac:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <__flp>
    28b0:	cd cf       	rjmp	.-102    	; 0x284c <malloc+0x48>
    28b2:	fe 01       	movw	r30, r28
    28b4:	e2 0f       	add	r30, r18
    28b6:	f3 1f       	adc	r31, r19
    28b8:	81 93       	st	Z+, r24
    28ba:	91 93       	st	Z+, r25
    28bc:	22 50       	subi	r18, 0x02	; 2
    28be:	31 09       	sbc	r19, r1
    28c0:	39 83       	std	Y+1, r19	; 0x01
    28c2:	28 83       	st	Y, r18
    28c4:	d7 cf       	rjmp	.-82     	; 0x2874 <malloc+0x70>
    28c6:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <__brkval>
    28ca:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <__brkval+0x1>
    28ce:	23 2b       	or	r18, r19
    28d0:	41 f4       	brne	.+16     	; 0x28e2 <malloc+0xde>
    28d2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    28d6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    28da:	30 93 bf 02 	sts	0x02BF, r19	; 0x8002bf <__brkval+0x1>
    28de:	20 93 be 02 	sts	0x02BE, r18	; 0x8002be <__brkval>
    28e2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    28e6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    28ea:	21 15       	cp	r18, r1
    28ec:	31 05       	cpc	r19, r1
    28ee:	41 f4       	brne	.+16     	; 0x2900 <malloc+0xfc>
    28f0:	2d b7       	in	r18, 0x3d	; 61
    28f2:	3e b7       	in	r19, 0x3e	; 62
    28f4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    28f8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    28fc:	24 1b       	sub	r18, r20
    28fe:	35 0b       	sbc	r19, r21
    2900:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <__brkval>
    2904:	f0 91 bf 02 	lds	r31, 0x02BF	; 0x8002bf <__brkval+0x1>
    2908:	e2 17       	cp	r30, r18
    290a:	f3 07       	cpc	r31, r19
    290c:	a0 f4       	brcc	.+40     	; 0x2936 <malloc+0x132>
    290e:	2e 1b       	sub	r18, r30
    2910:	3f 0b       	sbc	r19, r31
    2912:	28 17       	cp	r18, r24
    2914:	39 07       	cpc	r19, r25
    2916:	78 f0       	brcs	.+30     	; 0x2936 <malloc+0x132>
    2918:	ac 01       	movw	r20, r24
    291a:	4e 5f       	subi	r20, 0xFE	; 254
    291c:	5f 4f       	sbci	r21, 0xFF	; 255
    291e:	24 17       	cp	r18, r20
    2920:	35 07       	cpc	r19, r21
    2922:	48 f0       	brcs	.+18     	; 0x2936 <malloc+0x132>
    2924:	4e 0f       	add	r20, r30
    2926:	5f 1f       	adc	r21, r31
    2928:	50 93 bf 02 	sts	0x02BF, r21	; 0x8002bf <__brkval+0x1>
    292c:	40 93 be 02 	sts	0x02BE, r20	; 0x8002be <__brkval>
    2930:	81 93       	st	Z+, r24
    2932:	91 93       	st	Z+, r25
    2934:	9f cf       	rjmp	.-194    	; 0x2874 <malloc+0x70>
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	e0 e0       	ldi	r30, 0x00	; 0
    293a:	9c cf       	rjmp	.-200    	; 0x2874 <malloc+0x70>

0000293c <free>:
free():
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	00 97       	sbiw	r24, 0x00	; 0
    2942:	e9 f0       	breq	.+58     	; 0x297e <free+0x42>
    2944:	fc 01       	movw	r30, r24
    2946:	32 97       	sbiw	r30, 0x02	; 2
    2948:	13 82       	std	Z+3, r1	; 0x03
    294a:	12 82       	std	Z+2, r1	; 0x02
    294c:	a0 91 c0 02 	lds	r26, 0x02C0	; 0x8002c0 <__flp>
    2950:	b0 91 c1 02 	lds	r27, 0x02C1	; 0x8002c1 <__flp+0x1>
    2954:	ed 01       	movw	r28, r26
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	10 97       	sbiw	r26, 0x00	; 0
    295c:	a1 f4       	brne	.+40     	; 0x2986 <free+0x4a>
    295e:	20 81       	ld	r18, Z
    2960:	31 81       	ldd	r19, Z+1	; 0x01
    2962:	82 0f       	add	r24, r18
    2964:	93 1f       	adc	r25, r19
    2966:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <__brkval>
    296a:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <__brkval+0x1>
    296e:	28 17       	cp	r18, r24
    2970:	39 07       	cpc	r19, r25
    2972:	09 f0       	breq	.+2      	; 0x2976 <free+0x3a>
    2974:	61 c0       	rjmp	.+194    	; 0x2a38 <free+0xfc>
    2976:	f0 93 bf 02 	sts	0x02BF, r31	; 0x8002bf <__brkval+0x1>
    297a:	e0 93 be 02 	sts	0x02BE, r30	; 0x8002be <__brkval>
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	08 95       	ret
    2984:	ea 01       	movw	r28, r20
    2986:	ce 17       	cp	r28, r30
    2988:	df 07       	cpc	r29, r31
    298a:	e8 f5       	brcc	.+122    	; 0x2a06 <free+0xca>
    298c:	4a 81       	ldd	r20, Y+2	; 0x02
    298e:	5b 81       	ldd	r21, Y+3	; 0x03
    2990:	9e 01       	movw	r18, r28
    2992:	41 15       	cp	r20, r1
    2994:	51 05       	cpc	r21, r1
    2996:	b1 f7       	brne	.-20     	; 0x2984 <free+0x48>
    2998:	e9 01       	movw	r28, r18
    299a:	fb 83       	std	Y+3, r31	; 0x03
    299c:	ea 83       	std	Y+2, r30	; 0x02
    299e:	49 91       	ld	r20, Y+
    29a0:	59 91       	ld	r21, Y+
    29a2:	c4 0f       	add	r28, r20
    29a4:	d5 1f       	adc	r29, r21
    29a6:	ec 17       	cp	r30, r28
    29a8:	fd 07       	cpc	r31, r29
    29aa:	61 f4       	brne	.+24     	; 0x29c4 <free+0x88>
    29ac:	80 81       	ld	r24, Z
    29ae:	91 81       	ldd	r25, Z+1	; 0x01
    29b0:	02 96       	adiw	r24, 0x02	; 2
    29b2:	84 0f       	add	r24, r20
    29b4:	95 1f       	adc	r25, r21
    29b6:	e9 01       	movw	r28, r18
    29b8:	99 83       	std	Y+1, r25	; 0x01
    29ba:	88 83       	st	Y, r24
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	93 81       	ldd	r25, Z+3	; 0x03
    29c0:	9b 83       	std	Y+3, r25	; 0x03
    29c2:	8a 83       	std	Y+2, r24	; 0x02
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	e0 e0       	ldi	r30, 0x00	; 0
    29c8:	12 96       	adiw	r26, 0x02	; 2
    29ca:	8d 91       	ld	r24, X+
    29cc:	9c 91       	ld	r25, X
    29ce:	13 97       	sbiw	r26, 0x03	; 3
    29d0:	00 97       	sbiw	r24, 0x00	; 0
    29d2:	b9 f5       	brne	.+110    	; 0x2a42 <free+0x106>
    29d4:	2d 91       	ld	r18, X+
    29d6:	3c 91       	ld	r19, X
    29d8:	11 97       	sbiw	r26, 0x01	; 1
    29da:	cd 01       	movw	r24, r26
    29dc:	02 96       	adiw	r24, 0x02	; 2
    29de:	82 0f       	add	r24, r18
    29e0:	93 1f       	adc	r25, r19
    29e2:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <__brkval>
    29e6:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <__brkval+0x1>
    29ea:	28 17       	cp	r18, r24
    29ec:	39 07       	cpc	r19, r25
    29ee:	39 f6       	brne	.-114    	; 0x297e <free+0x42>
    29f0:	30 97       	sbiw	r30, 0x00	; 0
    29f2:	51 f5       	brne	.+84     	; 0x2a48 <free+0x10c>
    29f4:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <__flp+0x1>
    29f8:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <__flp>
    29fc:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <__brkval+0x1>
    2a00:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <__brkval>
    2a04:	bc cf       	rjmp	.-136    	; 0x297e <free+0x42>
    2a06:	d3 83       	std	Z+3, r29	; 0x03
    2a08:	c2 83       	std	Z+2, r28	; 0x02
    2a0a:	40 81       	ld	r20, Z
    2a0c:	51 81       	ldd	r21, Z+1	; 0x01
    2a0e:	84 0f       	add	r24, r20
    2a10:	95 1f       	adc	r25, r21
    2a12:	c8 17       	cp	r28, r24
    2a14:	d9 07       	cpc	r29, r25
    2a16:	61 f4       	brne	.+24     	; 0x2a30 <free+0xf4>
    2a18:	4e 5f       	subi	r20, 0xFE	; 254
    2a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a1c:	88 81       	ld	r24, Y
    2a1e:	99 81       	ldd	r25, Y+1	; 0x01
    2a20:	48 0f       	add	r20, r24
    2a22:	59 1f       	adc	r21, r25
    2a24:	51 83       	std	Z+1, r21	; 0x01
    2a26:	40 83       	st	Z, r20
    2a28:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2c:	93 83       	std	Z+3, r25	; 0x03
    2a2e:	82 83       	std	Z+2, r24	; 0x02
    2a30:	21 15       	cp	r18, r1
    2a32:	31 05       	cpc	r19, r1
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <free+0xfc>
    2a36:	b0 cf       	rjmp	.-160    	; 0x2998 <free+0x5c>
    2a38:	f0 93 c1 02 	sts	0x02C1, r31	; 0x8002c1 <__flp+0x1>
    2a3c:	e0 93 c0 02 	sts	0x02C0, r30	; 0x8002c0 <__flp>
    2a40:	9e cf       	rjmp	.-196    	; 0x297e <free+0x42>
    2a42:	fd 01       	movw	r30, r26
    2a44:	dc 01       	movw	r26, r24
    2a46:	c0 cf       	rjmp	.-128    	; 0x29c8 <free+0x8c>
    2a48:	13 82       	std	Z+3, r1	; 0x03
    2a4a:	12 82       	std	Z+2, r1	; 0x02
    2a4c:	d7 cf       	rjmp	.-82     	; 0x29fc <free+0xc0>

00002a4e <realloc>:
realloc():
    2a4e:	4f 92       	push	r4
    2a50:	5f 92       	push	r5
    2a52:	6f 92       	push	r6
    2a54:	7f 92       	push	r7
    2a56:	8f 92       	push	r8
    2a58:	9f 92       	push	r9
    2a5a:	af 92       	push	r10
    2a5c:	bf 92       	push	r11
    2a5e:	cf 92       	push	r12
    2a60:	df 92       	push	r13
    2a62:	ef 92       	push	r14
    2a64:	ff 92       	push	r15
    2a66:	0f 93       	push	r16
    2a68:	1f 93       	push	r17
    2a6a:	cf 93       	push	r28
    2a6c:	df 93       	push	r29
    2a6e:	8c 01       	movw	r16, r24
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	99 f4       	brne	.+38     	; 0x2a9a <realloc+0x4c>
    2a74:	cb 01       	movw	r24, r22
    2a76:	df 91       	pop	r29
    2a78:	cf 91       	pop	r28
    2a7a:	1f 91       	pop	r17
    2a7c:	0f 91       	pop	r16
    2a7e:	ff 90       	pop	r15
    2a80:	ef 90       	pop	r14
    2a82:	df 90       	pop	r13
    2a84:	cf 90       	pop	r12
    2a86:	bf 90       	pop	r11
    2a88:	af 90       	pop	r10
    2a8a:	9f 90       	pop	r9
    2a8c:	8f 90       	pop	r8
    2a8e:	7f 90       	pop	r7
    2a90:	6f 90       	pop	r6
    2a92:	5f 90       	pop	r5
    2a94:	4f 90       	pop	r4
    2a96:	0c 94 02 14 	jmp	0x2804	; 0x2804 <malloc>
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	e6 0f       	add	r30, r22
    2a9e:	f7 1f       	adc	r31, r23
    2aa0:	9c 01       	movw	r18, r24
    2aa2:	22 50       	subi	r18, 0x02	; 2
    2aa4:	31 09       	sbc	r19, r1
    2aa6:	e2 17       	cp	r30, r18
    2aa8:	f3 07       	cpc	r31, r19
    2aaa:	08 f4       	brcc	.+2      	; 0x2aae <realloc+0x60>
    2aac:	ae c0       	rjmp	.+348    	; 0x2c0a <realloc+0x1bc>
    2aae:	d9 01       	movw	r26, r18
    2ab0:	cd 91       	ld	r28, X+
    2ab2:	dc 91       	ld	r29, X
    2ab4:	11 97       	sbiw	r26, 0x01	; 1
    2ab6:	c6 17       	cp	r28, r22
    2ab8:	d7 07       	cpc	r29, r23
    2aba:	20 f1       	brcs	.+72     	; 0x2b04 <realloc+0xb6>
    2abc:	c5 30       	cpi	r28, 0x05	; 5
    2abe:	d1 05       	cpc	r29, r1
    2ac0:	78 f0       	brcs	.+30     	; 0x2ae0 <realloc+0x92>
    2ac2:	ce 01       	movw	r24, r28
    2ac4:	04 97       	sbiw	r24, 0x04	; 4
    2ac6:	86 17       	cp	r24, r22
    2ac8:	97 07       	cpc	r25, r23
    2aca:	50 f0       	brcs	.+20     	; 0x2ae0 <realloc+0x92>
    2acc:	c6 1b       	sub	r28, r22
    2ace:	d7 0b       	sbc	r29, r23
    2ad0:	22 97       	sbiw	r28, 0x02	; 2
    2ad2:	c1 93       	st	Z+, r28
    2ad4:	d1 93       	st	Z+, r29
    2ad6:	6d 93       	st	X+, r22
    2ad8:	7c 93       	st	X, r23
    2ada:	cf 01       	movw	r24, r30
    2adc:	0e 94 9e 14 	call	0x293c	; 0x293c <free>
    2ae0:	c8 01       	movw	r24, r16
    2ae2:	df 91       	pop	r29
    2ae4:	cf 91       	pop	r28
    2ae6:	1f 91       	pop	r17
    2ae8:	0f 91       	pop	r16
    2aea:	ff 90       	pop	r15
    2aec:	ef 90       	pop	r14
    2aee:	df 90       	pop	r13
    2af0:	cf 90       	pop	r12
    2af2:	bf 90       	pop	r11
    2af4:	af 90       	pop	r10
    2af6:	9f 90       	pop	r9
    2af8:	8f 90       	pop	r8
    2afa:	7f 90       	pop	r7
    2afc:	6f 90       	pop	r6
    2afe:	5f 90       	pop	r5
    2b00:	4f 90       	pop	r4
    2b02:	08 95       	ret
    2b04:	5b 01       	movw	r10, r22
    2b06:	ac 1a       	sub	r10, r28
    2b08:	bd 0a       	sbc	r11, r29
    2b0a:	4c 01       	movw	r8, r24
    2b0c:	8c 0e       	add	r8, r28
    2b0e:	9d 1e       	adc	r9, r29
    2b10:	a0 91 c0 02 	lds	r26, 0x02C0	; 0x8002c0 <__flp>
    2b14:	b0 91 c1 02 	lds	r27, 0x02C1	; 0x8002c1 <__flp+0x1>
    2b18:	51 2c       	mov	r5, r1
    2b1a:	41 2c       	mov	r4, r1
    2b1c:	f1 2c       	mov	r15, r1
    2b1e:	e1 2c       	mov	r14, r1
    2b20:	10 97       	sbiw	r26, 0x00	; 0
    2b22:	31 f5       	brne	.+76     	; 0x2b70 <realloc+0x122>
    2b24:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <__brkval>
    2b28:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <__brkval+0x1>
    2b2c:	88 15       	cp	r24, r8
    2b2e:	99 05       	cpc	r25, r9
    2b30:	09 f0       	breq	.+2      	; 0x2b34 <realloc+0xe6>
    2b32:	5c c0       	rjmp	.+184    	; 0x2bec <realloc+0x19e>
    2b34:	46 16       	cp	r4, r22
    2b36:	57 06       	cpc	r5, r23
    2b38:	08 f0       	brcs	.+2      	; 0x2b3c <realloc+0xee>
    2b3a:	58 c0       	rjmp	.+176    	; 0x2bec <realloc+0x19e>
    2b3c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2b40:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	41 f4       	brne	.+16     	; 0x2b58 <realloc+0x10a>
    2b48:	8d b7       	in	r24, 0x3d	; 61
    2b4a:	9e b7       	in	r25, 0x3e	; 62
    2b4c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2b50:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2b54:	84 1b       	sub	r24, r20
    2b56:	95 0b       	sbc	r25, r21
    2b58:	e8 17       	cp	r30, r24
    2b5a:	f9 07       	cpc	r31, r25
    2b5c:	08 f0       	brcs	.+2      	; 0x2b60 <realloc+0x112>
    2b5e:	55 c0       	rjmp	.+170    	; 0x2c0a <realloc+0x1bc>
    2b60:	f0 93 bf 02 	sts	0x02BF, r31	; 0x8002bf <__brkval+0x1>
    2b64:	e0 93 be 02 	sts	0x02BE, r30	; 0x8002be <__brkval>
    2b68:	f9 01       	movw	r30, r18
    2b6a:	71 83       	std	Z+1, r23	; 0x01
    2b6c:	60 83       	st	Z, r22
    2b6e:	b8 cf       	rjmp	.-144    	; 0x2ae0 <realloc+0x92>
    2b70:	8d 91       	ld	r24, X+
    2b72:	9c 91       	ld	r25, X
    2b74:	11 97       	sbiw	r26, 0x01	; 1
    2b76:	12 96       	adiw	r26, 0x02	; 2
    2b78:	6c 90       	ld	r6, X
    2b7a:	12 97       	sbiw	r26, 0x02	; 2
    2b7c:	13 96       	adiw	r26, 0x03	; 3
    2b7e:	7c 90       	ld	r7, X
    2b80:	13 97       	sbiw	r26, 0x03	; 3
    2b82:	a8 15       	cp	r26, r8
    2b84:	b9 05       	cpc	r27, r9
    2b86:	59 f5       	brne	.+86     	; 0x2bde <realloc+0x190>
    2b88:	6c 01       	movw	r12, r24
    2b8a:	42 e0       	ldi	r20, 0x02	; 2
    2b8c:	c4 0e       	add	r12, r20
    2b8e:	d1 1c       	adc	r13, r1
    2b90:	ca 14       	cp	r12, r10
    2b92:	db 04       	cpc	r13, r11
    2b94:	20 f1       	brcs	.+72     	; 0x2bde <realloc+0x190>
    2b96:	ac 01       	movw	r20, r24
    2b98:	4a 19       	sub	r20, r10
    2b9a:	5b 09       	sbc	r21, r11
    2b9c:	da 01       	movw	r26, r20
    2b9e:	12 96       	adiw	r26, 0x02	; 2
    2ba0:	15 97       	sbiw	r26, 0x05	; 5
    2ba2:	80 f0       	brcs	.+32     	; 0x2bc4 <realloc+0x176>
    2ba4:	62 82       	std	Z+2, r6	; 0x02
    2ba6:	73 82       	std	Z+3, r7	; 0x03
    2ba8:	51 83       	std	Z+1, r21	; 0x01
    2baa:	40 83       	st	Z, r20
    2bac:	d9 01       	movw	r26, r18
    2bae:	6d 93       	st	X+, r22
    2bb0:	7c 93       	st	X, r23
    2bb2:	e1 14       	cp	r14, r1
    2bb4:	f1 04       	cpc	r15, r1
    2bb6:	71 f0       	breq	.+28     	; 0x2bd4 <realloc+0x186>
    2bb8:	d7 01       	movw	r26, r14
    2bba:	13 96       	adiw	r26, 0x03	; 3
    2bbc:	fc 93       	st	X, r31
    2bbe:	ee 93       	st	-X, r30
    2bc0:	12 97       	sbiw	r26, 0x02	; 2
    2bc2:	8e cf       	rjmp	.-228    	; 0x2ae0 <realloc+0x92>
    2bc4:	22 96       	adiw	r28, 0x02	; 2
    2bc6:	8c 0f       	add	r24, r28
    2bc8:	9d 1f       	adc	r25, r29
    2bca:	f9 01       	movw	r30, r18
    2bcc:	91 83       	std	Z+1, r25	; 0x01
    2bce:	80 83       	st	Z, r24
    2bd0:	f3 01       	movw	r30, r6
    2bd2:	ef cf       	rjmp	.-34     	; 0x2bb2 <realloc+0x164>
    2bd4:	f0 93 c1 02 	sts	0x02C1, r31	; 0x8002c1 <__flp+0x1>
    2bd8:	e0 93 c0 02 	sts	0x02C0, r30	; 0x8002c0 <__flp>
    2bdc:	81 cf       	rjmp	.-254    	; 0x2ae0 <realloc+0x92>
    2bde:	48 16       	cp	r4, r24
    2be0:	59 06       	cpc	r5, r25
    2be2:	08 f4       	brcc	.+2      	; 0x2be6 <realloc+0x198>
    2be4:	2c 01       	movw	r4, r24
    2be6:	7d 01       	movw	r14, r26
    2be8:	d3 01       	movw	r26, r6
    2bea:	9a cf       	rjmp	.-204    	; 0x2b20 <realloc+0xd2>
    2bec:	cb 01       	movw	r24, r22
    2bee:	0e 94 02 14 	call	0x2804	; 0x2804 <malloc>
    2bf2:	7c 01       	movw	r14, r24
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	49 f0       	breq	.+18     	; 0x2c0a <realloc+0x1bc>
    2bf8:	ae 01       	movw	r20, r28
    2bfa:	b8 01       	movw	r22, r16
    2bfc:	0e 94 08 16 	call	0x2c10	; 0x2c10 <memcpy>
    2c00:	c8 01       	movw	r24, r16
    2c02:	0e 94 9e 14 	call	0x293c	; 0x293c <free>
    2c06:	87 01       	movw	r16, r14
    2c08:	6b cf       	rjmp	.-298    	; 0x2ae0 <realloc+0x92>
    2c0a:	10 e0       	ldi	r17, 0x00	; 0
    2c0c:	00 e0       	ldi	r16, 0x00	; 0
    2c0e:	68 cf       	rjmp	.-304    	; 0x2ae0 <realloc+0x92>

00002c10 <memcpy>:
memcpy():
    2c10:	fb 01       	movw	r30, r22
    2c12:	dc 01       	movw	r26, r24
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <memcpy+0xa>
    2c16:	01 90       	ld	r0, Z+
    2c18:	0d 92       	st	X+, r0
    2c1a:	41 50       	subi	r20, 0x01	; 1
    2c1c:	50 40       	sbci	r21, 0x00	; 0
    2c1e:	d8 f7       	brcc	.-10     	; 0x2c16 <memcpy+0x6>
    2c20:	08 95       	ret

00002c22 <strcpy>:
strcpy():
    2c22:	fb 01       	movw	r30, r22
    2c24:	dc 01       	movw	r26, r24
    2c26:	01 90       	ld	r0, Z+
    2c28:	0d 92       	st	X+, r0
    2c2a:	00 20       	and	r0, r0
    2c2c:	e1 f7       	brne	.-8      	; 0x2c26 <strcpy+0x4>
    2c2e:	08 95       	ret

00002c30 <strncpy>:
strncpy():
    2c30:	fb 01       	movw	r30, r22
    2c32:	dc 01       	movw	r26, r24
    2c34:	41 50       	subi	r20, 0x01	; 1
    2c36:	50 40       	sbci	r21, 0x00	; 0
    2c38:	48 f0       	brcs	.+18     	; 0x2c4c <strncpy+0x1c>
    2c3a:	01 90       	ld	r0, Z+
    2c3c:	0d 92       	st	X+, r0
    2c3e:	00 20       	and	r0, r0
    2c40:	c9 f7       	brne	.-14     	; 0x2c34 <strncpy+0x4>
    2c42:	01 c0       	rjmp	.+2      	; 0x2c46 <strncpy+0x16>
    2c44:	1d 92       	st	X+, r1
    2c46:	41 50       	subi	r20, 0x01	; 1
    2c48:	50 40       	sbci	r21, 0x00	; 0
    2c4a:	e0 f7       	brcc	.-8      	; 0x2c44 <strncpy+0x14>
    2c4c:	08 95       	ret

00002c4e <sprintf>:
sprintf():
    2c4e:	0f 93       	push	r16
    2c50:	1f 93       	push	r17
    2c52:	cf 93       	push	r28
    2c54:	df 93       	push	r29
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	2e 97       	sbiw	r28, 0x0e	; 14
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	0d 89       	ldd	r16, Y+21	; 0x15
    2c68:	1e 89       	ldd	r17, Y+22	; 0x16
    2c6a:	86 e0       	ldi	r24, 0x06	; 6
    2c6c:	8c 83       	std	Y+4, r24	; 0x04
    2c6e:	1a 83       	std	Y+2, r17	; 0x02
    2c70:	09 83       	std	Y+1, r16	; 0x01
    2c72:	8f ef       	ldi	r24, 0xFF	; 255
    2c74:	9f e7       	ldi	r25, 0x7F	; 127
    2c76:	9e 83       	std	Y+6, r25	; 0x06
    2c78:	8d 83       	std	Y+5, r24	; 0x05
    2c7a:	ae 01       	movw	r20, r28
    2c7c:	47 5e       	subi	r20, 0xE7	; 231
    2c7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c80:	6f 89       	ldd	r22, Y+23	; 0x17
    2c82:	78 8d       	ldd	r23, Y+24	; 0x18
    2c84:	ce 01       	movw	r24, r28
    2c86:	01 96       	adiw	r24, 0x01	; 1
    2c88:	0e 94 57 16 	call	0x2cae	; 0x2cae <vfprintf>
    2c8c:	2f 81       	ldd	r18, Y+7	; 0x07
    2c8e:	38 85       	ldd	r19, Y+8	; 0x08
    2c90:	02 0f       	add	r16, r18
    2c92:	13 1f       	adc	r17, r19
    2c94:	f8 01       	movw	r30, r16
    2c96:	10 82       	st	Z, r1
    2c98:	2e 96       	adiw	r28, 0x0e	; 14
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	1f 91       	pop	r17
    2caa:	0f 91       	pop	r16
    2cac:	08 95       	ret

00002cae <vfprintf>:
vfprintf():
    2cae:	2f 92       	push	r2
    2cb0:	3f 92       	push	r3
    2cb2:	4f 92       	push	r4
    2cb4:	5f 92       	push	r5
    2cb6:	6f 92       	push	r6
    2cb8:	7f 92       	push	r7
    2cba:	8f 92       	push	r8
    2cbc:	9f 92       	push	r9
    2cbe:	af 92       	push	r10
    2cc0:	bf 92       	push	r11
    2cc2:	cf 92       	push	r12
    2cc4:	df 92       	push	r13
    2cc6:	ef 92       	push	r14
    2cc8:	ff 92       	push	r15
    2cca:	0f 93       	push	r16
    2ccc:	1f 93       	push	r17
    2cce:	cf 93       	push	r28
    2cd0:	df 93       	push	r29
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	2b 97       	sbiw	r28, 0x0b	; 11
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	f8 94       	cli
    2cdc:	de bf       	out	0x3e, r29	; 62
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	cd bf       	out	0x3d, r28	; 61
    2ce2:	7c 01       	movw	r14, r24
    2ce4:	3b 01       	movw	r6, r22
    2ce6:	8a 01       	movw	r16, r20
    2ce8:	fc 01       	movw	r30, r24
    2cea:	17 82       	std	Z+7, r1	; 0x07
    2cec:	16 82       	std	Z+6, r1	; 0x06
    2cee:	83 81       	ldd	r24, Z+3	; 0x03
    2cf0:	81 ff       	sbrs	r24, 1
    2cf2:	dd c1       	rjmp	.+954    	; 0x30ae <vfprintf+0x400>
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	01 96       	adiw	r24, 0x01	; 1
    2cf8:	5c 01       	movw	r10, r24
    2cfa:	f7 01       	movw	r30, r14
    2cfc:	93 81       	ldd	r25, Z+3	; 0x03
    2cfe:	f3 01       	movw	r30, r6
    2d00:	93 fd       	sbrc	r25, 3
    2d02:	85 91       	lpm	r24, Z+
    2d04:	93 ff       	sbrs	r25, 3
    2d06:	81 91       	ld	r24, Z+
    2d08:	3f 01       	movw	r6, r30
    2d0a:	88 23       	and	r24, r24
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <vfprintf+0x62>
    2d0e:	53 c1       	rjmp	.+678    	; 0x2fb6 <vfprintf+0x308>
    2d10:	85 32       	cpi	r24, 0x25	; 37
    2d12:	39 f4       	brne	.+14     	; 0x2d22 <vfprintf+0x74>
    2d14:	93 fd       	sbrc	r25, 3
    2d16:	85 91       	lpm	r24, Z+
    2d18:	93 ff       	sbrs	r25, 3
    2d1a:	81 91       	ld	r24, Z+
    2d1c:	3f 01       	movw	r6, r30
    2d1e:	85 32       	cpi	r24, 0x25	; 37
    2d20:	29 f4       	brne	.+10     	; 0x2d2c <vfprintf+0x7e>
    2d22:	b7 01       	movw	r22, r14
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	0e 94 70 18 	call	0x30e0	; 0x30e0 <fputc>
    2d2a:	e7 cf       	rjmp	.-50     	; 0x2cfa <vfprintf+0x4c>
    2d2c:	91 2c       	mov	r9, r1
    2d2e:	21 2c       	mov	r2, r1
    2d30:	31 2c       	mov	r3, r1
    2d32:	ff e1       	ldi	r31, 0x1F	; 31
    2d34:	f3 15       	cp	r31, r3
    2d36:	38 f0       	brcs	.+14     	; 0x2d46 <vfprintf+0x98>
    2d38:	8b 32       	cpi	r24, 0x2B	; 43
    2d3a:	11 f1       	breq	.+68     	; 0x2d80 <vfprintf+0xd2>
    2d3c:	90 f4       	brcc	.+36     	; 0x2d62 <vfprintf+0xb4>
    2d3e:	80 32       	cpi	r24, 0x20	; 32
    2d40:	09 f1       	breq	.+66     	; 0x2d84 <vfprintf+0xd6>
    2d42:	83 32       	cpi	r24, 0x23	; 35
    2d44:	29 f1       	breq	.+74     	; 0x2d90 <vfprintf+0xe2>
    2d46:	37 fc       	sbrc	r3, 7
    2d48:	3c c0       	rjmp	.+120    	; 0x2dc2 <vfprintf+0x114>
    2d4a:	20 ed       	ldi	r18, 0xD0	; 208
    2d4c:	28 0f       	add	r18, r24
    2d4e:	2a 30       	cpi	r18, 0x0A	; 10
    2d50:	50 f5       	brcc	.+84     	; 0x2da6 <vfprintf+0xf8>
    2d52:	36 fe       	sbrs	r3, 6
    2d54:	20 c0       	rjmp	.+64     	; 0x2d96 <vfprintf+0xe8>
    2d56:	8a e0       	ldi	r24, 0x0A	; 10
    2d58:	98 9e       	mul	r9, r24
    2d5a:	20 0d       	add	r18, r0
    2d5c:	11 24       	eor	r1, r1
    2d5e:	92 2e       	mov	r9, r18
    2d60:	06 c0       	rjmp	.+12     	; 0x2d6e <vfprintf+0xc0>
    2d62:	8d 32       	cpi	r24, 0x2D	; 45
    2d64:	91 f0       	breq	.+36     	; 0x2d8a <vfprintf+0xdc>
    2d66:	80 33       	cpi	r24, 0x30	; 48
    2d68:	71 f7       	brne	.-36     	; 0x2d46 <vfprintf+0x98>
    2d6a:	68 94       	set
    2d6c:	30 f8       	bld	r3, 0
    2d6e:	f3 01       	movw	r30, r6
    2d70:	93 fd       	sbrc	r25, 3
    2d72:	85 91       	lpm	r24, Z+
    2d74:	93 ff       	sbrs	r25, 3
    2d76:	81 91       	ld	r24, Z+
    2d78:	3f 01       	movw	r6, r30
    2d7a:	81 11       	cpse	r24, r1
    2d7c:	da cf       	rjmp	.-76     	; 0x2d32 <vfprintf+0x84>
    2d7e:	21 c0       	rjmp	.+66     	; 0x2dc2 <vfprintf+0x114>
    2d80:	68 94       	set
    2d82:	31 f8       	bld	r3, 1
    2d84:	68 94       	set
    2d86:	32 f8       	bld	r3, 2
    2d88:	f2 cf       	rjmp	.-28     	; 0x2d6e <vfprintf+0xc0>
    2d8a:	68 94       	set
    2d8c:	33 f8       	bld	r3, 3
    2d8e:	ef cf       	rjmp	.-34     	; 0x2d6e <vfprintf+0xc0>
    2d90:	68 94       	set
    2d92:	34 f8       	bld	r3, 4
    2d94:	ec cf       	rjmp	.-40     	; 0x2d6e <vfprintf+0xc0>
    2d96:	ea e0       	ldi	r30, 0x0A	; 10
    2d98:	2e 9e       	mul	r2, r30
    2d9a:	20 0d       	add	r18, r0
    2d9c:	11 24       	eor	r1, r1
    2d9e:	22 2e       	mov	r2, r18
    2da0:	68 94       	set
    2da2:	35 f8       	bld	r3, 5
    2da4:	e4 cf       	rjmp	.-56     	; 0x2d6e <vfprintf+0xc0>
    2da6:	8e 32       	cpi	r24, 0x2E	; 46
    2da8:	29 f4       	brne	.+10     	; 0x2db4 <vfprintf+0x106>
    2daa:	36 fc       	sbrc	r3, 6
    2dac:	04 c1       	rjmp	.+520    	; 0x2fb6 <vfprintf+0x308>
    2dae:	68 94       	set
    2db0:	36 f8       	bld	r3, 6
    2db2:	dd cf       	rjmp	.-70     	; 0x2d6e <vfprintf+0xc0>
    2db4:	8c 36       	cpi	r24, 0x6C	; 108
    2db6:	19 f4       	brne	.+6      	; 0x2dbe <vfprintf+0x110>
    2db8:	68 94       	set
    2dba:	37 f8       	bld	r3, 7
    2dbc:	d8 cf       	rjmp	.-80     	; 0x2d6e <vfprintf+0xc0>
    2dbe:	88 36       	cpi	r24, 0x68	; 104
    2dc0:	b1 f2       	breq	.-84     	; 0x2d6e <vfprintf+0xc0>
    2dc2:	98 2f       	mov	r25, r24
    2dc4:	9f 7d       	andi	r25, 0xDF	; 223
    2dc6:	95 54       	subi	r25, 0x45	; 69
    2dc8:	93 30       	cpi	r25, 0x03	; 3
    2dca:	e0 f0       	brcs	.+56     	; 0x2e04 <vfprintf+0x156>
    2dcc:	83 36       	cpi	r24, 0x63	; 99
    2dce:	a1 f1       	breq	.+104    	; 0x2e38 <vfprintf+0x18a>
    2dd0:	83 37       	cpi	r24, 0x73	; 115
    2dd2:	c1 f1       	breq	.+112    	; 0x2e44 <vfprintf+0x196>
    2dd4:	83 35       	cpi	r24, 0x53	; 83
    2dd6:	09 f0       	breq	.+2      	; 0x2dda <vfprintf+0x12c>
    2dd8:	63 c0       	rjmp	.+198    	; 0x2ea0 <vfprintf+0x1f2>
    2dda:	28 01       	movw	r4, r16
    2ddc:	f2 e0       	ldi	r31, 0x02	; 2
    2dde:	4f 0e       	add	r4, r31
    2de0:	51 1c       	adc	r5, r1
    2de2:	f8 01       	movw	r30, r16
    2de4:	c0 80       	ld	r12, Z
    2de6:	d1 80       	ldd	r13, Z+1	; 0x01
    2de8:	69 2d       	mov	r22, r9
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	36 fc       	sbrc	r3, 6
    2dee:	02 c0       	rjmp	.+4      	; 0x2df4 <vfprintf+0x146>
    2df0:	6f ef       	ldi	r22, 0xFF	; 255
    2df2:	7f ef       	ldi	r23, 0xFF	; 255
    2df4:	c6 01       	movw	r24, r12
    2df6:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <strnlen_P>
    2dfa:	4c 01       	movw	r8, r24
    2dfc:	68 94       	set
    2dfe:	37 f8       	bld	r3, 7
    2e00:	82 01       	movw	r16, r4
    2e02:	0a c0       	rjmp	.+20     	; 0x2e18 <vfprintf+0x16a>
    2e04:	0c 5f       	subi	r16, 0xFC	; 252
    2e06:	1f 4f       	sbci	r17, 0xFF	; 255
    2e08:	ff e3       	ldi	r31, 0x3F	; 63
    2e0a:	f9 83       	std	Y+1, r31	; 0x01
    2e0c:	88 24       	eor	r8, r8
    2e0e:	83 94       	inc	r8
    2e10:	91 2c       	mov	r9, r1
    2e12:	65 01       	movw	r12, r10
    2e14:	e8 94       	clt
    2e16:	37 f8       	bld	r3, 7
    2e18:	33 fe       	sbrs	r3, 3
    2e1a:	2d c0       	rjmp	.+90     	; 0x2e76 <vfprintf+0x1c8>
    2e1c:	52 2c       	mov	r5, r2
    2e1e:	81 14       	cp	r8, r1
    2e20:	91 04       	cpc	r9, r1
    2e22:	71 f5       	brne	.+92     	; 0x2e80 <vfprintf+0x1d2>
    2e24:	55 20       	and	r5, r5
    2e26:	09 f4       	brne	.+2      	; 0x2e2a <vfprintf+0x17c>
    2e28:	68 cf       	rjmp	.-304    	; 0x2cfa <vfprintf+0x4c>
    2e2a:	b7 01       	movw	r22, r14
    2e2c:	80 e2       	ldi	r24, 0x20	; 32
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	0e 94 70 18 	call	0x30e0	; 0x30e0 <fputc>
    2e34:	5a 94       	dec	r5
    2e36:	f6 cf       	rjmp	.-20     	; 0x2e24 <vfprintf+0x176>
    2e38:	f8 01       	movw	r30, r16
    2e3a:	80 81       	ld	r24, Z
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	0e 5f       	subi	r16, 0xFE	; 254
    2e40:	1f 4f       	sbci	r17, 0xFF	; 255
    2e42:	e4 cf       	rjmp	.-56     	; 0x2e0c <vfprintf+0x15e>
    2e44:	28 01       	movw	r4, r16
    2e46:	f2 e0       	ldi	r31, 0x02	; 2
    2e48:	4f 0e       	add	r4, r31
    2e4a:	51 1c       	adc	r5, r1
    2e4c:	f8 01       	movw	r30, r16
    2e4e:	c0 80       	ld	r12, Z
    2e50:	d1 80       	ldd	r13, Z+1	; 0x01
    2e52:	69 2d       	mov	r22, r9
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	36 fc       	sbrc	r3, 6
    2e58:	02 c0       	rjmp	.+4      	; 0x2e5e <vfprintf+0x1b0>
    2e5a:	6f ef       	ldi	r22, 0xFF	; 255
    2e5c:	7f ef       	ldi	r23, 0xFF	; 255
    2e5e:	c6 01       	movw	r24, r12
    2e60:	0e 94 65 18 	call	0x30ca	; 0x30ca <strnlen>
    2e64:	4c 01       	movw	r8, r24
    2e66:	82 01       	movw	r16, r4
    2e68:	d5 cf       	rjmp	.-86     	; 0x2e14 <vfprintf+0x166>
    2e6a:	b7 01       	movw	r22, r14
    2e6c:	80 e2       	ldi	r24, 0x20	; 32
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	0e 94 70 18 	call	0x30e0	; 0x30e0 <fputc>
    2e74:	2a 94       	dec	r2
    2e76:	28 14       	cp	r2, r8
    2e78:	19 04       	cpc	r1, r9
    2e7a:	09 f0       	breq	.+2      	; 0x2e7e <vfprintf+0x1d0>
    2e7c:	b0 f7       	brcc	.-20     	; 0x2e6a <vfprintf+0x1bc>
    2e7e:	ce cf       	rjmp	.-100    	; 0x2e1c <vfprintf+0x16e>
    2e80:	f6 01       	movw	r30, r12
    2e82:	37 fc       	sbrc	r3, 7
    2e84:	85 91       	lpm	r24, Z+
    2e86:	37 fe       	sbrs	r3, 7
    2e88:	81 91       	ld	r24, Z+
    2e8a:	6f 01       	movw	r12, r30
    2e8c:	b7 01       	movw	r22, r14
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	0e 94 70 18 	call	0x30e0	; 0x30e0 <fputc>
    2e94:	51 10       	cpse	r5, r1
    2e96:	5a 94       	dec	r5
    2e98:	f1 e0       	ldi	r31, 0x01	; 1
    2e9a:	8f 1a       	sub	r8, r31
    2e9c:	91 08       	sbc	r9, r1
    2e9e:	bf cf       	rjmp	.-130    	; 0x2e1e <vfprintf+0x170>
    2ea0:	84 36       	cpi	r24, 0x64	; 100
    2ea2:	19 f0       	breq	.+6      	; 0x2eaa <vfprintf+0x1fc>
    2ea4:	89 36       	cpi	r24, 0x69	; 105
    2ea6:	09 f0       	breq	.+2      	; 0x2eaa <vfprintf+0x1fc>
    2ea8:	77 c0       	rjmp	.+238    	; 0x2f98 <vfprintf+0x2ea>
    2eaa:	f8 01       	movw	r30, r16
    2eac:	37 fe       	sbrs	r3, 7
    2eae:	6b c0       	rjmp	.+214    	; 0x2f86 <vfprintf+0x2d8>
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	0c 5f       	subi	r16, 0xFC	; 252
    2eba:	1f 4f       	sbci	r17, 0xFF	; 255
    2ebc:	f3 2d       	mov	r31, r3
    2ebe:	ff 76       	andi	r31, 0x6F	; 111
    2ec0:	3f 2e       	mov	r3, r31
    2ec2:	97 ff       	sbrs	r25, 7
    2ec4:	09 c0       	rjmp	.+18     	; 0x2ed8 <vfprintf+0x22a>
    2ec6:	90 95       	com	r25
    2ec8:	80 95       	com	r24
    2eca:	70 95       	com	r23
    2ecc:	61 95       	neg	r22
    2ece:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed4:	68 94       	set
    2ed6:	37 f8       	bld	r3, 7
    2ed8:	2a e0       	ldi	r18, 0x0A	; 10
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	a5 01       	movw	r20, r10
    2ede:	0e 94 a0 18 	call	0x3140	; 0x3140 <__ultoa_invert>
    2ee2:	c8 2e       	mov	r12, r24
    2ee4:	ca 18       	sub	r12, r10
    2ee6:	8c 2c       	mov	r8, r12
    2ee8:	43 2c       	mov	r4, r3
    2eea:	36 fe       	sbrs	r3, 6
    2eec:	0c c0       	rjmp	.+24     	; 0x2f06 <vfprintf+0x258>
    2eee:	e8 94       	clt
    2ef0:	40 f8       	bld	r4, 0
    2ef2:	c9 14       	cp	r12, r9
    2ef4:	40 f4       	brcc	.+16     	; 0x2f06 <vfprintf+0x258>
    2ef6:	34 fe       	sbrs	r3, 4
    2ef8:	05 c0       	rjmp	.+10     	; 0x2f04 <vfprintf+0x256>
    2efa:	32 fc       	sbrc	r3, 2
    2efc:	03 c0       	rjmp	.+6      	; 0x2f04 <vfprintf+0x256>
    2efe:	f3 2d       	mov	r31, r3
    2f00:	fe 7e       	andi	r31, 0xEE	; 238
    2f02:	4f 2e       	mov	r4, r31
    2f04:	89 2c       	mov	r8, r9
    2f06:	44 fe       	sbrs	r4, 4
    2f08:	aa c0       	rjmp	.+340    	; 0x305e <vfprintf+0x3b0>
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	ec 0d       	add	r30, r12
    2f0e:	f1 1d       	adc	r31, r1
    2f10:	80 81       	ld	r24, Z
    2f12:	80 33       	cpi	r24, 0x30	; 48
    2f14:	09 f0       	breq	.+2      	; 0x2f18 <vfprintf+0x26a>
    2f16:	9c c0       	rjmp	.+312    	; 0x3050 <vfprintf+0x3a2>
    2f18:	24 2d       	mov	r18, r4
    2f1a:	29 7e       	andi	r18, 0xE9	; 233
    2f1c:	42 2e       	mov	r4, r18
    2f1e:	84 2d       	mov	r24, r4
    2f20:	88 70       	andi	r24, 0x08	; 8
    2f22:	58 2e       	mov	r5, r24
    2f24:	43 fc       	sbrc	r4, 3
    2f26:	aa c0       	rjmp	.+340    	; 0x307c <vfprintf+0x3ce>
    2f28:	40 fe       	sbrs	r4, 0
    2f2a:	a4 c0       	rjmp	.+328    	; 0x3074 <vfprintf+0x3c6>
    2f2c:	9c 2c       	mov	r9, r12
    2f2e:	82 14       	cp	r8, r2
    2f30:	18 f4       	brcc	.+6      	; 0x2f38 <vfprintf+0x28a>
    2f32:	2c 0c       	add	r2, r12
    2f34:	92 2c       	mov	r9, r2
    2f36:	98 18       	sub	r9, r8
    2f38:	44 fe       	sbrs	r4, 4
    2f3a:	a6 c0       	rjmp	.+332    	; 0x3088 <vfprintf+0x3da>
    2f3c:	b7 01       	movw	r22, r14
    2f3e:	80 e3       	ldi	r24, 0x30	; 48
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	0e 94 70 18 	call	0x30e0	; 0x30e0 <fputc>
    2f46:	42 fe       	sbrs	r4, 2
    2f48:	09 c0       	rjmp	.+18     	; 0x2f5c <vfprintf+0x2ae>
    2f4a:	88 e7       	ldi	r24, 0x78	; 120
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	41 fe       	sbrs	r4, 1
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <vfprintf+0x2a8>
    2f52:	88 e5       	ldi	r24, 0x58	; 88
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	b7 01       	movw	r22, r14
    2f58:	0e 94 70 18 	call	0x30e0	; 0x30e0 <fputc>
    2f5c:	c9 14       	cp	r12, r9
    2f5e:	08 f4       	brcc	.+2      	; 0x2f62 <vfprintf+0x2b4>
    2f60:	9f c0       	rjmp	.+318    	; 0x30a0 <vfprintf+0x3f2>
    2f62:	ca 94       	dec	r12
    2f64:	d1 2c       	mov	r13, r1
    2f66:	9f ef       	ldi	r25, 0xFF	; 255
    2f68:	c9 1a       	sub	r12, r25
    2f6a:	d9 0a       	sbc	r13, r25
    2f6c:	ca 0c       	add	r12, r10
    2f6e:	db 1c       	adc	r13, r11
    2f70:	f6 01       	movw	r30, r12
    2f72:	82 91       	ld	r24, -Z
    2f74:	6f 01       	movw	r12, r30
    2f76:	b7 01       	movw	r22, r14
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	0e 94 70 18 	call	0x30e0	; 0x30e0 <fputc>
    2f7e:	ac 14       	cp	r10, r12
    2f80:	bd 04       	cpc	r11, r13
    2f82:	b1 f7       	brne	.-20     	; 0x2f70 <vfprintf+0x2c2>
    2f84:	4f cf       	rjmp	.-354    	; 0x2e24 <vfprintf+0x176>
    2f86:	60 81       	ld	r22, Z
    2f88:	71 81       	ldd	r23, Z+1	; 0x01
    2f8a:	07 2e       	mov	r0, r23
    2f8c:	00 0c       	add	r0, r0
    2f8e:	88 0b       	sbc	r24, r24
    2f90:	99 0b       	sbc	r25, r25
    2f92:	0e 5f       	subi	r16, 0xFE	; 254
    2f94:	1f 4f       	sbci	r17, 0xFF	; 255
    2f96:	92 cf       	rjmp	.-220    	; 0x2ebc <vfprintf+0x20e>
    2f98:	d3 2c       	mov	r13, r3
    2f9a:	e8 94       	clt
    2f9c:	d4 f8       	bld	r13, 4
    2f9e:	2a e0       	ldi	r18, 0x0A	; 10
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	85 37       	cpi	r24, 0x75	; 117
    2fa4:	e1 f1       	breq	.+120    	; 0x301e <vfprintf+0x370>
    2fa6:	23 2d       	mov	r18, r3
    2fa8:	29 7f       	andi	r18, 0xF9	; 249
    2faa:	d2 2e       	mov	r13, r18
    2fac:	8f 36       	cpi	r24, 0x6F	; 111
    2fae:	a9 f1       	breq	.+106    	; 0x301a <vfprintf+0x36c>
    2fb0:	f0 f4       	brcc	.+60     	; 0x2fee <vfprintf+0x340>
    2fb2:	88 35       	cpi	r24, 0x58	; 88
    2fb4:	51 f1       	breq	.+84     	; 0x300a <vfprintf+0x35c>
    2fb6:	f7 01       	movw	r30, r14
    2fb8:	86 81       	ldd	r24, Z+6	; 0x06
    2fba:	97 81       	ldd	r25, Z+7	; 0x07
    2fbc:	2b 96       	adiw	r28, 0x0b	; 11
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	df 91       	pop	r29
    2fca:	cf 91       	pop	r28
    2fcc:	1f 91       	pop	r17
    2fce:	0f 91       	pop	r16
    2fd0:	ff 90       	pop	r15
    2fd2:	ef 90       	pop	r14
    2fd4:	df 90       	pop	r13
    2fd6:	cf 90       	pop	r12
    2fd8:	bf 90       	pop	r11
    2fda:	af 90       	pop	r10
    2fdc:	9f 90       	pop	r9
    2fde:	8f 90       	pop	r8
    2fe0:	7f 90       	pop	r7
    2fe2:	6f 90       	pop	r6
    2fe4:	5f 90       	pop	r5
    2fe6:	4f 90       	pop	r4
    2fe8:	3f 90       	pop	r3
    2fea:	2f 90       	pop	r2
    2fec:	08 95       	ret
    2fee:	80 37       	cpi	r24, 0x70	; 112
    2ff0:	49 f0       	breq	.+18     	; 0x3004 <vfprintf+0x356>
    2ff2:	88 37       	cpi	r24, 0x78	; 120
    2ff4:	01 f7       	brne	.-64     	; 0x2fb6 <vfprintf+0x308>
    2ff6:	d4 fe       	sbrs	r13, 4
    2ff8:	02 c0       	rjmp	.+4      	; 0x2ffe <vfprintf+0x350>
    2ffa:	68 94       	set
    2ffc:	d2 f8       	bld	r13, 2
    2ffe:	20 e1       	ldi	r18, 0x10	; 16
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	0d c0       	rjmp	.+26     	; 0x301e <vfprintf+0x370>
    3004:	68 94       	set
    3006:	d4 f8       	bld	r13, 4
    3008:	f6 cf       	rjmp	.-20     	; 0x2ff6 <vfprintf+0x348>
    300a:	34 fe       	sbrs	r3, 4
    300c:	03 c0       	rjmp	.+6      	; 0x3014 <vfprintf+0x366>
    300e:	82 2f       	mov	r24, r18
    3010:	86 60       	ori	r24, 0x06	; 6
    3012:	d8 2e       	mov	r13, r24
    3014:	20 e1       	ldi	r18, 0x10	; 16
    3016:	32 e0       	ldi	r19, 0x02	; 2
    3018:	02 c0       	rjmp	.+4      	; 0x301e <vfprintf+0x370>
    301a:	28 e0       	ldi	r18, 0x08	; 8
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	f8 01       	movw	r30, r16
    3020:	d7 fe       	sbrs	r13, 7
    3022:	0f c0       	rjmp	.+30     	; 0x3042 <vfprintf+0x394>
    3024:	60 81       	ld	r22, Z
    3026:	71 81       	ldd	r23, Z+1	; 0x01
    3028:	82 81       	ldd	r24, Z+2	; 0x02
    302a:	93 81       	ldd	r25, Z+3	; 0x03
    302c:	0c 5f       	subi	r16, 0xFC	; 252
    302e:	1f 4f       	sbci	r17, 0xFF	; 255
    3030:	a5 01       	movw	r20, r10
    3032:	0e 94 a0 18 	call	0x3140	; 0x3140 <__ultoa_invert>
    3036:	c8 2e       	mov	r12, r24
    3038:	ca 18       	sub	r12, r10
    303a:	3d 2c       	mov	r3, r13
    303c:	e8 94       	clt
    303e:	37 f8       	bld	r3, 7
    3040:	52 cf       	rjmp	.-348    	; 0x2ee6 <vfprintf+0x238>
    3042:	60 81       	ld	r22, Z
    3044:	71 81       	ldd	r23, Z+1	; 0x01
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	0e 5f       	subi	r16, 0xFE	; 254
    304c:	1f 4f       	sbci	r17, 0xFF	; 255
    304e:	f0 cf       	rjmp	.-32     	; 0x3030 <vfprintf+0x382>
    3050:	42 fc       	sbrc	r4, 2
    3052:	02 c0       	rjmp	.+4      	; 0x3058 <vfprintf+0x3aa>
    3054:	83 94       	inc	r8
    3056:	63 cf       	rjmp	.-314    	; 0x2f1e <vfprintf+0x270>
    3058:	83 94       	inc	r8
    305a:	83 94       	inc	r8
    305c:	60 cf       	rjmp	.-320    	; 0x2f1e <vfprintf+0x270>
    305e:	84 2d       	mov	r24, r4
    3060:	86 78       	andi	r24, 0x86	; 134
    3062:	09 f4       	brne	.+2      	; 0x3066 <vfprintf+0x3b8>
    3064:	5c cf       	rjmp	.-328    	; 0x2f1e <vfprintf+0x270>
    3066:	f6 cf       	rjmp	.-20     	; 0x3054 <vfprintf+0x3a6>
    3068:	b7 01       	movw	r22, r14
    306a:	80 e2       	ldi	r24, 0x20	; 32
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	0e 94 70 18 	call	0x30e0	; 0x30e0 <fputc>
    3072:	83 94       	inc	r8
    3074:	82 14       	cp	r8, r2
    3076:	c0 f3       	brcs	.-16     	; 0x3068 <vfprintf+0x3ba>
    3078:	51 2c       	mov	r5, r1
    307a:	5e cf       	rjmp	.-324    	; 0x2f38 <vfprintf+0x28a>
    307c:	52 2c       	mov	r5, r2
    307e:	58 18       	sub	r5, r8
    3080:	82 14       	cp	r8, r2
    3082:	08 f4       	brcc	.+2      	; 0x3086 <vfprintf+0x3d8>
    3084:	59 cf       	rjmp	.-334    	; 0x2f38 <vfprintf+0x28a>
    3086:	f8 cf       	rjmp	.-16     	; 0x3078 <vfprintf+0x3ca>
    3088:	84 2d       	mov	r24, r4
    308a:	86 78       	andi	r24, 0x86	; 134
    308c:	09 f4       	brne	.+2      	; 0x3090 <vfprintf+0x3e2>
    308e:	66 cf       	rjmp	.-308    	; 0x2f5c <vfprintf+0x2ae>
    3090:	8b e2       	ldi	r24, 0x2B	; 43
    3092:	41 fe       	sbrs	r4, 1
    3094:	80 e2       	ldi	r24, 0x20	; 32
    3096:	47 fc       	sbrc	r4, 7
    3098:	8d e2       	ldi	r24, 0x2D	; 45
    309a:	b7 01       	movw	r22, r14
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	5c cf       	rjmp	.-328    	; 0x2f58 <vfprintf+0x2aa>
    30a0:	b7 01       	movw	r22, r14
    30a2:	80 e3       	ldi	r24, 0x30	; 48
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	0e 94 70 18 	call	0x30e0	; 0x30e0 <fputc>
    30aa:	9a 94       	dec	r9
    30ac:	57 cf       	rjmp	.-338    	; 0x2f5c <vfprintf+0x2ae>
    30ae:	8f ef       	ldi	r24, 0xFF	; 255
    30b0:	9f ef       	ldi	r25, 0xFF	; 255
    30b2:	84 cf       	rjmp	.-248    	; 0x2fbc <vfprintf+0x30e>

000030b4 <strnlen_P>:
strnlen_P():
    30b4:	fc 01       	movw	r30, r24
    30b6:	05 90       	lpm	r0, Z+
    30b8:	61 50       	subi	r22, 0x01	; 1
    30ba:	70 40       	sbci	r23, 0x00	; 0
    30bc:	01 10       	cpse	r0, r1
    30be:	d8 f7       	brcc	.-10     	; 0x30b6 <strnlen_P+0x2>
    30c0:	80 95       	com	r24
    30c2:	90 95       	com	r25
    30c4:	8e 0f       	add	r24, r30
    30c6:	9f 1f       	adc	r25, r31
    30c8:	08 95       	ret

000030ca <strnlen>:
strnlen():
    30ca:	fc 01       	movw	r30, r24
    30cc:	61 50       	subi	r22, 0x01	; 1
    30ce:	70 40       	sbci	r23, 0x00	; 0
    30d0:	01 90       	ld	r0, Z+
    30d2:	01 10       	cpse	r0, r1
    30d4:	d8 f7       	brcc	.-10     	; 0x30cc <strnlen+0x2>
    30d6:	80 95       	com	r24
    30d8:	90 95       	com	r25
    30da:	8e 0f       	add	r24, r30
    30dc:	9f 1f       	adc	r25, r31
    30de:	08 95       	ret

000030e0 <fputc>:
fputc():
    30e0:	0f 93       	push	r16
    30e2:	1f 93       	push	r17
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29
    30e8:	18 2f       	mov	r17, r24
    30ea:	09 2f       	mov	r16, r25
    30ec:	eb 01       	movw	r28, r22
    30ee:	8b 81       	ldd	r24, Y+3	; 0x03
    30f0:	81 fd       	sbrc	r24, 1
    30f2:	09 c0       	rjmp	.+18     	; 0x3106 <fputc+0x26>
    30f4:	1f ef       	ldi	r17, 0xFF	; 255
    30f6:	0f ef       	ldi	r16, 0xFF	; 255
    30f8:	81 2f       	mov	r24, r17
    30fa:	90 2f       	mov	r25, r16
    30fc:	df 91       	pop	r29
    30fe:	cf 91       	pop	r28
    3100:	1f 91       	pop	r17
    3102:	0f 91       	pop	r16
    3104:	08 95       	ret
    3106:	82 ff       	sbrs	r24, 2
    3108:	14 c0       	rjmp	.+40     	; 0x3132 <fputc+0x52>
    310a:	2e 81       	ldd	r18, Y+6	; 0x06
    310c:	3f 81       	ldd	r19, Y+7	; 0x07
    310e:	8c 81       	ldd	r24, Y+4	; 0x04
    3110:	9d 81       	ldd	r25, Y+5	; 0x05
    3112:	28 17       	cp	r18, r24
    3114:	39 07       	cpc	r19, r25
    3116:	3c f4       	brge	.+14     	; 0x3126 <fputc+0x46>
    3118:	e8 81       	ld	r30, Y
    311a:	f9 81       	ldd	r31, Y+1	; 0x01
    311c:	cf 01       	movw	r24, r30
    311e:	01 96       	adiw	r24, 0x01	; 1
    3120:	99 83       	std	Y+1, r25	; 0x01
    3122:	88 83       	st	Y, r24
    3124:	10 83       	st	Z, r17
    3126:	8e 81       	ldd	r24, Y+6	; 0x06
    3128:	9f 81       	ldd	r25, Y+7	; 0x07
    312a:	01 96       	adiw	r24, 0x01	; 1
    312c:	9f 83       	std	Y+7, r25	; 0x07
    312e:	8e 83       	std	Y+6, r24	; 0x06
    3130:	e3 cf       	rjmp	.-58     	; 0x30f8 <fputc+0x18>
    3132:	e8 85       	ldd	r30, Y+8	; 0x08
    3134:	f9 85       	ldd	r31, Y+9	; 0x09
    3136:	81 2f       	mov	r24, r17
    3138:	09 95       	icall
    313a:	89 2b       	or	r24, r25
    313c:	a1 f3       	breq	.-24     	; 0x3126 <fputc+0x46>
    313e:	da cf       	rjmp	.-76     	; 0x30f4 <fputc+0x14>

00003140 <__ultoa_invert>:
__ultoa_invert():
    3140:	fa 01       	movw	r30, r20
    3142:	aa 27       	eor	r26, r26
    3144:	28 30       	cpi	r18, 0x08	; 8
    3146:	51 f1       	breq	.+84     	; 0x319c <__ultoa_invert+0x5c>
    3148:	20 31       	cpi	r18, 0x10	; 16
    314a:	81 f1       	breq	.+96     	; 0x31ac <__ultoa_invert+0x6c>
    314c:	e8 94       	clt
    314e:	6f 93       	push	r22
    3150:	6e 7f       	andi	r22, 0xFE	; 254
    3152:	6e 5f       	subi	r22, 0xFE	; 254
    3154:	7f 4f       	sbci	r23, 0xFF	; 255
    3156:	8f 4f       	sbci	r24, 0xFF	; 255
    3158:	9f 4f       	sbci	r25, 0xFF	; 255
    315a:	af 4f       	sbci	r26, 0xFF	; 255
    315c:	b1 e0       	ldi	r27, 0x01	; 1
    315e:	3e d0       	rcall	.+124    	; 0x31dc <__ultoa_invert+0x9c>
    3160:	b4 e0       	ldi	r27, 0x04	; 4
    3162:	3c d0       	rcall	.+120    	; 0x31dc <__ultoa_invert+0x9c>
    3164:	67 0f       	add	r22, r23
    3166:	78 1f       	adc	r23, r24
    3168:	89 1f       	adc	r24, r25
    316a:	9a 1f       	adc	r25, r26
    316c:	a1 1d       	adc	r26, r1
    316e:	68 0f       	add	r22, r24
    3170:	79 1f       	adc	r23, r25
    3172:	8a 1f       	adc	r24, r26
    3174:	91 1d       	adc	r25, r1
    3176:	a1 1d       	adc	r26, r1
    3178:	6a 0f       	add	r22, r26
    317a:	71 1d       	adc	r23, r1
    317c:	81 1d       	adc	r24, r1
    317e:	91 1d       	adc	r25, r1
    3180:	a1 1d       	adc	r26, r1
    3182:	20 d0       	rcall	.+64     	; 0x31c4 <__ultoa_invert+0x84>
    3184:	09 f4       	brne	.+2      	; 0x3188 <__ultoa_invert+0x48>
    3186:	68 94       	set
    3188:	3f 91       	pop	r19
    318a:	2a e0       	ldi	r18, 0x0A	; 10
    318c:	26 9f       	mul	r18, r22
    318e:	11 24       	eor	r1, r1
    3190:	30 19       	sub	r19, r0
    3192:	30 5d       	subi	r19, 0xD0	; 208
    3194:	31 93       	st	Z+, r19
    3196:	de f6       	brtc	.-74     	; 0x314e <__ultoa_invert+0xe>
    3198:	cf 01       	movw	r24, r30
    319a:	08 95       	ret
    319c:	46 2f       	mov	r20, r22
    319e:	47 70       	andi	r20, 0x07	; 7
    31a0:	40 5d       	subi	r20, 0xD0	; 208
    31a2:	41 93       	st	Z+, r20
    31a4:	b3 e0       	ldi	r27, 0x03	; 3
    31a6:	0f d0       	rcall	.+30     	; 0x31c6 <__ultoa_invert+0x86>
    31a8:	c9 f7       	brne	.-14     	; 0x319c <__ultoa_invert+0x5c>
    31aa:	f6 cf       	rjmp	.-20     	; 0x3198 <__ultoa_invert+0x58>
    31ac:	46 2f       	mov	r20, r22
    31ae:	4f 70       	andi	r20, 0x0F	; 15
    31b0:	40 5d       	subi	r20, 0xD0	; 208
    31b2:	4a 33       	cpi	r20, 0x3A	; 58
    31b4:	18 f0       	brcs	.+6      	; 0x31bc <__ultoa_invert+0x7c>
    31b6:	49 5d       	subi	r20, 0xD9	; 217
    31b8:	31 fd       	sbrc	r19, 1
    31ba:	40 52       	subi	r20, 0x20	; 32
    31bc:	41 93       	st	Z+, r20
    31be:	02 d0       	rcall	.+4      	; 0x31c4 <__ultoa_invert+0x84>
    31c0:	a9 f7       	brne	.-22     	; 0x31ac <__ultoa_invert+0x6c>
    31c2:	ea cf       	rjmp	.-44     	; 0x3198 <__ultoa_invert+0x58>
    31c4:	b4 e0       	ldi	r27, 0x04	; 4
    31c6:	a6 95       	lsr	r26
    31c8:	97 95       	ror	r25
    31ca:	87 95       	ror	r24
    31cc:	77 95       	ror	r23
    31ce:	67 95       	ror	r22
    31d0:	ba 95       	dec	r27
    31d2:	c9 f7       	brne	.-14     	; 0x31c6 <__ultoa_invert+0x86>
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	61 05       	cpc	r22, r1
    31d8:	71 05       	cpc	r23, r1
    31da:	08 95       	ret
    31dc:	9b 01       	movw	r18, r22
    31de:	ac 01       	movw	r20, r24
    31e0:	0a 2e       	mov	r0, r26
    31e2:	06 94       	lsr	r0
    31e4:	57 95       	ror	r21
    31e6:	47 95       	ror	r20
    31e8:	37 95       	ror	r19
    31ea:	27 95       	ror	r18
    31ec:	ba 95       	dec	r27
    31ee:	c9 f7       	brne	.-14     	; 0x31e2 <__ultoa_invert+0xa2>
    31f0:	62 0f       	add	r22, r18
    31f2:	73 1f       	adc	r23, r19
    31f4:	84 1f       	adc	r24, r20
    31f6:	95 1f       	adc	r25, r21
    31f8:	a0 1d       	adc	r26, r0
    31fa:	08 95       	ret

000031fc <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    31fc:	f8 94       	cli

000031fe <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    31fe:	ff cf       	rjmp	.-2      	; 0x31fe <__stop_program>
