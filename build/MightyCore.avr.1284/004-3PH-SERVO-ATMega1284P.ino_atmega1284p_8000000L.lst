
C:\Users\Admin\AppData\Local\Temp\arduino-sketch-F080B17A2320CF8E17961042ADCE1DFB/004-3PH-SERVO-ATMega1284P.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__vector_18>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      68:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      6c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      70:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      74:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      78:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      7c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      80:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      84:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      88:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	21 00       	.word	0x0021	; ????
      90:	24 00       	.word	0x0024	; ????
      92:	27 00       	.word	0x0027	; ????
      94:	2a 00       	.word	0x002a	; ????

00000096 <port_to_output_PGM>:
      96:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

000000a0 <digital_pin_to_timer_PGM>:
      a0:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

000000c0 <characterArray>:
      c0:	7e 30 6d 79 33 5b 5f 70 7f 7b 77 1f 4e 3d 4f 47     ~0my3[_p.{w.N=OG
	...
      e0:	00 00 22 00 00 00 00 20 4e 78 00 00 04 01 00 00     ..".... Nx......
      f0:	7e 30 6d 79 33 5b 5f 70 7f 7b 00 00 00 00 00 00     ~0my3[_p.{......
     100:	00 77 1f 4e 3d 4f 47 5e 37 30 38 00 0e 00 15 7e     .w.N=OG^708....~
     110:	67 73 05 5b 0f 3e 00 00 00 3b 00 4e 00 78 00 08     gs.[.>...;.N.x..
     120:	02 77 1f 0d 3d 6f 47 5e 17 10 38 00 30 00 15 1d     .w..=oG^..8.0...
     130:	67 73 05 5b 0f 1c 00 00 00 00 00 00 00 00 00 00     gs.[............

00000140 <port_to_input_PGM>:
     140:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

0000014a <digital_pin_to_port_PGM>:
     14a:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     15a:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

0000016a <digital_pin_to_bit_mask_PGM>:
     16a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     17a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

0000018a <__ctors_start>:
__ctors_start():
     18a:	de 0f       	add	r29, r30

0000018c <__ctors_end>:
__dtors_end():
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	d0 e4       	ldi	r29, 0x40	; 64
     194:	de bf       	out	0x3e, r29	; 62
     196:	cd bf       	out	0x3d, r28	; 61

00000198 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     198:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     19a:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     19c:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     19e:	e0 e7       	ldi	r30, 0x70	; 112
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     1a0:	fe e2       	ldi	r31, 0x2E	; 46
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     1a2:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     1a4:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     1a8:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     1aa:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     1ac:	ae 38       	cpi	r26, 0x8E	; 142
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     1ae:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0x10>

000001b2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1b2:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1b4:	ae e8       	ldi	r26, 0x8E	; 142
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1bc:	a3 3a       	cpi	r26, 0xA3	; 163
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1be:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>

000001c2 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     1c2:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     1c4:	c6 ec       	ldi	r28, 0xC6	; 198
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     1c6:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     1ca:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     1cc:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1ce:	0e 94 31 12 	call	0x2462	; 0x2462 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1d2:	c5 3c       	cpi	r28, 0xC5	; 197
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1d4:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1d6:	c9 f7       	brne	.-14     	; 0x1ca <__do_global_ctors+0x8>
     1d8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <main>
     1dc:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <_exit>

000001e0 <__bad_interrupt>:
__vector_22():
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <turnOffPWM>:
turnOffPWM():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     1e4:	82 50       	subi	r24, 0x02	; 2
     1e6:	8a 30       	cpi	r24, 0x0A	; 10
     1e8:	88 f5       	brcc	.+98     	; 0x24c <turnOffPWM+0x68>
     1ea:	e8 2f       	mov	r30, r24
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	e5 50       	subi	r30, 0x05	; 5
     1f0:	ff 4f       	sbci	r31, 0xFF	; 255
     1f2:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__tablejump2__>
     1f6:	23 01       	movw	r4, r6
     1f8:	27 01       	movw	r4, r14
     1fa:	05 01       	movw	r0, r10
     1fc:	0b 01       	movw	r0, r22
     1fe:	26 01       	movw	r4, r12
     200:	26 01       	movw	r4, r12
     202:	0f 01       	movw	r0, r30
     204:	15 01       	movw	r2, r10
     206:	19 01       	movw	r2, r18
     208:	1f 01       	movw	r2, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     20a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     20e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     210:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     214:	08 95       	ret
     216:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     21a:	8f 7d       	andi	r24, 0xDF	; 223
     21c:	f9 cf       	rjmp	.-14     	; 0x210 <turnOffPWM+0x2c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     21e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     222:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     224:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     228:	08 95       	ret
     22a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     22e:	8f 7d       	andi	r24, 0xDF	; 223
     230:	f9 cf       	rjmp	.-14     	; 0x224 <turnOffPWM+0x40>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     232:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     236:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     238:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     23c:	08 95       	ret
     23e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     242:	8f 7d       	andi	r24, 0xDF	; 223
     244:	f9 cf       	rjmp	.-14     	; 0x238 <turnOffPWM+0x54>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     246:	84 b5       	in	r24, 0x24	; 36
     248:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     24a:	84 bd       	out	0x24, r24	; 36
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     24c:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     24e:	84 b5       	in	r24, 0x24	; 36
     250:	8f 7d       	andi	r24, 0xDF	; 223
     252:	fb cf       	rjmp	.-10     	; 0x24a <turnOffPWM+0x66>

00000254 <digitalWrite>:
digitalWrite():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     25a:	28 2f       	mov	r18, r24
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	e0 56       	subi	r30, 0x60	; 96
     262:	ff 4f       	sbci	r31, 0xFF	; 255
     264:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     266:	f9 01       	movw	r30, r18
     268:	e6 59       	subi	r30, 0x96	; 150
     26a:	fe 4f       	sbci	r31, 0xFE	; 254
     26c:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     26e:	f9 01       	movw	r30, r18
     270:	e6 5b       	subi	r30, 0xB6	; 182
     272:	fe 4f       	sbci	r31, 0xFE	; 254
     274:	c4 91       	lpm	r28, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     276:	cc 23       	and	r28, r28
     278:	a9 f0       	breq	.+42     	; 0x2a4 <digitalWrite+0x50>
     27a:	16 2f       	mov	r17, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     27c:	81 11       	cpse	r24, r1
     27e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <turnOffPWM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     282:	ec 2f       	mov	r30, r28
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	ee 0f       	add	r30, r30
     288:	ff 1f       	adc	r31, r31
     28a:	ea 56       	subi	r30, 0x6A	; 106
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	a5 91       	lpm	r26, Z+
     290:	b4 91       	lpm	r27, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     292:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     294:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     296:	ec 91       	ld	r30, X
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     298:	11 11       	cpse	r17, r1
     29a:	08 c0       	rjmp	.+16     	; 0x2ac <digitalWrite+0x58>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     29c:	d0 95       	com	r29
     29e:	de 23       	and	r29, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     2a0:	dc 93       	st	X, r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     2a2:	8f bf       	out	0x3f, r24	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     2ac:	de 2b       	or	r29, r30
     2ae:	f8 cf       	rjmp	.-16     	; 0x2a0 <digitalWrite+0x4c>

000002b0 <pinMode>:
pinMode():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	fc 01       	movw	r30, r24
     2b8:	e6 59       	subi	r30, 0x96	; 150
     2ba:	fe 4f       	sbci	r31, 0xFE	; 254
     2bc:	24 91       	lpm	r18, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     2be:	86 5b       	subi	r24, 0xB6	; 182
     2c0:	9e 4f       	sbci	r25, 0xFE	; 254
     2c2:	fc 01       	movw	r30, r24
     2c4:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     2c6:	88 23       	and	r24, r24
     2c8:	d1 f0       	breq	.+52     	; 0x2fe <pinMode+0x4e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	88 0f       	add	r24, r24
     2ce:	99 1f       	adc	r25, r25
     2d0:	fc 01       	movw	r30, r24
     2d2:	e4 57       	subi	r30, 0x74	; 116
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	a5 91       	lpm	r26, Z+
     2d8:	b4 91       	lpm	r27, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     2da:	fc 01       	movw	r30, r24
     2dc:	ea 56       	subi	r30, 0x6A	; 106
     2de:	ff 4f       	sbci	r31, 0xFF	; 255
     2e0:	c5 91       	lpm	r28, Z+
     2e2:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     2e4:	61 11       	cpse	r22, r1
     2e6:	0e c0       	rjmp	.+28     	; 0x304 <pinMode+0x54>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     2e8:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     2ea:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     2ec:	8c 91       	ld	r24, X
     2ee:	e2 2f       	mov	r30, r18
     2f0:	e0 95       	com	r30
     2f2:	8e 23       	and	r24, r30
     2f4:	8c 93       	st	X, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     2f6:	28 81       	ld	r18, Y
     2f8:	e2 23       	and	r30, r18
     2fa:	e8 83       	st	Y, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     2fc:	9f bf       	out	0x3f, r25	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     304:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     306:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     308:	ec 91       	ld	r30, X
     30a:	e2 2b       	or	r30, r18
     30c:	ec 93       	st	X, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     30e:	8f bf       	out	0x3f, r24	; 63
     310:	f6 cf       	rjmp	.-20     	; 0x2fe <pinMode+0x4e>

00000312 <analogRead>:
analogRead():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
     312:	88 51       	subi	r24, 0x18	; 24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     314:	80 64       	ori	r24, 0x40	; 64
     316:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     31a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     31e:	80 64       	ori	r24, 0x40	; 64
     320:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
     324:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     328:	86 fd       	sbrc	r24, 6
     32a:	fc cf       	rjmp	.-8      	; 0x324 <analogRead+0x12>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
     32c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
     330:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
     334:	08 95       	ret

00000336 <delayMicroseconds>:
delayMicroseconds():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
     336:	00 00       	nop
     338:	00 00       	nop
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:767
    "nop" "\n\t"
    "nop"); //just waiting 2 cycles

  // for a 1 and 2 microsecond delay, simply return.  the overhead
  // of the function call takes 16 (18) cycles, which is 2us
  if (us <= 2) return; // = 3 cycles, (4 when true)
     33a:	83 30       	cpi	r24, 0x03	; 3
     33c:	91 05       	cpc	r25, r1
     33e:	28 f0       	brcs	.+10     	; 0x34a <delayMicroseconds+0x14>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:772

  // the following loop takes 1/2 of a microsecond (4 cycles)
  // per iteration, so execute it twice for each microsecond of
  // delay requested.
  us <<= 1; //x2 us, = 2 cycles
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:777

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
     344:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <delayMicroseconds+0x10>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     34a:	08 95       	ret

0000034c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]>:
DisplayString():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:189
/*******************************************************************************************/
//Given a string such as "-A32", we display -A32
//Each digit is displayed for ~2000us, and cycles through the 4 digits
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
     34c:	6f 92       	push	r6
     34e:	7f 92       	push	r7
     350:	9f 92       	push	r9
     352:	bf 92       	push	r11
     354:	cf 92       	push	r12
     356:	df 92       	push	r13
     358:	ef 92       	push	r14
     35a:	ff 92       	push	r15
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	7c 01       	movw	r14, r24
     364:	96 2e       	mov	r9, r22
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:192
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     366:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:238
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
		}
		//Service the decimal point, apostrophe and colon
		if ((DecAposColon & (1<<(digit-1))) && (digit < 5)) //Test DecAposColon to see if we need to turn on a decimal point
     368:	c6 2e       	mov	r12, r22
     36a:	d1 2c       	mov	r13, r1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:273
			  digitalWrite(digit4, DigitOff);
			  break;
			//This only currently works for 4 digits
		}
		// The display is on for microSeconds(brightnessLevel + 1), now turn off for the remainder of the framePeriod
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     36c:	81 ed       	ldi	r24, 0xD1	; 209
     36e:	68 2e       	mov	r6, r24
     370:	87 e0       	ldi	r24, 0x07	; 7
     372:	78 2e       	mov	r7, r24
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:192
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     374:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <display1+0x15>
     378:	81 17       	cp	r24, r17
     37a:	08 f4       	brcc	.+2      	; 0x37e <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x32>
     37c:	0d c1       	rjmp	.+538    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
	{
		switch(digit)
     37e:	c1 2f       	mov	r28, r17
     380:	d0 e0       	ldi	r29, 0x00	; 0
     382:	12 30       	cpi	r17, 0x02	; 2
     384:	09 f4       	brne	.+2      	; 0x388 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x3c>
     386:	55 c0       	rjmp	.+170    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     388:	08 f0       	brcs	.+2      	; 0x38c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x40>
     38a:	47 c0       	rjmp	.+142    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:197
		{
			case 1:
				digitalWrite(digit1, DigitOn);
     38c:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <display1+0x1>
     390:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <display1+0x5>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     394:	11 30       	cpi	r17, 0x01	; 1
     396:	09 f4       	brne	.+2      	; 0x39a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x4e>
     398:	49 c0       	rjmp	.+146    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:215

		//Here we access the array of segments
		//This could be cleaned up a bit but it works
		//displayCharacter(toDisplay[digit-1]); //Now display this digit
		// displayArray (defined in SevSeg.h) decides which segments are turned on for each number or symbol
		unsigned char characterToDisplay = toDisplay[digit-1];
     39a:	f7 01       	movw	r30, r14
     39c:	ec 0f       	add	r30, r28
     39e:	fd 1f       	adc	r31, r29
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	b0 80       	ld	r11, Z
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:216
		if (characterToDisplay & 0x80)	// bit 7 enables bit-per-segment control
     3a4:	b7 fe       	sbrs	r11, 7
     3a6:	4f c0       	rjmp	.+158    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:218
		{	// Each bit of characterToDisplay turns on a single segment (from A-to-G)
			if (characterToDisplay & 0x01) digitalWrite(segmentA, SegOn);
     3a8:	b0 fe       	sbrs	r11, 0
     3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x6c>
     3ac:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     3b0:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <display1+0xd>
     3b4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:219
			if (characterToDisplay & 0x02) digitalWrite(segmentB, SegOn);
     3b8:	b1 fe       	sbrs	r11, 1
     3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x7c>
     3bc:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     3c0:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <display1+0xe>
     3c4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:220
			if (characterToDisplay & 0x04) digitalWrite(segmentC, SegOn);
     3c8:	b2 fe       	sbrs	r11, 2
     3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x8c>
     3cc:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     3d0:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <display1+0xf>
     3d4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:221
			if (characterToDisplay & 0x08) digitalWrite(segmentD, SegOn);
     3d8:	b3 fe       	sbrs	r11, 3
     3da:	06 c0       	rjmp	.+12     	; 0x3e8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x9c>
     3dc:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     3e0:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <display1+0x10>
     3e4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:222
			if (characterToDisplay & 0x10) digitalWrite(segmentE, SegOn);
     3e8:	b4 fe       	sbrs	r11, 4
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0xac>
     3ec:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     3f0:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <display1+0x11>
     3f4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:223
			if (characterToDisplay & 0x20) digitalWrite(segmentF, SegOn);
     3f8:	b5 fe       	sbrs	r11, 5
     3fa:	06 c0       	rjmp	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3fc:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     400:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <display1+0x12>
     404:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:224
			if (characterToDisplay & 0x40) digitalWrite(segmentG, SegOn);
     408:	b6 fe       	sbrs	r11, 6
     40a:	54 c0       	rjmp	.+168    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:235
			if (chr & (1<<5)) digitalWrite(segmentB, SegOn);
			if (chr & (1<<4)) digitalWrite(segmentC, SegOn);
			if (chr & (1<<3)) digitalWrite(segmentD, SegOn);
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
     40c:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     410:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <display1+0x13>
     414:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
     418:	4d c0       	rjmp	.+154    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     41a:	13 30       	cpi	r17, 0x03	; 3
     41c:	79 f0       	breq	.+30     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:206
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
				break;
			case 4:
				digitalWrite(digit4, DigitOn);
     41e:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <display1+0x1>
     422:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <display1+0x8>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     426:	14 30       	cpi	r17, 0x04	; 4
     428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	b7 cf       	rjmp	.-146    	; 0x39a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x4e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:206
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
				break;
			case 4:
				digitalWrite(digit4, DigitOn);
     42c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
     430:	b4 cf       	rjmp	.-152    	; 0x39a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x4e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:200
		{
			case 1:
				digitalWrite(digit1, DigitOn);
				break;
			case 2:
				digitalWrite(digit2, DigitOn);
     432:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <display1+0x1>
     436:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <display1+0x6>
     43a:	f8 cf       	rjmp	.-16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:203
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
     43c:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <display1+0x1>
     440:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <display1+0x7>
     444:	f3 cf       	rjmp	.-26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:228
			if (characterToDisplay & 0x20) digitalWrite(segmentF, SegOn);
			if (characterToDisplay & 0x40) digitalWrite(segmentG, SegOn);
		}
		else
		{
			const uint8_t chr = pgm_read_byte(&characterArray[characterToDisplay]);
     446:	eb 2d       	mov	r30, r11
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	e0 54       	subi	r30, 0x40	; 64
     44c:	ff 4f       	sbci	r31, 0xFF	; 255
     44e:	b4 90       	lpm	r11, Z
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:229
			if (chr & (1<<6)) digitalWrite(segmentA, SegOn);
     450:	b6 fe       	sbrs	r11, 6
     452:	06 c0       	rjmp	.+12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     454:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     458:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <display1+0xd>
     45c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:230
			if (chr & (1<<5)) digitalWrite(segmentB, SegOn);
     460:	b5 fe       	sbrs	r11, 5
     462:	06 c0       	rjmp	.+12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     464:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     468:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <display1+0xe>
     46c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:231
			if (chr & (1<<4)) digitalWrite(segmentC, SegOn);
     470:	b4 fe       	sbrs	r11, 4
     472:	06 c0       	rjmp	.+12     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     474:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     478:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <display1+0xf>
     47c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:232
			if (chr & (1<<3)) digitalWrite(segmentD, SegOn);
     480:	b3 fe       	sbrs	r11, 3
     482:	06 c0       	rjmp	.+12     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     484:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     488:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <display1+0x10>
     48c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:233
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
     490:	b2 fe       	sbrs	r11, 2
     492:	06 c0       	rjmp	.+12     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     494:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     498:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <display1+0x11>
     49c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:234
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
     4a0:	b1 fe       	sbrs	r11, 1
     4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4a4:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     4a8:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <display1+0x12>
     4ac:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:235
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
     4b0:	b0 fc       	sbrc	r11, 0
     4b2:	ac cf       	rjmp	.-168    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:238
		}
		//Service the decimal point, apostrophe and colon
		if ((DecAposColon & (1<<(digit-1))) && (digit < 5)) //Test DecAposColon to see if we need to turn on a decimal point
     4b4:	21 97       	sbiw	r28, 0x01	; 1
     4b6:	c6 01       	movw	r24, r12
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4ba:	95 95       	asr	r25
     4bc:	87 95       	ror	r24
     4be:	ca 95       	dec	r28
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4c2:	80 ff       	sbrs	r24, 0
     4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4c6:	15 30       	cpi	r17, 0x05	; 5
     4c8:	30 f4       	brcc	.+12     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:239
			digitalWrite(segmentDP, SegOn);
     4ca:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     4ce:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <display1+0x14>
     4d2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:241

		delayMicroseconds(brightnessDelay + 1); //Display this digit for a fraction of a second (between 1us and 5000us, 500-2000 is pretty good)
     4d6:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <display1+0x16>
     4da:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <display1+0x17>
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	0e 94 9b 01 	call	0x336	; 0x336 <delayMicroseconds>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:246
		//The + 1 is a bit of a hack but it removes the possible zero display (0 causes display to become bright and flickery)
		//If you set this too long, the display will start to flicker. Set it to 25000 for some fun.

		//Turn off all segments
		digitalWrite(segmentA, SegOff);
     4e4:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <display1+0x4>
     4e8:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <display1+0xd>
     4ec:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:247
		digitalWrite(segmentB, SegOff);
     4f0:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <display1+0x4>
     4f4:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <display1+0xe>
     4f8:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:248
		digitalWrite(segmentC, SegOff);
     4fc:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <display1+0x4>
     500:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <display1+0xf>
     504:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:249
		digitalWrite(segmentD, SegOff);
     508:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <display1+0x4>
     50c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <display1+0x10>
     510:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:250
		digitalWrite(segmentE, SegOff);
     514:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <display1+0x4>
     518:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <display1+0x11>
     51c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:251
		digitalWrite(segmentF, SegOff);
     520:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <display1+0x4>
     524:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <display1+0x12>
     528:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:252
		digitalWrite(segmentG, SegOff);
     52c:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <display1+0x4>
     530:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <display1+0x13>
     534:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:253
		digitalWrite(segmentDP, SegOff);
     538:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <display1+0x4>
     53c:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <display1+0x14>
     540:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256

		//Turn off this digit
		switch(digit)
     544:	12 30       	cpi	r17, 0x02	; 2
     546:	f1 f0       	breq	.+60     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     548:	90 f4       	brcc	.+36     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:259
		{
			case 1:
			  digitalWrite(digit1, DigitOff);
     54a:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <display1+0x2>
     54e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <display1+0x5>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     552:	11 30       	cpi	r17, 0x01	; 1
     554:	a1 f0       	breq	.+40     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:273
			  digitalWrite(digit4, DigitOff);
			  break;
			//This only currently works for 4 digits
		}
		// The display is on for microSeconds(brightnessLevel + 1), now turn off for the remainder of the framePeriod
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     556:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <display1+0x16>
     55a:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <display1+0x17>
     55e:	93 01       	movw	r18, r6
     560:	28 1b       	sub	r18, r24
     562:	39 0b       	sbc	r19, r25
     564:	c9 01       	movw	r24, r18
     566:	0e 94 9b 01 	call	0x336	; 0x336 <delayMicroseconds>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:192
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     56a:	1f 5f       	subi	r17, 0xFF	; 255
     56c:	03 cf       	rjmp	.-506    	; 0x374 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]+0x28>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     56e:	13 30       	cpi	r17, 0x03	; 3
     570:	71 f0       	breq	.+28     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:268
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
			  break;
			case 4:
			  digitalWrite(digit4, DigitOff);
     572:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <display1+0x2>
     576:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <display1+0x8>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     57a:	14 30       	cpi	r17, 0x04	; 4
     57c:	61 f7       	brne	.-40     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:268
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
			  break;
			case 4:
			  digitalWrite(digit4, DigitOff);
     57e:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
     582:	e9 cf       	rjmp	.-46     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:262
		{
			case 1:
			  digitalWrite(digit1, DigitOff);
			  break;
			case 2:
			  digitalWrite(digit2, DigitOff);
     584:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <display1+0x2>
     588:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <display1+0x6>
     58c:	f8 cf       	rjmp	.-16     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:265
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
     58e:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <display1+0x2>
     592:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <display1+0x7>
     596:	f3 cf       	rjmp	.-26     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:279
	}

	//After we've gone through the digits, we control the colon and apostrophe (if the display supports it)

	//Turn on the colon and/or apostrophe
	if ((digitColon != 255) || (digitApostrophe != 255))
     598:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <display1+0xa>
     59c:	8f 3f       	cpi	r24, 0xFF	; 255
     59e:	29 f4       	brne	.+10     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5a0:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <display1+0x9>
     5a4:	9f 3f       	cpi	r25, 0xFF	; 255
     5a6:	09 f4       	brne	.+2      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5a8:	4e c0       	rjmp	.+156    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:281
	{
		if (DecAposColon & (1<<4)) //Test to see if we need to turn on the Colon
     5aa:	94 fe       	sbrs	r9, 4
     5ac:	0a c0       	rjmp	.+20     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:283
		{
			digitalWrite(digitColon, DigitOn);
     5ae:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <display1+0x1>
     5b2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:284
			digitalWrite(segmentColon, SegOn);
     5b6:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     5ba:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <display1+0xc>
     5be:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:286
		}
		if (DecAposColon & (1<<5)) //Test DecAposColon to see if we need to turn on Apostrophe
     5c2:	95 fe       	sbrs	r9, 5
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:288
		{
			digitalWrite(digitApostrophe, DigitOn);
     5c6:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <display1+0x1>
     5ca:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <display1+0x9>
     5ce:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:289
			digitalWrite(segmentApostrophe, SegOn);
     5d2:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <display1+0x3>
     5d6:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <display1+0xb>
     5da:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:291
		}
		delayMicroseconds(brightnessDelay + 1); //Display this digit for a fraction of a second (between 1us and 5000us, 500-2000 is pretty good)
     5de:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <display1+0x16>
     5e2:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <display1+0x17>
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	0e 94 9b 01 	call	0x336	; 0x336 <delayMicroseconds>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:294

		//Turn off the colon and/or apostrophe
		digitalWrite(digitColon, DigitOff);
     5ec:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <display1+0x2>
     5f0:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <display1+0xa>
     5f4:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:295
		digitalWrite(segmentColon, SegOff);
     5f8:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <display1+0x4>
     5fc:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <display1+0xc>
     600:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:296
		digitalWrite(digitApostrophe, DigitOff);
     604:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <display1+0x2>
     608:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <display1+0x9>
     60c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:297
		digitalWrite(segmentApostrophe, SegOff);
     610:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <display1+0x4>
     614:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <display1+0xb>
     618:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:298
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     61c:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <display1+0x16>
     620:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <display1+0x17>
     624:	81 ed       	ldi	r24, 0xD1	; 209
     626:	97 e0       	ldi	r25, 0x07	; 7
     628:	82 1b       	sub	r24, r18
     62a:	93 0b       	sbc	r25, r19
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:301
	}

}
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	bf 90       	pop	r11
     63c:	9f 90       	pop	r9
     63e:	7f 90       	pop	r7
     640:	6f 90       	pop	r6
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:298
		//Turn off the colon and/or apostrophe
		digitalWrite(digitColon, DigitOff);
		digitalWrite(segmentColon, SegOff);
		digitalWrite(digitApostrophe, DigitOff);
		digitalWrite(segmentApostrophe, SegOff);
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     642:	0c 94 9b 01 	jmp	0x336	; 0x336 <delayMicroseconds>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:301
	}

}
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	bf 90       	pop	r11
     656:	9f 90       	pop	r9
     658:	7f 90       	pop	r7
     65a:	6f 90       	pop	r6
     65c:	08 95       	ret

0000065e <micros>:
micros():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     65e:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     660:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     662:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <timer0_overflow_count>
     666:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <timer0_overflow_count+0x1>
     66a:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <timer0_overflow_count+0x2>
     66e:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <timer0_overflow_count+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     672:	26 b5       	in	r18, 0x26	; 38
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     674:	a8 9b       	sbis	0x15, 0	; 21
     676:	05 c0       	rjmp	.+10     	; 0x682 <micros+0x24>
     678:	2f 3f       	cpi	r18, 0xFF	; 255
     67a:	19 f0       	breq	.+6      	; 0x682 <micros+0x24>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	a1 1d       	adc	r26, r1
     680:	b1 1d       	adc	r27, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     682:	3f bf       	out	0x3f, r19	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     684:	ba 2f       	mov	r27, r26
     686:	a9 2f       	mov	r26, r25
     688:	98 2f       	mov	r25, r24
     68a:	88 27       	eor	r24, r24
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	62 0f       	add	r22, r18
     692:	71 1d       	adc	r23, r1
     694:	81 1d       	adc	r24, r1
     696:	91 1d       	adc	r25, r1
     698:	43 e0       	ldi	r20, 0x03	; 3
     69a:	66 0f       	add	r22, r22
     69c:	77 1f       	adc	r23, r23
     69e:	88 1f       	adc	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	4a 95       	dec	r20
     6a4:	d1 f7       	brne	.-12     	; 0x69a <micros+0x3c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     6a6:	08 95       	ret

000006a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>:
reset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:444
    return result;
}

void BlockNot::switchTo(Unit units) { baseUnits = units; }

void BlockNot::reset(const unsigned long newStartTime) {
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	ec 01       	movw	r28, r24
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:447
   unsigned long finalStartTime = newStartTime;
    if(newStartTime == 0) {
        switch(baseUnits) {
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	81 30       	cpi	r24, 0x01	; 1
     6b8:	91 05       	cpc	r25, r1
     6ba:	d9 f0       	breq	.+54     	; 0x6f2 <BlockNot::reset(unsigned long) [clone .constprop.18]+0x4a>
     6bc:	30 f0       	brcs	.+12     	; 0x6ca <BlockNot::reset(unsigned long) [clone .constprop.18]+0x22>
     6be:	02 97       	sbiw	r24, 0x02	; 2
     6c0:	c1 f0       	breq	.+48     	; 0x6f2 <BlockNot::reset(unsigned long) [clone .constprop.18]+0x4a>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:445
}

void BlockNot::switchTo(Unit units) { baseUnits = units; }

void BlockNot::reset(const unsigned long newStartTime) {
   unsigned long finalStartTime = newStartTime;
     6c2:	00 e0       	ldi	r16, 0x00	; 0
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	98 01       	movw	r18, r16
     6c8:	0a c0       	rjmp	.+20     	; 0x6de <BlockNot::reset(unsigned long) [clone .constprop.18]+0x36>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:449
    if(newStartTime == 0) {
        switch(baseUnits) {
            case MICROSECONDS:
                finalStartTime = micros() + microsOffset;
     6ca:	0e 94 2f 03 	call	0x65e	; 0x65e <micros>
     6ce:	08 85       	ldd	r16, Y+8	; 0x08
     6d0:	19 85       	ldd	r17, Y+9	; 0x09
     6d2:	2a 85       	ldd	r18, Y+10	; 0x0a
     6d4:	3b 85       	ldd	r19, Y+11	; 0x0b
     6d6:	06 0f       	add	r16, r22
     6d8:	17 1f       	adc	r17, r23
     6da:	28 1f       	adc	r18, r24
     6dc:	39 1f       	adc	r19, r25
resetTimer():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:509
            break;
    }
}

void BlockNot::resetTimer(const unsigned long newStartTime) {
    startTime = newStartTime;
     6de:	08 83       	st	Y, r16
     6e0:	19 83       	std	Y+1, r17	; 0x01
     6e2:	2a 83       	std	Y+2, r18	; 0x02
     6e4:	3b 83       	std	Y+3, r19	; 0x03
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:510
    onceTriggered = false;
     6e6:	1a 8a       	std	Y+18, r1	; 0x12
reset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:460
                finalStartTime = millis() + millisOffset;
                break;
        }
    }
    resetTimer(finalStartTime);
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	08 95       	ret
millis():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     6f2:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     6f4:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     6f6:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <timer0_millis>
     6fa:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <timer0_millis+0x1>
     6fe:	a0 91 9d 02 	lds	r26, 0x029D	; 0x80029d <timer0_millis+0x2>
     702:	b0 91 9e 02 	lds	r27, 0x029E	; 0x80029e <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     706:	2f bf       	out	0x3f, r18	; 63
reset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:455
                break;
            case MILLISECONDS:
                finalStartTime = millis() + millisOffset;
                break;
            case SECONDS:
                finalStartTime = millis() + millisOffset;
     708:	0c 81       	ldd	r16, Y+4	; 0x04
     70a:	1d 81       	ldd	r17, Y+5	; 0x05
     70c:	2e 81       	ldd	r18, Y+6	; 0x06
     70e:	3f 81       	ldd	r19, Y+7	; 0x07
     710:	08 0f       	add	r16, r24
     712:	19 1f       	adc	r17, r25
     714:	2a 1f       	adc	r18, r26
     716:	3b 1f       	adc	r19, r27
     718:	e2 cf       	rjmp	.-60     	; 0x6de <BlockNot::reset(unsigned long) [clone .constprop.18]+0x36>

0000071a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>:
_ZN8BlockNot11setDurationEm4Unitb.part.3():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:189
    if (resetOption) reset();
}

void BlockNot::setDuration(const unsigned long time, Unit inUnits, bool resetOption) {
    initDuration(time, inUnits);
    if (resetOption) reset();
     71a:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>

0000071e <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]>:
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:50
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
}

BlockNot::BlockNot(unsigned long time, Unit units) {
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	ec 01       	movw	r28, r24
     728:	1c 82       	std	Y+4, r1	; 0x04
     72a:	1d 82       	std	Y+5, r1	; 0x05
     72c:	1e 82       	std	Y+6, r1	; 0x06
     72e:	1f 82       	std	Y+7, r1	; 0x07
     730:	18 86       	std	Y+8, r1	; 0x08
     732:	19 86       	std	Y+9, r1	; 0x09
     734:	1a 86       	std	Y+10, r1	; 0x0a
     736:	1b 86       	std	Y+11, r1	; 0x0b
     738:	1c 86       	std	Y+12, r1	; 0x0c
     73a:	1d 86       	std	Y+13, r1	; 0x0d
     73c:	1e 86       	std	Y+14, r1	; 0x0e
     73e:	1f 86       	std	Y+15, r1	; 0x0f
     740:	19 8a       	std	Y+17, r1	; 0x11
     742:	18 8a       	std	Y+16, r1	; 0x10
     744:	1a 8a       	std	Y+18, r1	; 0x12
     746:	1e 8e       	std	Y+30, r1	; 0x1e
     748:	1d 8e       	std	Y+29, r1	; 0x1d
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:51
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
     74a:	00 91 99 02 	lds	r16, 0x0299	; 0x800299 <BlockNot::global>
     74e:	10 91 9a 02 	lds	r17, 0x029A	; 0x80029a <BlockNot::global+0x1>
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	01 30       	cpi	r16, 0x01	; 1
     758:	11 05       	cpc	r17, r1
     75a:	11 f0       	breq	.+4      	; 0x760 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]+0x42>
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <BlockNot::global+0x1>
     764:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <BlockNot::global>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:52
    baseUnits = units;
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	9c 8b       	std	Y+20, r25	; 0x14
     76e:	8b 8b       	std	Y+19, r24	; 0x13
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:489
            break;
        case MILLISECONDS:
            duration.millis = time;
            break;
        case SECONDS:
            duration.seconds = time;
     770:	cb 01       	movw	r24, r22
     772:	ba 01       	movw	r22, r20
     774:	0e 94 4f 10 	call	0x209e	; 0x209e <__floatunsisf>
     778:	6d 8b       	std	Y+21, r22	; 0x15
     77a:	7e 8b       	std	Y+22, r23	; 0x16
     77c:	8f 8b       	std	Y+23, r24	; 0x17
     77e:	98 8f       	std	Y+24, r25	; 0x18
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:54

BlockNot::BlockNot(unsigned long time, Unit units) {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    baseUnits = units;
    initDuration(time);
    reset();
     780:	ce 01       	movw	r24, r28
     782:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:55
    if (global == GLOBAL_RESET) addToTimerList();
     786:	01 30       	cpi	r16, 0x01	; 1
     788:	11 05       	cpc	r17, r1
     78a:	39 f0       	breq	.+14     	; 0x79a <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]+0x7c>
     78c:	ce 01       	movw	r24, r28
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:56
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:55
BlockNot::BlockNot(unsigned long time, Unit units) {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    baseUnits = units;
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
     796:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <BlockNot::addToTimerList()>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:56
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <BlockNot::timeSinceReset()>:
timeSinceReset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:513
void BlockNot::resetTimer(const unsigned long newStartTime) {
    startTime = newStartTime;
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	ec 01       	movw	r28, r24
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:515
    unsigned long result = 0L;
    unsigned long millisBase = millisOffset + millis();
     7b6:	6c 81       	ldd	r22, Y+4	; 0x04
     7b8:	7d 81       	ldd	r23, Y+5	; 0x05
     7ba:	8e 81       	ldd	r24, Y+6	; 0x06
     7bc:	9f 81       	ldd	r25, Y+7	; 0x07
millis():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     7be:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     7c0:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     7c2:	c0 90 9b 02 	lds	r12, 0x029B	; 0x80029b <timer0_millis>
     7c6:	d0 90 9c 02 	lds	r13, 0x029C	; 0x80029c <timer0_millis+0x1>
     7ca:	e0 90 9d 02 	lds	r14, 0x029D	; 0x80029d <timer0_millis+0x2>
     7ce:	f0 90 9e 02 	lds	r15, 0x029E	; 0x80029e <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     7d2:	2f bf       	out	0x3f, r18	; 63
timeSinceReset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:516
    switch (baseUnits) {
     7d4:	2b 89       	ldd	r18, Y+19	; 0x13
     7d6:	3c 89       	ldd	r19, Y+20	; 0x14
     7d8:	21 15       	cp	r18, r1
     7da:	31 05       	cpc	r19, r1
     7dc:	39 f0       	breq	.+14     	; 0x7ec <BlockNot::timeSinceReset()+0x48>
     7de:	23 30       	cpi	r18, 0x03	; 3
     7e0:	31 05       	cpc	r19, r1
     7e2:	f8 f0       	brcs	.+62     	; 0x822 <BlockNot::timeSinceReset()+0x7e>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:514
    startTime = newStartTime;
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
    unsigned long result = 0L;
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	cb 01       	movw	r24, r22
     7ea:	12 c0       	rjmp	.+36     	; 0x810 <BlockNot::timeSinceReset()+0x6c>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:518
    unsigned long millisBase = millisOffset + millis();
    switch (baseUnits) {
        case MICROSECONDS:
            result = microsOffset + micros() - startTime;
     7ec:	c8 84       	ldd	r12, Y+8	; 0x08
     7ee:	d9 84       	ldd	r13, Y+9	; 0x09
     7f0:	ea 84       	ldd	r14, Y+10	; 0x0a
     7f2:	fb 84       	ldd	r15, Y+11	; 0x0b
     7f4:	0e 94 2f 03 	call	0x65e	; 0x65e <micros>
     7f8:	08 81       	ld	r16, Y
     7fa:	19 81       	ldd	r17, Y+1	; 0x01
     7fc:	2a 81       	ldd	r18, Y+2	; 0x02
     7fe:	3b 81       	ldd	r19, Y+3	; 0x03
     800:	c0 1a       	sub	r12, r16
     802:	d1 0a       	sbc	r13, r17
     804:	e2 0a       	sbc	r14, r18
     806:	f3 0a       	sbc	r15, r19
     808:	6c 0d       	add	r22, r12
     80a:	7d 1d       	adc	r23, r13
     80c:	8e 1d       	adc	r24, r14
     80e:	9f 1d       	adc	r25, r15
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:528
        case SECONDS:
            result = millisBase - startTime;
            break;
    }
    return result;
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	df 90       	pop	r13
     81e:	cf 90       	pop	r12
     820:	08 95       	ret
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:515
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
    unsigned long result = 0L;
    unsigned long millisBase = millisOffset + millis();
     822:	6c 0d       	add	r22, r12
     824:	7d 1d       	adc	r23, r13
     826:	8e 1d       	adc	r24, r14
     828:	9f 1d       	adc	r25, r15
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:524
            break;
        case MILLISECONDS:
            result = millisBase - startTime;
            break;
        case SECONDS:
            result = millisBase - startTime;
     82a:	c8 80       	ld	r12, Y
     82c:	d9 80       	ldd	r13, Y+1	; 0x01
     82e:	ea 80       	ldd	r14, Y+2	; 0x02
     830:	fb 80       	ldd	r15, Y+3	; 0x03
     832:	6c 19       	sub	r22, r12
     834:	7d 09       	sbc	r23, r13
     836:	8e 09       	sbc	r24, r14
     838:	9f 09       	sbc	r25, r15
     83a:	ea cf       	rjmp	.-44     	; 0x810 <BlockNot::timeSinceReset()+0x6c>

0000083c <BlockNot::triggered(bool)>:
triggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:236
            break;
    }
    if (resetOption) reset();
}

bool BlockNot::triggered(bool resetOption) {
     83c:	cf 92       	push	r12
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
     84e:	06 2f       	mov	r16, r22
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:532
    return result;
}

bool BlockNot::hasTriggered() {
    bool triggered;
    switch(baseUnits) {
     850:	8b 89       	ldd	r24, Y+19	; 0x13
     852:	9c 89       	ldd	r25, Y+20	; 0x14
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	91 05       	cpc	r25, r1
     858:	91 f1       	breq	.+100    	; 0x8be <BlockNot::triggered(bool)+0x82>
     85a:	c0 f0       	brcs	.+48     	; 0x88c <BlockNot::triggered(bool)+0x50>
     85c:	02 97       	sbiw	r24, 0x02	; 2
     85e:	79 f1       	breq	.+94     	; 0x8be <BlockNot::triggered(bool)+0x82>
triggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:238
    if (resetOption) reset();
}

bool BlockNot::triggered(bool resetOption) {
    bool triggered = hasTriggered();
    if (resetOption && triggered) {
     860:	00 23       	and	r16, r16
     862:	29 f0       	breq	.+10     	; 0x86e <BlockNot::triggered(bool)+0x32>
     864:	11 23       	and	r17, r17
     866:	19 f0       	breq	.+6      	; 0x86e <BlockNot::triggered(bool)+0x32>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:239
        reset();
     868:	ce 01       	movw	r24, r28
     86a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:241
    }
    if (timerState == RUNNING) return triggered;
     86e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     870:	9e 8d       	ldd	r25, Y+30	; 0x1e
     872:	89 2b       	or	r24, r25
     874:	09 f0       	breq	.+2      	; 0x878 <BlockNot::triggered(bool)+0x3c>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:242
    else return false;
     876:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:243
}
     878:	81 2f       	mov	r24, r17
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	08 95       	ret
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:534

bool BlockNot::hasTriggered() {
    bool triggered;
    switch(baseUnits) {
        case MICROSECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.micros;
     88c:	ce 01       	movw	r24, r28
     88e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <BlockNot::timeSinceReset()>
     892:	6b 01       	movw	r12, r22
     894:	7c 01       	movw	r14, r24
_ZNK8BlockNot5cTime7micro_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:213
            micro_t &operator=(double us) {
                seconds = us * .000001;
                return *this;
            }
            operator double() const {
                return seconds * 1000000.0;
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	34 e2       	ldi	r19, 0x24	; 36
     89a:	44 e7       	ldi	r20, 0x74	; 116
     89c:	59 e4       	ldi	r21, 0x49	; 73
_ZNK8BlockNot5cTime7milli_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:201
            milli_t &operator=(double ms) {
                seconds = ms * .001;
                return *this;
            }
            operator double() const {
                return seconds * 1000.0;
     89e:	6d 89       	ldd	r22, Y+21	; 0x15
     8a0:	7e 89       	ldd	r23, Y+22	; 0x16
     8a2:	8f 89       	ldd	r24, Y+23	; 0x17
     8a4:	98 8d       	ldd	r25, Y+24	; 0x18
     8a6:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:540
            break;
        case MILLISECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.millis;
            break;
        case SECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.millis;
     8aa:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__fixunssfsi>
     8ae:	11 e0       	ldi	r17, 0x01	; 1
     8b0:	c6 16       	cp	r12, r22
     8b2:	d7 06       	cpc	r13, r23
     8b4:	e8 06       	cpc	r14, r24
     8b6:	f9 06       	cpc	r15, r25
     8b8:	98 f6       	brcc	.-90     	; 0x860 <BlockNot::triggered(bool)+0x24>
     8ba:	10 e0       	ldi	r17, 0x00	; 0
     8bc:	d1 cf       	rjmp	.-94     	; 0x860 <BlockNot::triggered(bool)+0x24>
     8be:	ce 01       	movw	r24, r28
     8c0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <BlockNot::timeSinceReset()>
     8c4:	6b 01       	movw	r12, r22
     8c6:	7c 01       	movw	r14, r24
_ZNK8BlockNot5cTime7milli_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:201
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	4a e7       	ldi	r20, 0x7A	; 122
     8ce:	54 e4       	ldi	r21, 0x44	; 68
     8d0:	e6 cf       	rjmp	.-52     	; 0x89e <BlockNot::triggered(bool)+0x62>

000008d2 <read(int)>:
read():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:959
  pinMode(PIN, OUTPUT);
}

//Read Input

bool read(int PIN) {
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	9c 01       	movw	r18, r24
digitalRead():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
     8d8:	fc 01       	movw	r30, r24
     8da:	e0 56       	subi	r30, 0x60	; 96
     8dc:	ff 4f       	sbci	r31, 0xFF	; 255
     8de:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     8e0:	f9 01       	movw	r30, r18
     8e2:	e6 59       	subi	r30, 0x96	; 150
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     8e8:	f9 01       	movw	r30, r18
     8ea:	e6 5b       	subi	r30, 0xB6	; 182
     8ec:	fe 4f       	sbci	r31, 0xFE	; 254
     8ee:	c4 91       	lpm	r28, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     8f0:	cc 23       	and	r28, r28
     8f2:	79 f0       	breq	.+30     	; 0x912 <read(int)+0x40>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     8f4:	81 11       	cpse	r24, r1
     8f6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <turnOffPWM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     8fa:	ec 2f       	mov	r30, r28
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	ee 0f       	add	r30, r30
     900:	ff 1f       	adc	r31, r31
     902:	e0 5c       	subi	r30, 0xC0	; 192
     904:	fe 4f       	sbci	r31, 0xFE	; 254
     906:	a5 91       	lpm	r26, Z+
     908:	b4 91       	lpm	r27, Z
     90a:	ec 91       	ld	r30, X
     90c:	ed 23       	and	r30, r29
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	09 f4       	brne	.+2      	; 0x914 <read(int)+0x42>
read():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:963
  if(digitalRead(PIN)) {
    return true;
  } else {
    return false;
     912:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:965
  }
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <setOUT(int)>:
setOUT():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:954
}

//Setup Outputs

void setOUT(int PIN) {
  pinMode(PIN, OUTPUT);
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <pinMode>

00000920 <setIN(int)>:
setIN():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:948
}

// Setup Inputs

void setIN(int PIN) {
  pinMode(PIN, INPUT);
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <pinMode>

00000926 <ampo()>:
ampo():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:656
    boutvoltage = 0.64 * analogRead(BOTPIN);
    }
  }
}

void ampo() {
     926:	cf 92       	push	r12
     928:	df 92       	push	r13
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	ca e0       	ldi	r28, 0x0A	; 10
     934:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:659
float ampov;
for(int i=0; i<10; i++) {
  if((0.1 * analogRead(current)) > ampov){
     936:	8e e1       	ldi	r24, 0x1E	; 30
     938:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     93c:	bc 01       	movw	r22, r24
     93e:	99 0f       	add	r25, r25
     940:	88 0b       	sbc	r24, r24
     942:	99 0b       	sbc	r25, r25
     944:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     948:	2d ec       	ldi	r18, 0xCD	; 205
     94a:	3c ec       	ldi	r19, 0xCC	; 204
     94c:	4c ec       	ldi	r20, 0xCC	; 204
     94e:	5d e3       	ldi	r21, 0x3D	; 61
     950:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
     954:	a7 01       	movw	r20, r14
     956:	96 01       	movw	r18, r12
     958:	0e 94 2c 12 	call	0x2458	; 0x2458 <__gesf2>
     95c:	18 16       	cp	r1, r24
     95e:	8c f4       	brge	.+34     	; 0x982 <ampo()+0x5c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:660
    ampov = 0.1 * analogRead(current);
     960:	8e e1       	ldi	r24, 0x1E	; 30
     962:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     966:	bc 01       	movw	r22, r24
     968:	99 0f       	add	r25, r25
     96a:	88 0b       	sbc	r24, r24
     96c:	99 0b       	sbc	r25, r25
     96e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     972:	2d ec       	ldi	r18, 0xCD	; 205
     974:	3c ec       	ldi	r19, 0xCC	; 204
     976:	4c ec       	ldi	r20, 0xCC	; 204
     978:	5d e3       	ldi	r21, 0x3D	; 61
     97a:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
     97e:	6b 01       	movw	r12, r22
     980:	7c 01       	movw	r14, r24
     982:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:658
  }
}

void ampo() {
float ampov;
for(int i=0; i<10; i++) {
     984:	c1 f6       	brne	.-80     	; 0x936 <ampo()+0x10>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:663
  if((0.1 * analogRead(current)) > ampov){
    ampov = 0.1 * analogRead(current);
    }
  }
currentload = ampov;
     986:	c7 01       	movw	r24, r14
     988:	b6 01       	movw	r22, r12
     98a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__fixsfsi>
     98e:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <currentload+0x1>
     992:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <currentload>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:664
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	08 95       	ret

000009a4 <OVo()>:
OVo():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:642
  }
}



void OVo() {
     9a4:	cf 92       	push	r12
     9a6:	df 92       	push	r13
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ca e0       	ldi	r28, 0x0A	; 10
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:644
for(int i=0; i<10; i++) {
  if((0.64 * analogRead(ROTPIN)) > routvoltage){
     9b4:	8b e1       	ldi	r24, 0x1B	; 27
     9b6:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     9ba:	bc 01       	movw	r22, r24
     9bc:	99 0f       	add	r25, r25
     9be:	88 0b       	sbc	r24, r24
     9c0:	99 0b       	sbc	r25, r25
     9c2:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     9c6:	2a e0       	ldi	r18, 0x0A	; 10
     9c8:	37 ed       	ldi	r19, 0xD7	; 215
     9ca:	43 e2       	ldi	r20, 0x23	; 35
     9cc:	5f e3       	ldi	r21, 0x3F	; 63
     9ce:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
     9d2:	6b 01       	movw	r12, r22
     9d4:	7c 01       	movw	r14, r24
     9d6:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <routvoltage>
     9da:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <routvoltage+0x1>
     9de:	07 2e       	mov	r0, r23
     9e0:	00 0c       	add	r0, r0
     9e2:	88 0b       	sbc	r24, r24
     9e4:	99 0b       	sbc	r25, r25
     9e6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	c7 01       	movw	r24, r14
     9f0:	b6 01       	movw	r22, r12
     9f2:	0e 94 2c 12 	call	0x2458	; 0x2458 <__gesf2>
     9f6:	18 16       	cp	r1, r24
     9f8:	ac f4       	brge	.+42     	; 0xa24 <OVo()+0x80>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:645
    routvoltage = 0.64 * analogRead(ROTPIN);
     9fa:	8b e1       	ldi	r24, 0x1B	; 27
     9fc:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     a00:	bc 01       	movw	r22, r24
     a02:	99 0f       	add	r25, r25
     a04:	88 0b       	sbc	r24, r24
     a06:	99 0b       	sbc	r25, r25
     a08:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     a0c:	2a e0       	ldi	r18, 0x0A	; 10
     a0e:	37 ed       	ldi	r19, 0xD7	; 215
     a10:	43 e2       	ldi	r20, 0x23	; 35
     a12:	5f e3       	ldi	r21, 0x3F	; 63
     a14:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
     a18:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__fixsfsi>
     a1c:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <routvoltage+0x1>
     a20:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <routvoltage>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:647
    }
  if((0.64 * analogRead(YOTPIN)) > youtvoltage){
     a24:	8c e1       	ldi	r24, 0x1C	; 28
     a26:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     a2a:	bc 01       	movw	r22, r24
     a2c:	99 0f       	add	r25, r25
     a2e:	88 0b       	sbc	r24, r24
     a30:	99 0b       	sbc	r25, r25
     a32:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     a36:	2a e0       	ldi	r18, 0x0A	; 10
     a38:	37 ed       	ldi	r19, 0xD7	; 215
     a3a:	43 e2       	ldi	r20, 0x23	; 35
     a3c:	5f e3       	ldi	r21, 0x3F	; 63
     a3e:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
     a42:	6b 01       	movw	r12, r22
     a44:	7c 01       	movw	r14, r24
     a46:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <youtvoltage>
     a4a:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <youtvoltage+0x1>
     a4e:	07 2e       	mov	r0, r23
     a50:	00 0c       	add	r0, r0
     a52:	88 0b       	sbc	r24, r24
     a54:	99 0b       	sbc	r25, r25
     a56:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     a5a:	9b 01       	movw	r18, r22
     a5c:	ac 01       	movw	r20, r24
     a5e:	c7 01       	movw	r24, r14
     a60:	b6 01       	movw	r22, r12
     a62:	0e 94 2c 12 	call	0x2458	; 0x2458 <__gesf2>
     a66:	18 16       	cp	r1, r24
     a68:	ac f4       	brge	.+42     	; 0xa94 <OVo()+0xf0>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:648
    youtvoltage = 0.64 * analogRead(YOTPIN);
     a6a:	8c e1       	ldi	r24, 0x1C	; 28
     a6c:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     a70:	bc 01       	movw	r22, r24
     a72:	99 0f       	add	r25, r25
     a74:	88 0b       	sbc	r24, r24
     a76:	99 0b       	sbc	r25, r25
     a78:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     a7c:	2a e0       	ldi	r18, 0x0A	; 10
     a7e:	37 ed       	ldi	r19, 0xD7	; 215
     a80:	43 e2       	ldi	r20, 0x23	; 35
     a82:	5f e3       	ldi	r21, 0x3F	; 63
     a84:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
     a88:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__fixsfsi>
     a8c:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <youtvoltage+0x1>
     a90:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <youtvoltage>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:650
    }
  if((0.64 * analogRead(BOTPIN)) > boutvoltage){
     a94:	8d e1       	ldi	r24, 0x1D	; 29
     a96:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     a9a:	bc 01       	movw	r22, r24
     a9c:	99 0f       	add	r25, r25
     a9e:	88 0b       	sbc	r24, r24
     aa0:	99 0b       	sbc	r25, r25
     aa2:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     aa6:	2a e0       	ldi	r18, 0x0A	; 10
     aa8:	37 ed       	ldi	r19, 0xD7	; 215
     aaa:	43 e2       	ldi	r20, 0x23	; 35
     aac:	5f e3       	ldi	r21, 0x3F	; 63
     aae:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
     ab2:	6b 01       	movw	r12, r22
     ab4:	7c 01       	movw	r14, r24
     ab6:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <boutvoltage>
     aba:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <boutvoltage+0x1>
     abe:	07 2e       	mov	r0, r23
     ac0:	00 0c       	add	r0, r0
     ac2:	88 0b       	sbc	r24, r24
     ac4:	99 0b       	sbc	r25, r25
     ac6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     aca:	9b 01       	movw	r18, r22
     acc:	ac 01       	movw	r20, r24
     ace:	c7 01       	movw	r24, r14
     ad0:	b6 01       	movw	r22, r12
     ad2:	0e 94 2c 12 	call	0x2458	; 0x2458 <__gesf2>
     ad6:	18 16       	cp	r1, r24
     ad8:	ac f4       	brge	.+42     	; 0xb04 <OVo()+0x160>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:651
    boutvoltage = 0.64 * analogRead(BOTPIN);
     ada:	8d e1       	ldi	r24, 0x1D	; 29
     adc:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     ae0:	bc 01       	movw	r22, r24
     ae2:	99 0f       	add	r25, r25
     ae4:	88 0b       	sbc	r24, r24
     ae6:	99 0b       	sbc	r25, r25
     ae8:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     aec:	2a e0       	ldi	r18, 0x0A	; 10
     aee:	37 ed       	ldi	r19, 0xD7	; 215
     af0:	43 e2       	ldi	r20, 0x23	; 35
     af2:	5f e3       	ldi	r21, 0x3F	; 63
     af4:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
     af8:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__fixsfsi>
     afc:	70 93 1f 02 	sts	0x021F, r23	; 0x80021f <boutvoltage+0x1>
     b00:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <boutvoltage>
     b04:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:643
}



void OVo() {
for(int i=0; i<10; i++) {
     b06:	09 f0       	breq	.+2      	; 0xb0a <OVo()+0x166>
     b08:	55 cf       	rjmp	.-342    	; 0x9b4 <OVo()+0x10>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:654
    }
  if((0.64 * analogRead(BOTPIN)) > boutvoltage){
    boutvoltage = 0.64 * analogRead(BOTPIN);
    }
  }
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	ff 90       	pop	r15
     b10:	ef 90       	pop	r14
     b12:	df 90       	pop	r13
     b14:	cf 90       	pop	r12
     b16:	08 95       	ret

00000b18 <IVo()>:
IVo():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:626
  IVo();
  OVo();
  ampo();
}

void IVo() {
     b18:	cf 92       	push	r12
     b1a:	df 92       	push	r13
     b1c:	ef 92       	push	r14
     b1e:	ff 92       	push	r15
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	ca e0       	ldi	r28, 0x0A	; 10
     b26:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:628
for(int i=0; i<10; i++) {
  if((0.64 * analogRead(RINPIN)) > rinvoltage){
     b28:	88 e1       	ldi	r24, 0x18	; 24
     b2a:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     b2e:	bc 01       	movw	r22, r24
     b30:	99 0f       	add	r25, r25
     b32:	88 0b       	sbc	r24, r24
     b34:	99 0b       	sbc	r25, r25
     b36:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     b3a:	2a e0       	ldi	r18, 0x0A	; 10
     b3c:	37 ed       	ldi	r19, 0xD7	; 215
     b3e:	43 e2       	ldi	r20, 0x23	; 35
     b40:	5f e3       	ldi	r21, 0x3F	; 63
     b42:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
     b46:	6b 01       	movw	r12, r22
     b48:	7c 01       	movw	r14, r24
     b4a:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <rinvoltage>
     b4e:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <rinvoltage+0x1>
     b52:	07 2e       	mov	r0, r23
     b54:	00 0c       	add	r0, r0
     b56:	88 0b       	sbc	r24, r24
     b58:	99 0b       	sbc	r25, r25
     b5a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     b5e:	9b 01       	movw	r18, r22
     b60:	ac 01       	movw	r20, r24
     b62:	c7 01       	movw	r24, r14
     b64:	b6 01       	movw	r22, r12
     b66:	0e 94 2c 12 	call	0x2458	; 0x2458 <__gesf2>
     b6a:	18 16       	cp	r1, r24
     b6c:	ac f4       	brge	.+42     	; 0xb98 <IVo()+0x80>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:629
    rinvoltage = 0.64 * analogRead(RINPIN);
     b6e:	88 e1       	ldi	r24, 0x18	; 24
     b70:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     b74:	bc 01       	movw	r22, r24
     b76:	99 0f       	add	r25, r25
     b78:	88 0b       	sbc	r24, r24
     b7a:	99 0b       	sbc	r25, r25
     b7c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     b80:	2a e0       	ldi	r18, 0x0A	; 10
     b82:	37 ed       	ldi	r19, 0xD7	; 215
     b84:	43 e2       	ldi	r20, 0x23	; 35
     b86:	5f e3       	ldi	r21, 0x3F	; 63
     b88:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
     b8c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__fixsfsi>
     b90:	70 93 9d 01 	sts	0x019D, r23	; 0x80019d <rinvoltage+0x1>
     b94:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <rinvoltage>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:631
    }
  if((0.64 * analogRead(YINPIN)) > yinvoltage){
     b98:	89 e1       	ldi	r24, 0x19	; 25
     b9a:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     b9e:	bc 01       	movw	r22, r24
     ba0:	99 0f       	add	r25, r25
     ba2:	88 0b       	sbc	r24, r24
     ba4:	99 0b       	sbc	r25, r25
     ba6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     baa:	2a e0       	ldi	r18, 0x0A	; 10
     bac:	37 ed       	ldi	r19, 0xD7	; 215
     bae:	43 e2       	ldi	r20, 0x23	; 35
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
     bb6:	6b 01       	movw	r12, r22
     bb8:	7c 01       	movw	r14, r24
     bba:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <yinvoltage>
     bbe:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <yinvoltage+0x1>
     bc2:	07 2e       	mov	r0, r23
     bc4:	00 0c       	add	r0, r0
     bc6:	88 0b       	sbc	r24, r24
     bc8:	99 0b       	sbc	r25, r25
     bca:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     bce:	9b 01       	movw	r18, r22
     bd0:	ac 01       	movw	r20, r24
     bd2:	c7 01       	movw	r24, r14
     bd4:	b6 01       	movw	r22, r12
     bd6:	0e 94 2c 12 	call	0x2458	; 0x2458 <__gesf2>
     bda:	18 16       	cp	r1, r24
     bdc:	ac f4       	brge	.+42     	; 0xc08 <IVo()+0xf0>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:632
    yinvoltage = 0.64 * analogRead(YINPIN);
     bde:	89 e1       	ldi	r24, 0x19	; 25
     be0:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     be4:	bc 01       	movw	r22, r24
     be6:	99 0f       	add	r25, r25
     be8:	88 0b       	sbc	r24, r24
     bea:	99 0b       	sbc	r25, r25
     bec:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     bf0:	2a e0       	ldi	r18, 0x0A	; 10
     bf2:	37 ed       	ldi	r19, 0xD7	; 215
     bf4:	43 e2       	ldi	r20, 0x23	; 35
     bf6:	5f e3       	ldi	r21, 0x3F	; 63
     bf8:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
     bfc:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__fixsfsi>
     c00:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <yinvoltage+0x1>
     c04:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <yinvoltage>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:634
    }
  if((0.64 * analogRead(BINPIN)) > binvoltage){
     c08:	8a e1       	ldi	r24, 0x1A	; 26
     c0a:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     c0e:	bc 01       	movw	r22, r24
     c10:	99 0f       	add	r25, r25
     c12:	88 0b       	sbc	r24, r24
     c14:	99 0b       	sbc	r25, r25
     c16:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     c1a:	2a e0       	ldi	r18, 0x0A	; 10
     c1c:	37 ed       	ldi	r19, 0xD7	; 215
     c1e:	43 e2       	ldi	r20, 0x23	; 35
     c20:	5f e3       	ldi	r21, 0x3F	; 63
     c22:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
     c26:	6b 01       	movw	r12, r22
     c28:	7c 01       	movw	r14, r24
     c2a:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <binvoltage>
     c2e:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <binvoltage+0x1>
     c32:	07 2e       	mov	r0, r23
     c34:	00 0c       	add	r0, r0
     c36:	88 0b       	sbc	r24, r24
     c38:	99 0b       	sbc	r25, r25
     c3a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     c3e:	9b 01       	movw	r18, r22
     c40:	ac 01       	movw	r20, r24
     c42:	c7 01       	movw	r24, r14
     c44:	b6 01       	movw	r22, r12
     c46:	0e 94 2c 12 	call	0x2458	; 0x2458 <__gesf2>
     c4a:	18 16       	cp	r1, r24
     c4c:	ac f4       	brge	.+42     	; 0xc78 <IVo()+0x160>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:635
    binvoltage = 0.64 * analogRead(BINPIN);
     c4e:	8a e1       	ldi	r24, 0x1A	; 26
     c50:	0e 94 89 01 	call	0x312	; 0x312 <analogRead>
     c54:	bc 01       	movw	r22, r24
     c56:	99 0f       	add	r25, r25
     c58:	88 0b       	sbc	r24, r24
     c5a:	99 0b       	sbc	r25, r25
     c5c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
     c60:	2a e0       	ldi	r18, 0x0A	; 10
     c62:	37 ed       	ldi	r19, 0xD7	; 215
     c64:	43 e2       	ldi	r20, 0x23	; 35
     c66:	5f e3       	ldi	r21, 0x3F	; 63
     c68:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsf3>
     c6c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__fixsfsi>
     c70:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <binvoltage+0x1>
     c74:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <binvoltage>
     c78:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:627
  OVo();
  ampo();
}

void IVo() {
for(int i=0; i<10; i++) {
     c7a:	09 f0       	breq	.+2      	; 0xc7e <IVo()+0x166>
     c7c:	55 cf       	rjmp	.-342    	; 0xb28 <IVo()+0x10>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:638
    }
  if((0.64 * analogRead(BINPIN)) > binvoltage){
    binvoltage = 0.64 * analogRead(BINPIN);
    }
  }
}
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	df 90       	pop	r13
     c88:	cf 90       	pop	r12
     c8a:	08 95       	ret

00000c8c <bdiffcheck()>:
bdiffcheck():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:346
    return false;
  }
}

bool bdiffcheck() { //(returns true if difference is more than set difference and runs motor)
  int dif = SETV - boutvoltage;
     c8c:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <SETV>
     c90:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <SETV+0x1>
     c94:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <boutvoltage>
     c98:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <boutvoltage+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:350
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     c9c:	28 1b       	sub	r18, r24
     c9e:	39 0b       	sbc	r19, r25
     ca0:	37 ff       	sbrs	r19, 7
     ca2:	03 c0       	rjmp	.+6      	; 0xcaa <bdiffcheck()+0x1e>
     ca4:	31 95       	neg	r19
     ca6:	21 95       	neg	r18
     ca8:	31 09       	sbc	r19, r1
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <DIFF>
     cb0:	50 91 a7 01 	lds	r21, 0x01A7	; 0x8001a7 <DIFF+0x1>
     cb4:	42 17       	cp	r20, r18
     cb6:	53 07       	cpc	r21, r19
     cb8:	0c f0       	brlt	.+2      	; 0xcbc <bdiffcheck()+0x30>
     cba:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:355
    return true;
  } else {
    return false;
  }
}
     cbc:	08 95       	ret

00000cbe <ydiffcheck()>:
ydiffcheck():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:334
    return false;
  }
}

bool ydiffcheck() { //(returns true if difference is more than set difference and runs motor)
  int dif = SETV - youtvoltage;
     cbe:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <SETV>
     cc2:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <SETV+0x1>
     cc6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <youtvoltage>
     cca:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <youtvoltage+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:338
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     cce:	28 1b       	sub	r18, r24
     cd0:	39 0b       	sbc	r19, r25
     cd2:	37 ff       	sbrs	r19, 7
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <ydiffcheck()+0x1e>
     cd6:	31 95       	neg	r19
     cd8:	21 95       	neg	r18
     cda:	31 09       	sbc	r19, r1
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <DIFF>
     ce2:	50 91 a7 01 	lds	r21, 0x01A7	; 0x8001a7 <DIFF+0x1>
     ce6:	42 17       	cp	r20, r18
     ce8:	53 07       	cpc	r21, r19
     cea:	0c f0       	brlt	.+2      	; 0xcee <ydiffcheck()+0x30>
     cec:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:343
    return true;
  } else {
    return false;
  }
}
     cee:	08 95       	ret

00000cf0 <rdiffcheck()>:
rdiffcheck():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:322
}


//Check Voltage Difference from Set Voltage
bool rdiffcheck() { //(returns true if difference is more than set difference and runs motor)
  int dif = SETV - routvoltage;
     cf0:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <SETV>
     cf4:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <SETV+0x1>
     cf8:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <routvoltage>
     cfc:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <routvoltage+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:326
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     d00:	28 1b       	sub	r18, r24
     d02:	39 0b       	sbc	r19, r25
     d04:	37 ff       	sbrs	r19, 7
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <rdiffcheck()+0x1e>
     d08:	31 95       	neg	r19
     d0a:	21 95       	neg	r18
     d0c:	31 09       	sbc	r19, r1
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <DIFF>
     d14:	50 91 a7 01 	lds	r21, 0x01A7	; 0x8001a7 <DIFF+0x1>
     d18:	42 17       	cp	r20, r18
     d1a:	53 07       	cpc	r21, r19
     d1c:	0c f0       	brlt	.+2      	; 0xd20 <rdiffcheck()+0x30>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:331
    return true;
  } else {
    return false;
  }
}
     d20:	08 95       	ret

00000d22 <currentok()>:
currentok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:312
  }
}

//Check If Current Load is lower than max current Set by Parameters
bool currentok() {
  if(currentload < OVL){
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	40 91 96 01 	lds	r20, 0x0196	; 0x800196 <currentload>
     d28:	50 91 97 01 	lds	r21, 0x0197	; 0x800197 <currentload+0x1>
     d2c:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <OVL>
     d30:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <OVL+0x1>
     d34:	42 17       	cp	r20, r18
     d36:	53 07       	cpc	r21, r19
     d38:	0c f0       	brlt	.+2      	; 0xd3c <currentok()+0x1a>
     d3a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:317
    return true;
  } else {
    return false;
  }
}
     d3c:	08 95       	ret

00000d3e <outputVok()>:
outputVok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:303
    return false;
  }
}
//Check If output voltage is within Low & High voltage Set by Parameters
bool outputVok() {
  if(routvoltage > OLV && routvoltage < OHV && youtvoltage > OLV && youtvoltage < OHV && boutvoltage > OLV && boutvoltage < OHV){
     d3e:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <routvoltage>
     d42:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <routvoltage+0x1>
     d46:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <OLV>
     d4a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <OLV+0x1>
     d4e:	84 17       	cp	r24, r20
     d50:	95 07       	cpc	r25, r21
     d52:	e4 f4       	brge	.+56     	; 0xd8c <outputVok()+0x4e>
     d54:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <OHV>
     d58:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <OHV+0x1>
     d5c:	42 17       	cp	r20, r18
     d5e:	53 07       	cpc	r21, r19
     d60:	ac f4       	brge	.+42     	; 0xd8c <outputVok()+0x4e>
     d62:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <youtvoltage>
     d66:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <youtvoltage+0x1>
     d6a:	84 17       	cp	r24, r20
     d6c:	95 07       	cpc	r25, r21
     d6e:	74 f4       	brge	.+28     	; 0xd8c <outputVok()+0x4e>
     d70:	42 17       	cp	r20, r18
     d72:	53 07       	cpc	r21, r19
     d74:	5c f4       	brge	.+22     	; 0xd8c <outputVok()+0x4e>
     d76:	40 91 1e 02 	lds	r20, 0x021E	; 0x80021e <boutvoltage>
     d7a:	50 91 1f 02 	lds	r21, 0x021F	; 0x80021f <boutvoltage+0x1>
     d7e:	84 17       	cp	r24, r20
     d80:	95 07       	cpc	r25, r21
     d82:	24 f4       	brge	.+8      	; 0xd8c <outputVok()+0x4e>
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	42 17       	cp	r20, r18
     d88:	53 07       	cpc	r21, r19
     d8a:	0c f0       	brlt	.+2      	; 0xd8e <outputVok()+0x50>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:306
    return true;
  } else {
    return false;
     d8c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:308
  }
}
     d8e:	08 95       	ret

00000d90 <inputVok()>:
inputVok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:295
}


//Check If input voltage is within Low & High voltage Set by Parameters
bool inputVok() {
  if(rinvoltage > ILV && rinvoltage < IHV && yinvoltage > ILV && yinvoltage < IHV && binvoltage > ILV && binvoltage < IHV){
     d90:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <rinvoltage>
     d94:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <rinvoltage+0x1>
     d98:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ILV>
     d9c:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ILV+0x1>
     da0:	84 17       	cp	r24, r20
     da2:	95 07       	cpc	r25, r21
     da4:	e4 f4       	brge	.+56     	; 0xdde <inputVok()+0x4e>
     da6:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <IHV>
     daa:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <IHV+0x1>
     dae:	42 17       	cp	r20, r18
     db0:	53 07       	cpc	r21, r19
     db2:	ac f4       	brge	.+42     	; 0xdde <inputVok()+0x4e>
     db4:	40 91 9a 01 	lds	r20, 0x019A	; 0x80019a <yinvoltage>
     db8:	50 91 9b 01 	lds	r21, 0x019B	; 0x80019b <yinvoltage+0x1>
     dbc:	84 17       	cp	r24, r20
     dbe:	95 07       	cpc	r25, r21
     dc0:	74 f4       	brge	.+28     	; 0xdde <inputVok()+0x4e>
     dc2:	42 17       	cp	r20, r18
     dc4:	53 07       	cpc	r21, r19
     dc6:	5c f4       	brge	.+22     	; 0xdde <inputVok()+0x4e>
     dc8:	40 91 98 01 	lds	r20, 0x0198	; 0x800198 <binvoltage>
     dcc:	50 91 99 01 	lds	r21, 0x0199	; 0x800199 <binvoltage+0x1>
     dd0:	84 17       	cp	r24, r20
     dd2:	95 07       	cpc	r25, r21
     dd4:	24 f4       	brge	.+8      	; 0xdde <inputVok()+0x4e>
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	42 17       	cp	r20, r18
     dda:	53 07       	cpc	r21, r19
     ddc:	0c f0       	brlt	.+2      	; 0xde0 <inputVok()+0x50>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:298
    return true;
  } else {
    return false;
     dde:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:300
  }
}
     de0:	08 95       	ret

00000de2 <checksystem()>:
checksystem():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:419
}

//Check if Input,Output Voltage and current is within the set range

bool checksystem() {
  if(inputVok()) {
     de2:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
     de6:	88 23       	and	r24, r24
     de8:	29 f0       	breq	.+10     	; 0xdf4 <checksystem()+0x12>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:420
    if(outputVok()) {
     dea:	0e 94 9f 06 	call	0xd3e	; 0xd3e <outputVok()>
     dee:	81 11       	cpse	r24, r1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:421
      if(currentok()){
     df0:	0c 94 91 06 	jmp	0xd22	; 0xd22 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:426
            return true;
      } else { return false; }
    } else { return false; }
  } else { return false; }
}
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	08 95       	ret

00000df8 <pulseIn.constprop.13>:
pulseIn():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:33
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	48 2f       	mov	r20, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:38
{
  // cache the port and bit of the pin in order to speed up the
  // pulse width measuring loop and achieve finer resolution.  calling
  // digitalRead() instead yields much coarser resolution.
  uint8_t bit = digitalPinToBitMask(pin);
     dfe:	e5 e8       	ldi	r30, 0x85	; 133
     e00:	f1 e0       	ldi	r31, 0x01	; 1
     e02:	64 91       	lpm	r22, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:39
  uint8_t port = digitalPinToPort(pin);
     e04:	e5 e6       	ldi	r30, 0x65	; 101
     e06:	f1 e0       	ldi	r31, 0x01	; 1
     e08:	e4 91       	lpm	r30, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:40
  uint8_t stateMask = (state ? bit : 0);
     e0a:	81 11       	cpse	r24, r1
     e0c:	46 2f       	mov	r20, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:46

  // convert the timeout from microseconds to a number of times through
  // the initial loop; it takes approximately 16 clock cycles per iteration
  unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

  unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	ee 0f       	add	r30, r30
     e12:	ff 1f       	adc	r31, r31
     e14:	e0 5c       	subi	r30, 0xC0	; 192
     e16:	fe 4f       	sbci	r31, 0xFE	; 254
     e18:	85 91       	lpm	r24, Z+
     e1a:	94 91       	lpm	r25, Z
     e1c:	0e e1       	ldi	r16, 0x1E	; 30
     e1e:	10 e0       	ldi	r17, 0x00	; 0
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	0e 94 4a 0a 	call	0x1494	; 0x1494 <countPulseASM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:49

  // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
  if (width)
     e28:	61 15       	cp	r22, r1
     e2a:	71 05       	cpc	r23, r1
     e2c:	81 05       	cpc	r24, r1
     e2e:	91 05       	cpc	r25, r1
     e30:	91 f0       	breq	.+36     	; 0xe56 <pulseIn.constprop.13+0x5e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:50
    return clockCyclesToMicroseconds(width * 16 + 16);
     e32:	6f 5f       	subi	r22, 0xFF	; 255
     e34:	7f 4f       	sbci	r23, 0xFF	; 255
     e36:	8f 4f       	sbci	r24, 0xFF	; 255
     e38:	9f 4f       	sbci	r25, 0xFF	; 255
     e3a:	24 e0       	ldi	r18, 0x04	; 4
     e3c:	66 0f       	add	r22, r22
     e3e:	77 1f       	adc	r23, r23
     e40:	88 1f       	adc	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	2a 95       	dec	r18
     e46:	d1 f7       	brne	.-12     	; 0xe3c <pulseIn.constprop.13+0x44>
     e48:	33 e0       	ldi	r19, 0x03	; 3
     e4a:	96 95       	lsr	r25
     e4c:	87 95       	ror	r24
     e4e:	77 95       	ror	r23
     e50:	67 95       	ror	r22
     e52:	3a 95       	dec	r19
     e54:	d1 f7       	brne	.-12     	; 0xe4a <pulseIn.constprop.13+0x52>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:53
  else
    return 0;
}
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	08 95       	ret

00000e5c <displayVar(int, int) [clone .constprop.11]>:
displayVar():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:915

void done() {display("donE", 0);}

//Display INT Variable

void displayVar(int var, int deci) {
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	00 d0       	rcall	.+0      	; 0xe66 <displayVar(int, int) [clone .constprop.11]+0xa>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <displayVar(int, int) [clone .constprop.11]+0xc>
     e68:	1f 92       	push	r1
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:917
  char buffer[5];
  sprintf(buffer, "%4d", var);
     e6e:	9f 93       	push	r25
     e70:	8f 93       	push	r24
     e72:	84 e1       	ldi	r24, 0x14	; 20
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	9f 93       	push	r25
     e78:	8f 93       	push	r24
     e7a:	8e 01       	movw	r16, r28
     e7c:	0f 5f       	subi	r16, 0xFF	; 255
     e7e:	1f 4f       	sbci	r17, 0xFF	; 255
     e80:	1f 93       	push	r17
     e82:	0f 93       	push	r16
     e84:	0e 94 5f 14 	call	0x28be	; 0x28be <sprintf>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:918
  display1.DisplayString(buffer, deci);
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	c8 01       	movw	r24, r16
     e8c:	0e 94 a6 01 	call	0x34c	; 0x34c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]>
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:919
}
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	08 95       	ret

00000eb0 <menuIHV() [clone .part.8]>:
_Z7menuIHVv.part.8():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:677

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
     eb0:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <enc>
     eb4:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <enc+0x1>
     eb8:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <displayVar(int, int) [clone .constprop.11]>

00000ebc <String::reserve(unsigned int)>:
reserve():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:146
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	ec 01       	movw	r28, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
     ec6:	88 81       	ld	r24, Y
     ec8:	99 81       	ldd	r25, Y+1	; 0x01
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	59 f0       	breq	.+22     	; 0xee4 <String::reserve(unsigned int)+0x28>
     ece:	2a 81       	ldd	r18, Y+2	; 0x02
     ed0:	3b 81       	ldd	r19, Y+3	; 0x03
     ed2:	26 17       	cp	r18, r22
     ed4:	37 07       	cpc	r19, r23
     ed6:	30 f0       	brcs	.+12     	; 0xee4 <String::reserve(unsigned int)+0x28>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	08 95       	ret
     ee4:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     ee6:	6f 5f       	subi	r22, 0xFF	; 255
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	0e 94 5f 13 	call	0x26be	; 0x26be <realloc>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	59 f0       	breq	.+22     	; 0xf08 <String::reserve(unsigned int)+0x4c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
     ef2:	99 83       	std	Y+1, r25	; 0x01
     ef4:	88 83       	st	Y, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
     ef6:	1b 83       	std	Y+3, r17	; 0x03
     ef8:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     efa:	2c 81       	ldd	r18, Y+4	; 0x04
     efc:	3d 81       	ldd	r19, Y+5	; 0x05
     efe:	23 2b       	or	r18, r19
     f00:	59 f7       	brne	.-42     	; 0xed8 <String::reserve(unsigned int)+0x1c>
     f02:	fc 01       	movw	r30, r24
     f04:	10 82       	st	Z, r1
     f06:	e8 cf       	rjmp	.-48     	; 0xed8 <String::reserve(unsigned int)+0x1c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:152
    return 1;
  }
  return 0;
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	e7 cf       	rjmp	.-50     	; 0xeda <String::reserve(unsigned int)+0x1e>

00000f0c <String::invalidate()>:
invalidate():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	ec 01       	movw	r28, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
     f12:	88 81       	ld	r24, Y
     f14:	99 81       	ldd	r25, Y+1	; 0x01
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	11 f0       	breq	.+4      	; 0xf1e <String::invalidate()+0x12>
     f1a:	0e 94 d6 12 	call	0x25ac	; 0x25ac <free>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
     f1e:	19 82       	std	Y+1, r1	; 0x01
     f20:	18 82       	st	Y, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
     f22:	1d 82       	std	Y+5, r1	; 0x05
     f24:	1c 82       	std	Y+4, r1	; 0x04
     f26:	1b 82       	std	Y+3, r1	; 0x03
     f28:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:143
}
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <String::copy(char const*, unsigned int)>:
copy():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	ec 01       	movw	r28, r24
     f3e:	7b 01       	movw	r14, r22
     f40:	8a 01       	movw	r16, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
  if (!reserve(length)) {
     f42:	ba 01       	movw	r22, r20
     f44:	0e 94 5e 07 	call	0xebc	; 0xebc <String::reserve(unsigned int)>
     f48:	81 11       	cpse	r24, r1
     f4a:	0b c0       	rjmp	.+22     	; 0xf62 <String::copy(char const*, unsigned int)+0x32>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
     f4c:	ce 01       	movw	r24, r28
     f4e:	0e 94 86 07 	call	0xf0c	; 0xf0c <String::invalidate()>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:179
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
     f52:	ce 01       	movw	r24, r28
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	ff 90       	pop	r15
     f5e:	ef 90       	pop	r14
     f60:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     f62:	1d 83       	std	Y+5, r17	; 0x05
     f64:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
     f66:	b7 01       	movw	r22, r14
     f68:	88 81       	ld	r24, Y
     f6a:	99 81       	ldd	r25, Y+1	; 0x01
     f6c:	0e 94 49 14 	call	0x2892	; 0x2892 <strcpy>
     f70:	f0 cf       	rjmp	.-32     	; 0xf52 <String::copy(char const*, unsigned int)+0x22>

00000f72 <String::String(char const*)>:
_ZN6String4initEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     f72:	fc 01       	movw	r30, r24
     f74:	11 82       	std	Z+1, r1	; 0x01
     f76:	10 82       	st	Z, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
     f78:	13 82       	std	Z+3, r1	; 0x03
     f7a:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
     f7c:	15 82       	std	Z+5, r1	; 0x05
     f7e:	14 82       	std	Z+4, r1	; 0x04
__base_ctor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
     f80:	fb 01       	movw	r30, r22
     f82:	01 90       	ld	r0, Z+
     f84:	00 20       	and	r0, r0
     f86:	e9 f7       	brne	.-6      	; 0xf82 <String::String(char const*)+0x10>
     f88:	31 97       	sbiw	r30, 0x01	; 1
     f8a:	af 01       	movw	r20, r30
     f8c:	46 1b       	sub	r20, r22
     f8e:	57 0b       	sbc	r21, r23
     f90:	0c 94 98 07 	jmp	0xf30	; 0xf30 <String::copy(char const*, unsigned int)>

00000f94 <String::~String()>:
__base_dtor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
     f94:	fc 01       	movw	r30, r24
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <free>

00000f9e <display(String, int) [clone .constprop.6]>:
display():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:969
  }
}

//Display String Variable

void display(String str, int deci) {
     f9e:	af 92       	push	r10
     fa0:	bf 92       	push	r11
     fa2:	cf 92       	push	r12
     fa4:	df 92       	push	r13
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	28 97       	sbiw	r28, 0x08	; 8
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	8c 01       	movw	r16, r24
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:980

  int str_len = str.length() + 1;
  char data[str_len];
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
}
     fc4:	cd b6       	in	r12, 0x3d	; 61
     fc6:	de b6       	in	r13, 0x3e	; 62
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:971

//Display String Variable

void display(String str, int deci) {
  int strl = str.length();
  if(strl < 4) {
     fc8:	fc 01       	movw	r30, r24
     fca:	84 81       	ldd	r24, Z+4	; 0x04
     fcc:	95 81       	ldd	r25, Z+5	; 0x05
     fce:	04 97       	sbiw	r24, 0x04	; 4
     fd0:	0c f0       	brlt	.+2      	; 0xfd4 <display(String, int) [clone .constprop.6]+0x36>
     fd2:	4a c0       	rjmp	.+148    	; 0x1068 <display(String, int) [clone .constprop.6]+0xca>
_ZN6String4initEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     fd4:	1a 82       	std	Y+2, r1	; 0x02
     fd6:	19 82       	std	Y+1, r1	; 0x01
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
     fd8:	1c 82       	std	Y+4, r1	; 0x04
     fda:	1b 82       	std	Y+3, r1	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
     fdc:	1e 82       	std	Y+6, r1	; 0x06
     fde:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:63

String::String(char c)
{
  init();
  char buf[2];
  buf[0] = c;
     fe0:	80 e1       	ldi	r24, 0x10	; 16
     fe2:	8f 83       	std	Y+7, r24	; 0x07
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:64
  buf[1] = 0;
     fe4:	18 86       	std	Y+8, r1	; 0x08
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
     fe6:	be 01       	movw	r22, r28
     fe8:	69 5f       	subi	r22, 0xF9	; 249
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	fb 01       	movw	r30, r22
     fee:	01 90       	ld	r0, Z+
     ff0:	00 20       	and	r0, r0
     ff2:	e9 f7       	brne	.-6      	; 0xfee <display(String, int) [clone .constprop.6]+0x50>
     ff4:	31 97       	sbiw	r30, 0x01	; 1
     ff6:	af 01       	movw	r20, r30
     ff8:	46 1b       	sub	r20, r22
     ffa:	57 0b       	sbc	r21, r23
     ffc:	ce 01       	movw	r24, r28
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	0e 94 98 07 	call	0xf30	; 0xf30 <String::copy(char const*, unsigned int)>
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1004:	f8 01       	movw	r30, r16
    1006:	a0 80       	ld	r10, Z
    1008:	b1 80       	ldd	r11, Z+1	; 0x01
concat():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
    100a:	a1 14       	cp	r10, r1
    100c:	b1 04       	cpc	r11, r1
    100e:	09 f4       	brne	.+2      	; 0x1012 <display(String, int) [clone .constprop.6]+0x74>
    1010:	5d c0       	rjmp	.+186    	; 0x10cc <display(String, int) [clone .constprop.6]+0x12e>
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1012:	e4 80       	ldd	r14, Z+4	; 0x04
    1014:	f5 80       	ldd	r15, Z+5	; 0x05
concat():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
    1016:	e1 14       	cp	r14, r1
    1018:	f1 04       	cpc	r15, r1
    101a:	b9 f0       	breq	.+46     	; 0x104a <display(String, int) [clone .constprop.6]+0xac>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    101c:	8d 81       	ldd	r24, Y+5	; 0x05
    101e:	9e 81       	ldd	r25, Y+6	; 0x06
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    1024:	b7 01       	movw	r22, r14
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	0e 94 5e 07 	call	0xebc	; 0xebc <String::reserve(unsigned int)>
    102e:	88 23       	and	r24, r24
    1030:	09 f4       	brne	.+2      	; 0x1034 <display(String, int) [clone .constprop.6]+0x96>
    1032:	4c c0       	rjmp	.+152    	; 0x10cc <display(String, int) [clone .constprop.6]+0x12e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:269
  strcpy(buffer + len, cstr);
    1034:	29 81       	ldd	r18, Y+1	; 0x01
    1036:	3a 81       	ldd	r19, Y+2	; 0x02
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	b5 01       	movw	r22, r10
    103e:	82 0f       	add	r24, r18
    1040:	93 1f       	adc	r25, r19
    1042:	0e 94 49 14 	call	0x2892	; 0x2892 <strcpy>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:270
  len = newlen;
    1046:	fe 82       	std	Y+6, r15	; 0x06
    1048:	ed 82       	std	Y+5, r14	; 0x05
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:218

String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
    104a:	69 81       	ldd	r22, Y+1	; 0x01
    104c:	7a 81       	ldd	r23, Y+2	; 0x02
    104e:	61 15       	cp	r22, r1
    1050:	71 05       	cpc	r23, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <display(String, int) [clone .constprop.6]+0xb8>
    1054:	40 c0       	rjmp	.+128    	; 0x10d6 <display(String, int) [clone .constprop.6]+0x138>
    1056:	4d 81       	ldd	r20, Y+5	; 0x05
    1058:	5e 81       	ldd	r21, Y+6	; 0x06
    105a:	c8 01       	movw	r24, r16
    105c:	0e 94 98 07 	call	0xf30	; 0xf30 <String::copy(char const*, unsigned int)>
_ZN15StringSumHelperD2Ev():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
    1060:	ce 01       	movw	r24, r28
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
    1068:	f8 01       	movw	r30, r16
    106a:	e4 80       	ldd	r14, Z+4	; 0x04
    106c:	f5 80       	ldd	r15, Z+5	; 0x05
display():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:976
    //char16 = no display on screen
    str = char(16) + str;
  }

  int str_len = str.length() + 1;
    106e:	c7 01       	movw	r24, r14
    1070:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:977
  char data[str_len];
    1072:	2d b7       	in	r18, 0x3d	; 61
    1074:	3e b7       	in	r19, 0x3e	; 62
    1076:	28 1b       	sub	r18, r24
    1078:	39 0b       	sbc	r19, r25
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	3e bf       	out	0x3e, r19	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	2d bf       	out	0x3d, r18	; 61
    1084:	ed b7       	in	r30, 0x3d	; 61
    1086:	fe b7       	in	r31, 0x3e	; 62
    1088:	31 96       	adiw	r30, 0x01	; 1
    108a:	5f 01       	movw	r10, r30
getBytes():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:539
  return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
  if (!bufsize || !buf) return;
    108c:	89 2b       	or	r24, r25
    108e:	21 f0       	breq	.+8      	; 0x1098 <display(String, int) [clone .constprop.6]+0xfa>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:540
  if (index >= len) {
    1090:	e1 14       	cp	r14, r1
    1092:	f1 04       	cpc	r15, r1
    1094:	21 f5       	brne	.+72     	; 0x10de <display(String, int) [clone .constprop.6]+0x140>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:547
    return;
  }
  unsigned int n = bufsize - 1;
  if (n > len - index) n = len - index;
  strncpy((char *)buf, buffer + index, n);
  buf[n] = 0;
    1096:	10 82       	st	Z, r1
display():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:979
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	c5 01       	movw	r24, r10
    109c:	0e 94 a6 01 	call	0x34c	; 0x34c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.12]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:980
}
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de be       	out	0x3e, r13	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd be       	out	0x3d, r12	; 61
    10aa:	28 96       	adiw	r28, 0x08	; 8
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	df 90       	pop	r13
    10c4:	cf 90       	pop	r12
    10c6:	bf 90       	pop	r11
    10c8:	af 90       	pop	r10
    10ca:	08 95       	ret
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    10cc:	ce 01       	movw	r24, r28
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	0e 94 86 07 	call	0xf0c	; 0xf0c <String::invalidate()>
    10d4:	ba cf       	rjmp	.-140    	; 0x104a <display(String, int) [clone .constprop.6]+0xac>
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:219
String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
  else invalidate();
    10d6:	c8 01       	movw	r24, r16
    10d8:	0e 94 86 07 	call	0xf0c	; 0xf0c <String::invalidate()>
    10dc:	c1 cf       	rjmp	.-126    	; 0x1060 <display(String, int) [clone .constprop.6]+0xc2>
getBytes():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:546
    buf[0] = 0;
    return;
  }
  unsigned int n = bufsize - 1;
  if (n > len - index) n = len - index;
  strncpy((char *)buf, buffer + index, n);
    10de:	f8 01       	movw	r30, r16
    10e0:	60 81       	ld	r22, Z
    10e2:	71 81       	ldd	r23, Z+1	; 0x01
    10e4:	a7 01       	movw	r20, r14
    10e6:	c5 01       	movw	r24, r10
    10e8:	0e 94 50 14 	call	0x28a0	; 0x28a0 <strncpy>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:547
  buf[n] = 0;
    10ec:	f5 01       	movw	r30, r10
    10ee:	ee 0d       	add	r30, r14
    10f0:	ff 1d       	adc	r31, r15
    10f2:	d1 cf       	rjmp	.-94     	; 0x1096 <display(String, int) [clone .constprop.6]+0xf8>

000010f4 <updateScreenData(bool) [clone .part.7]>:
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:447
  }
}

//Update Run Mode Screen

void updateScreenData(bool status) {
    10f4:	ff 92       	push	r15
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <updateScreenData(bool) [clone .part.7]+0xc>
    1100:	00 d0       	rcall	.+0      	; 0x1102 <updateScreenData(bool) [clone .part.7]+0xe>
    1102:	00 d0       	rcall	.+0      	; 0x1104 <updateScreenData(bool) [clone .part.7]+0x10>
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	f8 2e       	mov	r15, r24
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:450
  //uncomment !mode and comment !read(setupPin) if setupPin is not being used
  if(!mode/*!read(setupPin)*/){
    if(!resetrefresh){
    110a:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <resetrefresh>
    110e:	81 11       	cpse	r24, r1
    1110:	07 c0       	rjmp	.+14     	; 0x1120 <updateScreenData(bool) [clone .part.7]+0x2c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:451
      refresh.reset();
    1112:	8b eb       	ldi	r24, 0xBB	; 187
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:452
      resetrefresh = true;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <resetrefresh>
    1120:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <alarmOnce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:454
    }
    if(!status && !alarmOnce){
    1124:	f1 10       	cpse	r15, r1
    1126:	32 c1       	rjmp	.+612    	; 0x138c <updateScreenData(bool) [clone .part.7]+0x298>
    1128:	81 11       	cpse	r24, r1
    112a:	03 c0       	rjmp	.+6      	; 0x1132 <updateScreenData(bool) [clone .part.7]+0x3e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:455
      alarmOnce = true;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <alarmOnce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:462
    }
    if(status && alarmOnce){
      alarmOnce = false;
      menu == 0;
    }
    if(refresh.triggered()){
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	8b eb       	ldi	r24, 0xBB	; 187
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
    113c:	88 23       	and	r24, r24
    113e:	e1 f0       	breq	.+56     	; 0x1178 <updateScreenData(bool) [clone .part.7]+0x84>
    1140:	00 91 9e 01 	lds	r16, 0x019E	; 0x80019e <menu>
    1144:	10 91 9f 01 	lds	r17, 0x019F	; 0x80019f <menu+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:464

      OVo();
    1148:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <OVo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:465
      IVo();
    114c:	0e 94 8c 05 	call	0xb18	; 0xb18 <IVo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:466
      ampo();
    1150:	0e 94 93 04 	call	0x926	; 0x926 <ampo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:469


      switch (menu)
    1154:	02 30       	cpi	r16, 0x02	; 2
    1156:	11 05       	cpc	r17, r1
    1158:	09 f4       	brne	.+2      	; 0x115c <updateScreenData(bool) [clone .part.7]+0x68>
    115a:	66 c0       	rjmp	.+204    	; 0x1228 <updateScreenData(bool) [clone .part.7]+0x134>
    115c:	0c f0       	brlt	.+2      	; 0x1160 <updateScreenData(bool) [clone .part.7]+0x6c>
    115e:	2d c0       	rjmp	.+90     	; 0x11ba <updateScreenData(bool) [clone .part.7]+0xc6>
    1160:	01 2b       	or	r16, r17
    1162:	09 f4       	brne	.+2      	; 0x1166 <updateScreenData(bool) [clone .part.7]+0x72>
    1164:	5e c0       	rjmp	.+188    	; 0x1222 <updateScreenData(bool) [clone .part.7]+0x12e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:486
          ampo();
          break;
        default:
          break;
      }
      menu++;
    1166:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <menu>
    116a:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <menu+0x1>
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <menu+0x1>
    1174:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <menu>
    1178:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <menu>
    117c:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <menu+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:491
    }

    //Show Error if Available
    
    if(!status && menu == -1){
    1180:	ff 20       	and	r15, r15
    1182:	09 f4       	brne	.+2      	; 0x1186 <updateScreenData(bool) [clone .part.7]+0x92>
    1184:	57 c0       	rjmp	.+174    	; 0x1234 <updateScreenData(bool) [clone .part.7]+0x140>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:507
          display("ALOL", 0);
        }
      }
    }

    switch (menu)
    1186:	e2 31       	cpi	r30, 0x12	; 18
    1188:	f1 05       	cpc	r31, r1
    118a:	08 f0       	brcs	.+2      	; 0x118e <updateScreenData(bool) [clone .part.7]+0x9a>
    118c:	8c c0       	rjmp	.+280    	; 0x12a6 <updateScreenData(bool) [clone .part.7]+0x1b2>
    118e:	e5 53       	subi	r30, 0x35	; 53
    1190:	f7 4f       	sbci	r31, 0xF7	; 247
    1192:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__tablejump2__>
    1196:	5f 09       	sbc	r21, r15
    1198:	6e 09       	sbc	r22, r14
    119a:	71 09       	sbc	r23, r1
    119c:	78 09       	sbc	r23, r8
    119e:	7b 09       	sbc	r23, r11
    11a0:	80 09       	sbc	r24, r0
    11a2:	83 09       	sbc	r24, r3
    11a4:	88 09       	sbc	r24, r8
    11a6:	8b 09       	sbc	r24, r11
    11a8:	90 09       	sbc	r25, r0
    11aa:	93 09       	sbc	r25, r3
    11ac:	98 09       	sbc	r25, r8
    11ae:	9b 09       	sbc	r25, r11
    11b0:	a0 09       	sbc	r26, r0
    11b2:	a3 09       	sbc	r26, r3
    11b4:	a8 09       	sbc	r26, r8
    11b6:	ab 09       	sbc	r26, r11
    11b8:	b8 09       	sbc	r27, r8
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:469
      OVo();
      IVo();
      ampo();


      switch (menu)
    11ba:	04 30       	cpi	r16, 0x04	; 4
    11bc:	11 05       	cpc	r17, r1
    11be:	b9 f1       	breq	.+110    	; 0x122e <updateScreenData(bool) [clone .part.7]+0x13a>
    11c0:	06 30       	cpi	r16, 0x06	; 6
    11c2:	11 05       	cpc	r17, r1
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <updateScreenData(bool) [clone .part.7]+0xd4>
    11c6:	cf cf       	rjmp	.-98     	; 0x1166 <updateScreenData(bool) [clone .part.7]+0x72>
checkhz():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:286
//Checks the wavelenght of the Sine wave to calculate the frequency
//ontime is the time that sinewave stays Positive or above the 0v Threshold
//offtime is the time that sinewave stays negative or below the 0v Threshold
void checkhz() {
  //calculates the pulse width in milliseconds //timesout after 60ms to avoid blocking other code if no input is detected!
  ontime = pulseIn(hz, HIGH, 60);
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <pulseIn.constprop.13>
    11ce:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <__data_end>
    11d2:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <__data_end+0x1>
    11d6:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__data_end+0x2>
    11da:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <__data_end+0x3>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:287
  offtime = pulseIn(hz, LOW, 60);
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <pulseIn.constprop.13>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:289
  //Calculates the Frequency by dividing the ontime and offtime with 1 sec time (or 1000000 ms)
  freq = 1000000.0 / (ontime + offtime);//(ontime + offtime);
    11e4:	00 91 8e 01 	lds	r16, 0x018E	; 0x80018e <__data_end>
    11e8:	10 91 8f 01 	lds	r17, 0x018F	; 0x80018f <__data_end+0x1>
    11ec:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <__data_end+0x2>
    11f0:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <__data_end+0x3>
    11f4:	60 0f       	add	r22, r16
    11f6:	71 1f       	adc	r23, r17
    11f8:	82 1f       	adc	r24, r18
    11fa:	93 1f       	adc	r25, r19
    11fc:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatsisf>
    1200:	9b 01       	movw	r18, r22
    1202:	ac 01       	movw	r20, r24
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	74 e2       	ldi	r23, 0x24	; 36
    1208:	84 e7       	ldi	r24, 0x74	; 116
    120a:	99 e4       	ldi	r25, 0x49	; 73
    120c:	0e 94 84 11 	call	0x2308	; 0x2308 <__divsf3>
    1210:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <freq>
    1214:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <freq+0x1>
    1218:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <freq+0x2>
    121c:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <freq+0x3>
    1220:	a2 cf       	rjmp	.-188    	; 0x1166 <updateScreenData(bool) [clone .part.7]+0x72>
_Z16updateScreenDatab.part.7():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:475
      {
        case 6:
          checkhz();
          break;
        case 0:
          IVo();
    1222:	0e 94 8c 05 	call	0xb18	; 0xb18 <IVo()>
    1226:	9f cf       	rjmp	.-194    	; 0x1166 <updateScreenData(bool) [clone .part.7]+0x72>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:478
          break;
        case 2:
          OVo();
    1228:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <OVo()>
    122c:	9c cf       	rjmp	.-200    	; 0x1166 <updateScreenData(bool) [clone .part.7]+0x72>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:481
          break;
        case 4:
          ampo();
    122e:	0e 94 93 04 	call	0x926	; 0x926 <ampo()>
    1232:	99 cf       	rjmp	.-206    	; 0x1166 <updateScreenData(bool) [clone .part.7]+0x72>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:491
      menu++;
    }

    //Show Error if Available
    
    if(!status && menu == -1){
    1234:	ef 3f       	cpi	r30, 0xFF	; 255
    1236:	fe 07       	cpc	r31, r30
    1238:	09 f0       	breq	.+2      	; 0x123c <updateScreenData(bool) [clone .part.7]+0x148>
    123a:	a5 cf       	rjmp	.-182    	; 0x1186 <updateScreenData(bool) [clone .part.7]+0x92>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:492
      if(!inputVok() && !outputVok() && !currentok()){
    123c:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
    1240:	18 2f       	mov	r17, r24
    1242:	0e 94 9f 06 	call	0xd3e	; 0xd3e <outputVok()>
    1246:	11 11       	cpse	r17, r1
    1248:	16 c0       	rjmp	.+44     	; 0x1276 <updateScreenData(bool) [clone .part.7]+0x182>
    124a:	81 11       	cpse	r24, r1
    124c:	06 c0       	rjmp	.+12     	; 0x125a <updateScreenData(bool) [clone .part.7]+0x166>
    124e:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:493
        display("ALAL", 0);
    1252:	68 e1       	ldi	r22, 0x18	; 24
    1254:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:492
    }

    //Show Error if Available
    
    if(!status && menu == -1){
      if(!inputVok() && !outputVok() && !currentok()){
    1256:	88 23       	and	r24, r24
    1258:	a1 f1       	breq	.+104    	; 0x12c2 <updateScreenData(bool) [clone .part.7]+0x1ce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:496
        display("ALAL", 0);
      } else {
        if(!inputVok()){
          display("ALIn", 0);
    125a:	6d e1       	ldi	r22, 0x1D	; 29
    125c:	71 e0       	ldi	r23, 0x01	; 1
    125e:	ce 01       	movw	r24, r28
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	0e 94 b9 07 	call	0xf72	; 0xf72 <String::String(char const*)>
    1266:	ce 01       	movw	r24, r28
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <display(String, int) [clone .constprop.6]>
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:498
        }
        if(!outputVok()){
    1276:	0e 94 9f 06 	call	0xd3e	; 0xd3e <outputVok()>
    127a:	81 11       	cpse	r24, r1
    127c:	0e c0       	rjmp	.+28     	; 0x129a <updateScreenData(bool) [clone .part.7]+0x1a6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:499
          display("ALOt", 0);
    127e:	62 e2       	ldi	r22, 0x22	; 34
    1280:	71 e0       	ldi	r23, 0x01	; 1
    1282:	ce 01       	movw	r24, r28
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	0e 94 b9 07 	call	0xf72	; 0xf72 <String::String(char const*)>
    128a:	ce 01       	movw	r24, r28
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <display(String, int) [clone .constprop.6]>
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:501
        }
        if(!currentok()){
    129a:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:502
          display("ALOL", 0);
    129e:	67 e2       	ldi	r22, 0x27	; 39
    12a0:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:501
          display("ALIn", 0);
        }
        if(!outputVok()){
          display("ALOt", 0);
        }
        if(!currentok()){
    12a2:	88 23       	and	r24, r24
    12a4:	71 f0       	breq	.+28     	; 0x12c2 <updateScreenData(bool) [clone .part.7]+0x1ce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:600
      } else {
        menu = -1;
      }
    }*/
  }
}
    12a6:	26 96       	adiw	r28, 0x06	; 6
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	08 95       	ret
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:510
    }

    switch (menu)
    {
    case 0:
      display("noor", 0);
    12be:	6c e2       	ldi	r22, 0x2C	; 44
    12c0:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:555
      break;
    case 14:
      displayVar(currentload, 0);
      break;
    case 15:
      display("FrEq", 0);
    12c2:	ce 01       	movw	r24, r28
    12c4:	01 96       	adiw	r24, 0x01	; 1
    12c6:	0e 94 b9 07 	call	0xf72	; 0xf72 <String::String(char const*)>
    12ca:	ce 01       	movw	r24, r28
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	0e 94 cf 07 	call	0xf9e	; 0xf9e <display(String, int) [clone .constprop.6]>
    12d2:	ce 01       	movw	r24, r28
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
    12da:	e5 cf       	rjmp	.-54     	; 0x12a6 <updateScreenData(bool) [clone .part.7]+0x1b2>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:513
    {
    case 0:
      display("noor", 0);
      break;
    case 1:
      display("r IP", 0);
    12dc:	61 e3       	ldi	r22, 0x31	; 49
    12de:	71 e0       	ldi	r23, 0x01	; 1
    12e0:	f0 cf       	rjmp	.-32     	; 0x12c2 <updateScreenData(bool) [clone .part.7]+0x1ce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:516
      break;
    case 2:
      displayVar(rinvoltage, 0);
    12e2:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <rinvoltage>
    12e6:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <rinvoltage+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:552
      break;
    case 13:
      display("LoAd", 0);
      break;
    case 14:
      displayVar(currentload, 0);
    12ea:	0e 94 2e 07 	call	0xe5c	; 0xe5c <displayVar(int, int) [clone .constprop.11]>
    12ee:	db cf       	rjmp	.-74     	; 0x12a6 <updateScreenData(bool) [clone .part.7]+0x1b2>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:519
      break;
    case 2:
      displayVar(rinvoltage, 0);
      break;
    case 3:
      display("r OP", 0);
    12f0:	66 e3       	ldi	r22, 0x36	; 54
    12f2:	71 e0       	ldi	r23, 0x01	; 1
    12f4:	e6 cf       	rjmp	.-52     	; 0x12c2 <updateScreenData(bool) [clone .part.7]+0x1ce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:522
      break;
    case 4:
      displayVar(routvoltage, 0);
    12f6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <routvoltage>
    12fa:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <routvoltage+0x1>
    12fe:	f5 cf       	rjmp	.-22     	; 0x12ea <updateScreenData(bool) [clone .part.7]+0x1f6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:525
      break;
    case 5:
      display("Y IP", 0);
    1300:	6b e3       	ldi	r22, 0x3B	; 59
    1302:	71 e0       	ldi	r23, 0x01	; 1
    1304:	de cf       	rjmp	.-68     	; 0x12c2 <updateScreenData(bool) [clone .part.7]+0x1ce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:528
      break;
    case 6:
      displayVar(yinvoltage, 0);
    1306:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <yinvoltage>
    130a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <yinvoltage+0x1>
    130e:	ed cf       	rjmp	.-38     	; 0x12ea <updateScreenData(bool) [clone .part.7]+0x1f6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:531
      break;
    case 7:
      display("Y OP", 0);
    1310:	60 e4       	ldi	r22, 0x40	; 64
    1312:	71 e0       	ldi	r23, 0x01	; 1
    1314:	d6 cf       	rjmp	.-84     	; 0x12c2 <updateScreenData(bool) [clone .part.7]+0x1ce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:534
      break;
    case 8:
      displayVar(youtvoltage, 0);
    1316:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <youtvoltage>
    131a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <youtvoltage+0x1>
    131e:	e5 cf       	rjmp	.-54     	; 0x12ea <updateScreenData(bool) [clone .part.7]+0x1f6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:537
      break;
    case 9:
      display("b IP", 0);
    1320:	65 e4       	ldi	r22, 0x45	; 69
    1322:	71 e0       	ldi	r23, 0x01	; 1
    1324:	ce cf       	rjmp	.-100    	; 0x12c2 <updateScreenData(bool) [clone .part.7]+0x1ce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:540
      break;
    case 10:
      displayVar(binvoltage, 0);
    1326:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <binvoltage>
    132a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <binvoltage+0x1>
    132e:	dd cf       	rjmp	.-70     	; 0x12ea <updateScreenData(bool) [clone .part.7]+0x1f6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:543
      break;
    case 11:
      display("b OP", 0);
    1330:	6a e4       	ldi	r22, 0x4A	; 74
    1332:	71 e0       	ldi	r23, 0x01	; 1
    1334:	c6 cf       	rjmp	.-116    	; 0x12c2 <updateScreenData(bool) [clone .part.7]+0x1ce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:546
      break;
    case 12:
      displayVar(boutvoltage, 0);
    1336:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <boutvoltage>
    133a:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <boutvoltage+0x1>
    133e:	d5 cf       	rjmp	.-86     	; 0x12ea <updateScreenData(bool) [clone .part.7]+0x1f6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:549
      break;
    case 13:
      display("LoAd", 0);
    1340:	6f e4       	ldi	r22, 0x4F	; 79
    1342:	71 e0       	ldi	r23, 0x01	; 1
    1344:	be cf       	rjmp	.-132    	; 0x12c2 <updateScreenData(bool) [clone .part.7]+0x1ce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:552
      break;
    case 14:
      displayVar(currentload, 0);
    1346:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <currentload>
    134a:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <currentload+0x1>
    134e:	cd cf       	rjmp	.-102    	; 0x12ea <updateScreenData(bool) [clone .part.7]+0x1f6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:555
      break;
    case 15:
      display("FrEq", 0);
    1350:	64 e5       	ldi	r22, 0x54	; 84
    1352:	71 e0       	ldi	r23, 0x01	; 1
    1354:	b6 cf       	rjmp	.-148    	; 0x12c2 <updateScreenData(bool) [clone .part.7]+0x1ce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:558
      break;
    case 16:
      displayVar((int)freq, 0);
    1356:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <freq>
    135a:	70 91 93 01 	lds	r23, 0x0193	; 0x800193 <freq+0x1>
    135e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <freq+0x2>
    1362:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <freq+0x3>
    1366:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__fixsfsi>
    136a:	cb 01       	movw	r24, r22
    136c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <displayVar(int, int) [clone .constprop.11]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:560
    case 17:
      if(status){
    1370:	ff 20       	and	r15, r15
    1372:	29 f0       	breq	.+10     	; 0x137e <updateScreenData(bool) [clone .part.7]+0x28a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:561
        menu = 0;
    1374:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <menu+0x1>
    1378:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <menu>
    137c:	94 cf       	rjmp	.-216    	; 0x12a6 <updateScreenData(bool) [clone .part.7]+0x1b2>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:563
      } else {
        menu = -1;
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	9f ef       	ldi	r25, 0xFF	; 255
    1382:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <menu+0x1>
    1386:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <menu>
    138a:	8d cf       	rjmp	.-230    	; 0x12a6 <updateScreenData(bool) [clone .part.7]+0x1b2>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:458
    }
    if(!status && !alarmOnce){
      alarmOnce = true;
      menu == -1;
    }
    if(status && alarmOnce){
    138c:	88 23       	and	r24, r24
    138e:	09 f4       	brne	.+2      	; 0x1392 <updateScreenData(bool) [clone .part.7]+0x29e>
    1390:	d0 ce       	rjmp	.-608    	; 0x1132 <updateScreenData(bool) [clone .part.7]+0x3e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:459
      alarmOnce = false;
    1392:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <alarmOnce>
    1396:	cd ce       	rjmp	.-614    	; 0x1132 <updateScreenData(bool) [clone .part.7]+0x3e>

00001398 <done()>:
done():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:911
  default:
    break;
  }
}

void done() {display("donE", 0);}
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	00 d0       	rcall	.+0      	; 0x139e <done()+0x6>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <done()+0x8>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <done()+0xa>
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	69 e5       	ldi	r22, 0x59	; 89
    13a8:	71 e0       	ldi	r23, 0x01	; 1
    13aa:	ce 01       	movw	r24, r28
    13ac:	01 96       	adiw	r24, 0x01	; 1
    13ae:	0e 94 b9 07 	call	0xf72	; 0xf72 <String::String(char const*)>
    13b2:	ce 01       	movw	r24, r28
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <display(String, int) [clone .constprop.6]>
    13ba:	ce 01       	movw	r24, r28
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
    13c2:	26 96       	adiw	r28, 0x06	; 6
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>:
_ZN11EEPROMClass6updateEih.isra.2():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	ec 01       	movw	r28, r24
    13dc:	16 2f       	mov	r17, r22
operator*():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    13de:	0e 94 6e 11 	call	0x22dc	; 0x22dc <eeprom_read_byte>
update():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    13e2:	18 17       	cp	r17, r24
    13e4:	39 f0       	breq	.+14     	; 0x13f4 <EEPROMClass::update(int, unsigned char) [clone .isra.2]+0x20>
_ZN5EERefaSEh():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    13e6:	61 2f       	mov	r22, r17
    13e8:	ce 01       	movw	r24, r28
_ZN11EEPROMClass6updateEih.isra.2():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
_ZN5EERefaSEh():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    13f0:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <eeprom_write_byte>
_ZN11EEPROMClass6updateEih.isra.2():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	08 95       	ret

000013fc <EEPROMClass::read(int) [clone .isra.1]>:
operator*():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    13fc:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <eeprom_read_byte>

00001400 <__vector_18>:
__vector_18():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1400:	1f 92       	push	r1
    1402:	0f 92       	push	r0
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	0f 92       	push	r0
    1408:	11 24       	eor	r1, r1
    140a:	2f 93       	push	r18
    140c:	3f 93       	push	r19
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
    1412:	af 93       	push	r26
    1414:	bf 93       	push	r27
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    1416:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <timer0_millis>
    141a:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <timer0_millis+0x1>
    141e:	a0 91 9d 02 	lds	r26, 0x029D	; 0x80029d <timer0_millis+0x2>
    1422:	b0 91 9e 02 	lds	r27, 0x029E	; 0x80029e <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    1426:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <timer0_fract>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    142a:	26 e0       	ldi	r18, 0x06	; 6
    142c:	23 0f       	add	r18, r19
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    142e:	2d 37       	cpi	r18, 0x7D	; 125
    1430:	68 f1       	brcs	.+90     	; 0x148c <__vector_18+0x8c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    1432:	29 e8       	ldi	r18, 0x89	; 137
    1434:	23 0f       	add	r18, r19
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    1436:	03 96       	adiw	r24, 0x03	; 3
    1438:	a1 1d       	adc	r26, r1
    143a:	b1 1d       	adc	r27, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    143c:	20 93 4b 02 	sts	0x024B, r18	; 0x80024b <timer0_fract>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    1440:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <timer0_millis>
    1444:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <timer0_millis+0x1>
    1448:	a0 93 9d 02 	sts	0x029D, r26	; 0x80029d <timer0_millis+0x2>
    144c:	b0 93 9e 02 	sts	0x029E, r27	; 0x80029e <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    1450:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <timer0_overflow_count>
    1454:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <timer0_overflow_count+0x1>
    1458:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <timer0_overflow_count+0x2>
    145c:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <timer0_overflow_count+0x3>
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	a1 1d       	adc	r26, r1
    1464:	b1 1d       	adc	r27, r1
    1466:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <timer0_overflow_count>
    146a:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <timer0_overflow_count+0x1>
    146e:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <timer0_overflow_count+0x2>
    1472:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <timer0_overflow_count+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	0f 90       	pop	r0
    1488:	1f 90       	pop	r1
    148a:	18 95       	reti
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    148c:	02 96       	adiw	r24, 0x02	; 2
    148e:	a1 1d       	adc	r26, r1
    1490:	b1 1d       	adc	r27, r1
    1492:	d4 cf       	rjmp	.-88     	; 0x143c <__vector_18+0x3c>

00001494 <countPulseASM>:
countPulseASM():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:62

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
    1494:	cf 92       	push	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:63
    push r13   ;   ;  131 pushqi1/1 [length = 1]
    1496:	df 92       	push	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:64
    push r14   ;   ;  132 pushqi1/1 [length = 1]
    1498:	ef 92       	push	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:65
    push r15   ;   ;  133 pushqi1/1 [length = 1]
    149a:	ff 92       	push	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:66
    push r16   ;   ;  134 pushqi1/1 [length = 1]
    149c:	0f 93       	push	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:67
    push r17   ;   ;  135 pushqi1/1 [length = 1]
    149e:	1f 93       	push	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:72
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
    14a0:	e8 2f       	mov	r30, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:73
    mov r31,r25  ;  port, port
    14a2:	f9 2f       	mov	r31, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:79
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
    14a4:	05 c0       	rjmp	.+10     	; 0x14b0 <countPulseASM+0x1c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:83
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
    14a6:	01 50       	subi	r16, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:84
    sbc r17, r1   ;  maxloops
    14a8:	11 09       	sbc	r17, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:85
    sbc r18, r1   ;  maxloops
    14aa:	21 09       	sbc	r18, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:86
    sbc r19, r1   ;  maxloops
    14ac:	31 09       	sbc	r19, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:87
    breq .L13  ; ,   ;  19  branch  [length = 1]
    14ae:	61 f1       	breq	.+88     	; 0x1508 <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:91
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
    14b0:	90 81       	ld	r25, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:92
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
    14b2:	96 23       	and	r25, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:93
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
    14b4:	94 17       	cp	r25, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:94
    breq .L4   ; ,   ;  26  branch  [length = 1]
    14b6:	b9 f3       	breq	.-18     	; 0x14a6 <countPulseASM+0x12>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:95
    rjmp .L6   ;   ;  184 jump  [length = 1]
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <countPulseASM+0x30>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:104
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
    14ba:	01 50       	subi	r16, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:105
    sbc r17, r1   ;  maxloops
    14bc:	11 09       	sbc	r17, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:106
    sbc r18, r1   ;  maxloops
    14be:	21 09       	sbc	r18, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:107
    sbc r19, r1   ;  maxloops
    14c0:	31 09       	sbc	r19, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:108
    breq .L13  ; ,   ;  33  branch  [length = 1]
    14c2:	11 f1       	breq	.+68     	; 0x1508 <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:112
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
    14c4:	90 81       	ld	r25, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:113
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
    14c6:	96 23       	and	r25, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:114
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
    14c8:	94 13       	cpse	r25, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:115
    rjmp .L7   ;
    14ca:	f7 cf       	rjmp	.-18     	; 0x14ba <countPulseASM+0x26>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:116
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
    14cc:	c1 2c       	mov	r12, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:117
    mov r13, r1   ;  width
    14ce:	d1 2c       	mov	r13, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:118
    mov r14, r1   ;  width
    14d0:	e1 2c       	mov	r14, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:119
    mov r15, r1   ;  width
    14d2:	f1 2c       	mov	r15, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:120
    rjmp .L9   ;   ;  186 jump  [length = 1]
    14d4:	0a c0       	rjmp	.+20     	; 0x14ea <countPulseASM+0x56>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:129
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
    14d6:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:130
    sub r12,r24  ;  width,
    14d8:	c8 1a       	sub	r12, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:131
    sbc r13,r24  ;  width,
    14da:	d8 0a       	sbc	r13, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:132
    sbc r14,r24  ;  width,
    14dc:	e8 0a       	sbc	r14, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:133
    sbc r15,r24  ;  width,
    14de:	f8 0a       	sbc	r15, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:134
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
    14e0:	0c 15       	cp	r16, r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:135
    cpc r17,r13  ;  maxloops, width
    14e2:	1d 05       	cpc	r17, r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:136
    cpc r18,r14  ;  maxloops, width
    14e4:	2e 05       	cpc	r18, r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:137
    cpc r19,r15  ;  maxloops, width
    14e6:	3f 05       	cpc	r19, r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:138
    breq .L13  ; ,   ;  52  branch  [length = 1]
    14e8:	79 f0       	breq	.+30     	; 0x1508 <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:142
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
    14ea:	80 81       	ld	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:143
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
    14ec:	86 23       	and	r24, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:144
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
    14ee:	84 17       	cp	r24, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:145
    breq .L10  ; ,   ;  64  branch  [length = 1]
    14f0:	91 f3       	breq	.-28     	; 0x14d6 <countPulseASM+0x42>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:151
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
    14f2:	6c 2d       	mov	r22, r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:152
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
    14f4:	7d 2d       	mov	r23, r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:153
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
    14f6:	8e 2d       	mov	r24, r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:154
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
    14f8:	9f 2d       	mov	r25, r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:157
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
    14fa:	1f 91       	pop	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:158
    pop r16  ;   ;  172 popqi [length = 1]
    14fc:	0f 91       	pop	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:159
    pop r15  ;   ;  173 popqi [length = 1]
    14fe:	ff 90       	pop	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:160
    pop r14  ;   ;  174 popqi [length = 1]
    1500:	ef 90       	pop	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:161
    pop r13  ;   ;  175 popqi [length = 1]
    1502:	df 90       	pop	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:162
    pop r12  ;   ;  176 popqi [length = 1]
    1504:	cf 90       	pop	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:163
    ret  ;  177 return_from_epilogue  [length = 1]
    1506:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:166
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
    1508:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:167
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
    150a:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:168
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
    150c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:169
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
    150e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:172
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
    1510:	1f 91       	pop	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:173
    pop r16  ;   ;  139 popqi [length = 1]
    1512:	0f 91       	pop	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:174
    pop r15  ;   ;  140 popqi [length = 1]
    1514:	ff 90       	pop	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:175
    pop r14  ;   ;  141 popqi [length = 1]
    1516:	ef 90       	pop	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:176
    pop r13  ;   ;  142 popqi [length = 1]
    1518:	df 90       	pop	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:177
    pop r12  ;   ;  143 popqi [length = 1]
    151a:	cf 90       	pop	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:178
    ret  ;  144 return_from_epilogue  [length = 1]
    151c:	08 95       	ret

0000151e <BlockNot::addToTimerList()>:
addToTimerList():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:640
void resetAllTimers(BlockNot *timer) {
        resetAllTimers(timer->BlockNot::getStartTime());
}

void BlockNot::addToTimerList() {
        if (firstTimer == nullptr) {
    151e:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <BlockNot::firstTimer>
    1522:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <BlockNot::firstTimer+0x1>
    1526:	23 2b       	or	r18, r19
    1528:	61 f4       	brne	.+24     	; 0x1542 <BlockNot::addToTimerList()+0x24>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:641
            firstTimer = currentTimer = this;
    152a:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <BlockNot::currentTimer+0x1>
    152e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <BlockNot::currentTimer>
    1532:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <BlockNot::firstTimer+0x1>
    1536:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <BlockNot::firstTimer>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:646
        } else {
            currentTimer->nextTimer = this;
            currentTimer = this;
        }
        this->nextTimer = nullptr;
    153a:	fc 01       	movw	r30, r24
    153c:	10 a2       	std	Z+32, r1	; 0x20
    153e:	17 8e       	std	Z+31, r1	; 0x1f
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:647
}
    1540:	08 95       	ret
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:643

void BlockNot::addToTimerList() {
        if (firstTimer == nullptr) {
            firstTimer = currentTimer = this;
        } else {
            currentTimer->nextTimer = this;
    1542:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <BlockNot::currentTimer>
    1546:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <BlockNot::currentTimer+0x1>
    154a:	90 a3       	std	Z+32, r25	; 0x20
    154c:	87 8f       	std	Z+31, r24	; 0x1f
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:644
            currentTimer = this;
    154e:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <BlockNot::currentTimer+0x1>
    1552:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <BlockNot::currentTimer>
    1556:	f1 cf       	rjmp	.-30     	; 0x153a <BlockNot::addToTimerList()+0x1c>

00001558 <main>:
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	64 97       	sbiw	r28, 0x14	; 20
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    156c:	78 94       	sei
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    156e:	84 b5       	in	r24, 0x24	; 36
    1570:	83 60       	ori	r24, 0x03	; 3
    1572:	84 bd       	out	0x24, r24	; 36
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    1574:	85 b5       	in	r24, 0x25	; 37
    1576:	83 60       	ori	r24, 0x03	; 3
    1578:	85 bd       	out	0x25, r24	; 37
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    157a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    157e:	81 60       	ori	r24, 0x01	; 1
    1580:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    158a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    158e:	81 60       	ori	r24, 0x01	; 1
    1590:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1594:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1598:	81 60       	ori	r24, 0x01	; 1
    159a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    159e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    15a2:	84 60       	ori	r24, 0x04	; 4
    15a4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    15a8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    15ac:	81 60       	ori	r24, 0x01	; 1
    15ae:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    15b2:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    15b6:	83 60       	ori	r24, 0x03	; 3
    15b8:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    15bc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    15c0:	81 60       	ori	r24, 0x01	; 1
    15c2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    15c6:	86 e8       	ldi	r24, 0x86	; 134
    15c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    15cc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
Begin():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:78
	byte segA, byte segB, byte segC, byte segD, byte segE, byte segF, byte segG,
	byte segDP,
	byte segCol, byte segApos)
{
  //Bring all the variables in from the caller
  numberOfDigits = numOfDigits;
    15d0:	84 e0       	ldi	r24, 0x04	; 4
    15d2:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <display1+0x15>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:79
  digit1 = dig1;
    15d6:	13 e1       	ldi	r17, 0x13	; 19
    15d8:	10 93 55 02 	sts	0x0255, r17	; 0x800255 <display1+0x5>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:80
  digit2 = dig2;
    15dc:	b2 e1       	ldi	r27, 0x12	; 18
    15de:	b0 93 56 02 	sts	0x0256, r27	; 0x800256 <display1+0x6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:81
  digit3 = dig3;
    15e2:	a1 e1       	ldi	r26, 0x11	; 17
    15e4:	a0 93 57 02 	sts	0x0257, r26	; 0x800257 <display1+0x7>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:82
  digit4 = dig4;
    15e8:	f0 e1       	ldi	r31, 0x10	; 16
    15ea:	f0 93 58 02 	sts	0x0258, r31	; 0x800258 <display1+0x8>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:83
  digitApostrophe = digitApos;
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <display1+0x9>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:84
  digitColon = digitCol;
    15f4:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <display1+0xa>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:85
  segmentA = segA;
    15f8:	e8 e0       	ldi	r30, 0x08	; 8
    15fa:	e0 93 5d 02 	sts	0x025D, r30	; 0x80025d <display1+0xd>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:86
  segmentB = segB;
    15fe:	79 e0       	ldi	r23, 0x09	; 9
    1600:	70 93 5e 02 	sts	0x025E, r23	; 0x80025e <display1+0xe>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:87
  segmentC = segC;
    1604:	6a e0       	ldi	r22, 0x0A	; 10
    1606:	60 93 5f 02 	sts	0x025F, r22	; 0x80025f <display1+0xf>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:88
  segmentD = segD;
    160a:	5b e0       	ldi	r21, 0x0B	; 11
    160c:	50 93 60 02 	sts	0x0260, r21	; 0x800260 <display1+0x10>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:89
  segmentE = segE;
    1610:	4c e0       	ldi	r20, 0x0C	; 12
    1612:	40 93 61 02 	sts	0x0261, r20	; 0x800261 <display1+0x11>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:90
  segmentF = segF;
    1616:	3d e0       	ldi	r19, 0x0D	; 13
    1618:	30 93 62 02 	sts	0x0262, r19	; 0x800262 <display1+0x12>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:91
  segmentG = segG;
    161c:	2e e0       	ldi	r18, 0x0E	; 14
    161e:	20 93 63 02 	sts	0x0263, r18	; 0x800263 <display1+0x13>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:92
  segmentDP = segDP;
    1622:	9f e0       	ldi	r25, 0x0F	; 15
    1624:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <display1+0x14>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:93
  segmentApostrophe = segApos;
    1628:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <display1+0xb>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:94
  segmentColon = segCol;
    162c:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <display1+0xc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:98

  //Assign input values to variables
  //mode is what the digit pins must be set at for it to be turned on. 0 for common cathode, 1 for common anode
  mode = mode_in;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <display1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:101
  if(mode == COMMON_ANODE)
  {
    DigitOn = HIGH;
    1636:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <display1+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:102
    DigitOff = LOW;
    163a:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <display1+0x2>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:103
    SegOn = LOW;
    163e:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <display1+0x3>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:104
    SegOff = HIGH;
    1642:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <display1+0x4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:114
    DigitOff = HIGH;
    SegOn = HIGH;
    SegOff = LOW;
  }

  DigitPins[0] = digit1;
    1646:	10 93 68 02 	sts	0x0268, r17	; 0x800268 <display1+0x18>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:115
  DigitPins[1] = digit2;
    164a:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <display1+0x19>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:116
  DigitPins[2] = digit3;
    164e:	a0 93 6a 02 	sts	0x026A, r26	; 0x80026a <display1+0x1a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:117
  DigitPins[3] = digit4;
    1652:	f0 93 6b 02 	sts	0x026B, r31	; 0x80026b <display1+0x1b>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:118
  SegmentPins[0] = segmentA;
    1656:	e0 93 6c 02 	sts	0x026C, r30	; 0x80026c <display1+0x1c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:119
  SegmentPins[1] = segmentB;
    165a:	70 93 6d 02 	sts	0x026D, r23	; 0x80026d <display1+0x1d>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:120
  SegmentPins[2] = segmentC;
    165e:	60 93 6e 02 	sts	0x026E, r22	; 0x80026e <display1+0x1e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:121
  SegmentPins[3] = segmentD;
    1662:	50 93 6f 02 	sts	0x026F, r21	; 0x80026f <display1+0x1f>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:122
  SegmentPins[4] = segmentE;
    1666:	40 93 70 02 	sts	0x0270, r20	; 0x800270 <display1+0x20>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:123
  SegmentPins[5] = segmentF;
    166a:	30 93 71 02 	sts	0x0271, r19	; 0x800271 <display1+0x21>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:124
  SegmentPins[6] = segmentG;
    166e:	20 93 72 02 	sts	0x0272, r18	; 0x800272 <display1+0x22>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:125
  SegmentPins[7] = segmentDP;
    1672:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <display1+0x23>
main():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:129

  //Turn everything Off before setting pin as output
  //Set all digit pins off. Low for common anode, high for common cathode
  for (byte digit = 0 ; digit < numberOfDigits ; digit++)
    1676:	10 e0       	ldi	r17, 0x00	; 0
Begin():
    1678:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <display1+0x15>
    167c:	18 17       	cp	r17, r24
    167e:	98 f4       	brcc	.+38     	; 0x16a6 <main+0x14e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:131
  {
    digitalWrite(DigitPins[digit], DigitOff);
    1680:	81 2f       	mov	r24, r17
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	9c 01       	movw	r18, r24
    1686:	20 5b       	subi	r18, 0xB0	; 176
    1688:	3d 4f       	sbci	r19, 0xFD	; 253
    168a:	79 01       	movw	r14, r18
    168c:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <display1+0x2>
    1690:	f9 01       	movw	r30, r18
    1692:	80 8d       	ldd	r24, Z+24	; 0x18
    1694:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:132
    pinMode(DigitPins[digit], OUTPUT);
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	f7 01       	movw	r30, r14
    169c:	80 8d       	ldd	r24, Z+24	; 0x18
    169e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:129
  SegmentPins[6] = segmentG;
  SegmentPins[7] = segmentDP;

  //Turn everything Off before setting pin as output
  //Set all digit pins off. Low for common anode, high for common cathode
  for (byte digit = 0 ; digit < numberOfDigits ; digit++)
    16a2:	1f 5f       	subi	r17, 0xFF	; 255
    16a4:	e9 cf       	rjmp	.-46     	; 0x1678 <main+0x120>
    16a6:	00 e5       	ldi	r16, 0x50	; 80
    16a8:	12 e0       	ldi	r17, 0x02	; 2
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:137
    pinMode(DigitPins[digit], OUTPUT);
  }
  //Set all segment pins off. High for common anode, low for common cathode
  for (byte seg = 0 ; seg < 8 ; seg++)
  {
    digitalWrite(SegmentPins[seg], SegOff);
    16aa:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <display1+0x4>
    16ae:	f8 01       	movw	r30, r16
    16b0:	84 8d       	ldd	r24, Z+28	; 0x1c
    16b2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:138
    pinMode(SegmentPins[seg], OUTPUT);
    16b6:	61 e0       	ldi	r22, 0x01	; 1
    16b8:	f8 01       	movw	r30, r16
    16ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    16bc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
    16c0:	0f 5f       	subi	r16, 0xFF	; 255
    16c2:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:135
  {
    digitalWrite(DigitPins[digit], DigitOff);
    pinMode(DigitPins[digit], OUTPUT);
  }
  //Set all segment pins off. High for common anode, low for common cathode
  for (byte seg = 0 ; seg < 8 ; seg++)
    16c4:	f2 e0       	ldi	r31, 0x02	; 2
    16c6:	08 35       	cpi	r16, 0x58	; 88
    16c8:	1f 07       	cpc	r17, r31
    16ca:	79 f7       	brne	.-34     	; 0x16aa <main+0x152>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:141
  {
    digitalWrite(SegmentPins[seg], SegOff);
    pinMode(SegmentPins[seg], OUTPUT);
  }

  if (digitColon != 255)
    16cc:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <display1+0xa>
    16d0:	8f 3f       	cpi	r24, 0xFF	; 255
    16d2:	a1 f0       	breq	.+40     	; 0x16fc <main+0x1a4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:143
  {
	digitalWrite(digitColon, DigitOff);
    16d4:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <display1+0x2>
    16d8:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:144
	pinMode(digitColon, OUTPUT);
    16dc:	61 e0       	ldi	r22, 0x01	; 1
    16de:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <display1+0xa>
    16e2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:145
	digitalWrite(segmentColon, SegOff);
    16e6:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <display1+0x4>
    16ea:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <display1+0xc>
    16ee:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:146
	pinMode(segmentColon, OUTPUT);
    16f2:	61 e0       	ldi	r22, 0x01	; 1
    16f4:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <display1+0xc>
    16f8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:148
  }
  if (digitApostrophe != 255)
    16fc:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <display1+0x9>
    1700:	8f 3f       	cpi	r24, 0xFF	; 255
    1702:	a1 f0       	breq	.+40     	; 0x172c <main+0x1d4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:150
  {
	digitalWrite(digitApostrophe, DigitOff);
    1704:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <display1+0x2>
    1708:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:151
	pinMode(digitApostrophe, OUTPUT);
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <display1+0x9>
    1712:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:152
	digitalWrite(segmentApostrophe, SegOff);
    1716:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <display1+0x4>
    171a:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <display1+0xb>
    171e:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:153
	pinMode(segmentApostrophe, OUTPUT);
    1722:	61 e0       	ldi	r22, 0x01	; 1
    1724:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <display1+0xb>
    1728:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pinMode>
SetBrightness():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:179
//We need to error check and map the incoming value
void SevSeg::SetBrightness(byte percentBright)
{
	//Error check and scale brightnessLevel
	if(percentBright > 100) percentBright = 100;
	brightnessDelay = map(percentBright, 0, 100, 0, FRAMEPERIOD); //map brightnessDelay to 0 to the max which is framePeriod
    172c:	80 ed       	ldi	r24, 0xD0	; 208
    172e:	97 e0       	ldi	r25, 0x07	; 7
    1730:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <display1+0x17>
    1734:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <display1+0x16>
setup():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:174
void setup() {
//Setup Display Data
setupDisplay();
//Setup Inputs 
//setIN(); is a custom Function Defined at the bottom of the Program!
setIN(ok);
    1738:	84 e1       	ldi	r24, 0x14	; 20
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:175
setIN(plus);
    1740:	85 e1       	ldi	r24, 0x15	; 21
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:176
setIN(minus);
    1748:	86 e1       	ldi	r24, 0x16	; 22
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:177
setIN(RINPIN);
    1750:	88 e1       	ldi	r24, 0x18	; 24
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:178
setIN(YINPIN);
    1758:	89 e1       	ldi	r24, 0x19	; 25
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:179
setIN(BINPIN);
    1760:	8a e1       	ldi	r24, 0x1A	; 26
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:180
setIN(ROTPIN);
    1768:	8b e1       	ldi	r24, 0x1B	; 27
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:181
setIN(YOTPIN);
    1770:	8c e1       	ldi	r24, 0x1C	; 28
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:182
setIN(BOTPIN);
    1778:	8d e1       	ldi	r24, 0x1D	; 29
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:183
setIN(current);
    1780:	8e e1       	ldi	r24, 0x1E	; 30
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0e 94 90 04 	call	0x920	; 0x920 <setIN(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:192
//setIN(setupPin); //change setup mode from RUN/SETUP//
///////////////////////////////////////////////////////

//Set Outputs
//setOUT(); is a custom Function Defined at the bottom of the Program!
setOUT(motorRFW);
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	0e 94 8d 04 	call	0x91a	; 0x91a <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:193
setOUT(motorRBW);
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 8d 04 	call	0x91a	; 0x91a <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:194
setOUT(motorYFW);
    1798:	82 e0       	ldi	r24, 0x02	; 2
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 8d 04 	call	0x91a	; 0x91a <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:195
setOUT(motorYBW);
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	0e 94 8d 04 	call	0x91a	; 0x91a <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:196
setOUT(motorBFW);
    17a8:	84 e0       	ldi	r24, 0x04	; 4
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 8d 04 	call	0x91a	; 0x91a <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:197
setOUT(motorBBW);
    17b0:	85 e0       	ldi	r24, 0x05	; 5
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 8d 04 	call	0x91a	; 0x91a <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:198
setOUT(contactor);
    17b8:	86 e0       	ldi	r24, 0x06	; 6
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	0e 94 8d 04 	call	0x91a	; 0x91a <setOUT(int)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:208
//uncomment when programming Arduino/MCU
/**/

//using the EEPROM.h Librabry Included by the Arduino IDE & Arduino Core

IHV = 2 * EEPROM.read(0);
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	0e 94 fe 09 	call	0x13fc	; 0x13fc <EEPROMClass::read(int) [clone .isra.1]>
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <IHV+0x1>
    17d2:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <IHV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:209
ILV = 2 * EEPROM.read(1);
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 fe 09 	call	0x13fc	; 0x13fc <EEPROMClass::read(int) [clone .isra.1]>
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <ILV+0x1>
    17e8:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <ILV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:210
OHV = 2 * EEPROM.read(2);
    17ec:	82 e0       	ldi	r24, 0x02	; 2
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 fe 09 	call	0x13fc	; 0x13fc <EEPROMClass::read(int) [clone .isra.1]>
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <OHV+0x1>
    17fe:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <OHV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:211
OLV = 2 * EEPROM.read(3);
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 fe 09 	call	0x13fc	; 0x13fc <EEPROMClass::read(int) [clone .isra.1]>
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <OLV+0x1>
    1814:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <OLV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:212
SETV = 2 * EEPROM.read(4);
    1818:	84 e0       	ldi	r24, 0x04	; 4
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <EEPROMClass::read(int) [clone .isra.1]>
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <SETV+0x1>
    182a:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <SETV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:213
OVL = EEPROM.read(5);
    182e:	85 e0       	ldi	r24, 0x05	; 5
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 fe 09 	call	0x13fc	; 0x13fc <EEPROMClass::read(int) [clone .isra.1]>
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <OVL+0x1>
    183c:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <OVL>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:214
TON = EEPROM.read(6);
    1840:	86 e0       	ldi	r24, 0x06	; 6
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 fe 09 	call	0x13fc	; 0x13fc <EEPROMClass::read(int) [clone .isra.1]>
    1848:	08 2f       	mov	r16, r24
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <TON+0x1>
    1850:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <TON>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:215
TOFF = EEPROM.read(7);
    1854:	87 e0       	ldi	r24, 0x07	; 7
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 fe 09 	call	0x13fc	; 0x13fc <EEPROMClass::read(int) [clone .isra.1]>
    185c:	18 2f       	mov	r17, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <TOFF+0x1>
    1864:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <TOFF>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:216
DIFF = EEPROM.read(8);
    1868:	88 e0       	ldi	r24, 0x08	; 8
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <EEPROMClass::read(int) [clone .isra.1]>
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <DIFF+0x1>
    1876:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <DIFF>
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
            break;
        case MILLISECONDS:
            duration.millis = time;
            break;
        case SECONDS:
            duration.seconds = time;
    187a:	60 2f       	mov	r22, r16
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	0e 94 4f 10 	call	0x209e	; 0x209e <__floatunsisf>
    1886:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <on+0x15>
    188a:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <on+0x16>
    188e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <on+0x17>
    1892:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <on+0x18>
setDuration():
    1896:	8d ef       	ldi	r24, 0xFD	; 253
    1898:	91 e0       	ldi	r25, 0x01	; 1
    189a:	0e 94 8d 03 	call	0x71a	; 0x71a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
initDuration():
    189e:	61 2f       	mov	r22, r17
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	0e 94 4f 10 	call	0x209e	; 0x209e <__floatunsisf>
    18aa:	60 93 f1 01 	sts	0x01F1, r22	; 0x8001f1 <off+0x15>
    18ae:	70 93 f2 01 	sts	0x01F2, r23	; 0x8001f2 <off+0x16>
    18b2:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <off+0x17>
    18b6:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <off+0x18>
setDuration():
    18ba:	8c ed       	ldi	r24, 0xDC	; 220
    18bc:	91 e0       	ldi	r25, 0x01	; 1
    18be:	0e 94 8d 03 	call	0x71a	; 0x71a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
setup():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:240

//Setup Variable Timers after the variable is read from the Memory!
on.setDuration(TON, SECONDS);
off.setDuration(TOFF, SECONDS);
//Reset the Timers after time update.
on.reset();
    18c2:	8d ef       	ldi	r24, 0xFD	; 253
    18c4:	91 e0       	ldi	r25, 0x01	; 1
    18c6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:241
off.reset();
    18ca:	8c ed       	ldi	r24, 0xDC	; 220
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
checkok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:820
}

//Check OK Button Pressed

void checkok() {
  if(read(ok) && okold == !read(ok)){
    18d2:	bb 24       	eor	r11, r11
    18d4:	b3 94       	inc	r11
    18d6:	8e 01       	movw	r16, r28
    18d8:	01 5f       	subi	r16, 0xF1	; 241
    18da:	1f 4f       	sbci	r17, 0xFF	; 255
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    18dc:	a0 e0       	ldi	r26, 0x00	; 0
    18de:	ca 2e       	mov	r12, r26
    18e0:	a0 e0       	ldi	r26, 0x00	; 0
    18e2:	da 2e       	mov	r13, r26
checkok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:820
    18e4:	aa 24       	eor	r10, r10
    18e6:	a3 94       	inc	r10
    18e8:	84 e1       	ldi	r24, 0x14	; 20
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    18f0:	88 23       	and	r24, r24
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <main+0x39e>
    18f4:	98 c0       	rjmp	.+304    	; 0x1a26 <main+0x4ce>
    18f6:	84 e1       	ldi	r24, 0x14	; 20
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    18fe:	8b 25       	eor	r24, r11
    1900:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <okold>
    1904:	89 13       	cpse	r24, r25
    1906:	8f c0       	rjmp	.+286    	; 0x1a26 <main+0x4ce>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:821
  okold = read(ok);
    1908:	84 e1       	ldi	r24, 0x14	; 20
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1910:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <okold>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:822
  encMenu++;
    1914:	e0 90 47 02 	lds	r14, 0x0247	; 0x800247 <encMenu>
    1918:	f0 90 48 02 	lds	r15, 0x0248	; 0x800248 <encMenu+0x1>
    191c:	c7 01       	movw	r24, r14
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <encMenu+0x1>
    1924:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <encMenu>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:823
  refresh.reset();
    1928:	8b eb       	ldi	r24, 0xBB	; 187
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
encUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:850

//Update Parameters on Menu Change

void encUpdate() {
  
  switch (encMenu)
    1930:	2a e0       	ldi	r18, 0x0A	; 10
    1932:	e2 16       	cp	r14, r18
    1934:	f1 04       	cpc	r15, r1
    1936:	c8 f4       	brcc	.+50     	; 0x196a <main+0x412>
    1938:	f7 01       	movw	r30, r14
    193a:	ef 55       	subi	r30, 0x5F	; 95
    193c:	f3 4f       	sbci	r31, 0xF3	; 243
    193e:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__tablejump2__>
    1942:	ab 0c       	add	r10, r11
    1944:	a6 0d       	add	r26, r6
    1946:	b3 0d       	add	r27, r3
    1948:	c0 0d       	add	r28, r0
    194a:	cd 0d       	add	r28, r13
    194c:	da 0d       	add	r29, r10
    194e:	e7 0d       	add	r30, r7
    1950:	f4 0d       	add	r31, r4
    1952:	1b 0e       	add	r1, r27
    1954:	40 0e       	add	r4, r16
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:855
  {
  case 0:
    break;
  case 1:
    enc = IHV;
    1956:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <IHV>
    195a:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <IHV+0x1>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:860
    done();
    break;
  case 2:
    IHV = enc;
    enc = ILV;
    195e:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <enc+0x1>
    1962:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:904
    off.reset();
    done();
    break;
  case 10:
    DIFF = enc;
    done();
    1966:	0e 94 cc 09 	call	0x1398	; 0x1398 <done()>
eepromUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:835
}

//Save Parameters to MCU EEPROM Memory (only if changed)

void eepromUpdate() {
  EEPROM.update(0, IHV/2);
    196a:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <IHV>
    196e:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <IHV+0x1>
    1972:	77 ff       	sbrs	r23, 7
    1974:	02 c0       	rjmp	.+4      	; 0x197a <main+0x422>
    1976:	6f 5f       	subi	r22, 0xFF	; 255
    1978:	7f 4f       	sbci	r23, 0xFF	; 255
    197a:	75 95       	asr	r23
    197c:	67 95       	ror	r22
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:836
  EEPROM.update(1, ILV/2);
    1986:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <ILV>
    198a:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <ILV+0x1>
    198e:	77 ff       	sbrs	r23, 7
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <main+0x43e>
    1992:	6f 5f       	subi	r22, 0xFF	; 255
    1994:	7f 4f       	sbci	r23, 0xFF	; 255
    1996:	75 95       	asr	r23
    1998:	67 95       	ror	r22
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:837
  EEPROM.update(2, OHV/2);
    19a2:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <OHV>
    19a6:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <OHV+0x1>
    19aa:	77 ff       	sbrs	r23, 7
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <main+0x45a>
    19ae:	6f 5f       	subi	r22, 0xFF	; 255
    19b0:	7f 4f       	sbci	r23, 0xFF	; 255
    19b2:	75 95       	asr	r23
    19b4:	67 95       	ror	r22
    19b6:	82 e0       	ldi	r24, 0x02	; 2
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:838
  EEPROM.update(3, OLV/2);
    19be:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <OLV>
    19c2:	70 91 af 01 	lds	r23, 0x01AF	; 0x8001af <OLV+0x1>
    19c6:	77 ff       	sbrs	r23, 7
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <main+0x476>
    19ca:	6f 5f       	subi	r22, 0xFF	; 255
    19cc:	7f 4f       	sbci	r23, 0xFF	; 255
    19ce:	75 95       	asr	r23
    19d0:	67 95       	ror	r22
    19d2:	83 e0       	ldi	r24, 0x03	; 3
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:839
  EEPROM.update(4, SETV/2);
    19da:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <SETV>
    19de:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <SETV+0x1>
    19e2:	77 ff       	sbrs	r23, 7
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <main+0x492>
    19e6:	6f 5f       	subi	r22, 0xFF	; 255
    19e8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ea:	75 95       	asr	r23
    19ec:	67 95       	ror	r22
    19ee:	84 e0       	ldi	r24, 0x04	; 4
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:840
  EEPROM.update(5, OVL);
    19f6:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <OVL>
    19fa:	85 e0       	ldi	r24, 0x05	; 5
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:841
  EEPROM.update(6, TON);
    1a02:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <TON>
    1a06:	86 e0       	ldi	r24, 0x06	; 6
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:842
  EEPROM.update(7, TOFF);
    1a0e:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <TOFF>
    1a12:	87 e0       	ldi	r24, 0x07	; 7
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:843
  EEPROM.update(8, DIFF);
    1a1a:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <DIFF>
    1a1e:	88 e0       	ldi	r24, 0x08	; 8
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
checkok():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:827
  encMenu++;
  refresh.reset();
  encUpdate();
  eepromUpdate();
  }
  if(read(ok) == false){
    1a26:	84 e1       	ldi	r24, 0x14	; 20
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1a2e:	81 11       	cpse	r24, r1
    1a30:	06 c0       	rjmp	.+12     	; 0x1a3e <main+0x4e6>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:828
  okold = read(ok);
    1a32:	84 e1       	ldi	r24, 0x14	; 20
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1a3a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <okold>
checkplus():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:924
}

//Check Plus Button Pressed

void checkplus() {
  if(read(plus) && plusold == !read(plus)){
    1a3e:	85 e1       	ldi	r24, 0x15	; 21
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1a46:	88 23       	and	r24, r24
    1a48:	c1 f0       	breq	.+48     	; 0x1a7a <main+0x522>
    1a4a:	85 e1       	ldi	r24, 0x15	; 21
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1a52:	8b 25       	eor	r24, r11
    1a54:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <plusold>
    1a58:	89 13       	cpse	r24, r25
    1a5a:	0f c0       	rjmp	.+30     	; 0x1a7a <main+0x522>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:925
  plusold = read(plus);
    1a5c:	85 e1       	ldi	r24, 0x15	; 21
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1a64:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <plusold>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:926
  enc++;
    1a68:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <enc>
    1a6c:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <enc+0x1>
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <enc+0x1>
    1a76:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:928
  }
  if(read(plus) == false){
    1a7a:	85 e1       	ldi	r24, 0x15	; 21
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1a82:	81 11       	cpse	r24, r1
    1a84:	06 c0       	rjmp	.+12     	; 0x1a92 <main+0x53a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:929
  plusold = read(plus);
    1a86:	85 e1       	ldi	r24, 0x15	; 21
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1a8e:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <plusold>
checkminus():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:936
}

//Check Minus Button Pressed

void checkminus() {
  if(read(minus) && minusold == !read(minus)){
    1a92:	86 e1       	ldi	r24, 0x16	; 22
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1a9a:	88 23       	and	r24, r24
    1a9c:	c1 f0       	breq	.+48     	; 0x1ace <main+0x576>
    1a9e:	86 e1       	ldi	r24, 0x16	; 22
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1aa6:	8b 25       	eor	r24, r11
    1aa8:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <minusold>
    1aac:	89 13       	cpse	r24, r25
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <main+0x576>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:937
  minusold = read(minus);
    1ab0:	86 e1       	ldi	r24, 0x16	; 22
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1ab8:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <minusold>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:938
  enc--;
    1abc:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <enc>
    1ac0:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <enc+0x1>
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <enc+0x1>
    1aca:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:940
  }
  if(read(minus) == false){
    1ace:	86 e1       	ldi	r24, 0x16	; 22
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1ad6:	81 11       	cpse	r24, r1
    1ad8:	06 c0       	rjmp	.+12     	; 0x1ae6 <main+0x58e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:941
  minusold = read(minus);
    1ada:	86 e1       	ldi	r24, 0x16	; 22
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1ae2:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <minusold>
loop():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:263
  }
*/
///////////////////////////////////////////////////////
  //Switch to Parameter Edit/Run Mode
  /* Uncomment this for not using setup Pin*/
  if(mode){
    1ae6:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <mode>
    1aea:	88 23       	and	r24, r24
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <main+0x598>
    1aee:	97 c1       	rjmp	.+814    	; 0x1e1e <main+0x8c6>
runSetup():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:770
}

//Change Screens/Menus on pessing OK/Menu

void runSetup() {
  int OTs[7] = { motorRFW, motorRBW, motorYFW, motorYBW, motorBFW, motorBBW, contactor };
    1af0:	8e e0       	ldi	r24, 0x0E	; 14
    1af2:	e6 e0       	ldi	r30, 0x06	; 6
    1af4:	f1 e0       	ldi	r31, 0x01	; 1
    1af6:	de 01       	movw	r26, r28
    1af8:	11 96       	adiw	r26, 0x01	; 1
    1afa:	01 90       	ld	r0, Z+
    1afc:	0d 92       	st	X+, r0
    1afe:	8a 95       	dec	r24
    1b00:	e1 f7       	brne	.-8      	; 0x1afa <main+0x5a2>
    1b02:	ce 01       	movw	r24, r28
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	7c 01       	movw	r14, r24
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:773
  
  for(int i = 0; i < 7; i++){
    digitalWrite(OTs[i], LOW);
    1b08:	f7 01       	movw	r30, r14
    1b0a:	80 81       	ld	r24, Z
    1b0c:	f2 e0       	ldi	r31, 0x02	; 2
    1b0e:	ef 0e       	add	r14, r31
    1b10:	f1 1c       	adc	r15, r1
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:772
//Change Screens/Menus on pessing OK/Menu

void runSetup() {
  int OTs[7] = { motorRFW, motorRBW, motorYFW, motorYBW, motorBFW, motorBBW, contactor };
  
  for(int i = 0; i < 7; i++){
    1b18:	0e 15       	cp	r16, r14
    1b1a:	1f 05       	cpc	r17, r15
    1b1c:	a9 f7       	brne	.-22     	; 0x1b08 <main+0x5b0>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:776
    digitalWrite(OTs[i], LOW);
  }

  switch (encMenu)
    1b1e:	e0 91 47 02 	lds	r30, 0x0247	; 0x800247 <encMenu>
    1b22:	f0 91 48 02 	lds	r31, 0x0248	; 0x800248 <encMenu+0x1>
    1b26:	eb 30       	cpi	r30, 0x0B	; 11
    1b28:	f1 05       	cpc	r31, r1
    1b2a:	08 f0       	brcs	.+2      	; 0x1b2e <main+0x5d6>
    1b2c:	73 c1       	rjmp	.+742    	; 0x1e14 <main+0x8bc>
    1b2e:	e5 56       	subi	r30, 0x65	; 101
    1b30:	f2 4f       	sbci	r31, 0xF2	; 242
    1b32:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__tablejump2__>
    1b36:	49 0e       	add	r4, r25
    1b38:	55 0e       	add	r5, r21
    1b3a:	9f 0e       	add	r9, r31
    1b3c:	ac 0e       	add	r10, r28
    1b3e:	b9 0e       	add	r11, r25
    1b40:	c6 0e       	add	r12, r22
    1b42:	d3 0e       	add	r13, r19
    1b44:	e0 0e       	add	r14, r16
    1b46:	ed 0e       	add	r14, r29
    1b48:	fa 0e       	add	r15, r26
    1b4a:	07 0f       	add	r16, r23
encUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:859
  case 1:
    enc = IHV;
    done();
    break;
  case 2:
    IHV = enc;
    1b4c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <enc>
    1b50:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <enc+0x1>
    1b54:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <IHV+0x1>
    1b58:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <IHV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:860
    enc = ILV;
    1b5c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ILV>
    1b60:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <ILV+0x1>
    1b64:	fc ce       	rjmp	.-520    	; 0x195e <main+0x406>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:864
    done();
    break;
  case 3:
    ILV = enc;
    1b66:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <enc>
    1b6a:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <enc+0x1>
    1b6e:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <ILV+0x1>
    1b72:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <ILV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:865
    enc = OHV;
    1b76:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <OHV>
    1b7a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <OHV+0x1>
    1b7e:	ef ce       	rjmp	.-546    	; 0x195e <main+0x406>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:869
    done();
    break;
  case 4:
    OHV = enc;
    1b80:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <enc>
    1b84:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <enc+0x1>
    1b88:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <OHV+0x1>
    1b8c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <OHV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:870
    enc = OLV;
    1b90:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <OLV>
    1b94:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <OLV+0x1>
    1b98:	e2 ce       	rjmp	.-572    	; 0x195e <main+0x406>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:874
    done();
    break;
  case 5:
    OLV = enc;
    1b9a:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <enc>
    1b9e:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <enc+0x1>
    1ba2:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <OLV+0x1>
    1ba6:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <OLV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:875
    enc = SETV;
    1baa:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <SETV>
    1bae:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <SETV+0x1>
    1bb2:	d5 ce       	rjmp	.-598    	; 0x195e <main+0x406>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:879
    done();
    break;
  case 6:
    SETV = enc;
    1bb4:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <enc>
    1bb8:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <enc+0x1>
    1bbc:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <SETV+0x1>
    1bc0:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <SETV>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:880
    enc = OVL;
    1bc4:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <OVL>
    1bc8:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <OVL+0x1>
    1bcc:	c8 ce       	rjmp	.-624    	; 0x195e <main+0x406>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:884
    done();
    break;
  case 7:
    OVL = enc;
    1bce:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <enc>
    1bd2:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <enc+0x1>
    1bd6:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <OVL+0x1>
    1bda:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <OVL>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:885
    enc = TON;
    1bde:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <TON>
    1be2:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <TON+0x1>
    1be6:	bb ce       	rjmp	.-650    	; 0x195e <main+0x406>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:889
    done();
    break;
  case 8:
    TON = enc;
    1be8:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <enc>
    1bec:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <enc+0x1>
    1bf0:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <TON+0x1>
    1bf4:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <TON>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:890
    enc = TOFF;
    1bf8:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <TOFF>
    1bfc:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <TOFF+0x1>
    1c00:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <enc+0x1>
    1c04:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:891
    on.setDuration(TON, SECONDS);
    1c08:	07 2e       	mov	r0, r23
    1c0a:	00 0c       	add	r0, r0
    1c0c:	88 0b       	sbc	r24, r24
    1c0e:	99 0b       	sbc	r25, r25
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
    1c10:	0e 94 4f 10 	call	0x209e	; 0x209e <__floatunsisf>
    1c14:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <on+0x15>
    1c18:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <on+0x16>
    1c1c:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <on+0x17>
    1c20:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <on+0x18>
setDuration():
    1c24:	8d ef       	ldi	r24, 0xFD	; 253
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	0e 94 8d 03 	call	0x71a	; 0x71a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
encUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:892
    on.reset();
    1c2c:	8d ef       	ldi	r24, 0xFD	; 253
    1c2e:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:899
    break;
  case 9:
    TOFF = enc;
    enc = DIFF;
    off.setDuration(TOFF, SECONDS);
    off.reset();
    1c30:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
    1c34:	98 ce       	rjmp	.-720    	; 0x1966 <main+0x40e>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:896
    on.setDuration(TON, SECONDS);
    on.reset();
    done();
    break;
  case 9:
    TOFF = enc;
    1c36:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <enc>
    1c3a:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <enc+0x1>
    1c3e:	70 93 a9 01 	sts	0x01A9, r23	; 0x8001a9 <TOFF+0x1>
    1c42:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <TOFF>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:897
    enc = DIFF;
    1c46:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <DIFF>
    1c4a:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <DIFF+0x1>
    1c4e:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <enc+0x1>
    1c52:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <enc>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:898
    off.setDuration(TOFF, SECONDS);
    1c56:	07 2e       	mov	r0, r23
    1c58:	00 0c       	add	r0, r0
    1c5a:	88 0b       	sbc	r24, r24
    1c5c:	99 0b       	sbc	r25, r25
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
    1c5e:	0e 94 4f 10 	call	0x209e	; 0x209e <__floatunsisf>
    1c62:	60 93 f1 01 	sts	0x01F1, r22	; 0x8001f1 <off+0x15>
    1c66:	70 93 f2 01 	sts	0x01F2, r23	; 0x8001f2 <off+0x16>
    1c6a:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <off+0x17>
    1c6e:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <off+0x18>
setDuration():
    1c72:	8c ed       	ldi	r24, 0xDC	; 220
    1c74:	91 e0       	ldi	r25, 0x01	; 1
    1c76:	0e 94 8d 03 	call	0x71a	; 0x71a <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
encUpdate():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:899
    off.reset();
    1c7a:	8c ed       	ldi	r24, 0xDC	; 220
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	d8 cf       	rjmp	.-80     	; 0x1c30 <main+0x6d8>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:903
    done();
    break;
  case 10:
    DIFF = enc;
    1c80:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <enc>
    1c84:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <enc+0x1>
    1c88:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <DIFF+0x1>
    1c8c:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <DIFF>
    1c90:	6a ce       	rjmp	.-812    	; 0x1966 <main+0x40e>
home():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:670

////////////////////////////////////////////////////////////
//Setp display on Setup Mode

void home() {
  display("SETP", 0);
    1c92:	6e e5       	ldi	r22, 0x5E	; 94
    1c94:	71 e0       	ldi	r23, 0x01	; 1
menuEND():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:764
    display("dIFF", 0);
  }
}

void menuEND() {
  display("End", 0);
    1c96:	c8 01       	movw	r24, r16
    1c98:	0e 94 b9 07 	call	0xf72	; 0xf72 <String::String(char const*)>
    1c9c:	c8 01       	movw	r24, r16
    1c9e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <display(String, int) [clone .constprop.6]>
    1ca2:	c8 01       	movw	r24, r16
    1ca4:	0e 94 ca 07 	call	0xf94	; 0xf94 <String::~String()>
    1ca8:	0b c0       	rjmp	.+22     	; 0x1cc0 <main+0x768>
menuIHV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:676
}

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	8b eb       	ldi	r24, 0xBB	; 187
    1cae:	91 e0       	ldi	r25, 0x01	; 1
    1cb0:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:679
    displayVar(enc, 0);
  } else {
    display("IHu", 0);
    1cb4:	63 e6       	ldi	r22, 0x63	; 99
    1cb6:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:676
}

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    1cb8:	88 23       	and	r24, r24
    1cba:	69 f3       	breq	.-38     	; 0x1c96 <main+0x73e>
    1cbc:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
loop():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:268
  if(mode){
    runSetup();
  } else {
    runNormal();
  }
  if(read(ok) && read(plus) && read(minus) && switched == false){
    1cc0:	84 e1       	ldi	r24, 0x14	; 20
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1cc8:	88 23       	and	r24, r24
    1cca:	d9 f0       	breq	.+54     	; 0x1d02 <main+0x7aa>
    1ccc:	85 e1       	ldi	r24, 0x15	; 21
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1cd4:	88 23       	and	r24, r24
    1cd6:	a9 f0       	breq	.+42     	; 0x1d02 <main+0x7aa>
    1cd8:	86 e1       	ldi	r24, 0x16	; 22
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1ce0:	88 23       	and	r24, r24
    1ce2:	79 f0       	breq	.+30     	; 0x1d02 <main+0x7aa>
    1ce4:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <switched>
    1ce8:	81 11       	cpse	r24, r1
    1cea:	0b c0       	rjmp	.+22     	; 0x1d02 <main+0x7aa>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:269
    mode = !mode;
    1cec:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <mode>
    1cf0:	8b 25       	eor	r24, r11
    1cf2:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <mode>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:270
    switched = true;
    1cf6:	a0 92 49 02 	sts	0x0249, r10	; 0x800249 <switched>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:271
    encMenu = 0;
    1cfa:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <encMenu+0x1>
    1cfe:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <encMenu>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:273
  }
  if(!read(ok) && !read(plus) && !read(minus) && switched == true){
    1d02:	84 e1       	ldi	r24, 0x14	; 20
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1d0a:	81 11       	cpse	r24, r1
    1d0c:	11 c0       	rjmp	.+34     	; 0x1d30 <main+0x7d8>
    1d0e:	85 e1       	ldi	r24, 0x15	; 21
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1d16:	81 11       	cpse	r24, r1
    1d18:	0b c0       	rjmp	.+22     	; 0x1d30 <main+0x7d8>
    1d1a:	86 e1       	ldi	r24, 0x16	; 22
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <read(int)>
    1d22:	81 11       	cpse	r24, r1
    1d24:	05 c0       	rjmp	.+10     	; 0x1d30 <main+0x7d8>
    1d26:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <switched>
    1d2a:	81 11       	cpse	r24, r1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:274
    switched = false;
    1d2c:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <switched>
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    1d30:	c1 14       	cp	r12, r1
    1d32:	d1 04       	cpc	r13, r1
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <main+0x7e0>
    1d36:	d8 cd       	rjmp	.-1104   	; 0x18e8 <main+0x390>
    1d38:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1d3c:	d5 cd       	rjmp	.-1110   	; 0x18e8 <main+0x390>
menuILV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:686
}

//Setup Input low Voltage

void menuILV() {
  if(refresh.triggered(false)){
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	8b eb       	ldi	r24, 0xBB	; 187
    1d42:	91 e0       	ldi	r25, 0x01	; 1
    1d44:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:689
    displayVar(enc, 0);
  } else {
    display("ILu", 0);
    1d48:	67 e6       	ldi	r22, 0x67	; 103
    1d4a:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:686
}

//Setup Input low Voltage

void menuILV() {
  if(refresh.triggered(false)){
    1d4c:	88 23       	and	r24, r24
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <main+0x7fa>
    1d50:	a2 cf       	rjmp	.-188    	; 0x1c96 <main+0x73e>
    1d52:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    1d56:	b4 cf       	rjmp	.-152    	; 0x1cc0 <main+0x768>
menuOHV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:696
}

//Setup Output High Voltage

void menuOHV() {
  if(refresh.triggered(false)){
    1d58:	60 e0       	ldi	r22, 0x00	; 0
    1d5a:	8b eb       	ldi	r24, 0xBB	; 187
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:699
    displayVar(enc, 0);
  } else {
    display("OHu", 0);
    1d62:	6b e6       	ldi	r22, 0x6B	; 107
    1d64:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:696
}

//Setup Output High Voltage

void menuOHV() {
  if(refresh.triggered(false)){
    1d66:	88 23       	and	r24, r24
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <main+0x814>
    1d6a:	95 cf       	rjmp	.-214    	; 0x1c96 <main+0x73e>
    1d6c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    1d70:	a7 cf       	rjmp	.-178    	; 0x1cc0 <main+0x768>
menuOLV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:706
}

//Setup Output Low Voltage

void menuOLV() {
  if(refresh.triggered(false)){
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	8b eb       	ldi	r24, 0xBB	; 187
    1d76:	91 e0       	ldi	r25, 0x01	; 1
    1d78:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:709
    displayVar(enc, 0);
  } else {
    display("OLu", 0);
    1d7c:	6f e6       	ldi	r22, 0x6F	; 111
    1d7e:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:706
}

//Setup Output Low Voltage

void menuOLV() {
  if(refresh.triggered(false)){
    1d80:	88 23       	and	r24, r24
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <main+0x82e>
    1d84:	88 cf       	rjmp	.-240    	; 0x1c96 <main+0x73e>
    1d86:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    1d8a:	9a cf       	rjmp	.-204    	; 0x1cc0 <main+0x768>
menuSETV():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:716
}

//Setup Set Voltage

void menuSETV() {
  if(refresh.triggered(false)){
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	8b eb       	ldi	r24, 0xBB	; 187
    1d90:	91 e0       	ldi	r25, 0x01	; 1
    1d92:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:719
    displayVar(enc, 0);
  } else {
    display("SETu", 0);
    1d96:	63 e7       	ldi	r22, 0x73	; 115
    1d98:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:716
}

//Setup Set Voltage

void menuSETV() {
  if(refresh.triggered(false)){
    1d9a:	88 23       	and	r24, r24
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <main+0x848>
    1d9e:	7b cf       	rjmp	.-266    	; 0x1c96 <main+0x73e>
    1da0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    1da4:	8d cf       	rjmp	.-230    	; 0x1cc0 <main+0x768>
menuOVL():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:726
}

//Setup Overload

void menuOVL() {
  if(refresh.triggered(false)){
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	8b eb       	ldi	r24, 0xBB	; 187
    1daa:	91 e0       	ldi	r25, 0x01	; 1
    1dac:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:729
    displayVar(enc, 0);
  } else {
    display("OuL", 0);
    1db0:	68 e7       	ldi	r22, 0x78	; 120
    1db2:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:726
}

//Setup Overload

void menuOVL() {
  if(refresh.triggered(false)){
    1db4:	88 23       	and	r24, r24
    1db6:	09 f4       	brne	.+2      	; 0x1dba <main+0x862>
    1db8:	6e cf       	rjmp	.-292    	; 0x1c96 <main+0x73e>
    1dba:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    1dbe:	80 cf       	rjmp	.-256    	; 0x1cc0 <main+0x768>
menuTON():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:736
}

//Setup Waiting time for Output Relay to turn on

void menuTON() {
  if(refresh.triggered(false)){
    1dc0:	60 e0       	ldi	r22, 0x00	; 0
    1dc2:	8b eb       	ldi	r24, 0xBB	; 187
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
    1dc6:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:739
    displayVar(enc, 0);
  } else {
    display("tOn", 0);
    1dca:	6c e7       	ldi	r22, 0x7C	; 124
    1dcc:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:736
}

//Setup Waiting time for Output Relay to turn on

void menuTON() {
  if(refresh.triggered(false)){
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <main+0x87c>
    1dd2:	61 cf       	rjmp	.-318    	; 0x1c96 <main+0x73e>
    1dd4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    1dd8:	73 cf       	rjmp	.-282    	; 0x1cc0 <main+0x768>
menuTOFF():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:746
}

//Setup Waiting time for Output Relay to turn off

void menuTOFF() {
  if(refresh.triggered(false)){
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	8b eb       	ldi	r24, 0xBB	; 187
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:749
    displayVar(enc, 0);
  } else {
    display("tOFF", 0);
    1de4:	60 e8       	ldi	r22, 0x80	; 128
    1de6:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:746
}

//Setup Waiting time for Output Relay to turn off

void menuTOFF() {
  if(refresh.triggered(false)){
    1de8:	88 23       	and	r24, r24
    1dea:	09 f4       	brne	.+2      	; 0x1dee <main+0x896>
    1dec:	54 cf       	rjmp	.-344    	; 0x1c96 <main+0x73e>
    1dee:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    1df2:	66 cf       	rjmp	.-308    	; 0x1cc0 <main+0x768>
menuDIFF():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:756
}

//setup voltage difference from set voltage to move motor

void menuDIFF() {
  if(refresh.triggered(false)){
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	8b eb       	ldi	r24, 0xBB	; 187
    1df8:	91 e0       	ldi	r25, 0x01	; 1
    1dfa:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:759
    displayVar(enc, 0);
  } else {
    display("dIFF", 0);
    1dfe:	65 e8       	ldi	r22, 0x85	; 133
    1e00:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:756
}

//setup voltage difference from set voltage to move motor

void menuDIFF() {
  if(refresh.triggered(false)){
    1e02:	88 23       	and	r24, r24
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <main+0x8b0>
    1e06:	47 cf       	rjmp	.-370    	; 0x1c96 <main+0x73e>
    1e08:	0e 94 58 07 	call	0xeb0	; 0xeb0 <menuIHV() [clone .part.8]>
    1e0c:	59 cf       	rjmp	.-334    	; 0x1cc0 <main+0x768>
menuEND():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:764
    display("dIFF", 0);
  }
}

void menuEND() {
  display("End", 0);
    1e0e:	6a e8       	ldi	r22, 0x8A	; 138
    1e10:	71 e0       	ldi	r23, 0x01	; 1
    1e12:	41 cf       	rjmp	.-382    	; 0x1c96 <main+0x73e>
runSetup():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:812
    break;
  case 10:
    menuEND();
    break;
  default:
    encMenu = 0;
    1e14:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <encMenu+0x1>
    1e18:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <encMenu>
    1e1c:	51 cf       	rjmp	.-350    	; 0x1cc0 <main+0x768>
runNormal():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:361


//Run Mode

void runNormal() {
  if(checkin.triggered()){
    1e1e:	61 e0       	ldi	r22, 0x01	; 1
    1e20:	86 e2       	ldi	r24, 0x26	; 38
    1e22:	92 e0       	ldi	r25, 0x02	; 2
    1e24:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
    1e28:	88 23       	and	r24, r24
    1e2a:	31 f0       	breq	.+12     	; 0x1e38 <main+0x8e0>
checkinputs():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:621
/////////////////////////////////////////////////////////////////


//update inputs once based on highest voltage...
void checkinputs() {
  IVo();
    1e2c:	0e 94 8c 05 	call	0xb18	; 0xb18 <IVo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:622
  OVo();
    1e30:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <OVo()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:623
  ampo();
    1e34:	0e 94 93 04 	call	0x926	; 0x926 <ampo()>
runNormal():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:370
    //ampo();                   //
    ////////////////////////////// No Longer Used...!
    checkinputs();
  }
  //digitalWrite(motor0Rev, HIGH);
  if(routvoltage < SETV && rdiffcheck() && inputVok() && currentok()){
    1e38:	80 90 24 02 	lds	r8, 0x0224	; 0x800224 <routvoltage>
    1e3c:	90 90 25 02 	lds	r9, 0x0225	; 0x800225 <routvoltage+0x1>
    1e40:	e0 90 22 02 	lds	r14, 0x0222	; 0x800222 <SETV>
    1e44:	f0 90 23 02 	lds	r15, 0x0223	; 0x800223 <SETV+0x1>
    1e48:	8e 14       	cp	r8, r14
    1e4a:	9f 04       	cpc	r9, r15
    1e4c:	94 f4       	brge	.+36     	; 0x1e72 <main+0x91a>
    1e4e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <rdiffcheck()>
    1e52:	88 23       	and	r24, r24
    1e54:	71 f0       	breq	.+28     	; 0x1e72 <main+0x91a>
    1e56:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
    1e5a:	88 23       	and	r24, r24
    1e5c:	51 f0       	breq	.+20     	; 0x1e72 <main+0x91a>
    1e5e:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
    1e62:	88 23       	and	r24, r24
    1e64:	31 f0       	breq	.+12     	; 0x1e72 <main+0x91a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:371
    digitalWrite(motorRFW, HIGH);
    1e66:	61 e0       	ldi	r22, 0x01	; 1
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:378
    digitalWrite(motorRFW, LOW);
  }
  if(routvoltage > SETV && rdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorRBW, HIGH);
  } else {
    digitalWrite(motorRBW, LOW);
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	14 c0       	rjmp	.+40     	; 0x1e9a <main+0x942>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:373
  }
  //digitalWrite(motor0Rev, HIGH);
  if(routvoltage < SETV && rdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorRFW, HIGH);
  } else {
    digitalWrite(motorRFW, LOW);
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:375
  }
  if(routvoltage > SETV && rdiffcheck() && inputVok() && currentok()){
    1e7a:	e8 14       	cp	r14, r8
    1e7c:	f9 04       	cpc	r15, r9
    1e7e:	bc f7       	brge	.-18     	; 0x1e6e <main+0x916>
    1e80:	0e 94 78 06 	call	0xcf0	; 0xcf0 <rdiffcheck()>
    1e84:	88 23       	and	r24, r24
    1e86:	99 f3       	breq	.-26     	; 0x1e6e <main+0x916>
    1e88:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
    1e8c:	88 23       	and	r24, r24
    1e8e:	79 f3       	breq	.-34     	; 0x1e6e <main+0x916>
    1e90:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:376
    digitalWrite(motorRBW, HIGH);
    1e94:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:375
  if(routvoltage < SETV && rdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorRFW, HIGH);
  } else {
    digitalWrite(motorRFW, LOW);
  }
  if(routvoltage > SETV && rdiffcheck() && inputVok() && currentok()){
    1e96:	88 23       	and	r24, r24
    1e98:	51 f3       	breq	.-44     	; 0x1e6e <main+0x916>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:376
    digitalWrite(motorRBW, HIGH);
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:383
    digitalWrite(motorRBW, LOW);
  }



  if(youtvoltage < SETV && ydiffcheck() && inputVok() && currentok()){
    1ea0:	80 90 20 02 	lds	r8, 0x0220	; 0x800220 <youtvoltage>
    1ea4:	90 90 21 02 	lds	r9, 0x0221	; 0x800221 <youtvoltage+0x1>
    1ea8:	8e 14       	cp	r8, r14
    1eaa:	9f 04       	cpc	r9, r15
    1eac:	64 f4       	brge	.+24     	; 0x1ec6 <main+0x96e>
    1eae:	0e 94 5f 06 	call	0xcbe	; 0xcbe <ydiffcheck()>
    1eb2:	88 23       	and	r24, r24
    1eb4:	41 f0       	breq	.+16     	; 0x1ec6 <main+0x96e>
    1eb6:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
    1eba:	88 23       	and	r24, r24
    1ebc:	21 f0       	breq	.+8      	; 0x1ec6 <main+0x96e>
    1ebe:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
    1ec2:	81 11       	cpse	r24, r1
    1ec4:	09 c0       	rjmp	.+18     	; 0x1ed8 <main+0x980>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:386
    digitalWrite(motorYFW, HIGH);
  } else {
    digitalWrite(motorYFW, LOW);
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:388
  }
  if(youtvoltage > SETV && ydiffcheck() && inputVok() && currentok()){
    1ece:	e8 14       	cp	r14, r8
    1ed0:	f9 04       	cpc	r15, r9
    1ed2:	3c f0       	brlt	.+14     	; 0x1ee2 <main+0x98a>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:391
    digitalWrite(motorYBW, HIGH);
  } else {
    digitalWrite(motorYBW, LOW);
    1ed4:	60 e0       	ldi	r22, 0x00	; 0
    1ed6:	12 c0       	rjmp	.+36     	; 0x1efc <main+0x9a4>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:384
  }



  if(youtvoltage < SETV && ydiffcheck() && inputVok() && currentok()){
    digitalWrite(motorYFW, HIGH);
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
    1ee0:	f9 cf       	rjmp	.-14     	; 0x1ed4 <main+0x97c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:388
  } else {
    digitalWrite(motorYFW, LOW);
  }
  if(youtvoltage > SETV && ydiffcheck() && inputVok() && currentok()){
    1ee2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <ydiffcheck()>
    1ee6:	88 23       	and	r24, r24
    1ee8:	a9 f3       	breq	.-22     	; 0x1ed4 <main+0x97c>
    1eea:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
    1eee:	88 23       	and	r24, r24
    1ef0:	89 f3       	breq	.-30     	; 0x1ed4 <main+0x97c>
    1ef2:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:389
    digitalWrite(motorYBW, HIGH);
    1ef6:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:388
  if(youtvoltage < SETV && ydiffcheck() && inputVok() && currentok()){
    digitalWrite(motorYFW, HIGH);
  } else {
    digitalWrite(motorYFW, LOW);
  }
  if(youtvoltage > SETV && ydiffcheck() && inputVok() && currentok()){
    1ef8:	88 23       	and	r24, r24
    1efa:	61 f3       	breq	.-40     	; 0x1ed4 <main+0x97c>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:389
    digitalWrite(motorYBW, HIGH);
    1efc:	83 e0       	ldi	r24, 0x03	; 3
    1efe:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:395
  } else {
    digitalWrite(motorYBW, LOW);
  }


  if(boutvoltage < SETV && bdiffcheck() && inputVok() && currentok()){
    1f02:	80 90 1e 02 	lds	r8, 0x021E	; 0x80021e <boutvoltage>
    1f06:	90 90 1f 02 	lds	r9, 0x021F	; 0x80021f <boutvoltage+0x1>
    1f0a:	8e 14       	cp	r8, r14
    1f0c:	9f 04       	cpc	r9, r15
    1f0e:	64 f4       	brge	.+24     	; 0x1f28 <main+0x9d0>
    1f10:	0e 94 46 06 	call	0xc8c	; 0xc8c <bdiffcheck()>
    1f14:	88 23       	and	r24, r24
    1f16:	41 f0       	breq	.+16     	; 0x1f28 <main+0x9d0>
    1f18:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
    1f1c:	88 23       	and	r24, r24
    1f1e:	21 f0       	breq	.+8      	; 0x1f28 <main+0x9d0>
    1f20:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
    1f24:	81 11       	cpse	r24, r1
    1f26:	09 c0       	rjmp	.+18     	; 0x1f3a <main+0x9e2>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:398
    digitalWrite(motorBFW, HIGH);
  } else {
    digitalWrite(motorBFW, LOW);
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	84 e0       	ldi	r24, 0x04	; 4
    1f2c:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:400
  }
  if(boutvoltage > SETV && bdiffcheck() && inputVok() && currentok()){
    1f30:	e8 14       	cp	r14, r8
    1f32:	f9 04       	cpc	r15, r9
    1f34:	3c f0       	brlt	.+14     	; 0x1f44 <main+0x9ec>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:403
    digitalWrite(motorBBW, HIGH);
  } else {
    digitalWrite(motorBBW, LOW);
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	12 c0       	rjmp	.+36     	; 0x1f5e <main+0xa06>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:396
    digitalWrite(motorYBW, LOW);
  }


  if(boutvoltage < SETV && bdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorBFW, HIGH);
    1f3a:	61 e0       	ldi	r22, 0x01	; 1
    1f3c:	84 e0       	ldi	r24, 0x04	; 4
    1f3e:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
    1f42:	f9 cf       	rjmp	.-14     	; 0x1f36 <main+0x9de>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:400
  } else {
    digitalWrite(motorBFW, LOW);
  }
  if(boutvoltage > SETV && bdiffcheck() && inputVok() && currentok()){
    1f44:	0e 94 46 06 	call	0xc8c	; 0xc8c <bdiffcheck()>
    1f48:	88 23       	and	r24, r24
    1f4a:	a9 f3       	breq	.-22     	; 0x1f36 <main+0x9de>
    1f4c:	0e 94 c8 06 	call	0xd90	; 0xd90 <inputVok()>
    1f50:	88 23       	and	r24, r24
    1f52:	89 f3       	breq	.-30     	; 0x1f36 <main+0x9de>
    1f54:	0e 94 91 06 	call	0xd22	; 0xd22 <currentok()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:401
    digitalWrite(motorBBW, HIGH);
    1f58:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:400
  if(boutvoltage < SETV && bdiffcheck() && inputVok() && currentok()){
    digitalWrite(motorBFW, HIGH);
  } else {
    digitalWrite(motorBFW, LOW);
  }
  if(boutvoltage > SETV && bdiffcheck() && inputVok() && currentok()){
    1f5a:	88 23       	and	r24, r24
    1f5c:	61 f3       	breq	.-40     	; 0x1f36 <main+0x9de>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:401
    digitalWrite(motorBBW, HIGH);
    1f5e:	85 e0       	ldi	r24, 0x05	; 5
    1f60:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:406
  } else {
    digitalWrite(motorBBW, LOW);
  }

  if(checksystem()){
    1f64:	0e 94 f1 06 	call	0xde2	; 0xde2 <checksystem()>
    1f68:	88 23       	and	r24, r24
    1f6a:	c1 f0       	breq	.+48     	; 0x1f9c <main+0xa44>
updateScreenData():
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <updateScreenData(bool) [clone .part.7]>
updatePower():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:431
}

//Control Output Supply Relay

void updatePower() {
  if(checksystem()){
    1f72:	0e 94 f1 06 	call	0xde2	; 0xde2 <checksystem()>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:432
    if(on.triggered(false)){  
    1f76:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:431
}

//Control Output Supply Relay

void updatePower() {
  if(checksystem()){
    1f78:	88 23       	and	r24, r24
    1f7a:	91 f0       	breq	.+36     	; 0x1fa0 <main+0xa48>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:432
    if(on.triggered(false)){  
    1f7c:	8d ef       	ldi	r24, 0xFD	; 253
    1f7e:	91 e0       	ldi	r25, 0x01	; 1
    1f80:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
    1f84:	88 23       	and	r24, r24
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <main+0xa32>
    1f88:	9b ce       	rjmp	.-714    	; 0x1cc0 <main+0x768>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:433
      digitalWrite(contactor, HIGH);
    1f8a:	61 e0       	ldi	r22, 0x01	; 1
    1f8c:	86 e0       	ldi	r24, 0x06	; 6
    1f8e:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:434
      off.reset();
    1f92:	8c ed       	ldi	r24, 0xDC	; 220
    1f94:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:440
    }
  }
  else {
    if(off.triggered(false)) {
      digitalWrite(contactor, LOW);
      on.reset();
    1f96:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
    1f9a:	92 ce       	rjmp	.-732    	; 0x1cc0 <main+0x768>
updateScreenData():
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	e7 cf       	rjmp	.-50     	; 0x1f6e <main+0xa16>
updatePower():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:438
      digitalWrite(contactor, HIGH);
      off.reset();
    }
  }
  else {
    if(off.triggered(false)) {
    1fa0:	8c ed       	ldi	r24, 0xDC	; 220
    1fa2:	91 e0       	ldi	r25, 0x01	; 1
    1fa4:	0e 94 1e 04 	call	0x83c	; 0x83c <BlockNot::triggered(bool)>
    1fa8:	88 23       	and	r24, r24
    1faa:	09 f4       	brne	.+2      	; 0x1fae <main+0xa56>
    1fac:	89 ce       	rjmp	.-750    	; 0x1cc0 <main+0x768>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:439
      digitalWrite(contactor, LOW);
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	86 e0       	ldi	r24, 0x06	; 6
    1fb2:	0e 94 2a 01 	call	0x254	; 0x254 <digitalWrite>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:440
      on.reset();
    1fb6:	8d ef       	ldi	r24, 0xFD	; 253
    1fb8:	91 e0       	ldi	r25, 0x01	; 1
    1fba:	ed cf       	rjmp	.-38     	; 0x1f96 <main+0xa3e>

00001fbc <_GLOBAL__sub_I_display1>:
_GLOBAL__sub_I_display1():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1007
  int numberOfDigits = 4; 

  display1.Begin(displayType, numberOfDigits, digit1, digit2, digit3, digit4, segA, segB, segC, segD, segE, segF, segG, segDP);
  
  display1.SetBrightness(100); 
}
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
__base_ctor ():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/SevSeg.cpp:67
#include "SevSeg.h"

SevSeg::SevSeg()
{
  //Initial values
  DecAposColon = 0; //This variable tracks the decimal place, apostrophe, and colon (if the display has support)
    1fc0:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <display1+0x48>
__static_initialization_and_destruction_0():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:114


//Intialize the SevenSegament Display
SevSeg display1;
//Timer that updates Main screen every Second.
BlockNot refresh(1, SECONDS);
    1fc4:	41 e0       	ldi	r20, 0x01	; 1
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	8b eb       	ldi	r24, 0xBB	; 187
    1fce:	91 e0       	ldi	r25, 0x01	; 1
    1fd0:	0e 94 8f 03 	call	0x71e	; 0x71e <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]>
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:34
BlockNot::BlockNot() {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    if (global == GLOBAL_RESET) addToTimerList();
}

BlockNot::BlockNot(unsigned long time) {
    1fd4:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <checkin+0x4>
    1fd8:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <checkin+0x5>
    1fdc:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <checkin+0x6>
    1fe0:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <checkin+0x7>
    1fe4:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <checkin+0x8>
    1fe8:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <checkin+0x9>
    1fec:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <checkin+0xa>
    1ff0:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <checkin+0xb>
    1ff4:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <checkin+0xc>
    1ff8:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <checkin+0xd>
    1ffc:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <checkin+0xe>
    2000:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <checkin+0xf>
    2004:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <checkin+0x11>
    2008:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <checkin+0x10>
    200c:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <checkin+0x12>
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <checkin+0x14>
    2018:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <checkin+0x13>
    201c:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <checkin+0x1e>
    2020:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <checkin+0x1d>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:35
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    2024:	c0 91 99 02 	lds	r28, 0x0299	; 0x800299 <BlockNot::global>
    2028:	d0 91 9a 02 	lds	r29, 0x029A	; 0x80029a <BlockNot::global+0x1>
    202c:	c1 30       	cpi	r28, 0x01	; 1
    202e:	d1 05       	cpc	r29, r1
    2030:	11 f0       	breq	.+4      	; 0x2036 <_GLOBAL__sub_I_display1+0x7a>
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <BlockNot::global+0x1>
    203a:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <BlockNot::global>
_ZN8BlockNot5cTime7milli_taSEd():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:197

        class milli_t {
            double seconds;
        public:
            milli_t &operator=(double ms) {
                seconds = ms * .001;
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a0 e8       	ldi	r26, 0x80	; 128
    2044:	be e3       	ldi	r27, 0x3E	; 62
    2046:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <checkin+0x15>
    204a:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <checkin+0x16>
    204e:	a0 93 3d 02 	sts	0x023D, r26	; 0x80023d <checkin+0x17>
    2052:	b0 93 3e 02 	sts	0x023E, r27	; 0x80023e <checkin+0x18>
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:37
    initDuration(time);
    reset();
    2056:	86 e2       	ldi	r24, 0x26	; 38
    2058:	92 e0       	ldi	r25, 0x02	; 2
    205a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BlockNot::reset(unsigned long) [clone .constprop.18]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:38
    if (global == GLOBAL_RESET) addToTimerList();
    205e:	21 97       	sbiw	r28, 0x01	; 1
    2060:	21 f0       	breq	.+8      	; 0x206a <_GLOBAL__sub_I_display1+0xae>
    2062:	86 e2       	ldi	r24, 0x26	; 38
    2064:	92 e0       	ldi	r25, 0x02	; 2
    2066:	0e 94 8f 0a 	call	0x151e	; 0x151e <BlockNot::addToTimerList()>
__static_initialization_and_destruction_0():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:166
/**/
bool mode = false;
bool switched = false;
/**/

BlockNot on(TON, SECONDS);
    206a:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <TON>
    206e:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <TON+0x1>
    2072:	05 2e       	mov	r0, r21
    2074:	00 0c       	add	r0, r0
    2076:	66 0b       	sbc	r22, r22
    2078:	77 0b       	sbc	r23, r23
    207a:	8d ef       	ldi	r24, 0xFD	; 253
    207c:	91 e0       	ldi	r25, 0x01	; 1
    207e:	0e 94 8f 03 	call	0x71e	; 0x71e <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]>
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:167
BlockNot off(TOFF, SECONDS);
    2082:	40 91 a8 01 	lds	r20, 0x01A8	; 0x8001a8 <TOFF>
    2086:	50 91 a9 01 	lds	r21, 0x01A9	; 0x8001a9 <TOFF+0x1>
    208a:	05 2e       	mov	r0, r21
    208c:	00 0c       	add	r0, r0
    208e:	66 0b       	sbc	r22, r22
    2090:	77 0b       	sbc	r23, r23
    2092:	8c ed       	ldi	r24, 0xDC	; 220
    2094:	91 e0       	ldi	r25, 0x01	; 1
_GLOBAL__sub_I_display1():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:1007
  int numberOfDigits = 4; 

  display1.Begin(displayType, numberOfDigits, digit1, digit2, digit3, digit4, segA, segB, segC, segD, segE, segF, segG, segDP);
  
  display1.SetBrightness(100); 
}
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
__static_initialization_and_destruction_0():
C:\Users\Admin\Desktop\servo300.001\004-3PH-SERVO-ATMega1284P/004-3PH-SERVO-ATMega1284P.ino:167
bool mode = false;
bool switched = false;
/**/

BlockNot on(TON, SECONDS);
BlockNot off(TOFF, SECONDS);
    209a:	0c 94 8f 03 	jmp	0x71e	; 0x71e <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.17]>

0000209e <__floatunsisf>:
__floatunsisf():
    209e:	e8 94       	clt
    20a0:	09 c0       	rjmp	.+18     	; 0x20b4 <__floatsisf+0x12>

000020a2 <__floatsisf>:
    20a2:	97 fb       	bst	r25, 7
    20a4:	3e f4       	brtc	.+14     	; 0x20b4 <__floatsisf+0x12>
    20a6:	90 95       	com	r25
    20a8:	80 95       	com	r24
    20aa:	70 95       	com	r23
    20ac:	61 95       	neg	r22
    20ae:	7f 4f       	sbci	r23, 0xFF	; 255
    20b0:	8f 4f       	sbci	r24, 0xFF	; 255
    20b2:	9f 4f       	sbci	r25, 0xFF	; 255
    20b4:	99 23       	and	r25, r25
    20b6:	a9 f0       	breq	.+42     	; 0x20e2 <__floatsisf+0x40>
    20b8:	f9 2f       	mov	r31, r25
    20ba:	96 e9       	ldi	r25, 0x96	; 150
    20bc:	bb 27       	eor	r27, r27
    20be:	93 95       	inc	r25
    20c0:	f6 95       	lsr	r31
    20c2:	87 95       	ror	r24
    20c4:	77 95       	ror	r23
    20c6:	67 95       	ror	r22
    20c8:	b7 95       	ror	r27
    20ca:	f1 11       	cpse	r31, r1
    20cc:	f8 cf       	rjmp	.-16     	; 0x20be <__floatsisf+0x1c>
    20ce:	fa f4       	brpl	.+62     	; 0x210e <__floatsisf+0x6c>
    20d0:	bb 0f       	add	r27, r27
    20d2:	11 f4       	brne	.+4      	; 0x20d8 <__floatsisf+0x36>
    20d4:	60 ff       	sbrs	r22, 0
    20d6:	1b c0       	rjmp	.+54     	; 0x210e <__floatsisf+0x6c>
    20d8:	6f 5f       	subi	r22, 0xFF	; 255
    20da:	7f 4f       	sbci	r23, 0xFF	; 255
    20dc:	8f 4f       	sbci	r24, 0xFF	; 255
    20de:	9f 4f       	sbci	r25, 0xFF	; 255
    20e0:	16 c0       	rjmp	.+44     	; 0x210e <__floatsisf+0x6c>
    20e2:	88 23       	and	r24, r24
    20e4:	11 f0       	breq	.+4      	; 0x20ea <__floatsisf+0x48>
    20e6:	96 e9       	ldi	r25, 0x96	; 150
    20e8:	11 c0       	rjmp	.+34     	; 0x210c <__floatsisf+0x6a>
    20ea:	77 23       	and	r23, r23
    20ec:	21 f0       	breq	.+8      	; 0x20f6 <__floatsisf+0x54>
    20ee:	9e e8       	ldi	r25, 0x8E	; 142
    20f0:	87 2f       	mov	r24, r23
    20f2:	76 2f       	mov	r23, r22
    20f4:	05 c0       	rjmp	.+10     	; 0x2100 <__floatsisf+0x5e>
    20f6:	66 23       	and	r22, r22
    20f8:	71 f0       	breq	.+28     	; 0x2116 <__floatsisf+0x74>
    20fa:	96 e8       	ldi	r25, 0x86	; 134
    20fc:	86 2f       	mov	r24, r22
    20fe:	70 e0       	ldi	r23, 0x00	; 0
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	2a f0       	brmi	.+10     	; 0x210e <__floatsisf+0x6c>
    2104:	9a 95       	dec	r25
    2106:	66 0f       	add	r22, r22
    2108:	77 1f       	adc	r23, r23
    210a:	88 1f       	adc	r24, r24
    210c:	da f7       	brpl	.-10     	; 0x2104 <__floatsisf+0x62>
    210e:	88 0f       	add	r24, r24
    2110:	96 95       	lsr	r25
    2112:	87 95       	ror	r24
    2114:	97 f9       	bld	r25, 7
    2116:	08 95       	ret

00002118 <__fp_cmp>:
__fp_cmp():
    2118:	99 0f       	add	r25, r25
    211a:	00 08       	sbc	r0, r0
    211c:	55 0f       	add	r21, r21
    211e:	aa 0b       	sbc	r26, r26
    2120:	e0 e8       	ldi	r30, 0x80	; 128
    2122:	fe ef       	ldi	r31, 0xFE	; 254
    2124:	16 16       	cp	r1, r22
    2126:	17 06       	cpc	r1, r23
    2128:	e8 07       	cpc	r30, r24
    212a:	f9 07       	cpc	r31, r25
    212c:	c0 f0       	brcs	.+48     	; 0x215e <__fp_cmp+0x46>
    212e:	12 16       	cp	r1, r18
    2130:	13 06       	cpc	r1, r19
    2132:	e4 07       	cpc	r30, r20
    2134:	f5 07       	cpc	r31, r21
    2136:	98 f0       	brcs	.+38     	; 0x215e <__fp_cmp+0x46>
    2138:	62 1b       	sub	r22, r18
    213a:	73 0b       	sbc	r23, r19
    213c:	84 0b       	sbc	r24, r20
    213e:	95 0b       	sbc	r25, r21
    2140:	39 f4       	brne	.+14     	; 0x2150 <__fp_cmp+0x38>
    2142:	0a 26       	eor	r0, r26
    2144:	61 f0       	breq	.+24     	; 0x215e <__fp_cmp+0x46>
    2146:	23 2b       	or	r18, r19
    2148:	24 2b       	or	r18, r20
    214a:	25 2b       	or	r18, r21
    214c:	21 f4       	brne	.+8      	; 0x2156 <__fp_cmp+0x3e>
    214e:	08 95       	ret
    2150:	0a 26       	eor	r0, r26
    2152:	09 f4       	brne	.+2      	; 0x2156 <__fp_cmp+0x3e>
    2154:	a1 40       	sbci	r26, 0x01	; 1
    2156:	a6 95       	lsr	r26
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	81 1d       	adc	r24, r1
    215c:	81 1d       	adc	r24, r1
    215e:	08 95       	ret

00002160 <__mulsf3>:
__mulsf3():
    2160:	0e 94 c3 10 	call	0x2186	; 0x2186 <__mulsf3x>
    2164:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__fp_round>
    2168:	0e 94 26 11 	call	0x224c	; 0x224c <__fp_pscA>
    216c:	38 f0       	brcs	.+14     	; 0x217c <__mulsf3+0x1c>
    216e:	0e 94 2d 11 	call	0x225a	; 0x225a <__fp_pscB>
    2172:	20 f0       	brcs	.+8      	; 0x217c <__mulsf3+0x1c>
    2174:	95 23       	and	r25, r21
    2176:	11 f0       	breq	.+4      	; 0x217c <__mulsf3+0x1c>
    2178:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__fp_inf>
    217c:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__fp_nan>
    2180:	11 24       	eor	r1, r1
    2182:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__fp_szero>

00002186 <__mulsf3x>:
__mulsf3x():
    2186:	0e 94 45 11 	call	0x228a	; 0x228a <__fp_split3>
    218a:	70 f3       	brcs	.-36     	; 0x2168 <__mulsf3+0x8>

0000218c <__mulsf3_pse>:
    218c:	95 9f       	mul	r25, r21
    218e:	c1 f3       	breq	.-16     	; 0x2180 <__mulsf3+0x20>
    2190:	95 0f       	add	r25, r21
    2192:	50 e0       	ldi	r21, 0x00	; 0
    2194:	55 1f       	adc	r21, r21
    2196:	62 9f       	mul	r22, r18
    2198:	f0 01       	movw	r30, r0
    219a:	72 9f       	mul	r23, r18
    219c:	bb 27       	eor	r27, r27
    219e:	f0 0d       	add	r31, r0
    21a0:	b1 1d       	adc	r27, r1
    21a2:	63 9f       	mul	r22, r19
    21a4:	aa 27       	eor	r26, r26
    21a6:	f0 0d       	add	r31, r0
    21a8:	b1 1d       	adc	r27, r1
    21aa:	aa 1f       	adc	r26, r26
    21ac:	64 9f       	mul	r22, r20
    21ae:	66 27       	eor	r22, r22
    21b0:	b0 0d       	add	r27, r0
    21b2:	a1 1d       	adc	r26, r1
    21b4:	66 1f       	adc	r22, r22
    21b6:	82 9f       	mul	r24, r18
    21b8:	22 27       	eor	r18, r18
    21ba:	b0 0d       	add	r27, r0
    21bc:	a1 1d       	adc	r26, r1
    21be:	62 1f       	adc	r22, r18
    21c0:	73 9f       	mul	r23, r19
    21c2:	b0 0d       	add	r27, r0
    21c4:	a1 1d       	adc	r26, r1
    21c6:	62 1f       	adc	r22, r18
    21c8:	83 9f       	mul	r24, r19
    21ca:	a0 0d       	add	r26, r0
    21cc:	61 1d       	adc	r22, r1
    21ce:	22 1f       	adc	r18, r18
    21d0:	74 9f       	mul	r23, r20
    21d2:	33 27       	eor	r19, r19
    21d4:	a0 0d       	add	r26, r0
    21d6:	61 1d       	adc	r22, r1
    21d8:	23 1f       	adc	r18, r19
    21da:	84 9f       	mul	r24, r20
    21dc:	60 0d       	add	r22, r0
    21de:	21 1d       	adc	r18, r1
    21e0:	82 2f       	mov	r24, r18
    21e2:	76 2f       	mov	r23, r22
    21e4:	6a 2f       	mov	r22, r26
    21e6:	11 24       	eor	r1, r1
    21e8:	9f 57       	subi	r25, 0x7F	; 127
    21ea:	50 40       	sbci	r21, 0x00	; 0
    21ec:	9a f0       	brmi	.+38     	; 0x2214 <__mulsf3_pse+0x88>
    21ee:	f1 f0       	breq	.+60     	; 0x222c <__mulsf3_pse+0xa0>
    21f0:	88 23       	and	r24, r24
    21f2:	4a f0       	brmi	.+18     	; 0x2206 <__mulsf3_pse+0x7a>
    21f4:	ee 0f       	add	r30, r30
    21f6:	ff 1f       	adc	r31, r31
    21f8:	bb 1f       	adc	r27, r27
    21fa:	66 1f       	adc	r22, r22
    21fc:	77 1f       	adc	r23, r23
    21fe:	88 1f       	adc	r24, r24
    2200:	91 50       	subi	r25, 0x01	; 1
    2202:	50 40       	sbci	r21, 0x00	; 0
    2204:	a9 f7       	brne	.-22     	; 0x21f0 <__mulsf3_pse+0x64>
    2206:	9e 3f       	cpi	r25, 0xFE	; 254
    2208:	51 05       	cpc	r21, r1
    220a:	80 f0       	brcs	.+32     	; 0x222c <__mulsf3_pse+0xa0>
    220c:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__fp_inf>
    2210:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__fp_szero>
    2214:	5f 3f       	cpi	r21, 0xFF	; 255
    2216:	e4 f3       	brlt	.-8      	; 0x2210 <__mulsf3_pse+0x84>
    2218:	98 3e       	cpi	r25, 0xE8	; 232
    221a:	d4 f3       	brlt	.-12     	; 0x2210 <__mulsf3_pse+0x84>
    221c:	86 95       	lsr	r24
    221e:	77 95       	ror	r23
    2220:	67 95       	ror	r22
    2222:	b7 95       	ror	r27
    2224:	f7 95       	ror	r31
    2226:	e7 95       	ror	r30
    2228:	9f 5f       	subi	r25, 0xFF	; 255
    222a:	c1 f7       	brne	.-16     	; 0x221c <__mulsf3_pse+0x90>
    222c:	fe 2b       	or	r31, r30
    222e:	88 0f       	add	r24, r24
    2230:	91 1d       	adc	r25, r1
    2232:	96 95       	lsr	r25
    2234:	87 95       	ror	r24
    2236:	97 f9       	bld	r25, 7
    2238:	08 95       	ret

0000223a <__fp_inf>:
    223a:	97 f9       	bld	r25, 7
    223c:	9f 67       	ori	r25, 0x7F	; 127
    223e:	80 e8       	ldi	r24, 0x80	; 128
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	08 95       	ret

00002246 <__fp_nan>:
    2246:	9f ef       	ldi	r25, 0xFF	; 255
    2248:	80 ec       	ldi	r24, 0xC0	; 192
    224a:	08 95       	ret

0000224c <__fp_pscA>:
    224c:	00 24       	eor	r0, r0
    224e:	0a 94       	dec	r0
    2250:	16 16       	cp	r1, r22
    2252:	17 06       	cpc	r1, r23
    2254:	18 06       	cpc	r1, r24
    2256:	09 06       	cpc	r0, r25
__fp_pscA():
    2258:	08 95       	ret

0000225a <__fp_pscB>:
__fp_pscB():
    225a:	00 24       	eor	r0, r0
    225c:	0a 94       	dec	r0
    225e:	12 16       	cp	r1, r18
    2260:	13 06       	cpc	r1, r19
    2262:	14 06       	cpc	r1, r20
    2264:	05 06       	cpc	r0, r21
    2266:	08 95       	ret

00002268 <__fp_round>:
__fp_round():
    2268:	09 2e       	mov	r0, r25
    226a:	03 94       	inc	r0
    226c:	00 0c       	add	r0, r0
    226e:	11 f4       	brne	.+4      	; 0x2274 <__fp_round+0xc>
    2270:	88 23       	and	r24, r24
    2272:	52 f0       	brmi	.+20     	; 0x2288 <__fp_round+0x20>
    2274:	bb 0f       	add	r27, r27
    2276:	40 f4       	brcc	.+16     	; 0x2288 <__fp_round+0x20>
    2278:	bf 2b       	or	r27, r31
    227a:	11 f4       	brne	.+4      	; 0x2280 <__fp_round+0x18>
    227c:	60 ff       	sbrs	r22, 0
    227e:	04 c0       	rjmp	.+8      	; 0x2288 <__fp_round+0x20>
    2280:	6f 5f       	subi	r22, 0xFF	; 255
    2282:	7f 4f       	sbci	r23, 0xFF	; 255
    2284:	8f 4f       	sbci	r24, 0xFF	; 255
    2286:	9f 4f       	sbci	r25, 0xFF	; 255
    2288:	08 95       	ret

0000228a <__fp_split3>:
__fp_split3():
    228a:	57 fd       	sbrc	r21, 7
    228c:	90 58       	subi	r25, 0x80	; 128
    228e:	44 0f       	add	r20, r20
    2290:	55 1f       	adc	r21, r21
    2292:	59 f0       	breq	.+22     	; 0x22aa <__fp_splitA+0x10>
    2294:	5f 3f       	cpi	r21, 0xFF	; 255
    2296:	71 f0       	breq	.+28     	; 0x22b4 <__fp_splitA+0x1a>
    2298:	47 95       	ror	r20

0000229a <__fp_splitA>:
    229a:	88 0f       	add	r24, r24
    229c:	97 fb       	bst	r25, 7
    229e:	99 1f       	adc	r25, r25
    22a0:	61 f0       	breq	.+24     	; 0x22ba <__fp_splitA+0x20>
    22a2:	9f 3f       	cpi	r25, 0xFF	; 255
    22a4:	79 f0       	breq	.+30     	; 0x22c4 <__fp_splitA+0x2a>
    22a6:	87 95       	ror	r24
    22a8:	08 95       	ret
    22aa:	12 16       	cp	r1, r18
    22ac:	13 06       	cpc	r1, r19
    22ae:	14 06       	cpc	r1, r20
    22b0:	55 1f       	adc	r21, r21
    22b2:	f2 cf       	rjmp	.-28     	; 0x2298 <__fp_split3+0xe>
    22b4:	46 95       	lsr	r20
    22b6:	f1 df       	rcall	.-30     	; 0x229a <__fp_splitA>
    22b8:	08 c0       	rjmp	.+16     	; 0x22ca <__fp_splitA+0x30>
    22ba:	16 16       	cp	r1, r22
    22bc:	17 06       	cpc	r1, r23
    22be:	18 06       	cpc	r1, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	f1 cf       	rjmp	.-30     	; 0x22a6 <__fp_splitA+0xc>
    22c4:	86 95       	lsr	r24
    22c6:	71 05       	cpc	r23, r1
    22c8:	61 05       	cpc	r22, r1
    22ca:	08 94       	sec
    22cc:	08 95       	ret

000022ce <__fp_zero>:
__fp_zero():
    22ce:	e8 94       	clt

000022d0 <__fp_szero>:
    22d0:	bb 27       	eor	r27, r27
    22d2:	66 27       	eor	r22, r22
    22d4:	77 27       	eor	r23, r23
    22d6:	cb 01       	movw	r24, r22
    22d8:	97 f9       	bld	r25, 7
    22da:	08 95       	ret

000022dc <eeprom_read_byte>:
eeprom_read_byte():
    22dc:	f9 99       	sbic	0x1f, 1	; 31
    22de:	fe cf       	rjmp	.-4      	; 0x22dc <eeprom_read_byte>
    22e0:	92 bd       	out	0x22, r25	; 34
    22e2:	81 bd       	out	0x21, r24	; 33
    22e4:	f8 9a       	sbi	0x1f, 0	; 31
    22e6:	99 27       	eor	r25, r25
    22e8:	80 b5       	in	r24, 0x20	; 32
    22ea:	08 95       	ret

000022ec <eeprom_write_byte>:
eeprom_write_byte():
    22ec:	26 2f       	mov	r18, r22

000022ee <eeprom_write_r18>:
    22ee:	f9 99       	sbic	0x1f, 1	; 31
    22f0:	fe cf       	rjmp	.-4      	; 0x22ee <eeprom_write_r18>
    22f2:	1f ba       	out	0x1f, r1	; 31
    22f4:	92 bd       	out	0x22, r25	; 34
    22f6:	81 bd       	out	0x21, r24	; 33
    22f8:	20 bd       	out	0x20, r18	; 32
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	fa 9a       	sbi	0x1f, 2	; 31
    2300:	f9 9a       	sbi	0x1f, 1	; 31
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	08 95       	ret

00002308 <__divsf3>:
__divsf3():
    2308:	0e 94 98 11 	call	0x2330	; 0x2330 <__divsf3x>
    230c:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__fp_round>
    2310:	0e 94 2d 11 	call	0x225a	; 0x225a <__fp_pscB>
    2314:	58 f0       	brcs	.+22     	; 0x232c <__divsf3+0x24>
    2316:	0e 94 26 11 	call	0x224c	; 0x224c <__fp_pscA>
    231a:	40 f0       	brcs	.+16     	; 0x232c <__divsf3+0x24>
    231c:	29 f4       	brne	.+10     	; 0x2328 <__divsf3+0x20>
    231e:	5f 3f       	cpi	r21, 0xFF	; 255
    2320:	29 f0       	breq	.+10     	; 0x232c <__divsf3+0x24>
    2322:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__fp_inf>
    2326:	51 11       	cpse	r21, r1
    2328:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__fp_szero>
    232c:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__fp_nan>

00002330 <__divsf3x>:
__divsf3x():
    2330:	0e 94 45 11 	call	0x228a	; 0x228a <__fp_split3>
    2334:	68 f3       	brcs	.-38     	; 0x2310 <__divsf3+0x8>

00002336 <__divsf3_pse>:
    2336:	99 23       	and	r25, r25
    2338:	b1 f3       	breq	.-20     	; 0x2326 <__divsf3+0x1e>
    233a:	55 23       	and	r21, r21
    233c:	91 f3       	breq	.-28     	; 0x2322 <__divsf3+0x1a>
    233e:	95 1b       	sub	r25, r21
    2340:	55 0b       	sbc	r21, r21
    2342:	bb 27       	eor	r27, r27
    2344:	aa 27       	eor	r26, r26
    2346:	62 17       	cp	r22, r18
    2348:	73 07       	cpc	r23, r19
    234a:	84 07       	cpc	r24, r20
    234c:	38 f0       	brcs	.+14     	; 0x235c <__divsf3_pse+0x26>
    234e:	9f 5f       	subi	r25, 0xFF	; 255
    2350:	5f 4f       	sbci	r21, 0xFF	; 255
    2352:	22 0f       	add	r18, r18
    2354:	33 1f       	adc	r19, r19
    2356:	44 1f       	adc	r20, r20
    2358:	aa 1f       	adc	r26, r26
    235a:	a9 f3       	breq	.-22     	; 0x2346 <__divsf3_pse+0x10>
    235c:	35 d0       	rcall	.+106    	; 0x23c8 <__divsf3_pse+0x92>
    235e:	0e 2e       	mov	r0, r30
    2360:	3a f0       	brmi	.+14     	; 0x2370 <__divsf3_pse+0x3a>
    2362:	e0 e8       	ldi	r30, 0x80	; 128
    2364:	32 d0       	rcall	.+100    	; 0x23ca <__divsf3_pse+0x94>
    2366:	91 50       	subi	r25, 0x01	; 1
    2368:	50 40       	sbci	r21, 0x00	; 0
    236a:	e6 95       	lsr	r30
    236c:	00 1c       	adc	r0, r0
    236e:	ca f7       	brpl	.-14     	; 0x2362 <__divsf3_pse+0x2c>
    2370:	2b d0       	rcall	.+86     	; 0x23c8 <__divsf3_pse+0x92>
    2372:	fe 2f       	mov	r31, r30
    2374:	29 d0       	rcall	.+82     	; 0x23c8 <__divsf3_pse+0x92>
    2376:	66 0f       	add	r22, r22
    2378:	77 1f       	adc	r23, r23
    237a:	88 1f       	adc	r24, r24
    237c:	bb 1f       	adc	r27, r27
    237e:	26 17       	cp	r18, r22
    2380:	37 07       	cpc	r19, r23
    2382:	48 07       	cpc	r20, r24
    2384:	ab 07       	cpc	r26, r27
    2386:	b0 e8       	ldi	r27, 0x80	; 128
    2388:	09 f0       	breq	.+2      	; 0x238c <__divsf3_pse+0x56>
    238a:	bb 0b       	sbc	r27, r27
    238c:	80 2d       	mov	r24, r0
    238e:	bf 01       	movw	r22, r30
    2390:	ff 27       	eor	r31, r31
    2392:	93 58       	subi	r25, 0x83	; 131
    2394:	5f 4f       	sbci	r21, 0xFF	; 255
    2396:	3a f0       	brmi	.+14     	; 0x23a6 <__divsf3_pse+0x70>
    2398:	9e 3f       	cpi	r25, 0xFE	; 254
    239a:	51 05       	cpc	r21, r1
    239c:	78 f0       	brcs	.+30     	; 0x23bc <__divsf3_pse+0x86>
    239e:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__fp_inf>
    23a2:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__fp_szero>
    23a6:	5f 3f       	cpi	r21, 0xFF	; 255
    23a8:	e4 f3       	brlt	.-8      	; 0x23a2 <__divsf3_pse+0x6c>
    23aa:	98 3e       	cpi	r25, 0xE8	; 232
    23ac:	d4 f3       	brlt	.-12     	; 0x23a2 <__divsf3_pse+0x6c>
    23ae:	86 95       	lsr	r24
    23b0:	77 95       	ror	r23
    23b2:	67 95       	ror	r22
    23b4:	b7 95       	ror	r27
    23b6:	f7 95       	ror	r31
    23b8:	9f 5f       	subi	r25, 0xFF	; 255
    23ba:	c9 f7       	brne	.-14     	; 0x23ae <__divsf3_pse+0x78>
    23bc:	88 0f       	add	r24, r24
    23be:	91 1d       	adc	r25, r1
    23c0:	96 95       	lsr	r25
    23c2:	87 95       	ror	r24
    23c4:	97 f9       	bld	r25, 7
    23c6:	08 95       	ret
    23c8:	e1 e0       	ldi	r30, 0x01	; 1
    23ca:	66 0f       	add	r22, r22
    23cc:	77 1f       	adc	r23, r23
    23ce:	88 1f       	adc	r24, r24
    23d0:	bb 1f       	adc	r27, r27
    23d2:	62 17       	cp	r22, r18
    23d4:	73 07       	cpc	r23, r19
    23d6:	84 07       	cpc	r24, r20
    23d8:	ba 07       	cpc	r27, r26
    23da:	20 f0       	brcs	.+8      	; 0x23e4 <__divsf3_pse+0xae>
    23dc:	62 1b       	sub	r22, r18
    23de:	73 0b       	sbc	r23, r19
    23e0:	84 0b       	sbc	r24, r20
    23e2:	ba 0b       	sbc	r27, r26
    23e4:	ee 1f       	adc	r30, r30
    23e6:	88 f7       	brcc	.-30     	; 0x23ca <__divsf3_pse+0x94>
    23e8:	e0 95       	com	r30
    23ea:	08 95       	ret

000023ec <__fixsfsi>:
    23ec:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__fixunssfsi>
    23f0:	68 94       	set
    23f2:	b1 11       	cpse	r27, r1
    23f4:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__fp_szero>
    23f8:	08 95       	ret

000023fa <__fixunssfsi>:
    23fa:	0e 94 4d 11 	call	0x229a	; 0x229a <__fp_splitA>
    23fe:	88 f0       	brcs	.+34     	; 0x2422 <__fixunssfsi+0x28>
    2400:	9f 57       	subi	r25, 0x7F	; 127
    2402:	98 f0       	brcs	.+38     	; 0x242a <__fixunssfsi+0x30>
    2404:	b9 2f       	mov	r27, r25
    2406:	99 27       	eor	r25, r25
    2408:	b7 51       	subi	r27, 0x17	; 23
    240a:	b0 f0       	brcs	.+44     	; 0x2438 <__fixunssfsi+0x3e>
__fixunssfsi():
    240c:	e1 f0       	breq	.+56     	; 0x2446 <__fixunssfsi+0x4c>
    240e:	66 0f       	add	r22, r22
    2410:	77 1f       	adc	r23, r23
    2412:	88 1f       	adc	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	1a f0       	brmi	.+6      	; 0x241e <__fixunssfsi+0x24>
    2418:	ba 95       	dec	r27
    241a:	c9 f7       	brne	.-14     	; 0x240e <__fixunssfsi+0x14>
    241c:	14 c0       	rjmp	.+40     	; 0x2446 <__fixunssfsi+0x4c>
    241e:	b1 30       	cpi	r27, 0x01	; 1
    2420:	91 f0       	breq	.+36     	; 0x2446 <__fixunssfsi+0x4c>
    2422:	0e 94 67 11 	call	0x22ce	; 0x22ce <__fp_zero>
    2426:	b1 e0       	ldi	r27, 0x01	; 1
    2428:	08 95       	ret
    242a:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__fp_zero>
    242e:	67 2f       	mov	r22, r23
    2430:	78 2f       	mov	r23, r24
    2432:	88 27       	eor	r24, r24
    2434:	b8 5f       	subi	r27, 0xF8	; 248
    2436:	39 f0       	breq	.+14     	; 0x2446 <__fixunssfsi+0x4c>
    2438:	b9 3f       	cpi	r27, 0xF9	; 249
    243a:	cc f3       	brlt	.-14     	; 0x242e <__fixunssfsi+0x34>
    243c:	86 95       	lsr	r24
    243e:	77 95       	ror	r23
    2440:	67 95       	ror	r22
    2442:	b3 95       	inc	r27
    2444:	d9 f7       	brne	.-10     	; 0x243c <__fixunssfsi+0x42>
    2446:	3e f4       	brtc	.+14     	; 0x2456 <__fixunssfsi+0x5c>
    2448:	90 95       	com	r25
    244a:	80 95       	com	r24
    244c:	70 95       	com	r23
    244e:	61 95       	neg	r22
    2450:	7f 4f       	sbci	r23, 0xFF	; 255
    2452:	8f 4f       	sbci	r24, 0xFF	; 255
    2454:	9f 4f       	sbci	r25, 0xFF	; 255
    2456:	08 95       	ret

00002458 <__gesf2>:
__gesf2():
    2458:	0e 94 8c 10 	call	0x2118	; 0x2118 <__fp_cmp>
    245c:	08 f4       	brcc	.+2      	; 0x2460 <__gesf2+0x8>
    245e:	8f ef       	ldi	r24, 0xFF	; 255
    2460:	08 95       	ret

00002462 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    2462:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    2464:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    2466:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    2468:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    246a:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    246c:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    246e:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    2470:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    2472:	09 94       	ijmp

00002474 <malloc>:
malloc():
    2474:	0f 93       	push	r16
    2476:	1f 93       	push	r17
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	82 30       	cpi	r24, 0x02	; 2
    247e:	91 05       	cpc	r25, r1
    2480:	10 f4       	brcc	.+4      	; 0x2486 <malloc+0x12>
    2482:	82 e0       	ldi	r24, 0x02	; 2
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <__flp>
    248a:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <__flp+0x1>
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	a0 e0       	ldi	r26, 0x00	; 0
    2496:	30 97       	sbiw	r30, 0x00	; 0
    2498:	99 f4       	brne	.+38     	; 0x24c0 <malloc+0x4c>
    249a:	21 15       	cp	r18, r1
    249c:	31 05       	cpc	r19, r1
    249e:	09 f4       	brne	.+2      	; 0x24a2 <malloc+0x2e>
    24a0:	4a c0       	rjmp	.+148    	; 0x2536 <malloc+0xc2>
    24a2:	28 1b       	sub	r18, r24
    24a4:	39 0b       	sbc	r19, r25
    24a6:	24 30       	cpi	r18, 0x04	; 4
    24a8:	31 05       	cpc	r19, r1
    24aa:	d8 f5       	brcc	.+118    	; 0x2522 <malloc+0xae>
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	9b 81       	ldd	r25, Y+3	; 0x03
    24b0:	61 15       	cp	r22, r1
    24b2:	71 05       	cpc	r23, r1
    24b4:	89 f1       	breq	.+98     	; 0x2518 <malloc+0xa4>
    24b6:	fb 01       	movw	r30, r22
    24b8:	93 83       	std	Z+3, r25	; 0x03
    24ba:	82 83       	std	Z+2, r24	; 0x02
    24bc:	fe 01       	movw	r30, r28
    24be:	11 c0       	rjmp	.+34     	; 0x24e2 <malloc+0x6e>
    24c0:	40 81       	ld	r20, Z
    24c2:	51 81       	ldd	r21, Z+1	; 0x01
    24c4:	02 81       	ldd	r16, Z+2	; 0x02
    24c6:	13 81       	ldd	r17, Z+3	; 0x03
    24c8:	48 17       	cp	r20, r24
    24ca:	59 07       	cpc	r21, r25
    24cc:	e0 f0       	brcs	.+56     	; 0x2506 <malloc+0x92>
    24ce:	48 17       	cp	r20, r24
    24d0:	59 07       	cpc	r21, r25
    24d2:	99 f4       	brne	.+38     	; 0x24fa <malloc+0x86>
    24d4:	10 97       	sbiw	r26, 0x00	; 0
    24d6:	61 f0       	breq	.+24     	; 0x24f0 <malloc+0x7c>
    24d8:	12 96       	adiw	r26, 0x02	; 2
    24da:	0c 93       	st	X, r16
    24dc:	12 97       	sbiw	r26, 0x02	; 2
    24de:	13 96       	adiw	r26, 0x03	; 3
    24e0:	1c 93       	st	X, r17
    24e2:	32 96       	adiw	r30, 0x02	; 2
    24e4:	cf 01       	movw	r24, r30
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	1f 91       	pop	r17
    24ec:	0f 91       	pop	r16
    24ee:	08 95       	ret
    24f0:	00 93 a1 02 	sts	0x02A1, r16	; 0x8002a1 <__flp>
    24f4:	10 93 a2 02 	sts	0x02A2, r17	; 0x8002a2 <__flp+0x1>
    24f8:	f4 cf       	rjmp	.-24     	; 0x24e2 <malloc+0x6e>
    24fa:	21 15       	cp	r18, r1
    24fc:	31 05       	cpc	r19, r1
    24fe:	51 f0       	breq	.+20     	; 0x2514 <malloc+0xa0>
    2500:	42 17       	cp	r20, r18
    2502:	53 07       	cpc	r21, r19
    2504:	38 f0       	brcs	.+14     	; 0x2514 <malloc+0xa0>
    2506:	a9 01       	movw	r20, r18
    2508:	db 01       	movw	r26, r22
    250a:	9a 01       	movw	r18, r20
    250c:	bd 01       	movw	r22, r26
    250e:	df 01       	movw	r26, r30
    2510:	f8 01       	movw	r30, r16
    2512:	c1 cf       	rjmp	.-126    	; 0x2496 <malloc+0x22>
    2514:	ef 01       	movw	r28, r30
    2516:	f9 cf       	rjmp	.-14     	; 0x250a <malloc+0x96>
    2518:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <__flp+0x1>
    251c:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <__flp>
    2520:	cd cf       	rjmp	.-102    	; 0x24bc <malloc+0x48>
    2522:	fe 01       	movw	r30, r28
    2524:	e2 0f       	add	r30, r18
    2526:	f3 1f       	adc	r31, r19
    2528:	81 93       	st	Z+, r24
    252a:	91 93       	st	Z+, r25
    252c:	22 50       	subi	r18, 0x02	; 2
    252e:	31 09       	sbc	r19, r1
    2530:	39 83       	std	Y+1, r19	; 0x01
    2532:	28 83       	st	Y, r18
    2534:	d7 cf       	rjmp	.-82     	; 0x24e4 <malloc+0x70>
    2536:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    253a:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    253e:	23 2b       	or	r18, r19
    2540:	41 f4       	brne	.+16     	; 0x2552 <malloc+0xde>
    2542:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2546:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    254a:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <__brkval+0x1>
    254e:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <__brkval>
    2552:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2556:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    255a:	21 15       	cp	r18, r1
    255c:	31 05       	cpc	r19, r1
    255e:	41 f4       	brne	.+16     	; 0x2570 <malloc+0xfc>
    2560:	2d b7       	in	r18, 0x3d	; 61
    2562:	3e b7       	in	r19, 0x3e	; 62
    2564:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2568:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    256c:	24 1b       	sub	r18, r20
    256e:	35 0b       	sbc	r19, r21
    2570:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <__brkval>
    2574:	f0 91 a0 02 	lds	r31, 0x02A0	; 0x8002a0 <__brkval+0x1>
    2578:	e2 17       	cp	r30, r18
    257a:	f3 07       	cpc	r31, r19
    257c:	a0 f4       	brcc	.+40     	; 0x25a6 <malloc+0x132>
    257e:	2e 1b       	sub	r18, r30
    2580:	3f 0b       	sbc	r19, r31
    2582:	28 17       	cp	r18, r24
    2584:	39 07       	cpc	r19, r25
    2586:	78 f0       	brcs	.+30     	; 0x25a6 <malloc+0x132>
    2588:	ac 01       	movw	r20, r24
    258a:	4e 5f       	subi	r20, 0xFE	; 254
    258c:	5f 4f       	sbci	r21, 0xFF	; 255
    258e:	24 17       	cp	r18, r20
    2590:	35 07       	cpc	r19, r21
    2592:	48 f0       	brcs	.+18     	; 0x25a6 <malloc+0x132>
    2594:	4e 0f       	add	r20, r30
    2596:	5f 1f       	adc	r21, r31
    2598:	50 93 a0 02 	sts	0x02A0, r21	; 0x8002a0 <__brkval+0x1>
    259c:	40 93 9f 02 	sts	0x029F, r20	; 0x80029f <__brkval>
    25a0:	81 93       	st	Z+, r24
    25a2:	91 93       	st	Z+, r25
    25a4:	9f cf       	rjmp	.-194    	; 0x24e4 <malloc+0x70>
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	e0 e0       	ldi	r30, 0x00	; 0
    25aa:	9c cf       	rjmp	.-200    	; 0x24e4 <malloc+0x70>

000025ac <free>:
free():
    25ac:	cf 93       	push	r28
    25ae:	df 93       	push	r29
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	e9 f0       	breq	.+58     	; 0x25ee <free+0x42>
    25b4:	fc 01       	movw	r30, r24
    25b6:	32 97       	sbiw	r30, 0x02	; 2
    25b8:	13 82       	std	Z+3, r1	; 0x03
    25ba:	12 82       	std	Z+2, r1	; 0x02
    25bc:	a0 91 a1 02 	lds	r26, 0x02A1	; 0x8002a1 <__flp>
    25c0:	b0 91 a2 02 	lds	r27, 0x02A2	; 0x8002a2 <__flp+0x1>
    25c4:	ed 01       	movw	r28, r26
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	10 97       	sbiw	r26, 0x00	; 0
    25cc:	a1 f4       	brne	.+40     	; 0x25f6 <free+0x4a>
    25ce:	20 81       	ld	r18, Z
    25d0:	31 81       	ldd	r19, Z+1	; 0x01
    25d2:	82 0f       	add	r24, r18
    25d4:	93 1f       	adc	r25, r19
    25d6:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    25da:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    25de:	28 17       	cp	r18, r24
    25e0:	39 07       	cpc	r19, r25
    25e2:	09 f0       	breq	.+2      	; 0x25e6 <free+0x3a>
    25e4:	61 c0       	rjmp	.+194    	; 0x26a8 <free+0xfc>
    25e6:	f0 93 a0 02 	sts	0x02A0, r31	; 0x8002a0 <__brkval+0x1>
    25ea:	e0 93 9f 02 	sts	0x029F, r30	; 0x80029f <__brkval>
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	08 95       	ret
    25f4:	ea 01       	movw	r28, r20
    25f6:	ce 17       	cp	r28, r30
    25f8:	df 07       	cpc	r29, r31
    25fa:	e8 f5       	brcc	.+122    	; 0x2676 <free+0xca>
    25fc:	4a 81       	ldd	r20, Y+2	; 0x02
    25fe:	5b 81       	ldd	r21, Y+3	; 0x03
    2600:	9e 01       	movw	r18, r28
    2602:	41 15       	cp	r20, r1
    2604:	51 05       	cpc	r21, r1
    2606:	b1 f7       	brne	.-20     	; 0x25f4 <free+0x48>
    2608:	e9 01       	movw	r28, r18
    260a:	fb 83       	std	Y+3, r31	; 0x03
    260c:	ea 83       	std	Y+2, r30	; 0x02
    260e:	49 91       	ld	r20, Y+
    2610:	59 91       	ld	r21, Y+
    2612:	c4 0f       	add	r28, r20
    2614:	d5 1f       	adc	r29, r21
    2616:	ec 17       	cp	r30, r28
    2618:	fd 07       	cpc	r31, r29
    261a:	61 f4       	brne	.+24     	; 0x2634 <free+0x88>
    261c:	80 81       	ld	r24, Z
    261e:	91 81       	ldd	r25, Z+1	; 0x01
    2620:	02 96       	adiw	r24, 0x02	; 2
    2622:	84 0f       	add	r24, r20
    2624:	95 1f       	adc	r25, r21
    2626:	e9 01       	movw	r28, r18
    2628:	99 83       	std	Y+1, r25	; 0x01
    262a:	88 83       	st	Y, r24
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	9b 83       	std	Y+3, r25	; 0x03
    2632:	8a 83       	std	Y+2, r24	; 0x02
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	e0 e0       	ldi	r30, 0x00	; 0
    2638:	12 96       	adiw	r26, 0x02	; 2
    263a:	8d 91       	ld	r24, X+
    263c:	9c 91       	ld	r25, X
    263e:	13 97       	sbiw	r26, 0x03	; 3
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	b9 f5       	brne	.+110    	; 0x26b2 <free+0x106>
    2644:	2d 91       	ld	r18, X+
    2646:	3c 91       	ld	r19, X
    2648:	11 97       	sbiw	r26, 0x01	; 1
    264a:	cd 01       	movw	r24, r26
    264c:	02 96       	adiw	r24, 0x02	; 2
    264e:	82 0f       	add	r24, r18
    2650:	93 1f       	adc	r25, r19
    2652:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    2656:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    265a:	28 17       	cp	r18, r24
    265c:	39 07       	cpc	r19, r25
    265e:	39 f6       	brne	.-114    	; 0x25ee <free+0x42>
    2660:	30 97       	sbiw	r30, 0x00	; 0
    2662:	51 f5       	brne	.+84     	; 0x26b8 <free+0x10c>
    2664:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <__flp+0x1>
    2668:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <__flp>
    266c:	b0 93 a0 02 	sts	0x02A0, r27	; 0x8002a0 <__brkval+0x1>
    2670:	a0 93 9f 02 	sts	0x029F, r26	; 0x80029f <__brkval>
    2674:	bc cf       	rjmp	.-136    	; 0x25ee <free+0x42>
    2676:	d3 83       	std	Z+3, r29	; 0x03
    2678:	c2 83       	std	Z+2, r28	; 0x02
    267a:	40 81       	ld	r20, Z
    267c:	51 81       	ldd	r21, Z+1	; 0x01
    267e:	84 0f       	add	r24, r20
    2680:	95 1f       	adc	r25, r21
    2682:	c8 17       	cp	r28, r24
    2684:	d9 07       	cpc	r29, r25
    2686:	61 f4       	brne	.+24     	; 0x26a0 <free+0xf4>
    2688:	4e 5f       	subi	r20, 0xFE	; 254
    268a:	5f 4f       	sbci	r21, 0xFF	; 255
    268c:	88 81       	ld	r24, Y
    268e:	99 81       	ldd	r25, Y+1	; 0x01
    2690:	48 0f       	add	r20, r24
    2692:	59 1f       	adc	r21, r25
    2694:	51 83       	std	Z+1, r21	; 0x01
    2696:	40 83       	st	Z, r20
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	9b 81       	ldd	r25, Y+3	; 0x03
    269c:	93 83       	std	Z+3, r25	; 0x03
    269e:	82 83       	std	Z+2, r24	; 0x02
    26a0:	21 15       	cp	r18, r1
    26a2:	31 05       	cpc	r19, r1
    26a4:	09 f0       	breq	.+2      	; 0x26a8 <free+0xfc>
    26a6:	b0 cf       	rjmp	.-160    	; 0x2608 <free+0x5c>
    26a8:	f0 93 a2 02 	sts	0x02A2, r31	; 0x8002a2 <__flp+0x1>
    26ac:	e0 93 a1 02 	sts	0x02A1, r30	; 0x8002a1 <__flp>
    26b0:	9e cf       	rjmp	.-196    	; 0x25ee <free+0x42>
    26b2:	fd 01       	movw	r30, r26
    26b4:	dc 01       	movw	r26, r24
    26b6:	c0 cf       	rjmp	.-128    	; 0x2638 <free+0x8c>
    26b8:	13 82       	std	Z+3, r1	; 0x03
    26ba:	12 82       	std	Z+2, r1	; 0x02
    26bc:	d7 cf       	rjmp	.-82     	; 0x266c <free+0xc0>

000026be <realloc>:
realloc():
    26be:	4f 92       	push	r4
    26c0:	5f 92       	push	r5
    26c2:	6f 92       	push	r6
    26c4:	7f 92       	push	r7
    26c6:	8f 92       	push	r8
    26c8:	9f 92       	push	r9
    26ca:	af 92       	push	r10
    26cc:	bf 92       	push	r11
    26ce:	cf 92       	push	r12
    26d0:	df 92       	push	r13
    26d2:	ef 92       	push	r14
    26d4:	ff 92       	push	r15
    26d6:	0f 93       	push	r16
    26d8:	1f 93       	push	r17
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	8c 01       	movw	r16, r24
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	99 f4       	brne	.+38     	; 0x270a <realloc+0x4c>
    26e4:	cb 01       	movw	r24, r22
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	1f 91       	pop	r17
    26ec:	0f 91       	pop	r16
    26ee:	ff 90       	pop	r15
    26f0:	ef 90       	pop	r14
    26f2:	df 90       	pop	r13
    26f4:	cf 90       	pop	r12
    26f6:	bf 90       	pop	r11
    26f8:	af 90       	pop	r10
    26fa:	9f 90       	pop	r9
    26fc:	8f 90       	pop	r8
    26fe:	7f 90       	pop	r7
    2700:	6f 90       	pop	r6
    2702:	5f 90       	pop	r5
    2704:	4f 90       	pop	r4
    2706:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <malloc>
    270a:	fc 01       	movw	r30, r24
    270c:	e6 0f       	add	r30, r22
    270e:	f7 1f       	adc	r31, r23
    2710:	9c 01       	movw	r18, r24
    2712:	22 50       	subi	r18, 0x02	; 2
    2714:	31 09       	sbc	r19, r1
    2716:	e2 17       	cp	r30, r18
    2718:	f3 07       	cpc	r31, r19
    271a:	08 f4       	brcc	.+2      	; 0x271e <realloc+0x60>
    271c:	ae c0       	rjmp	.+348    	; 0x287a <realloc+0x1bc>
    271e:	d9 01       	movw	r26, r18
    2720:	cd 91       	ld	r28, X+
    2722:	dc 91       	ld	r29, X
    2724:	11 97       	sbiw	r26, 0x01	; 1
    2726:	c6 17       	cp	r28, r22
    2728:	d7 07       	cpc	r29, r23
    272a:	20 f1       	brcs	.+72     	; 0x2774 <realloc+0xb6>
    272c:	c5 30       	cpi	r28, 0x05	; 5
    272e:	d1 05       	cpc	r29, r1
    2730:	78 f0       	brcs	.+30     	; 0x2750 <realloc+0x92>
    2732:	ce 01       	movw	r24, r28
    2734:	04 97       	sbiw	r24, 0x04	; 4
    2736:	86 17       	cp	r24, r22
    2738:	97 07       	cpc	r25, r23
    273a:	50 f0       	brcs	.+20     	; 0x2750 <realloc+0x92>
    273c:	c6 1b       	sub	r28, r22
    273e:	d7 0b       	sbc	r29, r23
    2740:	22 97       	sbiw	r28, 0x02	; 2
    2742:	c1 93       	st	Z+, r28
    2744:	d1 93       	st	Z+, r29
    2746:	6d 93       	st	X+, r22
    2748:	7c 93       	st	X, r23
    274a:	cf 01       	movw	r24, r30
    274c:	0e 94 d6 12 	call	0x25ac	; 0x25ac <free>
    2750:	c8 01       	movw	r24, r16
    2752:	df 91       	pop	r29
    2754:	cf 91       	pop	r28
    2756:	1f 91       	pop	r17
    2758:	0f 91       	pop	r16
    275a:	ff 90       	pop	r15
    275c:	ef 90       	pop	r14
    275e:	df 90       	pop	r13
    2760:	cf 90       	pop	r12
    2762:	bf 90       	pop	r11
    2764:	af 90       	pop	r10
    2766:	9f 90       	pop	r9
    2768:	8f 90       	pop	r8
    276a:	7f 90       	pop	r7
    276c:	6f 90       	pop	r6
    276e:	5f 90       	pop	r5
    2770:	4f 90       	pop	r4
    2772:	08 95       	ret
    2774:	5b 01       	movw	r10, r22
    2776:	ac 1a       	sub	r10, r28
    2778:	bd 0a       	sbc	r11, r29
    277a:	4c 01       	movw	r8, r24
    277c:	8c 0e       	add	r8, r28
    277e:	9d 1e       	adc	r9, r29
    2780:	a0 91 a1 02 	lds	r26, 0x02A1	; 0x8002a1 <__flp>
    2784:	b0 91 a2 02 	lds	r27, 0x02A2	; 0x8002a2 <__flp+0x1>
    2788:	51 2c       	mov	r5, r1
    278a:	41 2c       	mov	r4, r1
    278c:	f1 2c       	mov	r15, r1
    278e:	e1 2c       	mov	r14, r1
    2790:	10 97       	sbiw	r26, 0x00	; 0
    2792:	31 f5       	brne	.+76     	; 0x27e0 <realloc+0x122>
    2794:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <__brkval>
    2798:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <__brkval+0x1>
    279c:	88 15       	cp	r24, r8
    279e:	99 05       	cpc	r25, r9
    27a0:	09 f0       	breq	.+2      	; 0x27a4 <realloc+0xe6>
    27a2:	5c c0       	rjmp	.+184    	; 0x285c <realloc+0x19e>
    27a4:	46 16       	cp	r4, r22
    27a6:	57 06       	cpc	r5, r23
    27a8:	08 f0       	brcs	.+2      	; 0x27ac <realloc+0xee>
    27aa:	58 c0       	rjmp	.+176    	; 0x285c <realloc+0x19e>
    27ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    27b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	41 f4       	brne	.+16     	; 0x27c8 <realloc+0x10a>
    27b8:	8d b7       	in	r24, 0x3d	; 61
    27ba:	9e b7       	in	r25, 0x3e	; 62
    27bc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    27c0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    27c4:	84 1b       	sub	r24, r20
    27c6:	95 0b       	sbc	r25, r21
    27c8:	e8 17       	cp	r30, r24
    27ca:	f9 07       	cpc	r31, r25
    27cc:	08 f0       	brcs	.+2      	; 0x27d0 <realloc+0x112>
    27ce:	55 c0       	rjmp	.+170    	; 0x287a <realloc+0x1bc>
    27d0:	f0 93 a0 02 	sts	0x02A0, r31	; 0x8002a0 <__brkval+0x1>
    27d4:	e0 93 9f 02 	sts	0x029F, r30	; 0x80029f <__brkval>
    27d8:	f9 01       	movw	r30, r18
    27da:	71 83       	std	Z+1, r23	; 0x01
    27dc:	60 83       	st	Z, r22
    27de:	b8 cf       	rjmp	.-144    	; 0x2750 <realloc+0x92>
    27e0:	8d 91       	ld	r24, X+
    27e2:	9c 91       	ld	r25, X
    27e4:	11 97       	sbiw	r26, 0x01	; 1
    27e6:	12 96       	adiw	r26, 0x02	; 2
    27e8:	6c 90       	ld	r6, X
    27ea:	12 97       	sbiw	r26, 0x02	; 2
    27ec:	13 96       	adiw	r26, 0x03	; 3
    27ee:	7c 90       	ld	r7, X
    27f0:	13 97       	sbiw	r26, 0x03	; 3
    27f2:	a8 15       	cp	r26, r8
    27f4:	b9 05       	cpc	r27, r9
    27f6:	59 f5       	brne	.+86     	; 0x284e <realloc+0x190>
    27f8:	6c 01       	movw	r12, r24
    27fa:	42 e0       	ldi	r20, 0x02	; 2
    27fc:	c4 0e       	add	r12, r20
    27fe:	d1 1c       	adc	r13, r1
    2800:	ca 14       	cp	r12, r10
    2802:	db 04       	cpc	r13, r11
    2804:	20 f1       	brcs	.+72     	; 0x284e <realloc+0x190>
    2806:	ac 01       	movw	r20, r24
    2808:	4a 19       	sub	r20, r10
    280a:	5b 09       	sbc	r21, r11
    280c:	da 01       	movw	r26, r20
    280e:	12 96       	adiw	r26, 0x02	; 2
    2810:	15 97       	sbiw	r26, 0x05	; 5
    2812:	80 f0       	brcs	.+32     	; 0x2834 <realloc+0x176>
    2814:	62 82       	std	Z+2, r6	; 0x02
    2816:	73 82       	std	Z+3, r7	; 0x03
    2818:	51 83       	std	Z+1, r21	; 0x01
    281a:	40 83       	st	Z, r20
    281c:	d9 01       	movw	r26, r18
    281e:	6d 93       	st	X+, r22
    2820:	7c 93       	st	X, r23
    2822:	e1 14       	cp	r14, r1
    2824:	f1 04       	cpc	r15, r1
    2826:	71 f0       	breq	.+28     	; 0x2844 <realloc+0x186>
    2828:	d7 01       	movw	r26, r14
    282a:	13 96       	adiw	r26, 0x03	; 3
    282c:	fc 93       	st	X, r31
    282e:	ee 93       	st	-X, r30
    2830:	12 97       	sbiw	r26, 0x02	; 2
    2832:	8e cf       	rjmp	.-228    	; 0x2750 <realloc+0x92>
    2834:	22 96       	adiw	r28, 0x02	; 2
    2836:	8c 0f       	add	r24, r28
    2838:	9d 1f       	adc	r25, r29
    283a:	f9 01       	movw	r30, r18
    283c:	91 83       	std	Z+1, r25	; 0x01
    283e:	80 83       	st	Z, r24
    2840:	f3 01       	movw	r30, r6
    2842:	ef cf       	rjmp	.-34     	; 0x2822 <realloc+0x164>
    2844:	f0 93 a2 02 	sts	0x02A2, r31	; 0x8002a2 <__flp+0x1>
    2848:	e0 93 a1 02 	sts	0x02A1, r30	; 0x8002a1 <__flp>
    284c:	81 cf       	rjmp	.-254    	; 0x2750 <realloc+0x92>
    284e:	48 16       	cp	r4, r24
    2850:	59 06       	cpc	r5, r25
    2852:	08 f4       	brcc	.+2      	; 0x2856 <realloc+0x198>
    2854:	2c 01       	movw	r4, r24
    2856:	7d 01       	movw	r14, r26
    2858:	d3 01       	movw	r26, r6
    285a:	9a cf       	rjmp	.-204    	; 0x2790 <realloc+0xd2>
    285c:	cb 01       	movw	r24, r22
    285e:	0e 94 3a 12 	call	0x2474	; 0x2474 <malloc>
    2862:	7c 01       	movw	r14, r24
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	49 f0       	breq	.+18     	; 0x287a <realloc+0x1bc>
    2868:	ae 01       	movw	r20, r28
    286a:	b8 01       	movw	r22, r16
    286c:	0e 94 40 14 	call	0x2880	; 0x2880 <memcpy>
    2870:	c8 01       	movw	r24, r16
    2872:	0e 94 d6 12 	call	0x25ac	; 0x25ac <free>
    2876:	87 01       	movw	r16, r14
    2878:	6b cf       	rjmp	.-298    	; 0x2750 <realloc+0x92>
    287a:	10 e0       	ldi	r17, 0x00	; 0
    287c:	00 e0       	ldi	r16, 0x00	; 0
    287e:	68 cf       	rjmp	.-304    	; 0x2750 <realloc+0x92>

00002880 <memcpy>:
memcpy():
    2880:	fb 01       	movw	r30, r22
    2882:	dc 01       	movw	r26, r24
    2884:	02 c0       	rjmp	.+4      	; 0x288a <memcpy+0xa>
    2886:	01 90       	ld	r0, Z+
    2888:	0d 92       	st	X+, r0
    288a:	41 50       	subi	r20, 0x01	; 1
    288c:	50 40       	sbci	r21, 0x00	; 0
    288e:	d8 f7       	brcc	.-10     	; 0x2886 <memcpy+0x6>
    2890:	08 95       	ret

00002892 <strcpy>:
strcpy():
    2892:	fb 01       	movw	r30, r22
    2894:	dc 01       	movw	r26, r24
    2896:	01 90       	ld	r0, Z+
    2898:	0d 92       	st	X+, r0
    289a:	00 20       	and	r0, r0
    289c:	e1 f7       	brne	.-8      	; 0x2896 <strcpy+0x4>
    289e:	08 95       	ret

000028a0 <strncpy>:
strncpy():
    28a0:	fb 01       	movw	r30, r22
    28a2:	dc 01       	movw	r26, r24
    28a4:	41 50       	subi	r20, 0x01	; 1
    28a6:	50 40       	sbci	r21, 0x00	; 0
    28a8:	48 f0       	brcs	.+18     	; 0x28bc <strncpy+0x1c>
    28aa:	01 90       	ld	r0, Z+
    28ac:	0d 92       	st	X+, r0
    28ae:	00 20       	and	r0, r0
    28b0:	c9 f7       	brne	.-14     	; 0x28a4 <strncpy+0x4>
    28b2:	01 c0       	rjmp	.+2      	; 0x28b6 <strncpy+0x16>
    28b4:	1d 92       	st	X+, r1
    28b6:	41 50       	subi	r20, 0x01	; 1
    28b8:	50 40       	sbci	r21, 0x00	; 0
    28ba:	e0 f7       	brcc	.-8      	; 0x28b4 <strncpy+0x14>
    28bc:	08 95       	ret

000028be <sprintf>:
sprintf():
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	2e 97       	sbiw	r28, 0x0e	; 14
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	0d 89       	ldd	r16, Y+21	; 0x15
    28d8:	1e 89       	ldd	r17, Y+22	; 0x16
    28da:	86 e0       	ldi	r24, 0x06	; 6
    28dc:	8c 83       	std	Y+4, r24	; 0x04
    28de:	1a 83       	std	Y+2, r17	; 0x02
    28e0:	09 83       	std	Y+1, r16	; 0x01
    28e2:	8f ef       	ldi	r24, 0xFF	; 255
    28e4:	9f e7       	ldi	r25, 0x7F	; 127
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	ae 01       	movw	r20, r28
    28ec:	47 5e       	subi	r20, 0xE7	; 231
    28ee:	5f 4f       	sbci	r21, 0xFF	; 255
    28f0:	6f 89       	ldd	r22, Y+23	; 0x17
    28f2:	78 8d       	ldd	r23, Y+24	; 0x18
    28f4:	ce 01       	movw	r24, r28
    28f6:	01 96       	adiw	r24, 0x01	; 1
    28f8:	0e 94 8f 14 	call	0x291e	; 0x291e <vfprintf>
    28fc:	2f 81       	ldd	r18, Y+7	; 0x07
    28fe:	38 85       	ldd	r19, Y+8	; 0x08
    2900:	02 0f       	add	r16, r18
    2902:	13 1f       	adc	r17, r19
    2904:	f8 01       	movw	r30, r16
    2906:	10 82       	st	Z, r1
    2908:	2e 96       	adiw	r28, 0x0e	; 14
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	df 91       	pop	r29
    2916:	cf 91       	pop	r28
    2918:	1f 91       	pop	r17
    291a:	0f 91       	pop	r16
    291c:	08 95       	ret

0000291e <vfprintf>:
vfprintf():
    291e:	2f 92       	push	r2
    2920:	3f 92       	push	r3
    2922:	4f 92       	push	r4
    2924:	5f 92       	push	r5
    2926:	6f 92       	push	r6
    2928:	7f 92       	push	r7
    292a:	8f 92       	push	r8
    292c:	9f 92       	push	r9
    292e:	af 92       	push	r10
    2930:	bf 92       	push	r11
    2932:	cf 92       	push	r12
    2934:	df 92       	push	r13
    2936:	ef 92       	push	r14
    2938:	ff 92       	push	r15
    293a:	0f 93       	push	r16
    293c:	1f 93       	push	r17
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	2b 97       	sbiw	r28, 0x0b	; 11
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	7c 01       	movw	r14, r24
    2954:	3b 01       	movw	r6, r22
    2956:	8a 01       	movw	r16, r20
    2958:	fc 01       	movw	r30, r24
    295a:	17 82       	std	Z+7, r1	; 0x07
    295c:	16 82       	std	Z+6, r1	; 0x06
    295e:	83 81       	ldd	r24, Z+3	; 0x03
    2960:	81 ff       	sbrs	r24, 1
    2962:	dd c1       	rjmp	.+954    	; 0x2d1e <vfprintf+0x400>
    2964:	ce 01       	movw	r24, r28
    2966:	01 96       	adiw	r24, 0x01	; 1
    2968:	5c 01       	movw	r10, r24
    296a:	f7 01       	movw	r30, r14
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	f3 01       	movw	r30, r6
    2970:	93 fd       	sbrc	r25, 3
    2972:	85 91       	lpm	r24, Z+
    2974:	93 ff       	sbrs	r25, 3
    2976:	81 91       	ld	r24, Z+
    2978:	3f 01       	movw	r6, r30
    297a:	88 23       	and	r24, r24
    297c:	09 f4       	brne	.+2      	; 0x2980 <vfprintf+0x62>
    297e:	53 c1       	rjmp	.+678    	; 0x2c26 <vfprintf+0x308>
    2980:	85 32       	cpi	r24, 0x25	; 37
    2982:	39 f4       	brne	.+14     	; 0x2992 <vfprintf+0x74>
    2984:	93 fd       	sbrc	r25, 3
    2986:	85 91       	lpm	r24, Z+
    2988:	93 ff       	sbrs	r25, 3
    298a:	81 91       	ld	r24, Z+
    298c:	3f 01       	movw	r6, r30
    298e:	85 32       	cpi	r24, 0x25	; 37
    2990:	29 f4       	brne	.+10     	; 0x299c <vfprintf+0x7e>
    2992:	b7 01       	movw	r22, r14
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <fputc>
    299a:	e7 cf       	rjmp	.-50     	; 0x296a <vfprintf+0x4c>
    299c:	91 2c       	mov	r9, r1
    299e:	21 2c       	mov	r2, r1
    29a0:	31 2c       	mov	r3, r1
    29a2:	ff e1       	ldi	r31, 0x1F	; 31
    29a4:	f3 15       	cp	r31, r3
    29a6:	38 f0       	brcs	.+14     	; 0x29b6 <vfprintf+0x98>
    29a8:	8b 32       	cpi	r24, 0x2B	; 43
    29aa:	11 f1       	breq	.+68     	; 0x29f0 <vfprintf+0xd2>
    29ac:	90 f4       	brcc	.+36     	; 0x29d2 <vfprintf+0xb4>
    29ae:	80 32       	cpi	r24, 0x20	; 32
    29b0:	09 f1       	breq	.+66     	; 0x29f4 <vfprintf+0xd6>
    29b2:	83 32       	cpi	r24, 0x23	; 35
    29b4:	29 f1       	breq	.+74     	; 0x2a00 <vfprintf+0xe2>
    29b6:	37 fc       	sbrc	r3, 7
    29b8:	3c c0       	rjmp	.+120    	; 0x2a32 <vfprintf+0x114>
    29ba:	20 ed       	ldi	r18, 0xD0	; 208
    29bc:	28 0f       	add	r18, r24
    29be:	2a 30       	cpi	r18, 0x0A	; 10
    29c0:	50 f5       	brcc	.+84     	; 0x2a16 <vfprintf+0xf8>
    29c2:	36 fe       	sbrs	r3, 6
    29c4:	20 c0       	rjmp	.+64     	; 0x2a06 <vfprintf+0xe8>
    29c6:	8a e0       	ldi	r24, 0x0A	; 10
    29c8:	98 9e       	mul	r9, r24
    29ca:	20 0d       	add	r18, r0
    29cc:	11 24       	eor	r1, r1
    29ce:	92 2e       	mov	r9, r18
    29d0:	06 c0       	rjmp	.+12     	; 0x29de <vfprintf+0xc0>
    29d2:	8d 32       	cpi	r24, 0x2D	; 45
    29d4:	91 f0       	breq	.+36     	; 0x29fa <vfprintf+0xdc>
    29d6:	80 33       	cpi	r24, 0x30	; 48
    29d8:	71 f7       	brne	.-36     	; 0x29b6 <vfprintf+0x98>
    29da:	68 94       	set
    29dc:	30 f8       	bld	r3, 0
    29de:	f3 01       	movw	r30, r6
    29e0:	93 fd       	sbrc	r25, 3
    29e2:	85 91       	lpm	r24, Z+
    29e4:	93 ff       	sbrs	r25, 3
    29e6:	81 91       	ld	r24, Z+
    29e8:	3f 01       	movw	r6, r30
    29ea:	81 11       	cpse	r24, r1
    29ec:	da cf       	rjmp	.-76     	; 0x29a2 <vfprintf+0x84>
    29ee:	21 c0       	rjmp	.+66     	; 0x2a32 <vfprintf+0x114>
    29f0:	68 94       	set
    29f2:	31 f8       	bld	r3, 1
    29f4:	68 94       	set
    29f6:	32 f8       	bld	r3, 2
    29f8:	f2 cf       	rjmp	.-28     	; 0x29de <vfprintf+0xc0>
    29fa:	68 94       	set
    29fc:	33 f8       	bld	r3, 3
    29fe:	ef cf       	rjmp	.-34     	; 0x29de <vfprintf+0xc0>
    2a00:	68 94       	set
    2a02:	34 f8       	bld	r3, 4
    2a04:	ec cf       	rjmp	.-40     	; 0x29de <vfprintf+0xc0>
    2a06:	ea e0       	ldi	r30, 0x0A	; 10
    2a08:	2e 9e       	mul	r2, r30
    2a0a:	20 0d       	add	r18, r0
    2a0c:	11 24       	eor	r1, r1
    2a0e:	22 2e       	mov	r2, r18
    2a10:	68 94       	set
    2a12:	35 f8       	bld	r3, 5
    2a14:	e4 cf       	rjmp	.-56     	; 0x29de <vfprintf+0xc0>
    2a16:	8e 32       	cpi	r24, 0x2E	; 46
    2a18:	29 f4       	brne	.+10     	; 0x2a24 <vfprintf+0x106>
    2a1a:	36 fc       	sbrc	r3, 6
    2a1c:	04 c1       	rjmp	.+520    	; 0x2c26 <vfprintf+0x308>
    2a1e:	68 94       	set
    2a20:	36 f8       	bld	r3, 6
    2a22:	dd cf       	rjmp	.-70     	; 0x29de <vfprintf+0xc0>
    2a24:	8c 36       	cpi	r24, 0x6C	; 108
    2a26:	19 f4       	brne	.+6      	; 0x2a2e <vfprintf+0x110>
    2a28:	68 94       	set
    2a2a:	37 f8       	bld	r3, 7
    2a2c:	d8 cf       	rjmp	.-80     	; 0x29de <vfprintf+0xc0>
    2a2e:	88 36       	cpi	r24, 0x68	; 104
    2a30:	b1 f2       	breq	.-84     	; 0x29de <vfprintf+0xc0>
    2a32:	98 2f       	mov	r25, r24
    2a34:	9f 7d       	andi	r25, 0xDF	; 223
    2a36:	95 54       	subi	r25, 0x45	; 69
    2a38:	93 30       	cpi	r25, 0x03	; 3
    2a3a:	e0 f0       	brcs	.+56     	; 0x2a74 <vfprintf+0x156>
    2a3c:	83 36       	cpi	r24, 0x63	; 99
    2a3e:	a1 f1       	breq	.+104    	; 0x2aa8 <vfprintf+0x18a>
    2a40:	83 37       	cpi	r24, 0x73	; 115
    2a42:	c1 f1       	breq	.+112    	; 0x2ab4 <vfprintf+0x196>
    2a44:	83 35       	cpi	r24, 0x53	; 83
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <vfprintf+0x12c>
    2a48:	63 c0       	rjmp	.+198    	; 0x2b10 <vfprintf+0x1f2>
    2a4a:	28 01       	movw	r4, r16
    2a4c:	f2 e0       	ldi	r31, 0x02	; 2
    2a4e:	4f 0e       	add	r4, r31
    2a50:	51 1c       	adc	r5, r1
    2a52:	f8 01       	movw	r30, r16
    2a54:	c0 80       	ld	r12, Z
    2a56:	d1 80       	ldd	r13, Z+1	; 0x01
    2a58:	69 2d       	mov	r22, r9
    2a5a:	70 e0       	ldi	r23, 0x00	; 0
    2a5c:	36 fc       	sbrc	r3, 6
    2a5e:	02 c0       	rjmp	.+4      	; 0x2a64 <vfprintf+0x146>
    2a60:	6f ef       	ldi	r22, 0xFF	; 255
    2a62:	7f ef       	ldi	r23, 0xFF	; 255
    2a64:	c6 01       	movw	r24, r12
    2a66:	0e 94 92 16 	call	0x2d24	; 0x2d24 <strnlen_P>
    2a6a:	4c 01       	movw	r8, r24
    2a6c:	68 94       	set
    2a6e:	37 f8       	bld	r3, 7
    2a70:	82 01       	movw	r16, r4
    2a72:	0a c0       	rjmp	.+20     	; 0x2a88 <vfprintf+0x16a>
    2a74:	0c 5f       	subi	r16, 0xFC	; 252
    2a76:	1f 4f       	sbci	r17, 0xFF	; 255
    2a78:	ff e3       	ldi	r31, 0x3F	; 63
    2a7a:	f9 83       	std	Y+1, r31	; 0x01
    2a7c:	88 24       	eor	r8, r8
    2a7e:	83 94       	inc	r8
    2a80:	91 2c       	mov	r9, r1
    2a82:	65 01       	movw	r12, r10
    2a84:	e8 94       	clt
    2a86:	37 f8       	bld	r3, 7
    2a88:	33 fe       	sbrs	r3, 3
    2a8a:	2d c0       	rjmp	.+90     	; 0x2ae6 <vfprintf+0x1c8>
    2a8c:	52 2c       	mov	r5, r2
    2a8e:	81 14       	cp	r8, r1
    2a90:	91 04       	cpc	r9, r1
    2a92:	71 f5       	brne	.+92     	; 0x2af0 <vfprintf+0x1d2>
    2a94:	55 20       	and	r5, r5
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <vfprintf+0x17c>
    2a98:	68 cf       	rjmp	.-304    	; 0x296a <vfprintf+0x4c>
    2a9a:	b7 01       	movw	r22, r14
    2a9c:	80 e2       	ldi	r24, 0x20	; 32
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <fputc>
    2aa4:	5a 94       	dec	r5
    2aa6:	f6 cf       	rjmp	.-20     	; 0x2a94 <vfprintf+0x176>
    2aa8:	f8 01       	movw	r30, r16
    2aaa:	80 81       	ld	r24, Z
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	0e 5f       	subi	r16, 0xFE	; 254
    2ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab2:	e4 cf       	rjmp	.-56     	; 0x2a7c <vfprintf+0x15e>
    2ab4:	28 01       	movw	r4, r16
    2ab6:	f2 e0       	ldi	r31, 0x02	; 2
    2ab8:	4f 0e       	add	r4, r31
    2aba:	51 1c       	adc	r5, r1
    2abc:	f8 01       	movw	r30, r16
    2abe:	c0 80       	ld	r12, Z
    2ac0:	d1 80       	ldd	r13, Z+1	; 0x01
    2ac2:	69 2d       	mov	r22, r9
    2ac4:	70 e0       	ldi	r23, 0x00	; 0
    2ac6:	36 fc       	sbrc	r3, 6
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <vfprintf+0x1b0>
    2aca:	6f ef       	ldi	r22, 0xFF	; 255
    2acc:	7f ef       	ldi	r23, 0xFF	; 255
    2ace:	c6 01       	movw	r24, r12
    2ad0:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <strnlen>
    2ad4:	4c 01       	movw	r8, r24
    2ad6:	82 01       	movw	r16, r4
    2ad8:	d5 cf       	rjmp	.-86     	; 0x2a84 <vfprintf+0x166>
    2ada:	b7 01       	movw	r22, r14
    2adc:	80 e2       	ldi	r24, 0x20	; 32
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <fputc>
    2ae4:	2a 94       	dec	r2
    2ae6:	28 14       	cp	r2, r8
    2ae8:	19 04       	cpc	r1, r9
    2aea:	09 f0       	breq	.+2      	; 0x2aee <vfprintf+0x1d0>
    2aec:	b0 f7       	brcc	.-20     	; 0x2ada <vfprintf+0x1bc>
    2aee:	ce cf       	rjmp	.-100    	; 0x2a8c <vfprintf+0x16e>
    2af0:	f6 01       	movw	r30, r12
    2af2:	37 fc       	sbrc	r3, 7
    2af4:	85 91       	lpm	r24, Z+
    2af6:	37 fe       	sbrs	r3, 7
    2af8:	81 91       	ld	r24, Z+
    2afa:	6f 01       	movw	r12, r30
    2afc:	b7 01       	movw	r22, r14
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <fputc>
    2b04:	51 10       	cpse	r5, r1
    2b06:	5a 94       	dec	r5
    2b08:	f1 e0       	ldi	r31, 0x01	; 1
    2b0a:	8f 1a       	sub	r8, r31
    2b0c:	91 08       	sbc	r9, r1
    2b0e:	bf cf       	rjmp	.-130    	; 0x2a8e <vfprintf+0x170>
    2b10:	84 36       	cpi	r24, 0x64	; 100
    2b12:	19 f0       	breq	.+6      	; 0x2b1a <vfprintf+0x1fc>
    2b14:	89 36       	cpi	r24, 0x69	; 105
    2b16:	09 f0       	breq	.+2      	; 0x2b1a <vfprintf+0x1fc>
    2b18:	77 c0       	rjmp	.+238    	; 0x2c08 <vfprintf+0x2ea>
    2b1a:	f8 01       	movw	r30, r16
    2b1c:	37 fe       	sbrs	r3, 7
    2b1e:	6b c0       	rjmp	.+214    	; 0x2bf6 <vfprintf+0x2d8>
    2b20:	60 81       	ld	r22, Z
    2b22:	71 81       	ldd	r23, Z+1	; 0x01
    2b24:	82 81       	ldd	r24, Z+2	; 0x02
    2b26:	93 81       	ldd	r25, Z+3	; 0x03
    2b28:	0c 5f       	subi	r16, 0xFC	; 252
    2b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2c:	f3 2d       	mov	r31, r3
    2b2e:	ff 76       	andi	r31, 0x6F	; 111
    2b30:	3f 2e       	mov	r3, r31
    2b32:	97 ff       	sbrs	r25, 7
    2b34:	09 c0       	rjmp	.+18     	; 0x2b48 <vfprintf+0x22a>
    2b36:	90 95       	com	r25
    2b38:	80 95       	com	r24
    2b3a:	70 95       	com	r23
    2b3c:	61 95       	neg	r22
    2b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b40:	8f 4f       	sbci	r24, 0xFF	; 255
    2b42:	9f 4f       	sbci	r25, 0xFF	; 255
    2b44:	68 94       	set
    2b46:	37 f8       	bld	r3, 7
    2b48:	2a e0       	ldi	r18, 0x0A	; 10
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	a5 01       	movw	r20, r10
    2b4e:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__ultoa_invert>
    2b52:	c8 2e       	mov	r12, r24
    2b54:	ca 18       	sub	r12, r10
    2b56:	8c 2c       	mov	r8, r12
    2b58:	43 2c       	mov	r4, r3
    2b5a:	36 fe       	sbrs	r3, 6
    2b5c:	0c c0       	rjmp	.+24     	; 0x2b76 <vfprintf+0x258>
    2b5e:	e8 94       	clt
    2b60:	40 f8       	bld	r4, 0
    2b62:	c9 14       	cp	r12, r9
    2b64:	40 f4       	brcc	.+16     	; 0x2b76 <vfprintf+0x258>
    2b66:	34 fe       	sbrs	r3, 4
    2b68:	05 c0       	rjmp	.+10     	; 0x2b74 <vfprintf+0x256>
    2b6a:	32 fc       	sbrc	r3, 2
    2b6c:	03 c0       	rjmp	.+6      	; 0x2b74 <vfprintf+0x256>
    2b6e:	f3 2d       	mov	r31, r3
    2b70:	fe 7e       	andi	r31, 0xEE	; 238
    2b72:	4f 2e       	mov	r4, r31
    2b74:	89 2c       	mov	r8, r9
    2b76:	44 fe       	sbrs	r4, 4
    2b78:	aa c0       	rjmp	.+340    	; 0x2cce <vfprintf+0x3b0>
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	ec 0d       	add	r30, r12
    2b7e:	f1 1d       	adc	r31, r1
    2b80:	80 81       	ld	r24, Z
    2b82:	80 33       	cpi	r24, 0x30	; 48
    2b84:	09 f0       	breq	.+2      	; 0x2b88 <vfprintf+0x26a>
    2b86:	9c c0       	rjmp	.+312    	; 0x2cc0 <vfprintf+0x3a2>
    2b88:	24 2d       	mov	r18, r4
    2b8a:	29 7e       	andi	r18, 0xE9	; 233
    2b8c:	42 2e       	mov	r4, r18
    2b8e:	84 2d       	mov	r24, r4
    2b90:	88 70       	andi	r24, 0x08	; 8
    2b92:	58 2e       	mov	r5, r24
    2b94:	43 fc       	sbrc	r4, 3
    2b96:	aa c0       	rjmp	.+340    	; 0x2cec <vfprintf+0x3ce>
    2b98:	40 fe       	sbrs	r4, 0
    2b9a:	a4 c0       	rjmp	.+328    	; 0x2ce4 <vfprintf+0x3c6>
    2b9c:	9c 2c       	mov	r9, r12
    2b9e:	82 14       	cp	r8, r2
    2ba0:	18 f4       	brcc	.+6      	; 0x2ba8 <vfprintf+0x28a>
    2ba2:	2c 0c       	add	r2, r12
    2ba4:	92 2c       	mov	r9, r2
    2ba6:	98 18       	sub	r9, r8
    2ba8:	44 fe       	sbrs	r4, 4
    2baa:	a6 c0       	rjmp	.+332    	; 0x2cf8 <vfprintf+0x3da>
    2bac:	b7 01       	movw	r22, r14
    2bae:	80 e3       	ldi	r24, 0x30	; 48
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <fputc>
    2bb6:	42 fe       	sbrs	r4, 2
    2bb8:	09 c0       	rjmp	.+18     	; 0x2bcc <vfprintf+0x2ae>
    2bba:	88 e7       	ldi	r24, 0x78	; 120
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	41 fe       	sbrs	r4, 1
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <vfprintf+0x2a8>
    2bc2:	88 e5       	ldi	r24, 0x58	; 88
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	b7 01       	movw	r22, r14
    2bc8:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <fputc>
    2bcc:	c9 14       	cp	r12, r9
    2bce:	08 f4       	brcc	.+2      	; 0x2bd2 <vfprintf+0x2b4>
    2bd0:	9f c0       	rjmp	.+318    	; 0x2d10 <vfprintf+0x3f2>
    2bd2:	ca 94       	dec	r12
    2bd4:	d1 2c       	mov	r13, r1
    2bd6:	9f ef       	ldi	r25, 0xFF	; 255
    2bd8:	c9 1a       	sub	r12, r25
    2bda:	d9 0a       	sbc	r13, r25
    2bdc:	ca 0c       	add	r12, r10
    2bde:	db 1c       	adc	r13, r11
    2be0:	f6 01       	movw	r30, r12
    2be2:	82 91       	ld	r24, -Z
    2be4:	6f 01       	movw	r12, r30
    2be6:	b7 01       	movw	r22, r14
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <fputc>
    2bee:	ac 14       	cp	r10, r12
    2bf0:	bd 04       	cpc	r11, r13
    2bf2:	b1 f7       	brne	.-20     	; 0x2be0 <vfprintf+0x2c2>
    2bf4:	4f cf       	rjmp	.-354    	; 0x2a94 <vfprintf+0x176>
    2bf6:	60 81       	ld	r22, Z
    2bf8:	71 81       	ldd	r23, Z+1	; 0x01
    2bfa:	07 2e       	mov	r0, r23
    2bfc:	00 0c       	add	r0, r0
    2bfe:	88 0b       	sbc	r24, r24
    2c00:	99 0b       	sbc	r25, r25
    2c02:	0e 5f       	subi	r16, 0xFE	; 254
    2c04:	1f 4f       	sbci	r17, 0xFF	; 255
    2c06:	92 cf       	rjmp	.-220    	; 0x2b2c <vfprintf+0x20e>
    2c08:	d3 2c       	mov	r13, r3
    2c0a:	e8 94       	clt
    2c0c:	d4 f8       	bld	r13, 4
    2c0e:	2a e0       	ldi	r18, 0x0A	; 10
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	85 37       	cpi	r24, 0x75	; 117
    2c14:	e1 f1       	breq	.+120    	; 0x2c8e <vfprintf+0x370>
    2c16:	23 2d       	mov	r18, r3
    2c18:	29 7f       	andi	r18, 0xF9	; 249
    2c1a:	d2 2e       	mov	r13, r18
    2c1c:	8f 36       	cpi	r24, 0x6F	; 111
    2c1e:	a9 f1       	breq	.+106    	; 0x2c8a <vfprintf+0x36c>
    2c20:	f0 f4       	brcc	.+60     	; 0x2c5e <vfprintf+0x340>
    2c22:	88 35       	cpi	r24, 0x58	; 88
    2c24:	51 f1       	breq	.+84     	; 0x2c7a <vfprintf+0x35c>
    2c26:	f7 01       	movw	r30, r14
    2c28:	86 81       	ldd	r24, Z+6	; 0x06
    2c2a:	97 81       	ldd	r25, Z+7	; 0x07
    2c2c:	2b 96       	adiw	r28, 0x0b	; 11
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	df 91       	pop	r29
    2c3a:	cf 91       	pop	r28
    2c3c:	1f 91       	pop	r17
    2c3e:	0f 91       	pop	r16
    2c40:	ff 90       	pop	r15
    2c42:	ef 90       	pop	r14
    2c44:	df 90       	pop	r13
    2c46:	cf 90       	pop	r12
    2c48:	bf 90       	pop	r11
    2c4a:	af 90       	pop	r10
    2c4c:	9f 90       	pop	r9
    2c4e:	8f 90       	pop	r8
    2c50:	7f 90       	pop	r7
    2c52:	6f 90       	pop	r6
    2c54:	5f 90       	pop	r5
    2c56:	4f 90       	pop	r4
    2c58:	3f 90       	pop	r3
    2c5a:	2f 90       	pop	r2
    2c5c:	08 95       	ret
    2c5e:	80 37       	cpi	r24, 0x70	; 112
    2c60:	49 f0       	breq	.+18     	; 0x2c74 <vfprintf+0x356>
    2c62:	88 37       	cpi	r24, 0x78	; 120
    2c64:	01 f7       	brne	.-64     	; 0x2c26 <vfprintf+0x308>
    2c66:	d4 fe       	sbrs	r13, 4
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <vfprintf+0x350>
    2c6a:	68 94       	set
    2c6c:	d2 f8       	bld	r13, 2
    2c6e:	20 e1       	ldi	r18, 0x10	; 16
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	0d c0       	rjmp	.+26     	; 0x2c8e <vfprintf+0x370>
    2c74:	68 94       	set
    2c76:	d4 f8       	bld	r13, 4
    2c78:	f6 cf       	rjmp	.-20     	; 0x2c66 <vfprintf+0x348>
    2c7a:	34 fe       	sbrs	r3, 4
    2c7c:	03 c0       	rjmp	.+6      	; 0x2c84 <vfprintf+0x366>
    2c7e:	82 2f       	mov	r24, r18
    2c80:	86 60       	ori	r24, 0x06	; 6
    2c82:	d8 2e       	mov	r13, r24
    2c84:	20 e1       	ldi	r18, 0x10	; 16
    2c86:	32 e0       	ldi	r19, 0x02	; 2
    2c88:	02 c0       	rjmp	.+4      	; 0x2c8e <vfprintf+0x370>
    2c8a:	28 e0       	ldi	r18, 0x08	; 8
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	f8 01       	movw	r30, r16
    2c90:	d7 fe       	sbrs	r13, 7
    2c92:	0f c0       	rjmp	.+30     	; 0x2cb2 <vfprintf+0x394>
    2c94:	60 81       	ld	r22, Z
    2c96:	71 81       	ldd	r23, Z+1	; 0x01
    2c98:	82 81       	ldd	r24, Z+2	; 0x02
    2c9a:	93 81       	ldd	r25, Z+3	; 0x03
    2c9c:	0c 5f       	subi	r16, 0xFC	; 252
    2c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca0:	a5 01       	movw	r20, r10
    2ca2:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__ultoa_invert>
    2ca6:	c8 2e       	mov	r12, r24
    2ca8:	ca 18       	sub	r12, r10
    2caa:	3d 2c       	mov	r3, r13
    2cac:	e8 94       	clt
    2cae:	37 f8       	bld	r3, 7
    2cb0:	52 cf       	rjmp	.-348    	; 0x2b56 <vfprintf+0x238>
    2cb2:	60 81       	ld	r22, Z
    2cb4:	71 81       	ldd	r23, Z+1	; 0x01
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	0e 5f       	subi	r16, 0xFE	; 254
    2cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cbe:	f0 cf       	rjmp	.-32     	; 0x2ca0 <vfprintf+0x382>
    2cc0:	42 fc       	sbrc	r4, 2
    2cc2:	02 c0       	rjmp	.+4      	; 0x2cc8 <vfprintf+0x3aa>
    2cc4:	83 94       	inc	r8
    2cc6:	63 cf       	rjmp	.-314    	; 0x2b8e <vfprintf+0x270>
    2cc8:	83 94       	inc	r8
    2cca:	83 94       	inc	r8
    2ccc:	60 cf       	rjmp	.-320    	; 0x2b8e <vfprintf+0x270>
    2cce:	84 2d       	mov	r24, r4
    2cd0:	86 78       	andi	r24, 0x86	; 134
    2cd2:	09 f4       	brne	.+2      	; 0x2cd6 <vfprintf+0x3b8>
    2cd4:	5c cf       	rjmp	.-328    	; 0x2b8e <vfprintf+0x270>
    2cd6:	f6 cf       	rjmp	.-20     	; 0x2cc4 <vfprintf+0x3a6>
    2cd8:	b7 01       	movw	r22, r14
    2cda:	80 e2       	ldi	r24, 0x20	; 32
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <fputc>
    2ce2:	83 94       	inc	r8
    2ce4:	82 14       	cp	r8, r2
    2ce6:	c0 f3       	brcs	.-16     	; 0x2cd8 <vfprintf+0x3ba>
    2ce8:	51 2c       	mov	r5, r1
    2cea:	5e cf       	rjmp	.-324    	; 0x2ba8 <vfprintf+0x28a>
    2cec:	52 2c       	mov	r5, r2
    2cee:	58 18       	sub	r5, r8
    2cf0:	82 14       	cp	r8, r2
    2cf2:	08 f4       	brcc	.+2      	; 0x2cf6 <vfprintf+0x3d8>
    2cf4:	59 cf       	rjmp	.-334    	; 0x2ba8 <vfprintf+0x28a>
    2cf6:	f8 cf       	rjmp	.-16     	; 0x2ce8 <vfprintf+0x3ca>
    2cf8:	84 2d       	mov	r24, r4
    2cfa:	86 78       	andi	r24, 0x86	; 134
    2cfc:	09 f4       	brne	.+2      	; 0x2d00 <vfprintf+0x3e2>
    2cfe:	66 cf       	rjmp	.-308    	; 0x2bcc <vfprintf+0x2ae>
    2d00:	8b e2       	ldi	r24, 0x2B	; 43
    2d02:	41 fe       	sbrs	r4, 1
    2d04:	80 e2       	ldi	r24, 0x20	; 32
    2d06:	47 fc       	sbrc	r4, 7
    2d08:	8d e2       	ldi	r24, 0x2D	; 45
    2d0a:	b7 01       	movw	r22, r14
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	5c cf       	rjmp	.-328    	; 0x2bc8 <vfprintf+0x2aa>
    2d10:	b7 01       	movw	r22, r14
    2d12:	80 e3       	ldi	r24, 0x30	; 48
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <fputc>
    2d1a:	9a 94       	dec	r9
    2d1c:	57 cf       	rjmp	.-338    	; 0x2bcc <vfprintf+0x2ae>
    2d1e:	8f ef       	ldi	r24, 0xFF	; 255
    2d20:	9f ef       	ldi	r25, 0xFF	; 255
    2d22:	84 cf       	rjmp	.-248    	; 0x2c2c <vfprintf+0x30e>

00002d24 <strnlen_P>:
strnlen_P():
    2d24:	fc 01       	movw	r30, r24
    2d26:	05 90       	lpm	r0, Z+
    2d28:	61 50       	subi	r22, 0x01	; 1
    2d2a:	70 40       	sbci	r23, 0x00	; 0
    2d2c:	01 10       	cpse	r0, r1
    2d2e:	d8 f7       	brcc	.-10     	; 0x2d26 <strnlen_P+0x2>
    2d30:	80 95       	com	r24
    2d32:	90 95       	com	r25
    2d34:	8e 0f       	add	r24, r30
    2d36:	9f 1f       	adc	r25, r31
    2d38:	08 95       	ret

00002d3a <strnlen>:
strnlen():
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	61 50       	subi	r22, 0x01	; 1
    2d3e:	70 40       	sbci	r23, 0x00	; 0
    2d40:	01 90       	ld	r0, Z+
    2d42:	01 10       	cpse	r0, r1
    2d44:	d8 f7       	brcc	.-10     	; 0x2d3c <strnlen+0x2>
    2d46:	80 95       	com	r24
    2d48:	90 95       	com	r25
    2d4a:	8e 0f       	add	r24, r30
    2d4c:	9f 1f       	adc	r25, r31
    2d4e:	08 95       	ret

00002d50 <fputc>:
fputc():
    2d50:	0f 93       	push	r16
    2d52:	1f 93       	push	r17
    2d54:	cf 93       	push	r28
    2d56:	df 93       	push	r29
    2d58:	18 2f       	mov	r17, r24
    2d5a:	09 2f       	mov	r16, r25
    2d5c:	eb 01       	movw	r28, r22
    2d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d60:	81 fd       	sbrc	r24, 1
    2d62:	09 c0       	rjmp	.+18     	; 0x2d76 <fputc+0x26>
    2d64:	1f ef       	ldi	r17, 0xFF	; 255
    2d66:	0f ef       	ldi	r16, 0xFF	; 255
    2d68:	81 2f       	mov	r24, r17
    2d6a:	90 2f       	mov	r25, r16
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	1f 91       	pop	r17
    2d72:	0f 91       	pop	r16
    2d74:	08 95       	ret
    2d76:	82 ff       	sbrs	r24, 2
    2d78:	14 c0       	rjmp	.+40     	; 0x2da2 <fputc+0x52>
    2d7a:	2e 81       	ldd	r18, Y+6	; 0x06
    2d7c:	3f 81       	ldd	r19, Y+7	; 0x07
    2d7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d80:	9d 81       	ldd	r25, Y+5	; 0x05
    2d82:	28 17       	cp	r18, r24
    2d84:	39 07       	cpc	r19, r25
    2d86:	3c f4       	brge	.+14     	; 0x2d96 <fputc+0x46>
    2d88:	e8 81       	ld	r30, Y
    2d8a:	f9 81       	ldd	r31, Y+1	; 0x01
    2d8c:	cf 01       	movw	r24, r30
    2d8e:	01 96       	adiw	r24, 0x01	; 1
    2d90:	99 83       	std	Y+1, r25	; 0x01
    2d92:	88 83       	st	Y, r24
    2d94:	10 83       	st	Z, r17
    2d96:	8e 81       	ldd	r24, Y+6	; 0x06
    2d98:	9f 81       	ldd	r25, Y+7	; 0x07
    2d9a:	01 96       	adiw	r24, 0x01	; 1
    2d9c:	9f 83       	std	Y+7, r25	; 0x07
    2d9e:	8e 83       	std	Y+6, r24	; 0x06
    2da0:	e3 cf       	rjmp	.-58     	; 0x2d68 <fputc+0x18>
    2da2:	e8 85       	ldd	r30, Y+8	; 0x08
    2da4:	f9 85       	ldd	r31, Y+9	; 0x09
    2da6:	81 2f       	mov	r24, r17
    2da8:	09 95       	icall
    2daa:	89 2b       	or	r24, r25
    2dac:	a1 f3       	breq	.-24     	; 0x2d96 <fputc+0x46>
    2dae:	da cf       	rjmp	.-76     	; 0x2d64 <fputc+0x14>

00002db0 <__ultoa_invert>:
__ultoa_invert():
    2db0:	fa 01       	movw	r30, r20
    2db2:	aa 27       	eor	r26, r26
    2db4:	28 30       	cpi	r18, 0x08	; 8
    2db6:	51 f1       	breq	.+84     	; 0x2e0c <__ultoa_invert+0x5c>
    2db8:	20 31       	cpi	r18, 0x10	; 16
    2dba:	81 f1       	breq	.+96     	; 0x2e1c <__ultoa_invert+0x6c>
    2dbc:	e8 94       	clt
    2dbe:	6f 93       	push	r22
    2dc0:	6e 7f       	andi	r22, 0xFE	; 254
    2dc2:	6e 5f       	subi	r22, 0xFE	; 254
    2dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc6:	8f 4f       	sbci	r24, 0xFF	; 255
    2dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dca:	af 4f       	sbci	r26, 0xFF	; 255
    2dcc:	b1 e0       	ldi	r27, 0x01	; 1
    2dce:	3e d0       	rcall	.+124    	; 0x2e4c <__ultoa_invert+0x9c>
    2dd0:	b4 e0       	ldi	r27, 0x04	; 4
    2dd2:	3c d0       	rcall	.+120    	; 0x2e4c <__ultoa_invert+0x9c>
    2dd4:	67 0f       	add	r22, r23
    2dd6:	78 1f       	adc	r23, r24
    2dd8:	89 1f       	adc	r24, r25
    2dda:	9a 1f       	adc	r25, r26
    2ddc:	a1 1d       	adc	r26, r1
    2dde:	68 0f       	add	r22, r24
    2de0:	79 1f       	adc	r23, r25
    2de2:	8a 1f       	adc	r24, r26
    2de4:	91 1d       	adc	r25, r1
    2de6:	a1 1d       	adc	r26, r1
    2de8:	6a 0f       	add	r22, r26
    2dea:	71 1d       	adc	r23, r1
    2dec:	81 1d       	adc	r24, r1
    2dee:	91 1d       	adc	r25, r1
    2df0:	a1 1d       	adc	r26, r1
    2df2:	20 d0       	rcall	.+64     	; 0x2e34 <__ultoa_invert+0x84>
    2df4:	09 f4       	brne	.+2      	; 0x2df8 <__ultoa_invert+0x48>
    2df6:	68 94       	set
    2df8:	3f 91       	pop	r19
    2dfa:	2a e0       	ldi	r18, 0x0A	; 10
    2dfc:	26 9f       	mul	r18, r22
    2dfe:	11 24       	eor	r1, r1
    2e00:	30 19       	sub	r19, r0
    2e02:	30 5d       	subi	r19, 0xD0	; 208
    2e04:	31 93       	st	Z+, r19
    2e06:	de f6       	brtc	.-74     	; 0x2dbe <__ultoa_invert+0xe>
    2e08:	cf 01       	movw	r24, r30
    2e0a:	08 95       	ret
    2e0c:	46 2f       	mov	r20, r22
    2e0e:	47 70       	andi	r20, 0x07	; 7
    2e10:	40 5d       	subi	r20, 0xD0	; 208
    2e12:	41 93       	st	Z+, r20
    2e14:	b3 e0       	ldi	r27, 0x03	; 3
    2e16:	0f d0       	rcall	.+30     	; 0x2e36 <__ultoa_invert+0x86>
    2e18:	c9 f7       	brne	.-14     	; 0x2e0c <__ultoa_invert+0x5c>
    2e1a:	f6 cf       	rjmp	.-20     	; 0x2e08 <__ultoa_invert+0x58>
    2e1c:	46 2f       	mov	r20, r22
    2e1e:	4f 70       	andi	r20, 0x0F	; 15
    2e20:	40 5d       	subi	r20, 0xD0	; 208
    2e22:	4a 33       	cpi	r20, 0x3A	; 58
    2e24:	18 f0       	brcs	.+6      	; 0x2e2c <__ultoa_invert+0x7c>
    2e26:	49 5d       	subi	r20, 0xD9	; 217
    2e28:	31 fd       	sbrc	r19, 1
    2e2a:	40 52       	subi	r20, 0x20	; 32
    2e2c:	41 93       	st	Z+, r20
    2e2e:	02 d0       	rcall	.+4      	; 0x2e34 <__ultoa_invert+0x84>
    2e30:	a9 f7       	brne	.-22     	; 0x2e1c <__ultoa_invert+0x6c>
    2e32:	ea cf       	rjmp	.-44     	; 0x2e08 <__ultoa_invert+0x58>
    2e34:	b4 e0       	ldi	r27, 0x04	; 4
    2e36:	a6 95       	lsr	r26
    2e38:	97 95       	ror	r25
    2e3a:	87 95       	ror	r24
    2e3c:	77 95       	ror	r23
    2e3e:	67 95       	ror	r22
    2e40:	ba 95       	dec	r27
    2e42:	c9 f7       	brne	.-14     	; 0x2e36 <__ultoa_invert+0x86>
    2e44:	00 97       	sbiw	r24, 0x00	; 0
    2e46:	61 05       	cpc	r22, r1
    2e48:	71 05       	cpc	r23, r1
    2e4a:	08 95       	ret
    2e4c:	9b 01       	movw	r18, r22
    2e4e:	ac 01       	movw	r20, r24
    2e50:	0a 2e       	mov	r0, r26
    2e52:	06 94       	lsr	r0
    2e54:	57 95       	ror	r21
    2e56:	47 95       	ror	r20
    2e58:	37 95       	ror	r19
    2e5a:	27 95       	ror	r18
    2e5c:	ba 95       	dec	r27
    2e5e:	c9 f7       	brne	.-14     	; 0x2e52 <__ultoa_invert+0xa2>
    2e60:	62 0f       	add	r22, r18
    2e62:	73 1f       	adc	r23, r19
    2e64:	84 1f       	adc	r24, r20
    2e66:	95 1f       	adc	r25, r21
    2e68:	a0 1d       	adc	r26, r0
    2e6a:	08 95       	ret

00002e6c <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2e6c:	f8 94       	cli

00002e6e <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2e6e:	ff cf       	rjmp	.-2      	; 0x2e6e <__stop_program>
